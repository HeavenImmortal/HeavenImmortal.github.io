<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeavenImmortal</title>
  <icon>https://www.gravatar.com/avatar/eb84459ed1cdac3e183e460d1072e447</icon>
  <subtitle>一个码农</subtitle>
  <link href="https://heavenimtoral.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://heavenimtoral.gitee.io/"/>
  <updated>2022-07-27T02:36:55.902Z</updated>
  <id>https://heavenimtoral.gitee.io/</id>
  
  <author>
    <name>HeavenImmortal</name>
    <email>1909312602@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PgSql获取json格式字符串中某个属性的值</title>
    <link href="https://heavenimtoral.gitee.io/2022/07/27/PgSql%E8%8E%B7%E5%8F%96json%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC/"/>
    <id>https://heavenimtoral.gitee.io/2022/07/27/PgSql%E8%8E%B7%E5%8F%96json%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC/</id>
    <published>2022-07-27T02:28:39.864Z</published>
    <updated>2022-07-27T02:36:55.902Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到个问题，因为别人的代码存在bug，导致新建实体的某个字段属性没有保存，生产环境上出现了一大堆错误数据，后面别人把bug改了，但是让我来处理错误数据，幸运的是这个字段的值被保存下来了，不幸的是这个字段的值被保存在json字符串里，由于是生产环境，我不能通过代码处理，所以我需要通过sql来获取json字符串中的某个字段的值，百度了一下，找到了解决方案（也是第一次知道数据库可以直接获取 json字符串中某个字段的值）</p><ul><li><p>json字符串数据结构</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#x27;project&#x27;:&#123;</span><br><span class="line">.......</span><br><span class="line">&#x27;newValues&#x27;:&#123;</span><br><span class="line">.......</span><br><span class="line">&#x27;specId&#x27;:&#x27;xxxxxxxxx&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据库处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- detailoperate::json pgsql的语法 将字符串转换成json  ， detailoperate::json-&gt;&gt;&#x27;project&#x27; 从json中获取key为 project 的值</span></span><br><span class="line"><span class="keyword">select</span> detailoperate::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;project&#x27;</span> <span class="keyword">as</span> <span class="keyword">project</span> <span class="keyword">from</span> tp_app_adddod <span class="keyword">where</span>  gwxid  = <span class="string">&#x27;706f9a5013b84f8496f3f474cd66a7c3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.project::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;newValues&#x27;</span> <span class="keyword">as</span> newValues <span class="keyword">from</span> (<span class="keyword">select</span> detailoperate::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;project&#x27;</span> <span class="keyword">as</span> <span class="keyword">project</span> <span class="keyword">from</span> tp_app_adddod <span class="keyword">where</span>  gwxid  = <span class="string">&#x27;706f9a5013b84f8496f3f474cd66a7c3&#x27;</span>) a </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>  b.newValues::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;specId&#x27;</span> <span class="keyword">from</span> (<span class="keyword">select</span> a.project::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;newValues&#x27;</span> <span class="keyword">as</span> newValues <span class="keyword">from</span> (<span class="keyword">select</span> detailoperate::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;project&#x27;</span> <span class="keyword">as</span> <span class="keyword">project</span> <span class="keyword">from</span> tp_app_adddod <span class="keyword">where</span>  gwxid  = <span class="string">&#x27;706f9a5013b84f8496f3f474cd66a7c3&#x27;</span>) a </span><br></pre></td></tr></table></figure></li><li><p>拓展</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--mysql 只有一级</span></span><br><span class="line"><span class="keyword">select</span> claim_payment-&gt;<span class="string">&#x27;$.bank_name&#x27;</span> <span class="keyword">from</span> claim</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近遇到个问题，因为别人的代码存在bug，导致新建实体的某个字段属性没有保存，生产环境上出现了一大堆错误数据，后面别人把bug改了，但是让我来处理错误数据，幸运的是这个字段的值被保存下来了，不幸的是这个字段的值被保存在json字符串里，由于是生产环境，我不能通过代码处理，所</summary>
      
    
    
    
    <category term="Sql" scheme="https://heavenimtoral.gitee.io/categories/Sql/"/>
    
    
    <category term="Sql" scheme="https://heavenimtoral.gitee.io/tags/Sql/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-批量处理</title>
    <link href="https://heavenimtoral.gitee.io/2022/03/25/Mybatis-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
    <id>https://heavenimtoral.gitee.io/2022/03/25/Mybatis-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/</id>
    <published>2022-03-25T03:17:21.963Z</published>
    <updated>2022-03-25T03:20:06.305Z</updated>
    
    <content type="html"><![CDATA[<p>一般在开发中，我们项目与数据库的交互是通过网络请求的，每次网络请求都会耗时，在与数据库交互次数较小的时候，耗时感觉不明显，但是如果是大数据巨量的数据交互，在分次执行，耗时就会变得特别大，这个时候我们就需要进行<strong>批量执行</strong>。批量执行指的是<strong>一数据库连接，执行多条sql语句</strong>。如果后面的功能依赖于前面查询出来的数据，这个时候批量执行不太适应，所以在进行大批量插入的时候，使用批量执行，就很有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//SqlSessionTemplate 这个是mybatis提供的 sqlSession模板</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取sqlSession  ExecutorType.BATCH 表示执行的方式，BATCH是批量，此外还有REUSE、SIMPLE</span></span><br><span class="line">SqlSession sqlSession = sqlSessionTemplate.getSqlSessionFactory().openSession(ExecutorType.BATCH);</span><br><span class="line"><span class="comment">//获取mapper 只有这个mapper的方法才会进行批量处理</span></span><br><span class="line">ProcGisviewScQualityDetailMapper mapper =sqlSession.getMapper(ProcGisviewScQualityDetailMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        mapper.insert();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">2500</span>)&#123;</span><br><span class="line"><span class="comment">//批量 提交插入语句</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">            <span class="comment">//清空缓存</span></span><br><span class="line">sqlSession.clearCache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//回滚</span></span><br><span class="line">     sqlSession.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般在开发中，我们项目与数据库的交互是通过网络请求的，每次网络请求都会耗时，在与数据库交互次数较小的时候，耗时感觉不明显，但是如果是大数据巨量的数据交互，在分次执行，耗时就会变得特别大，这个时候我们就需要进行&lt;strong&gt;批量执行&lt;/strong&gt;。批量执行指的是&lt;str</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="mybatis" scheme="https://heavenimtoral.gitee.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://heavenimtoral.gitee.io/2021/10/22/jvm/"/>
    <id>https://heavenimtoral.gitee.io/2021/10/22/jvm/</id>
    <published>2021-10-22T09:42:25.080Z</published>
    <updated>2021-10-22T09:43:52.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="内存与垃圾回收"><a href="#内存与垃圾回收" class="headerlink" title="内存与垃圾回收"></a>内存与垃圾回收</h1><h1 id="字节码与类的加载"><a href="#字节码与类的加载" class="headerlink" title="字节码与类的加载"></a>字节码与类的加载</h1><h1 id="性能监控与调优"><a href="#性能监控与调优" class="headerlink" title="性能监控与调优"></a>性能监控与调优</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h1 id=&quot;内存与垃圾回收&quot;&gt;&lt;a href=&quot;#内存与垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;内存与垃圾回收&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="https://heavenimtoral.gitee.io/2021/09/30/typeScript/"/>
    <id>https://heavenimtoral.gitee.io/2021/09/30/typeScript/</id>
    <published>2021-09-30T06:28:35.678Z</published>
    <updated>2021-10-22T08:03:45.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>javaScript概述</p></blockquote><p>JavaScript（缩写：JS）是一种运行在客户端（比如：浏览器）中的编程语言。</p><p>当应用于浏览器时，为网站提供动态交互特性，让网页“动”起来。</p><p>JavaScript 的运行环境：1 浏览器 2 Node.js。<br>Node.js 让 JavaScript 摆脱了浏览器的束缚，可以实现服务端/桌面端编程等。<br>其他： 微信小程序、微信小游戏 等等。<br>总结：JavaScript 既能运行在 浏览器 中，也可以运行在 Node.js 中，前后端通吃，无所不能。</p><blockquote><p>TypeScript概述</p></blockquote><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; TypeScript 代码：有明确的类型，即 : number （数值类型） </span><br><span class="line">let age: number &#x3D; 18</span><br><span class="line">&#x2F;&#x2F; JavaScript 代码：无明确的类型 </span><br><span class="line">let age &#x3D; 18</span><br></pre></td></tr></table></figure><blockquote><p>TypeScript 相比 JS 的优势</p></blockquote><p>悲伤的故事：男程序员都是好男人，因为他们总会在电脑前问：我到底又错在哪了？<br>JS 的类型系统存在“先天缺陷” ，绝大部分错误都是类型错误（ Uncaught TypeError ）。</p><ul><li>优势一：类型化思维方式，使得开发更加严谨，提前发现错误，减少改 Bug 时间。</li><li>优势二：类型系统提高了代码可读性，并使维护和重构代码更加容易。</li><li>优势三：补充了接口、枚举等开发大型应用时 JS 缺失的功能。</li><li>Vue 3 源码使用 TS 重写，释放出重要信号：TS 是趋势。</li><li>Angular 默认支持 TS；React 与 TS 完美配合，是很多大型项目的首选。</li></ul><blockquote><p>TypeScript相较于JavaScript增加了什么</p></blockquote><ul><li>类型（js种的类型是针对值的，ts中针对变量，ts还增加了一些类型）</li><li>支持es的新特性</li><li>添加es不具备的新特性（如装饰器、抽象类等）</li><li>丰富的配置选项</li><li>ts要转化成js运行，ts可以转化成不同版本的js,提高了兼容性</li><li>强大的开发工具</li></ul><h1 id="TypeScript开环境搭建"><a href="#TypeScript开环境搭建" class="headerlink" title="TypeScript开环境搭建"></a>TypeScript开环境搭建</h1><ol><li><p>下载Node.js</p><ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li><p>安装Node.js</p></li><li><p>使用npm全局安装typescript</p><ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li><p>创建一个ts文件</p></li><li><p>使用tsc对ts文件进行编译</p><ul><li><p>进入命令行</p></li><li><p>进入ts文件所在目录</p></li><li><p>执行命令：tsc xxx.ts</p></li></ul></li></ol><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><blockquote><p>javaScript中变量声明</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&#x27;10&#x27;</span>;</span><br></pre></td></tr></table></figure><p>js中a的类型没有确定，a可以是数字也可以是字符串；</p><blockquote><p>TypeScript中变量声明</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:<span class="built_in">number</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&#x27;10&#x27;</span>;<span class="comment">//此行代码会报错，因为a指定类型是number，但是这种写法符合js写法，可以编译通过（可以设置成编译不通过）。</span></span><br></pre></td></tr></table></figure><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明及其类型定义</span></span><br><span class="line"><span class="keyword">let</span> a:<span class="built_in">number</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b:<span class="built_in">string</span>;</span><br><span class="line">b=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量但不定义其类型</span></span><br><span class="line"><span class="keyword">let</span> c;</span><br><span class="line">c = <span class="literal">true</span>;</span><br><span class="line">c = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明赋值同时进行</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="literal">true</span>;</span><br><span class="line">d = <span class="number">123</span>;<span class="comment">//此行报错，d在声明赋值同时进行时d的类型就已经确定为boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数 形参 返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">sum</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span> </span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量声明 e只能等于10</span></span><br><span class="line"><span class="keyword">let</span> e : <span class="number">10</span>;</span><br><span class="line">e=<span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//联合类型 f只能为联合类型中的一种</span></span><br><span class="line"><span class="keyword">let</span> f:<span class="string">&#x27;male&#x27;</span>|<span class="string">&#x27;female&#x27;</span></span><br><span class="line">f=<span class="string">&#x27;male&#x27;</span></span><br><span class="line">f=<span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g:<span class="built_in">number</span> |<span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//any 任意类型 一个变量设置成any 相当于对这个变量关闭了类型检测 相当于js中变量,any变量赋值给其他变量会导致其类型也变成any</span></span><br><span class="line"><span class="keyword">let</span> h :<span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量不定义类型会导致ts自动将这个变量设置为any类型</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line">i = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">i = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown 位置类型 基本上是和any一致 但是将这个变量赋值给其他变量 会进行类型检测</span></span><br><span class="line"><span class="keyword">let</span> j:unknown;</span><br><span class="line">j = <span class="number">10</span>;</span><br><span class="line">j = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">j = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型断言 b的类型是string j是unknow 本来不能进行赋值的 但是通过 as string类型赋值可以进行赋值</span></span><br><span class="line">b = j <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void 以函数为例 表示函数没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//never 以函数为例 m没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//object 一般不使用，因为在js中&#123;&#125;就已经表示是一个对象了，而且使用&#123;&#125;可以对其内部的属性进行定义</span></span><br><span class="line"><span class="comment">//k的类型被定义为一个对象 该对象中 name为必须属性且类型为string age为可选属性且类型为number</span></span><br><span class="line"><span class="keyword">let</span> k : &#123;<span class="attr">name</span>:<span class="built_in">string</span>,age?:<span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line">k=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>&#125;; <span class="comment">//正常，因为age为可选</span></span><br><span class="line">k=&#123;<span class="attr">age</span>:<span class="number">18</span>&#125;; <span class="comment">//报错 没有name属性</span></span><br><span class="line">k=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;<span class="comment">//正常</span></span><br><span class="line">k=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;;<span class="comment">//错误 k的类型对象中没有sex属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[propName:string]:表示任意属性 m的类型要求必须要有name，其他不作任何要求</span></span><br><span class="line"><span class="keyword">let</span> m : &#123;<span class="attr">name</span>:<span class="built_in">string</span>,[propName:<span class="built_in">string</span>]:<span class="built_in">any</span>&#125;</span><br><span class="line">m=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数结构类型声明 该函数要求输入两个number参数返回number参数</span></span><br><span class="line"><span class="keyword">let</span> n :<span class="function">(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//array string[]字符串数组 number[]数字数组 </span></span><br><span class="line"><span class="keyword">let</span>  o: <span class="built_in">string</span>[];</span><br><span class="line"><span class="comment">//数值数组</span></span><br><span class="line"><span class="keyword">let</span> p:<span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//元组（固定长度的数组）</span></span><br><span class="line"><span class="keyword">let</span> q:[<span class="built_in">string</span>,<span class="built_in">string</span>]<span class="comment">//长度为2，且元素类型都为string的元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="built_in">enum</span> Gender&#123;</span><br><span class="line">  Male = <span class="number">0</span>,</span><br><span class="line">  Female = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, <code>hi</code></td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table><ul><li><p>number</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> big: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li><li><p>boolean</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>string</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li><li><p>字面量</p><p> 也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>any</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li><p>unknown</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: unknown = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>void</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li><li><p>never</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>object（没啥用）</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>array</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p>tuple</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure></li><li><p>enum</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green = <span class="number">2</span>,</span><br><span class="line">  Blue = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li><li><p>类型断言</p><p> 有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li><pre><code class="typescript">let someValue: unknown = &quot;this is a string&quot;;let strLength: number = (someValue as string).length;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第二种</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;typescript</span><br><span class="line">    let someValue: unknown &#x3D; &quot;this is a string&quot;;</span><br><span class="line">    let strLength: number &#x3D; (&lt;string&gt;someValue).length;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><ul><li><p>自动编译文件</p><ul><li><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p></li><li><p>示例：</p><ul><li><pre><code class="powershell">tsc xxx.ts -w<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 自动编译整个项目</span><br><span class="line"></span><br><span class="line">  - 如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</span><br><span class="line"></span><br><span class="line">  - 但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</span><br><span class="line"></span><br><span class="line">  - tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</span><br><span class="line"></span><br><span class="line">  - 配置选项：</span><br><span class="line"></span><br><span class="line">    - include</span><br><span class="line"></span><br><span class="line">      - 定义希望被编译文件所在的目录</span><br><span class="line"></span><br><span class="line">      - 默认值：[&quot;\*\*&#x2F;\*&quot;]</span><br><span class="line"></span><br><span class="line">      - 示例：</span><br><span class="line"></span><br><span class="line">        - &#96;&#96;&#96;json</span><br><span class="line">          &quot;include&quot;:[&quot;src&#x2F;**&#x2F;*&quot;, &quot;tests&#x2F;**&#x2F;*&quot;]</span><br></pre></td></tr></table></figure>  - 上述示例中，所有src目录和tests目录下的文件都会被编译</code></pre></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><ul><li><pre><code class="json">&quot;exclude&quot;: [&quot;./src/hello/**/*&quot;]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 上述示例中，src下hello目录下的文件都不会被编译</span><br><span class="line"></span><br><span class="line">- extends</span><br><span class="line"></span><br><span class="line">  - 定义被继承的配置文件</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;json</span><br><span class="line">      &quot;extends&quot;: &quot;.&#x2F;configs&#x2F;base&quot;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p></li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><ul><li><pre><code class="json">&quot;files&quot;: [    &quot;core.ts&quot;,    &quot;sys.ts&quot;,    &quot;types.ts&quot;,    &quot;scanner.ts&quot;,    &quot;parser.ts&quot;,    &quot;utilities.ts&quot;,    &quot;binder.ts&quot;,    &quot;checker.ts&quot;,    &quot;tsc.ts&quot;  ]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 列表中的文件都会被TS编译器所编译</span><br><span class="line"></span><br><span class="line">- compilerOptions</span><br><span class="line"></span><br><span class="line">   - 编译选项是配置文件中非常重要也比较复杂的配置选项</span><br><span class="line"></span><br><span class="line">   - 在compilerOptions中包含多个子选项，用来完成对编译的配置</span><br><span class="line"></span><br><span class="line">     - 项目选项</span><br><span class="line"></span><br><span class="line">       - target</span><br><span class="line"></span><br><span class="line">         - 设置ts代码编译的目标版本</span><br><span class="line"></span><br><span class="line">         - 可选值：</span><br><span class="line"></span><br><span class="line">           - ES3（默认）、ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</span><br><span class="line"></span><br><span class="line">         - 示例：</span><br><span class="line"></span><br><span class="line">           - &#96;&#96;&#96;json</span><br><span class="line">             &quot;compilerOptions&quot;: &#123;</span><br><span class="line">                 &quot;target&quot;: &quot;ES6&quot;</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure>      - 如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码  - lib    - 指定代码运行时所包含的库（宿主环境）    - 可选值：      - ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......    - 示例：      - ```json        &quot;compilerOptions&quot;: &#123;            &quot;target&quot;: &quot;ES6&quot;,            &quot;lib&quot;: [&quot;ES6&quot;, &quot;DOM&quot;],            &quot;outDir&quot;: &quot;dist&quot;,            &quot;outFile&quot;: &quot;dist/aa.js&quot;        &#125;        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- module</span><br><span class="line"></span><br><span class="line">  - 设置编译后代码使用的模块化系统</span><br><span class="line"></span><br><span class="line">  - 可选值：</span><br><span class="line"></span><br><span class="line">    - CommonJS、UMD、AMD、System、ES2020、ESNext、None</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;typescript</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;module&quot;: &quot;CommonJS&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - outDir    - 编译后文件的所在目录    - 默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置    - 示例：      - ```json        &quot;compilerOptions&quot;: &#123;            &quot;outDir&quot;: &quot;dist&quot;        &#125;        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 设置后编译后的js文件将会生成到dist目录</span><br><span class="line"></span><br><span class="line">- outFile</span><br><span class="line"></span><br><span class="line">  - 将所有的文件编译为一个js文件</span><br><span class="line"></span><br><span class="line">  - 默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;json</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;outFile&quot;: &quot;dist&#x2F;app.js&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - rootDir    - 指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录    - 示例：      - ```json        &quot;compilerOptions&quot;: &#123;            &quot;rootDir&quot;: &quot;./src&quot;        &#125;        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- allowJs</span><br><span class="line"></span><br><span class="line">  - 是否对js文件编译</span><br><span class="line"></span><br><span class="line">- checkJs</span><br><span class="line"></span><br><span class="line">  - 是否对js文件进行检查</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;json</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;allowJs&quot;: true,</span><br><span class="line">          &quot;checkJs&quot;: true</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - removeComments    - 是否删除注释    - 默认值：false  - noEmit    - 不对代码进行编译    - 默认值：false  - sourceMap    - 是否生成sourceMap    - 默认值：false</code></pre></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>      - 严格检查        - strict          - 启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查        - alwaysStrict          - 总是以严格模式对代码进行编译        - noImplicitAny          - 禁止隐式的any类型        - noImplicitThis          - 禁止类型不明确的this        - strictBindCallApply          - 严格检查bind、call和apply的参数列表        - strictFunctionTypes          - 严格检查函数的类型        - strictNullChecks          - 严格的空值检查        - strictPropertyInitialization          - 严格检查属性是否初始化      - 额外检查        - noFallthroughCasesInSwitch          - 检查switch语句包含正确的break        - noImplicitReturns          - 检查函数没有隐式的返回值        - noUnusedLocals          - 检查未使用的局部变量        - noUnusedParameters          - 检查未使用的参数      - 高级        - allowUnreachableCode          - 检查不可达代码          - 可选值：            - true，忽略不可达代码            - false，不可达代码将引起错误        - noEmitOnError          - 有错误的情况下不进行编译          - 默认值：false</code></pre><h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><ul><li>初始化项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>该命令会创建一个package.json文件，内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;typeScript&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;01_hello.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下载构建数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>如果你设置了镜像，使用一下语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>下载完依赖后，package.json会显示安装了哪些依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;typeScript&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;01_hello.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line"><span class="meta">  #</span><span class="bash">依赖</span></span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;ts-loader&quot;: &quot;^9.2.6&quot;,</span><br><span class="line">    &quot;typescript&quot;: &quot;^4.4.4&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.58.2&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^4.9.0&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^4.3.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一共安装了七个包</p><ol><li>webpack：构建工具webpack</li><li>webpack-cli：webpack的命令行工具</li><li>webpack-dev-server：webpack的开发服务器</li><li>typescript：ts编译器</li><li>ts-loader：ts加载器，用于在webpack中编译ts文件</li><li>html-webpack-plugin：webpack中html插件，用来自动创建html文件</li><li>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录</li></ol><ul><li>根目录下创建webpack的配置文件webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack中的所有配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        minimize: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    devtool: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定打包文件所在目录</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      <span class="comment">//指定打包文件的目录</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">      <span class="comment">//打包后的文件名</span></span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        environment: &#123;</span><br><span class="line">            arrowFunction: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//webpack打包时使用的模块</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">//指定加载的规则</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">//test指定规则生效的文件，是一个正则表达式，目前指定的是.ts文件</span></span><br><span class="line">                test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="comment">//要使用的loader</span></span><br><span class="line">                use: &#123;</span><br><span class="line">                   loader: <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//要排除的文件</span></span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根目录下创建tsconfig.json，配置可以根据自己需要</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>:&#123;        </span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改package.json添加如下配置</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    ...略...  </span><br><span class="line">    &quot;scripts&quot;: &#123;    </span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,    </span><br><span class="line">    &quot;start&quot;: &quot;webpack serve --open chrome.exe&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h3 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h3><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li>定义</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">参数: 类型</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    </span><br><span class="line">name: <span class="built_in">string</span>;    </span><br><span class="line">age: <span class="built_in">number</span>;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        </span><br><span class="line"><span class="built_in">this</span>.name = name;        </span><br><span class="line"><span class="built_in">this</span>.age = age;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;        </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.sayHello();</span><br></pre></td></tr></table></figure><h2 id="面向对象特点"><a href="#面向对象特点" class="headerlink" title="面向对象特点"></a>面向对象特点</h2><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p><p>只读属性（readonly）：如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</p><p>TS中属性具有三种修饰符：</p><ul><li><p>public（默认值），可以在类、子类和对象中修改</p></li><li><p>protected ，可以在类、子类中修改</p></li><li><p>private ，可以在类中修改</p></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li>示例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure><blockquote><p>重写</p></blockquote><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure><p>在子类中可以使用super来完成对父类的引用</p><blockquote><p>抽象类</p></blockquote><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> run(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li>示例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">per: Person</span>)</span>&#123;</span><br><span class="line">    per.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><p>举个例子：</p><ul><li><pre><code class="typescript">function test(arg: any): any&#123;    return arg;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</span><br><span class="line"></span><br><span class="line">- 使用泛型：</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;typescript</span><br><span class="line">  function test&lt;T&gt;(arg: T): T&#123;</span><br><span class="line">  return arg;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</p></li><li><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><ul><li><pre><code class="typescript">test(10)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</span><br><span class="line"></span><br><span class="line">- 方式二（指定类型）：</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;typescript</span><br><span class="line">    test&lt;number&gt;(10)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>也可以在函数后手动指定泛型</p></li></ul></li></ul></li><li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><ul><li><pre><code class="typescript">function test&lt;T, K&gt;(a: T, b: K): K&#123;    return b;&#125;test&lt;number, string&gt;(10, &quot;hello&quot;);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用泛型时，完全可以将泛型当成是一个普通的类去使用</span><br><span class="line"></span><br><span class="line">- 类中同样可以使用泛型：</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;typescript</span><br><span class="line">    class MyClass&lt;T&gt;&#123;</span><br><span class="line">        prop: T;</span><br><span class="line">    </span><br><span class="line">        constructor(prop: T)&#123;</span><br><span class="line">            this.prop &#x3D; prop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>除此之外，也可以对泛型的范围进行约束</p><ul><li><pre><code class="typescript">interface MyInter&#123;    length: number;&#125;function test&lt;T extends MyInter&gt;(arg: T): number&#123;    return arg.length;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</span><br><span class="line"></span><br><span class="line">## 个人练习</span><br><span class="line"></span><br><span class="line">项目结构</span><br><span class="line"></span><br><span class="line">![image-20211022155621898](https:&#x2F;&#x2F;heavenimmortal.oss-cn-chengdu.aliyuncs.com&#x2F;img&#x2F;20211022155630.png)</span><br><span class="line"></span><br><span class="line">- 配置文件</span><br><span class="line"></span><br><span class="line">**webpack.config.js**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;webpack中的所有配置信息都应该写在module.exports中</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        minimize: true &#x2F;&#x2F; 关闭代码压缩，可选</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指定入口文件</span><br><span class="line">    entry: &quot;.&#x2F;src&#x2F;index.ts&quot;,</span><br><span class="line">    </span><br><span class="line">    devtool: &quot;inline-source-map&quot;,</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: &#39;.&#x2F;dist&#39;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指定打包文件所在目录</span><br><span class="line">    output: &#123;</span><br><span class="line">      &#x2F;&#x2F;指定打包文件的目录</span><br><span class="line">        path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">      &#x2F;&#x2F;打包后的文件名</span><br><span class="line">        filename: &quot;bundle.js&quot;,</span><br><span class="line">        environment: &#123;</span><br><span class="line">            arrowFunction: false &#x2F;&#x2F; 关闭webpack的箭头函数，可选</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [&quot;.ts&quot;, &quot;.js&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;webpack打包时使用的模块</span><br><span class="line">    module: &#123;</span><br><span class="line">        &#x2F;&#x2F;指定加载的规则</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">              &#x2F;&#x2F;test指定规则生效的文件，是一个正则表达式，目前指定的是.ts文件</span><br><span class="line">                test: &#x2F;\.ts$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;要使用的loader</span><br><span class="line">                use: &#123;</span><br><span class="line">                   loader: &quot;ts-loader&quot;     </span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F;要排除的文件</span><br><span class="line">                exclude: &#x2F;node_modules&#x2F;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F;less 文件的处理</span><br><span class="line">            &#123;</span><br><span class="line">              test: &#x2F;\.less$&#x2F;,</span><br><span class="line">              &#x2F;&#x2F;从下往上执行</span><br><span class="line">              use:[</span><br><span class="line">                &quot;style-loader&quot;,</span><br><span class="line">                &quot;css-loader&quot;,</span><br><span class="line">                &#x2F;&#x2F; 引入postcss</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: &quot;postcss-loader&quot;,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        postcssOptions:&#123;</span><br><span class="line">                            plugins:[</span><br><span class="line">                                [</span><br><span class="line">                                    &quot;postcss-preset-env&quot;,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        browsers: &#39;last 2 versions&#39;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                ]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;less-loader&quot;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">          template:&quot;.&#x2F;src&#x2F;index.html&quot;</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p><strong>tsconfig.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>:&#123;        </span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;snake&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;clean-webpack-plugin&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^4.1.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^10.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss&quot;</span>: <span class="string">&quot;^8.3.9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss-preset-env&quot;</span>: <span class="string">&quot;^6.7.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ts-loader&quot;</span>: <span class="string">&quot;^9.2.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^4.4.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^5.58.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^4.3.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TypeScript</strong></li></ul><p><strong>index.ts</strong></p><p>本来各个类应该分开的，但是我为了方便就写在了一起</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/index.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义食物类Food</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个属性表示食物所指的div块</span></span><br><span class="line">  element: HTMLElement;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取页面中的food元素</span></span><br><span class="line">    <span class="built_in">this</span>.element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;food&quot;</span>)!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取食物的x轴坐标</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">X</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element.offsetLeft;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取食物的x轴坐标</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">Y</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element.offsetTop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重新生成食物</span></span><br><span class="line">  <span class="function"><span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//重新生成的食物坐标符合大小 ，</span></span><br><span class="line">    <span class="comment">//且 因为蛇一次移动一格即10px,所以食物的坐标必须是10的倍数</span></span><br><span class="line">    <span class="built_in">this</span>.element.style.left = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">29</span>)*<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.element.style.top = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">29</span>)*<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义记分板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScorePanel</span></span>&#123;</span><br><span class="line">  score = <span class="number">0</span>;</span><br><span class="line">  level = <span class="number">1</span>;</span><br><span class="line">  scoreEle: HTMLElement;</span><br><span class="line">  levelEle: HTMLElement;</span><br><span class="line">  maxLevel: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">maxLevel: <span class="built_in">number</span>=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.scoreEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;score&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.levelEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;level&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.maxLevel = maxLevel;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//加分</span></span><br><span class="line">  <span class="function"><span class="title">addScore</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.score++;</span><br><span class="line">    <span class="built_in">this</span>.scoreEle.innerHTML = <span class="built_in">this</span>.score+<span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.score % <span class="number">10</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.levelUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//提升等级</span></span><br><span class="line">  <span class="function"><span class="title">levelUp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.level&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.level++;</span><br><span class="line">      <span class="built_in">this</span>.levelEle.innerHTML = <span class="built_in">this</span>.level+<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//蛇类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span></span>&#123;</span><br><span class="line">  <span class="comment">//蛇头</span></span><br><span class="line">  head: HTMLElement;</span><br><span class="line">  <span class="comment">//蛇的身体 包括蛇头</span></span><br><span class="line">  bodies: HTMLCollection;</span><br><span class="line">  element: HTMLElement;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#snake&gt;div&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;snake&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.bodies = <span class="built_in">this</span>.element.getElementsByTagName(<span class="string">&quot;div&quot;</span>)!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取蛇头的坐标</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">X</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head.offsetLeft;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">Y</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head.offsetTop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">X</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.X==value)&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否撞墙</span></span><br><span class="line">    <span class="keyword">if</span>(value&lt;<span class="number">0</span> || value&gt;<span class="number">290</span>)&#123;</span><br><span class="line">      <span class="comment">//蛇撞墙了</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;蛇撞墙了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改x时，是在修改水平坐标，蛇在向右移动时，不能向右，反之亦然</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.bodies[<span class="number">1</span>]&amp;&amp;(<span class="built_in">this</span>.bodies[<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetLeft ===value)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value&gt;<span class="built_in">this</span>.X)&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.X - <span class="number">10</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.X + <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.moveBody();</span><br><span class="line">    <span class="built_in">this</span>.head.style.left = value+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">Y</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.Y==value)&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(value&lt;<span class="number">0</span> || value&gt;<span class="number">290</span>)&#123;</span><br><span class="line">      <span class="comment">//蛇撞墙了</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;蛇撞墙了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.bodies[<span class="number">1</span>]&amp;&amp;(<span class="built_in">this</span>.bodies[<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetTop ===value)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value&gt;<span class="built_in">this</span>.Y)&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.Y - <span class="number">10</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.X + <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.moveBody();</span><br><span class="line">    <span class="built_in">this</span>.head.style.top = value+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//增加身体</span></span><br><span class="line">  <span class="function"><span class="title">addBody</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element.insertAdjacentHTML(<span class="string">&quot;beforeend&quot;</span>,<span class="string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移动身体</span></span><br><span class="line">  <span class="function"><span class="title">moveBody</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="built_in">this</span>.bodies.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">      <span class="keyword">let</span> X = (<span class="built_in">this</span>.bodies[i-<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetLeft;</span><br><span class="line">      <span class="keyword">let</span> Y = (<span class="built_in">this</span>.bodies[i-<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetTop;</span><br><span class="line"></span><br><span class="line">      (<span class="built_in">this</span>.bodies[i] <span class="keyword">as</span> HTMLElement).style.left = X+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">      (<span class="built_in">this</span>.bodies[i] <span class="keyword">as</span> HTMLElement).style.left = Y+<span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏控制器，控制其他的所有类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameControl</span></span>&#123;</span><br><span class="line">  <span class="comment">//蛇</span></span><br><span class="line">  snake: Snake;</span><br><span class="line">  <span class="comment">//食物</span></span><br><span class="line">  food: Food;</span><br><span class="line">  <span class="comment">//记分牌</span></span><br><span class="line">  scorePanel: ScorePanel;</span><br><span class="line">  <span class="comment">//当前蛇的移动方向</span></span><br><span class="line">  direction: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="comment">//游戏是否结束</span></span><br><span class="line">  isLive: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="built_in">this</span>.snake = <span class="keyword">new</span> Snake();</span><br><span class="line">    <span class="built_in">this</span>.food = <span class="keyword">new</span> Food();</span><br><span class="line">    <span class="built_in">this</span>.scorePanel = <span class="keyword">new</span> ScorePanel();</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化方法</span></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//绑定键盘按下的事件</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&quot;keydown&quot;</span>,<span class="built_in">this</span>.keydownHandler.bind(<span class="built_in">this</span>));</span><br><span class="line">    <span class="comment">//蛇移动</span></span><br><span class="line">    <span class="built_in">this</span>.run();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//键盘相应函数</span></span><br><span class="line">  <span class="function"><span class="title">keydownHandler</span>(<span class="params">event: KeyboardEvent</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.key);</span><br><span class="line">    <span class="keyword">if</span>(event.key==<span class="string">&quot;ArrowUp&quot;</span> ||</span><br><span class="line">    event.key==<span class="string">&quot;ArrowDown&quot;</span>||</span><br><span class="line">    event.key==<span class="string">&quot;ArrowLeft&quot;</span>||</span><br><span class="line">    event.key==<span class="string">&quot;ArrowRight&quot;</span> )&#123;</span><br><span class="line">      <span class="built_in">this</span>.direction = event.key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//移动蛇</span></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      根据方向移动</span></span><br><span class="line"><span class="comment">      向右 left 增加</span></span><br><span class="line"><span class="comment">      向左 left 减少</span></span><br><span class="line"><span class="comment">      像上 top 减少</span></span><br><span class="line"><span class="comment">      向下 top 增加</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      头和身体是否碰撞</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> X = <span class="built_in">this</span>.snake.X;</span><br><span class="line">    <span class="keyword">let</span> Y = <span class="built_in">this</span>.snake.Y;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.direction);</span><br><span class="line">    <span class="keyword">switch</span>(<span class="built_in">this</span>.direction)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">        Y-=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">        Y+=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span><br><span class="line">        X-=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span><br><span class="line">        X+=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查蛇是否吃到食物</span></span><br><span class="line">    <span class="built_in">this</span>.checkEat(X,Y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;X:&quot;</span>+X+<span class="string">&quot; Y:&quot;</span>+Y);</span><br><span class="line">      <span class="built_in">this</span>.snake.X = X;</span><br><span class="line">      <span class="built_in">this</span>.snake.Y = Y;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line">      <span class="built_in">this</span>.isLive = <span class="literal">false</span>;</span><br><span class="line">      alert((e <span class="keyword">as</span> <span class="built_in">Error</span>).message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.isLive &amp;&amp; <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.run.bind(<span class="built_in">this</span>),<span class="number">300</span>-(<span class="built_in">this</span>.scorePanel.level-<span class="number">1</span>)*<span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查蛇是否吃到食物</span></span><br><span class="line">  <span class="function"><span class="title">checkEat</span>(<span class="params">X: <span class="built_in">number</span>,Y:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(X===<span class="built_in">this</span>.food.X &amp;&amp; Y===<span class="built_in">this</span>.food.Y)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;吃到食物&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.food.change();</span><br><span class="line">      <span class="built_in">this</span>.scorePanel.addScore();</span><br><span class="line">      <span class="built_in">this</span>.snake.addBody();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gameControl = <span class="keyword">new</span> GameControl();</span><br></pre></td></tr></table></figure><ul><li><strong>html</strong></li></ul><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--游戏主容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置游戏的舞台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;stage&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--🐍--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;snake&quot;</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--食物--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;food&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--记分牌--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;score-panel&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        SCORE:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&quot;score&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        LEVEL:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&quot;score&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>less</strong></li></ul><p><strong>index.less</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置变量</span></span><br><span class="line"><span class="variable">@bg-color:</span> <span class="number">#b7d4a8</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">20px</span> <span class="string">&quot;Courier&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除默认样式</span></span><br><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//改变盒子模型的计算方式</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置主窗口的样式</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">  <span class="comment">//设置背景颜色</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@bg-color</span>;</span><br><span class="line">  <span class="comment">//设置居中</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">  <span class="comment">//设置圆角</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="comment">//开启弹性盒布局</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">//设置主轴的方向</span></span><br><span class="line">  <span class="attribute">flex-flow</span>: column;</span><br><span class="line">  <span class="comment">//设置侧轴的对齐方式</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="comment">//设置主轴的对其方式</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置舞台的样式</span></span><br><span class="line"><span class="selector-id">#stage</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">304px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">//设置蛇的样式</span></span><br><span class="line">  <span class="selector-id">#snake</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@bg-color</span>;</span><br><span class="line">      <span class="comment">//开启绝对定位</span></span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置食物</span></span><br><span class="line">  <span class="selector-tag">&amp;</span>&gt;<span class="selector-id">#food</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@bg-color</span>;</span><br><span class="line">    <span class="comment">//开启绝对定位</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记分牌</span></span><br><span class="line"><span class="selector-id">#score-panel</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">//设置主轴对其方式</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;javaScript概述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript（缩写：JS）是一种运行在</summary>
      
    
    
    
    <category term="前端" scheme="https://heavenimtoral.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javaScript" scheme="https://heavenimtoral.gitee.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers</title>
    <link href="https://heavenimtoral.gitee.io/2021/09/22/OpenLayers/"/>
    <id>https://heavenimtoral.gitee.io/2021/09/22/OpenLayers/</id>
    <published>2021-09-22T06:27:41.751Z</published>
    <updated>2021-09-24T02:01:02.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://blog.csdn.net/qq_35732147/article/details/90675012">参考博客</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>OpenLayers是一个用于开发WebGIS客户端的JavaScript包，最初基于BSD许可发行。</p><p>OpenLayers是一个开源的项目，其设计之意是为互联网客户端提供强大的地图展示功能，包括地图数据显示与相关操作，并具有灵活的扩展机制。</p><p>目前OpenLayers已经成为一个拥有众多开发者和帮助社区的成熟、流行的框架。</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>支持瓦片图层</li></ul><p>OpenLayers支持从OSM、Bing、MapBox、Stamen和其他任何你能找到的XYZ瓦片资源中提取地图瓦片并在前端展示。同时也支持OGC的WMTS规范的瓦片服务以及ArcGIS规范的瓦片服务。</p><ul><li>支持矢量切片（或者矢量瓦片）</li></ul><p>OpenLayers也支持矢量切片的访问和展示，包括MapBox矢量切片中的pbf格式，或者GeoJSON格式和TopoJSON格式的矢量切片。</p><ul><li>支持矢量图层</li></ul><p>能够渲染GeoJSON、TopoJSON、KML、GML和其他格式的矢量数据，上面说的矢量切片形式的数据也可以被认为是在矢量图层中渲染。</p><ul><li>支持OGC规范</li></ul><p>OpenLayers支持OGC制定的WMS、WFS等GIS网络服务规范。</p><ul><li>运用前沿技术</li></ul><p>利用Canvas 2D、WebGL以及HTML5中其他最新的技术来构建功能。同时支持在移动设备上运行。</p><ul><li>易于定制和扩展</li></ul><p>可以直接调整CSS来为地图控件设计样式。而且可以对接到不同层级的API进行功能扩展，或者使用第三方库来定制和扩展。</p><ul><li>面向对象的思想</li></ul><p>最新版本的OpenLayers采用纯面向对象的ECMA Script 6进行开发，可以说，在OpenLayers中万物皆对象。</p><ul><li>优秀的交互体验</li></ul><p>OpenLayers实现了类似于Ajax的无刷新功能，可以结合很多优秀的JavaScript功能插件，带给用户更多丰富的交互体验。</p><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src="E:\typora\images\20210917151257.jpg" alt="img"></p><p>可以看到OpenLayers实现了上百个类，用于对GIS中的各种事物进行抽象表达。</p><p>其中，Map、Layer、Source和View是OpenLayers框架体系中的核心类，几乎所有的动作都围绕这几个核心类展开，以实现地图加载和相关操作。</p><p>在OpenLayers的体系框架中：把整个地图看作一个容器（Map），核心为地图图层（Layer），每个图层有对应的数据源（Source），并由地图视图（View）进行地图表现。地图容器上还支持一些与用户交互的控件（Control和Interaction），另外，OpenLayers还支持事件机制。</p><h3 id="基本类介绍"><a href="#基本类介绍" class="headerlink" title="基本类介绍"></a>基本类介绍</h3><ul><li><strong>Map</strong><br>地图容器，必要属性layers，view，target。</li><li>View<br>可以说是地图的视角，它可以控制地图的中心和级别等其他属性。</li><li><strong>Layer和Source</strong><br>首先需要明白的一点是，Source和Layer是一对一的关系，有一个Source，必然需要一个Layer，然后把这个Layer添加到Map上，就可以显示出来了。</li></ul><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p><a href="https://openlayers.org/">openLayers官网</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1、进入官网下载</p><p><img src="E:\typora\images\20210916203503.png" alt="image-20210916203500551"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install ol 是在具有node.js环境中下载</span><br><span class="line">dist后缀的压缩包 是进行过代码压缩过的</span><br></pre></td></tr></table></figure><p><img src="E:\typora\images\20210916203612.png" alt="image-20210916203609938"></p><p>2、解压，build下的ol.js和css下的ol.css是我们后面要用的的文件</p><p><img src="E:\typora\images\20210918091353.png" alt="image-20210918091255213"></p><p><img src="E:\typora\images\20210918091347.png" alt="image-20210918091318944"></p><p><img src="E:\typora\images\20210918091350.png" alt="image-20210918091340085"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="构建简单的地图应用"><a href="#构建简单的地图应用" class="headerlink" title="构建简单的地图应用"></a>构建简单的地图应用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>构建简单的地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>关于上面的代码，我们做了哪些事</p></blockquote><ol><li>调用ol.Map生成的地图容器map，并使用target属性将该地图容器与id为‘map’的div容器关联起来</li><li>通过layers参数设置的需要加载的瓦片图层（ol.layer.Tile），这个瓦片图层中包含了一个数据源（ol.source.OSM），这个数据源是OpenStreetMap（一个开放数据源的免费地图）的地图数据，也就是ol.source.OSM这个类封装了加载OSM地图数据的详细实现。</li><li>通过view设置地图视图（ol.View），地图视图中也设置了相应的空间参考系统（projection）、地图视图中心点（center），地图视图缩放级别（zoom）。</li></ol><p><img src="E:\typora\images\20210918091512.png" alt="image-20210918091511152"></p><blockquote><p>被渲染后的div容器</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152722.png" alt="image-20210918095535410"></p><p>我们可以看见div容器被渲染后，分成的3个层级</p><ul><li><p>ol-unselectable</p><p>地图渲染层，地图基于canvas方式渲染</p></li><li><p>ol-overlaycontainer</p><p>内容叠加层，用于放置叠置层（ol.Overlay）内容，如在地图上添加图片、弹窗等</p></li><li><p>ol-overlaycontainer-stopevent</p><p>地图控件层，用于放置控件，默认情况下会放置ol.control.Zoom（用于控制地图放大、缩小）、ol.control.Rotate（用于控制地图旋转）、ol.control.Attribution（用于控制地图右下角标记）这三个控件。</p></li></ul><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><p>OpenLayers封装了很多控件用于对地图进行操作、显示地图信息等。</p><p>具体来说，控件是一个地图上可见的小部件，其DOM元素位于屏幕上的固定位置。它们可以包含用户输入（以按钮的形式），也可以只提供信息。控件的位置是使用CSS来确定，当然也可以使用CSS来调整。默认情况下，控件被放置在地图控件层，也就是CSS类名为ol-overlayContainer-stopEvent的元素中，但也可以调整，使控件基于外部DOM元素来实现。</p><p>从OpenLayers的API来看，具体有如下控件类：<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152728.png" alt="img"></p><p>具体来说，这些控件是干嘛的呢？这里简单介绍一下</p><ul><li>归属控件（Attribution）    ——    用于展示地图资源的版权或者归属，它会默认加入到地图中。</li><li>全屏控件（FullScreen）    ——    控制地图全屏展示</li><li>坐标拾取控件（MousePosition）    ——    用于在地图上拾取坐标</li><li>鹰眼控件（OverviewMap）    ——    生成地图的一个概览图</li><li>旋转控件（Rotate）    ——    用于鼠标拖拽旋转地图，它会默认加入到地图中。</li><li>比例尺控件（ScaleLine）    ——    用于生成地图比例尺</li><li>滑块缩放控件（ZoomSlider）    ——    以滑块的形式缩放地图</li><li>缩放至特定位置控件（ZoomToExtent）    ——    用于将地图视图缩放至特定位置</li><li>普通缩放控件（Zoom）    ——    普通缩放控件，它会默认加入到地图中。</li></ul><h3 id="zoom控件"><a href="#zoom控件" class="headerlink" title="zoom控件"></a>zoom控件</h3><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>我们将上一点完成的html文件复制成zoom.html文件。运行起来后</p><p>缩放控件、旋转控件、归属控件默认加入地图容器中。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152733.png" alt="image-20210918101010562"></p><p>我们在console中输入**map.getControls().getArray()**，可以拿到该地图容器的控件数组，第一个就是缩放控件。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152737.png" alt="image-20210918101351729"></p><p>而在地图控件层中，缩放控件已在里面</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152741.png" alt="image-20210918101500713"></p><blockquote><p>zoomAPI</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152745.png" alt="image-20210918102950836"></p><h4 id="滑块缩放控件（ol-control-ZoomSlider）与缩放至特定地点控件（ol-control-ZoomToExtent）"><a href="#滑块缩放控件（ol-control-ZoomSlider）与缩放至特定地点控件（ol-control-ZoomToExtent）" class="headerlink" title="滑块缩放控件（ol.control.ZoomSlider）与缩放至特定地点控件（ol.control.ZoomToExtent）"></a>滑块缩放控件（ol.control.ZoomSlider）与缩放至特定地点控件（ol.control.ZoomToExtent）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>zoom<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">           <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>滑块缩放上面的E是缩放到特定地点的控价，由于设置成深圳市，点击E之后会跳到深圳市</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152751.png" alt="image-20210918104832208"></p><h4 id="归属控件与全屏控件"><a href="#归属控件与全屏控件" class="headerlink" title="归属控件与全屏控件"></a>归属控件与全屏控件</h4><h5 id="归属控件"><a href="#归属控件" class="headerlink" title="归属控件"></a>归属控件</h5><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152756.png" alt="image-20210918105446350"></p><h5 id="全屏控件（ol-control-FullScreen）"><a href="#全屏控件（ol-control-FullScreen）" class="headerlink" title="全屏控件（ol.control.FullScreen）"></a>全屏控件（ol.control.FullScreen）</h5><p>一般情况下，我们的地图只在浏览器的客户区进行展示，我们可以通过全屏控件让地图进行全屏展示</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152800.png" alt="image-20210918105629073"></p><p>我们将上一节的zoom.html复制成一份新文件，我们只需要在控件层中加入 <strong>new ol.control.FullScreen()</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>全屏控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen()</span></span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152806.png" alt="image-20210918110122511"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152810.png" alt="image-20210918110137149"></p><h4 id="坐标拾取控件与鹰眼控件"><a href="#坐标拾取控件与鹰眼控件" class="headerlink" title="坐标拾取控件与鹰眼控件"></a>坐标拾取控件与鹰眼控件</h4><h5 id="坐标拾取（ol-control-MousePosition-）"><a href="#坐标拾取（ol-control-MousePosition-）" class="headerlink" title="坐标拾取（ol.control.MousePosition()）"></a>坐标拾取（ol.control.MousePosition()）</h5><p>很多时候我们想要实时获取鼠标光标指示处对应的坐标，就像高德地图的坐标拾取</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152813.png" alt="image-20210918110402870"></p><p> OpenLayers提供的ol.control.MousePosition类也能够实现坐标拾取功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>坐标拾取控件与鹰眼控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition() </span></span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152818.png"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152821.png" alt="image-20210918110647785"></p><h5 id="鹰眼控件-ol-control-OverviewMap"><a href="#鹰眼控件-ol-control-OverviewMap" class="headerlink" title="鹰眼控件(ol.control.OverviewMap())"></a>鹰眼控件(ol.control.OverviewMap())</h5><p>鹰眼图是GIS中的一个基本的功能，鹰眼图，顾名思义，在鹰眼图上可以像从空中俯视一样查看地图框中所显示的地图在整个图中的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>坐标拾取控件与鹰眼控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;)       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152826.png" alt="image-20210918110938565"></p><h4 id="旋转控件与比例尺控件"><a href="#旋转控件与比例尺控件" class="headerlink" title="旋转控件与比例尺控件"></a>旋转控件与比例尺控件</h4><h5 id="旋转控件"><a href="#旋转控件" class="headerlink" title="旋转控件"></a>旋转控件</h5><p>旋转控件默认加入map容器的控件层</p><p>按住Shift+Alt，再用鼠标移动，就可以旋转。</p><p>旋转前</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152829.png" alt="image-20210918111932902"></p><p>旋转后</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152833.png" alt="image-20210918111959574"></p><h5 id="比例尺控件（ol-control-ScaleLine-）"><a href="#比例尺控件（ol-control-ScaleLine-）" class="headerlink" title="比例尺控件（ol.control.ScaleLine()）"></a>比例尺控件（ol.control.ScaleLine()）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>旋转控件与比例尺控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ScaleLine()      </span></span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152837.png" alt="image-20210918112151277"></p><p>可以发现，这里比例尺控件使用的单位是km，如果想使用其他单位，可以修改ScaleLine类中的units属性。</p><p> units属性接受”degrees”、”imperial”、”us”、”nautical”或”metric”（默认为”metric”)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.control.ScaleLine(&#123;</span><br><span class="line">units:<span class="string">&#x27;degrees&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152841.png" alt="image-20210918112359349"></p><h4 id="自定义切换图层控件"><a href="#自定义切换图层控件" class="headerlink" title="自定义切换图层控件"></a>自定义切换图层控件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义切换图层控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;osm&quot;</span> <span class="attr">checked</span> /&gt;</span>OpenStreetMap</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bingmap&quot;</span> /&gt;</span>Bing Map</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;stamen&quot;</span> /&gt;</span>Stamen Map</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;),</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 <span class="comment">// Bing Map图层</span></span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.BingMaps(&#123;</span></span><br><span class="line"><span class="javascript">                  key: <span class="string">&#x27;AgpZJo9V53etmuVovrsSv2Aev6CjrdshpbxSyOCQ9DQpXlLdynagW7Wxhr52WdRB&#x27;</span>,<span class="comment">// 可以自行到Bing Map官网申请key</span></span></span><br><span class="line"><span class="javascript">                  imagerySet: <span class="string">&#x27;Aerial&#x27;</span></span></span><br><span class="line">              &#125;),</span><br><span class="line"><span class="javascript">              visible: <span class="literal">false</span>                  <span class="comment">// 先隐藏该图层</span></span></span><br><span class="line">          &#125;),</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="javascript">                  layer: <span class="string">&#x27;watercolor&#x27;</span></span></span><br><span class="line">              &#125;),</span><br><span class="line"><span class="javascript">              visible: <span class="literal">false</span>                  <span class="comment">// 先隐藏该图层</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ScaleLine(&#123;</span></span><br><span class="line"><span class="javascript">          units:<span class="string">&#x27;degrees&#x27;</span></span></span><br><span class="line">        &#125;)      </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> controls = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;controls&#x27;</span>);     </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 事件委托</span></span></span><br><span class="line"><span class="javascript">        controls.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(event.target.checked)&#123;                       <span class="comment">// 如果选中某一复选框</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 通过DOM元素的id值来判断应该对哪个图层进行显示</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span>(event.target.id)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;osm&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">0</span>).setVisible(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;bingmap&quot;</span>:</span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">1</span>).setVisible(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;stamen&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">2</span>).setVisible(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;                                         <span class="comment">// 如果取消某一复选框</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 通过DOM元素的id值来判断应该对哪个图层进行隐藏</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span>(event.target.id)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;osm&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">0</span>).setVisible(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;bingmap&quot;</span>:</span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">1</span>).setVisible(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;stamen&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">2</span>).setVisible(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152846.png" alt="image-20210918142333522"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152903.png" alt="image-20210918142346157"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152908.png" alt="image-20210918142404494"></p><p>在以上的代码中，我们通过**map.getLayers().item(0).setVisible(true)**来设置当前展示图层</p><p>visible就是控制图层显示的属性</p><h2 id="多源数据"><a href="#多源数据" class="headerlink" title="多源数据"></a>多源数据</h2><h3 id="数据组织"><a href="#数据组织" class="headerlink" title="数据组织"></a>数据组织</h3><p>数据是GIS的血液，可以说GIS应用系统的几乎所有活动与行为都围绕数据展开。那么在GIS对数据加载、存储、分析与操作这几个过程中，我们首先讨论在由OpenLayers构建的WebGIS系统中，数据如何合理加载。    </p><p>随着WebGIS应用的不断发展，目前出现了大量网络地图服务资源，包括国外互联网公司的Google地图、Bing 地图、Yahoo 地图，国外的开源地图OpenStreetMap，也包括国内互联网公司的百度地图、高德地图、腾讯地图。还有ESRI、超图、中地数码等大型GIS厂商提供的自定格式的GIS数据，以及其他企事业单位或研究机构提供的各种格式的GIS数据等。如何将这些多源异构数据加载到Web客户端中进行显示，实现数据无缝融合，这是WebGIS中需要首先解决的关键问题。</p><p>OpenLayers的地图数据通过图层（Layer）进行组织渲染，然后通过数据源（Source）设置具体的地图数据来源。</p><p>Layer可看作渲染地图的层容器，具体的数据需要通过Source设置。</p><p>地图数据根据数据源（Source）可分为Image、Tile、Vector三大类型的数据源类，对应设置到地图图层（Layer）的Image、Tile、Vector三大类的图层中。其中，矢量图层Vector通过样式（Style）来设置矢量要素渲染的方式和外观。</p><p>Source和Layer是一对一的关系，有一个Source，必然需要一个Layer，然后把Layer添加到Map上，就可以显示出来了。</p><p><img src="../../../../typora/images/20180727115727932" alt="img"></p><p>在数据源中：</p><ul><li>Tile类为<strong>瓦片抽象基类</strong>，其子类作为各类瓦片数据的数据源。、</li><li>Vector类为<strong>矢量数据源基类</strong>，为矢量图层提供具体的数据来源，包括直接组织或读取的矢量数据（<strong>Features</strong>）、远程数据源的矢量数据（即通过url设置数据源路径）等。若是url设置的矢量数据源，则通过解析器Format（即ol.format.Feature的子类）来解析各类矢量数据，如XML、Text、JSON、GML、KML、GPS、WFS、WKT、GeoJSON等地图数据。</li><li>Image类为<strong>单一图像基类</strong>，其子类为画布（canvas）元素、服务器图片、单个静态图片、WMS单一图像等的数据源。它与Tile类的区别在于，Image类对应的是一整张大图片，而不像瓦片那样很多张小图片，从而无需切片，也可以加载一些地图，适用于一些小场景地图。</li></ul><p>从复杂度来分析，Image类和Vector类都不复杂，其数据格式和来源方式都简单。而Tile类则不一样，由于一些历史问题，多个服务提供商，多种标准等诸多原因，导致要支持世界上大多数的瓦片数据源，就需要针对这些差异（这些差异主要是瓦片坐标系不同、分辨率不同等，后面会详细介绍）提供不同的Tile数据源支持。我们先来看一下OpenLayers现在支持的Source具体有哪些：<br><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152916.png" alt="img"></p><p>   上图中的类是按照继承关系，从左向右展开的，左边的为父类，右边的为子类。在使用时，一般来说，都是直接使用叶子节点上的类，基本就可以完成需求。父类需要自己进一步扩展或者处理才能有效使用。</p><p>我们先了解最为复杂的ol.source.Tile，其叶子节点类有很多，大致可以分为几类：</p><ul><li><strong>在线服务的Source</strong>，包括ol.source.BingMaps（使用的是微软提供的Bing在线地图数据）、ol.source.Stamen（使用的是Stamen提供的在线地图数据）。没有自己的地图服务器的情况下，可直接使用它们，加载地图底图。</li><li><strong>支持协议标准的Source</strong>，包括ol.source.TileArcGISRest、ol.source.TileWMS、ol.source.WMTS、ol.source.UTFGrid、ol.source.TileJSON。如果要使用它们，首先你得先学习对应的协议，之后必须找到支持这些协议的服务器来提供数据源，这些服务器可以是底图服务提供商提供的，也可以是自己搭建的服务器，关键是得支持这些协议。</li><li> <strong>ol.source.XYZ</strong>，这个需要单独提一下，因为是可以直接使用的，而且现在很多地图服务（在线的，或者自己搭建的服务器）都支持xyz方式的请求。国内在线的地图服务，高德、天地图等，都可以通过这种方式加载，本地离线瓦片地图也可以，用途广泛，且简单易学。</li></ul><p>ol.source.Image虽然有几种不同的子类，但大多比较简单，因为不牵涉到过多的协议和服务提供商。而ol.source.Vector就更加简单了，但有时候其唯一的子类ol.source.Cluster在处理大量的要素时，我们可能需要使用。</p><p>在大概了解了整个Source之后，紧接着该介绍它的搭档Layer了，同样的，我们还是先从OpenLayers现有的Layer类图大致了解一下：</p><p><img src="../../../../typora/images/20180731110040946" alt="img"></p><p>为了便于了解和使用，图中标注了每一个Layer对应的Source。通过上图可以看到Layer相对于Source而言，真是太简单了。</p><p>其中ol.layer.Group是一个用于将多个图层存储在一起的集合类，以后接触到相关内容再介绍。</p><h3 id="瓦片地图"><a href="#瓦片地图" class="headerlink" title="瓦片地图"></a>瓦片地图</h3><h4 id="瓦片地图-1"><a href="#瓦片地图-1" class="headerlink" title="瓦片地图"></a>瓦片地图</h4><p>瓦片地图（也叫切片地图）源于一种大地图解决方案，就是在多个比例尺下配置地图，然后提前把每个比例尺下的地图绘制为小块图片（瓦片），保存在服务器上用于缓存的目录中。这样客户端在访问地图时，可以直接获取需要的小块图片拼接成整幅地图，而不是由服务器动态创建（实时创建）出一幅图片再发送到客户端，从而极大提高了访问速度。</p><p>瓦片地图起始于谷歌地图。在2005年前后谷歌地图已经开始将矢量图层融合为一张栅格化的大图像，大图像被切分为256像素 x 256像素的图片（瓦片）。这些图片预先生成并存储在磁盘上，以便快速分发（通过AJAX）到客户端。这样做可以同时支持成千上万个并发请求（异步-因为瓦片地图根据请求范围加载），而这对于动态地图绘制而言基本是不可能的。</p><p>瓦片地图的缺点是不能改变图层的符号，可以认为它们是一些”死图片”，不能进行更新。因此，WebGIS中通常的做法是将通用的基础底图图层发布为瓦片，在其上叠加另外的包含专题信息的图层，这种图层结构可以被比喻为”图层三明治”。</p><p>如今有许多软件提供创建地图瓦片的功能，商业软件中，功能强大的ArcGIS软件系列的ArcGIS Server（价格较贵）能够进行创建瓦片地图操作，国内的超图SuperMap iServer同样也能创建瓦片地图。另外，开源的Mapnik库也可以创建地图瓦片，Mapnik库被封装在用户友好的应用程序TileMill中。</p><h4 id="LOD"><a href="#LOD" class="headerlink" title="LOD"></a>LOD</h4><p>LOD是<strong>Levels of Detail（细节层级）</strong>的简写，用于根据当前的环境，渲染不同的图像，用于降低非重要内容的细节度，从而提高渲染效率，在电子游戏中经常运用，对于需要显示全球地图的GIS系统而言，更需要应用这项技术。</p><p>在不同的LOD下，自然分辨率就可能不一样，这两者是紧密结合在一起的。对于图形显示系统而言，分辨率作为屏幕坐标和世界坐标之间计算的纽带，其作用是非常重要的（例如，屏幕上两个像素点间的距离对应的现实世界的距离是多少，这就需要通过分辨率来衡量与计算——分辨率将在后面进行介绍）。</p><p>在详细讲解之前，假设给你两张A4纸，在其中一张纸上把你家整个绘制上去，在另一张纸上只把你睡的房间绘制上去。如果别人想看你家，你会给哪一张纸？如果想看你睡的房间，你会给哪一张纸？相信你不会给错，LOD就是这种根据不同需要，采用不同图的技术方案。在地图应用中，最直观的体验，就是地图放大缩小。当地图放大后，能看到更详细的地理信息，比如街道、商店等等。当地图缩小再缩小，原来能看到的街道、商店就看不见了，但是能看到更大的区域。我们的屏幕就相当于是A4纸，大小不变。</p><p>LOD这个技术方案非常棒！非常符合我们的自然习惯，所以在很多图形系统中都使用了这项技术。在GIS系统中，不断放大，就能看到更多地图细节，了解更加详细的信息。对于GIS引擎的开发者而言，需要实现这项技术，当发现用户放大地图时，就立马使用更有细节的地图图片，替换现在显示的地图图片。现在问题来了：意思是说对于同一个地点而言，需要有更多张呈现不同细节程度的图片？是的，你没有猜错。虽然在使用瓦片地图的过程中，感觉放大、缩小地图是浑然一体的，但其实就在你眼皮下发生了图片替换。不同层级使用具有不同细节的地图瓦片，这就需要为每一个层级准备图片，如果使用离线工具下载瓦片地图，会看到下载的图片是按照层级Z进行存储的。开发者不用担心数据源的处理，只需要知道这个原理就可以了。</p><p>为了便于理解GIS系统中不同层级，使用不同的图片，下面使用google在线瓦片地图进行说明。最小层级0情况下，只用了一张256*256像素的图片表示整个地球平面：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152924.png" alt="img"></p><p>稍大一个层级1情况下，用了四张256*256像素的图片（各张图片中表示的信息更丰富了）来表示整个地球：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152929.png" alt="image-20210922092323241"></p><h4 id="瓦片计算"><a href="#瓦片计算" class="headerlink" title="瓦片计算"></a>瓦片计算</h4><blockquote><p>切片方式</p></blockquote><p>   如果对整个地球图片进行切片，需要考虑的是整个地球图片大小，以及切片规则，切片（瓦片）大小。</p><p>对于WebGIS而言，在线地图几乎都采用Web墨卡托投影坐标系（EPSG:3857，后面会详解介绍)，地球投影到平面上就是一个正方形。为了方便使用，切片时大多按照正方形的方式来进行切片，比如大小为256<em>256的瓦片（单位像素），一个1024</em>1024的地图，就可以切片4张小的256*256的瓦片。</p><p>瓦片大小几乎都是256<em>256，有一些则会增加到512</em>512（由于以前的屏幕分辨率通常比较低，所以256<em>256的瓦片在低分辨率的屏幕上显示效果比较好，随着屏幕分辨率的提高，瓦片大小自然就会增加到512</em>512。但目前主流仍是256*256大小的瓦片）。</p><p>LOD会使得不同层级下的全球地图大小不一致，结合瓦片地图技术一起，就出现了金字塔瓦片结构：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152933.png" alt="img"></p><p>在金字塔瓦片结构中，上一层级的一张瓦片，在更大一层级中，会用4张瓦片来表示，依次类推，比如上一篇文章中看到的<strong>Google在线瓦片地图</strong>的第0级和第1级的瓦片地图就呈现这样的规律。这样做可以维持正方形的投影方式不变，同时按照2的幂次方放大（<strong>瓦片</strong>的边长），计算效率非常高。</p><blockquote><p>瓦片数量计算</p></blockquote><p>通过上面切片的介绍，我们可以对每一层级拥有的瓦片的数量进行简单的计算：</p><ul><li>层级0的瓦片数是 1 = 2^0 ∗ 2^0</li><li>层级1的瓦片数是 4 = 2^1 * 2^1</li><li>层级2的瓦片数是 16 = 2^2 * 2^2</li><li>层级3的瓦片数是 64 = 2^3 * 2^3</li><li>层级z的瓦片数是 2^z * 2^z</li></ul><blockquote><p>瓦片坐标系</p></blockquote><p>从以上的金字塔瓦片结构可以看出来，瓦片的组织方式是三维的，因此对一幅地图进行切片时，需要给每一块瓦片进行详细的编号，即需要指定每一块瓦片的行号、列号以及层级数。</p><p>这个问题就涉及到了瓦片坐标系，瓦片坐标系是瓦片地图的组织参考框架。它规定每一块瓦片的行号、列号以及层级数，另外，在瓦片坐标系中列号一般从左到右方向递增，而在瓦片坐标系中行号有可能沿着从上到下的方向递增，或者从下到上递增，所以不同的瓦片坐标系的起始点（原点）不同。</p><p>不同的在线地图服务商，可能定义不一样的瓦片坐标系，瓦片坐标系不一样，那么对应的同一个位置的瓦片的坐标也会不一样。需要引起重视。</p><p>OpenLayers提供了一个用于调试瓦片坐标系的ol.source.TileDebug类。借助这个类，我们可以清晰的看到每一个瓦片的坐标：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152938.png" alt="image-20210922094122522"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>瓦片坐标<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;),</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.TileDebug(&#123;</span></span><br><span class="line"><span class="javascript">                projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,            <span class="comment">// Web墨卡托投影坐标系</span></span></span><br><span class="line"><span class="javascript">                tileGrid: osmSource.getTileGrid()   <span class="comment">// 获取OSM地图的瓦片坐标系</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ScaleLine(&#123;</span></span><br><span class="line"><span class="javascript">          units:<span class="string">&#x27;degrees&#x27;</span></span></span><br><span class="line">        &#125;)      </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 首先从上图可以看到地图上多了网格，每一个网格对应的就是一个<strong>瓦片</strong>。</p><p>  其次网格中有三个数字，这些数字就表示当前<strong>瓦片</strong>的坐标：</p><ul><li>第一个数字是层级z</li><li>第二个数字是表示经度方向上的x（列号）</li><li>第三个数字是表示纬度方向上的y（行号）</li></ul><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>分辨率的简单定义是屏幕上的1像素表示的现实世界的地面实际距离。</p><p>上一节说到了金字塔瓦片结构中每一个层级，会使用不同数量的瓦片来表示整个地球，那么无论是哪一个层级，所表示的实际地理空间范围都是一致的，但使用的瓦片个数却是不一样的。</p><p>以Google在线地图为例，层级0使用了一个瓦片，层级1使用了4个瓦片。通过计算可以知道层级0的整个地球图像（瓦片）为256<em>256像素大小，层级1整个地球图像为512</em>512像素大小。而层级0和层级1表示的地球范围都是一样的（经度[-180°, 180°]，纬度[-90°, 90°]）。在层级0的时候，一个像素在水平方向就表示360°/256 = 1.40625°这么长的经度范围（以度为单位），在竖直方向就表示180°/256 = 0.703125°这么长的纬度范围（以度为单位）。而这两个数字就是分辨率了，即一个像素所表示的现实世界的范围是多少，这个范围可能是度（在地理坐标系统中），可能是米（在投影坐标系统中），或者其他单位，根据具体的情况而定。</p><h4 id="Web墨卡托投影坐标系中的分辨率"><a href="#Web墨卡托投影坐标系中的分辨率" class="headerlink" title="Web墨卡托投影坐标系中的分辨率"></a>Web墨卡托投影坐标系中的分辨率</h4><p>我们知道，在WebGIS中使用的在线瓦片地图是采用的Web墨卡托（Mercator）投影坐标系（可以查看这篇文章-墨卡托投影-来了解详细内容），经过投影后，整个地球是一个正方形，所能表示的地球范围为：</p><p><strong>经度[-180°, 180°]，纬度[-85°, 85°]，单位为度。</strong></p><p>对应的Web墨卡托坐标系的范围为：</p><p><strong>x[-20037508.3427892, 20037508.3427892]，范围y同样是[-20037508.3427892, 20037508.3427892]，单位为米。</strong></p><p>或许，你会好奇这个范围是怎么计算而来的，如果详细了解过它的定义，应该知道<strong>Web墨卡托投影只是简单的把地球球面剖开拉伸为一个正方形，由于南北极两端采用这种拉伸会严重变形，并且南北极在使用过程中很少用到，所以干脆就只投影了地球的[-85, 85]纬度范围。然后在经度-180度（或+180）的地方从上到下剖开地球，然后按照赤道方向来展开成一张平面，那么这个平面的边长，就等于以地球赤道半径按照圆来计算的周长</strong>。近似的按照6378137米为地球半径来计算，那么整个赤道周长的一半，即为：</p><p>π∗r=3.1415926∗6378137=20037508.0009862</p><p>以上就是Web墨卡托投影坐标系范围的完整的计算过程，墨卡托投影也有很多变形，会有细微的不同，OpenLayers默认使用的就是EPSG:3857（Web墨卡托投影坐标系），对于该坐标系的详细定义，可以参见epsg.io.3867。</p><p>有了范围之后，要想计算Web墨卡托投影坐标系中的分辨率，按照上面的计算过程就非常简单了，还是以Google在线瓦片地图为例，x、y方向上的各层级瓦片地图分辨率计算公式可以归纳为：</p><p>*<em>resolution = rang / (256 * 2^z)*</em></p><p>rang    ——    表示x方向或y方向上的整个范围，比如20037508.3427892 * 2。<br>256    ——    表示一个瓦片的边长，单位为像素。<br>2^z    ——    表示在层级z下，x或y方向上的瓦片个数。<br>那么整个公式计算出来就是在x或y方向，屏幕上一个像素所能代表的实际地理范围，即分辨率。</p><h4 id="OpenLayers默认使用的分辨率"><a href="#OpenLayers默认使用的分辨率" class="headerlink" title="OpenLayers默认使用的分辨率"></a>OpenLayers默认使用的分辨率</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152944.png" alt="image-20210922100134999"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>OpenLayers中默认的分辨率<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>当前地图等级:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&#x27;zoom&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>当前分辨率:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&#x27;resolution&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line">       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    map.getView().on(<span class="string">&#x27;change:resolution&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;zoom&#x27;</span>).innerHTML =  <span class="built_in">this</span>.getZoom() + <span class="string">&#x27;，&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;resolution&#x27;</span>).innerHTML = <span class="built_in">this</span>.getResolution();</span></span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;zoom&#x27;</span>).innerHTML = map.getView().getZoom() + <span class="string">&#x27;，&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;resolution&#x27;</span>).innerHTML = + map.getView().getResolution();</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缩放上面的地图，从层级0开始，用前面介绍的公式和当前地图显示的<strong>分辨率</strong>进行比较，你会发现OpenLayers默认采用的<strong>分辨率</strong>和<strong>Google在线瓦片地图</strong>一样。  </p><p>OpenLayers<strong>瓦片地图</strong>默认分辨率表（地面比例尺）：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152949.png" alt="img"></p><blockquote><p>注意事项</p></blockquote><p>为什么我们上面一直以<strong>Google在线瓦片地图</strong>举例说明？</p><p>因为不同的<strong>在线瓦片地图</strong>可能采用不一样的<strong>分辨率</strong>，比如<strong>百度在线瓦片地图</strong>。所以在使用<strong>在线瓦片地图</strong>或者自己制作的<strong>瓦片地图</strong>时，都需要知道使用的<strong>分辨率</strong>是多少。如若不然，可能也会出现位置偏移。</p><h3 id="使用XYZ方式加载瓦片数据"><a href="#使用XYZ方式加载瓦片数据" class="headerlink" title="使用XYZ方式加载瓦片数据"></a>使用XYZ方式加载瓦片数据</h3><h4 id="使用XYZ方式加载高德瓦片数据"><a href="#使用XYZ方式加载高德瓦片数据" class="headerlink" title="使用XYZ方式加载高德瓦片数据"></a>使用XYZ方式加载高德瓦片数据</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152954.png" alt="image-20210922103307387"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XYZ方式加载搞得瓦片数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">                    url:<span class="string">&#x27;http://webst0&#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span></span></span><br><span class="line">                &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line">       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目前高德的瓦片地址有如下两种：</p><ul><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7%E5%92%8C">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7和</a></li><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x={x}&amp;y={y}&amp;z={z}</a></li></ul><p>前者是高德的新版地址，后者是老版地址。</p><p>高德新版的参数：</p><ul><li>lang可以通过zh_cn设置中文，en设置英文；</li><li>size基本无作用；</li><li>scl设置标注还是底图，scl=1代表注记，scl=2代表底图（矢量或者影像）；</li><li>style设置影像和路网，style=6为影像图，style=7为矢量路网，style=8为影像路网。</li></ul><p>总结之：</p><ul><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7</a> 为矢量图（含路网、含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=7">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=7</a> 为矢量图（含路网，不含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=6">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=6</a> 为影像底图（不含路网，不含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=6">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=6</a> 为影像底图（不含路网、不含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=8">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=8</a> 为影像路图（含路网，含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=8">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=8</a> 为影像路网（含路网，不含注记）</li></ul><p>高德旧版可以通过style参数设置影像、矢量、路网。</p><p>总结之：</p><ul><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&amp;x={x}&amp;y={y}&amp;z={z}</a> 为影像底图（不含路网，不含注记）</li><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x={x}&amp;y={y}&amp;z={z}</a> 为矢量地图（含路网，含注记）</li><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=8&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=8&amp;x={x}&amp;y={y}&amp;z={z}</a> 为影像路网（含路网，含注记）</li></ul><h4 id="使用XYZ方式加载雅虎地图"><a href="#使用XYZ方式加载雅虎地图" class="headerlink" title="使用XYZ方式加载雅虎地图"></a>使用XYZ方式加载雅虎地图</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153000.png" alt="image-20210922104017162"></p><p>代码如下;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XYZ方式加载雅虎瓦片数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">              url:<span class="string">&#x27;https://&#123;0-3&#125;.base.maps.api.here.com/maptile/2.1/maptile/newest/normal.day/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;/512/png8?lg=ENG&amp;ppi=250&amp;token=TrLJuXVK62IQk0vuXFzaig%3D%3D&amp;requestid=yahoo.prod&amp;app_id=eAdkWGYRoc4RfxVo0Z4B&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              tileSize: <span class="number">512</span>               <span class="comment">// 设置对应的瓦片大小</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line">       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大同小异，非常简单。上面的三个例子，只有Yahoo地图的代码有点不一样：多了tileSize参数的设置。</p><p>默认情况下，tileSize为256，这也是现在绝大多数瓦片采用的大小。但Yahoo地图使用的是512，所以我们需要指定。</p><h3 id="OpenLayers修改瓦片坐标系及分辨率"><a href="#OpenLayers修改瓦片坐标系及分辨率" class="headerlink" title="OpenLayers修改瓦片坐标系及分辨率"></a>OpenLayers修改瓦片坐标系及分辨率</h3><p>前面的文章已经简单介绍了瓦片坐标系是瓦片地图的组织框架，现在我们来详细探讨OpenLayers中的瓦片坐标系，从而让我们在加载各种瓦片地图的过程中能得心应手。</p><h4 id="OpenLayers中定义瓦片坐标系的接口"><a href="#OpenLayers中定义瓦片坐标系的接口" class="headerlink" title="OpenLayers中定义瓦片坐标系的接口"></a>OpenLayers中定义瓦片坐标系的接口</h4><p>前面的文章介绍了使用ol.source.TileDebug类可以让我们清晰的看到每一个瓦片的坐标，我们来看一下TileDebug这个类的API文档：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153005.png" alt="img"></p><p>可以看到实例化类的参数中有一个tileGrid参数，这个参数就是用于指定ol.source.TileDebug的瓦片坐标系，而ol.tilegrid.TileGrid类就是瓦片坐标系的抽象表示，即在OpenLayers中就是用这个类来定义瓦片坐标系。</p><p>那我们就来看看ol.tilegrid.TileGrid类的API：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153009.png" alt="image-20210922105528937"></p><p>上面各个初始化类的参数分别表示：</p><ul><li>extent    ——    请求加载的瓦片的范围，不在这个范围内的瓦片不会被请求并加载。默认是全球范围</li><li>minZoom    ——    瓦片坐标系的最小层级，比minZoom更小层级的瓦片不会被请求并加载。</li><li>origin    ——    瓦片坐标系水平方向上的起始点（原点）。默认的原点为extent的左上角（top-left）。其中，瓦片坐标在x方向从左到右递增，在y方向从下到上递增。</li><li>origins    ——    瓦片坐标系各个层级的水平方向上的起始点（原点），即每个层级可以指定不同的水平方向上的原点。</li><li>resolutions    ——    瓦片坐标系各个层级的瓦片分辨率，即不同层级的瓦片的分辨率可以不同。</li><li>tileSize    ——    瓦片的大小。</li><li>tileSizes    ——    瓦片坐标系各个层级的瓦片大小，即不同层级的瓦片的大小可以不同。</li></ul><h4 id="自定义OpenLayers瓦片坐标系来加载百度地图"><a href="#自定义OpenLayers瓦片坐标系来加载百度地图" class="headerlink" title="自定义OpenLayers瓦片坐标系来加载百度地图"></a>自定义OpenLayers瓦片坐标系来加载百度地图</h4><p>前面一篇文章讲到可以使用XYZ的方式非常简单的加载瓦片地图，但遗憾地是，这种简单方法并不适用于所有的在线瓦片地图，总有一些是特殊的，比如百度地图。</p><p>瓦片地图加载的关键在于找对瓦片，但要找对瓦片，就得知道瓦片的坐标，而瓦片坐标又需要明确的瓦片坐标系。</p><p>通过前面的API文档，我们可以知道OpenLayer的默认瓦片坐标系的原点在左上角，从左到右为x轴正方向，从下到上为y轴正方向。</p><p>具体到地图上来讲，地球经过投影，投影到一个平面上，平面最左边对应地球最西边，平面最上边对应地球最北边。原点就处于整个平面的左上角，即地球的西北角，从北向南为y轴负方向，从西向东为x轴正方向。理解这一点非常重要，因为并不是所有在线的瓦片地图都是采用这样的瓦片坐标系。用OpenLayers加载它们的时候，如果瓦片坐标系不同，计算出来的瓦片地址就获取不到对应的瓦片，为解决这个问题，我们必须要先对瓦片坐标进行转换。</p><p>那么，具体该怎么实现转换？最详细明了的方式还是看实例，下面我们看一下加载百度地图的一种实现方式：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153014.png" alt="image-20210922110819191"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义瓦片坐标系加载百度地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// 百度地图图层</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> baiduMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">      source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">          tilePixelRatio: 2,</span><br><span class="line"><span class="javascript">          tileUrlFunction: <span class="function"><span class="keyword">function</span>(<span class="params">tileCoord</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> y = tileCoord[<span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 计算当前层级下X或Y方向上瓦片总数的一半，用于定位整个地图的中心点</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> halfTileNum = <span class="built_in">Math</span>.pow(<span class="number">2</span>, z - <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 原点从左上角移到中心点后，计算xy方向上新的坐标位置</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> baiduX = x - halfTileNum;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> baiduY = y + halfTileNum;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 百度瓦片服务url将负数使用M前缀来标识</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span>(baiduX &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                  baiduX = <span class="string">&#x27;M&#x27;</span> + (-baiduX);</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              <span class="keyword">if</span>(baiduY &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                  baiduY = <span class="string">&#x27;M&#x27;</span> + (-baiduY);</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              <span class="comment">// 返回经过转换后，对应于百度在线瓦片的url</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="string">&#x27;http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&#x27;</span> + baiduX + <span class="string">&#x27;&amp;y=&#x27;</span> + baiduY + <span class="string">&#x27;&amp;z=&#x27;</span> + z + <span class="string">&#x27;&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0&#x27;</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">      layers: [</span><br><span class="line">        baiduMapLayer</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">        center: ol.proj.fromLonLat([<span class="number">104.06</span>, <span class="number">30.67</span>]),  <span class="comment">// 设置成都为中心点</span></span></span><br><span class="line">        zoom: 4</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们需要理解一下<strong>tilePixelRatio</strong>参数，它表示瓦片服务使用的像素比，例如，<strong>如果瓦片服务发布256px * 256px的瓦片，但是实际发送的却是512px * 512px的图像，则tilePixelRatio需要设置为2</strong>。百度地图这个例子就是这个情况。</p><p>和前面几个加载在线瓦片地图的例子不一样的地方在于，我们没有设置url，而是设置了<strong>tileUrlFunction</strong>，这是一个<strong>获取瓦片url的函数</strong>。如果自定义这个函数，就可以实现不同瓦片坐标系之间的转换，从而返回在线地图服务对应的url。通过代码可以看到，函数参数是一个瓦片坐标，然后进行一系列的转换，得到百度在线地图的瓦片地址。</p><p>tileUrlFunction这个自定义函数的代码实现有可能看不懂，虽然知道在进行坐标转换，但并不知道为什么要这样实现。为了彻底弄明白代码，我们必须得把之前遗漏的一个重要环节补上：弄明白待加载的在线瓦片地图的坐标系。</p><p>对百度在线瓦片坐标系进行简单分析发现，<strong>它是以某一个位置为原点，向右为x正方向，向上为y正方向的瓦片坐标系。进一步分析发现，原点应该在中心位置</strong>，在此基础上编写函数tileUrlFunction的实现。halfTileNum表示的是在当前缩放层级之下，x方向或y方向的瓦片个数的一半，意味着它就是中心位置。对于baiduX小于0的情况，百度使用了M来表示负号，所以要特殊处理一下。想必这下应该更加理解代码实现了。不同的在线瓦片地图的转换代码可能不同，需要根据对应的瓦片坐标系来确定。</p><p>但上面这个地图并不完美，因为我们设定的地图中心为成都，然而实际上显示的地图中心并不在成都。虽然无缝拼接，但位置偏差有点远。由此基本可以排除坐标转换的问题，看起来应该是<strong>OpenLayers的分辨率和百度在线瓦片地图使用的分辨率对不上</strong>。经过分析发现，确实如此，在网上也有很多分析文章可以查询。那么我们是否可以重新定义分辨率呢？答案是肯定的。</p><p>我们可以通过自定义瓦片坐标系来修改分辨率：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153031.png" alt="image-20210922112704703"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义瓦片坐标系加载百度地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> resolutions = [];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> maxZoom = <span class="number">18</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="comment">// 计算百度使用的分辨率</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;=maxZoom; i++)&#123;</span></span><br><span class="line"><span class="javascript">            resolutions[i] = <span class="built_in">Math</span>.pow(<span class="number">2</span>, maxZoom-i);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tilegrid  = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span></span><br><span class="line"><span class="javascript">      origin: [<span class="number">0</span>, <span class="number">0</span>],                     <span class="comment">// 将原点设置成和百度瓦片坐标系一致</span></span></span><br><span class="line"><span class="javascript">      resolutions: resolutions            <span class="comment">// 设置分辨率</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">     <span class="comment">// 百度地图图层</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> baiduMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">      source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">          tilePixelRatio: 2,</span><br><span class="line">          tileGrid: tilegrid,</span><br><span class="line"><span class="javascript">          tileUrlFunction: <span class="function"><span class="keyword">function</span>(<span class="params">tileCoord</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> y = tileCoord[<span class="number">2</span>];</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">            <span class="comment">// 百度瓦片服务url将负数使用M前缀来标识</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                x = <span class="string">&#x27;M&#x27;</span> + (-x);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(y &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                y = <span class="string">&#x27;M&#x27;</span> + (-y);</span></span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"><span class="javascript">            <span class="comment">// 返回经过转换后，对应于百度在线瓦片的url</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&#x27;</span> + x + <span class="string">&#x27;&amp;y=&#x27;</span> + y + <span class="string">&#x27;&amp;z=&#x27;</span> + z + <span class="string">&#x27;&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0&#x27;</span>;</span></span><br><span class="line">                </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">      layers: [</span><br><span class="line">        baiduMapLayer</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">        center: ol.proj.fromLonLat([<span class="number">104.06</span>, <span class="number">30.67</span>]),  <span class="comment">// 设置成都为中心点</span></span></span><br><span class="line">        zoom: 10</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于将瓦片坐标系的原点设置成百度瓦片坐标系一致，所以tileUrlFunction里就不需要对针对原点进行瓦片坐标的转换操作了。</p><h4 id="分析瓦片地图的瓦片坐标系"><a href="#分析瓦片地图的瓦片坐标系" class="headerlink" title="分析瓦片地图的瓦片坐标系"></a>分析瓦片地图的瓦片坐标系</h4><p>如何分析不同在线瓦片地图的瓦片坐标系呢？非常重要的一点是，先从特例触发，找简单的情况分析，比如选择z为2或者3进行分析，这种情况下，瓦片的数量比较少，可以查看整个地球范围内的地图的瓦片请求，注意分析其请求的url参数。</p><p>瓦片的url解析对于想直接使用在线瓦片服务的开发者而言，是一项经常要做的事。根据难度，大致可以分为三种情况：</p><ul><li>第一种情况最简单，请求瓦片的url明确有xyz参数，比如高德地图和百度地图。</li><li>第二种稍微难一点，xyz作为路径直接存在url里面，没有明确的参数表明哪些是xyz，比如Open Street Map和Yahoo地图，这种情况下，地图服务器收到请求后，就直接在服务器按照这个路径获取图片，按照这个逻辑，一般第一个参数表示是z，第二个参数为x，第三个参数为y。要想确认是否真是这样，可以写一个小程序来验证一下，如果还有问题，建议按照上面分析地图坐标系中的方法，从z比较小的情况入手来分析x、y、z的位置。</li><li>第三种则最难，地图服务提供商为了防止大家直接非法使用瓦片地图，对瓦片的url进行了加密，比如现在的微软Bing中文地图和Google地图，这种情况下只有知道如何解密才能使用。</li></ul><p>前面两种url的实例已经有了，此处分享一下第三种情况的url解密，以微软Bing中文地图为例：</p><h5 id="加载微软bing中文地图"><a href="#加载微软bing中文地图" class="headerlink" title="加载微软bing中文地图"></a>加载微软bing中文地图</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153047.png" alt="image-20210922140215783"></h5><p>图中显示的瓦片地图请求的url，没有明显的xyz参数，最有可能的存放xyz参数的地方在于url前面那一串数字，真实情况确实是这样的，经过分析和解码，最终实现了加载Bing中文地图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153053.png" alt="image-20210922140618088"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载Bing中文地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">         target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">         layers: [</span><br><span class="line"><span class="javascript">             <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">                 source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">                     tileUrlFunction: <span class="function"><span class="keyword">function</span>(<span class="params">tileCoord</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> y = -tileCoord[<span class="number">2</span>] - <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> result=<span class="string">&#x27;&#x27;</span>, zIndex=<span class="number">0</span>;</span></span><br><span class="line">                 </span><br><span class="line"><span class="javascript">                         <span class="keyword">for</span>(zIndex = <span class="number">0</span>; zIndex &lt; z; zIndex++) &#123;</span></span><br><span class="line">                             result = ((x &amp; 1) + 2 * (y &amp; 1)).toString() + result;</span><br><span class="line">                             x &gt;&gt;= 1;</span><br><span class="line">                             y &gt;&gt;= 1;</span><br><span class="line">                         &#125;</span><br><span class="line"><span class="javascript">                         <span class="keyword">return</span> <span class="string">&#x27;http://dynamic.t0.tiles.ditu.live.com/comp/ch/&#x27;</span> + result + <span class="string">&#x27;?it=G,VE,BX,L,LA&amp;mkt=zh-cn,syr&amp;n=z&amp;og=111&amp;ur=CN&#x27;</span>;</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;)</span><br><span class="line">             &#125;)</span><br><span class="line">         ],</span><br><span class="line"><span class="javascript">         view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">             center: [0, 0],</span><br><span class="line">             zoom: 3</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是地图数据是非常昂贵的，如果使用某一个在线地图服务，请先核实对方的版权和数据使用申明，不要侵犯对方的权益，按照要求合法使用地图。几乎所有的在线地图服务都提供了响应的服务接口，强烈建议在商用项目中使用这些接口。对于这些接口的使用，服务商都有详细的说明，在此不赘述。</p><h5 id="加载Google中文地图"><a href="#加载Google中文地图" class="headerlink" title="加载Google中文地图"></a>加载Google中文地图</h5><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载Google中文地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">&#x27;http://www.google.cn/maps/vt/pb=!1m4!1m3!1i&#123;z&#125;!2i&#123;x&#125;!3i&#123;y&#125;!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0&#x27;</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">        center: [0, 0],</span><br><span class="line">        zoom: 3</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没爬墙的话，是访问不通的。</p><h3 id="可重用数据源"><a href="#可重用数据源" class="headerlink" title="可重用数据源"></a>可重用数据源</h3><p>这个示例展示如何更新地图中的瓦片。</p><p>可以调用*<strong>*source.setUrl()**</strong>来更新瓦片地图源的URL，请注意，当更改瓦片地图源的URL时，在加载完新的瓦片之前，将不会替换现有的瓦片。</p><p>如果想要清除当前呈现的瓦片，则可以调用source.refresh()方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>可重用数据源<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>January<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>January (with bathymetry)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>July<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>July (With bathymetry)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 有mapbox瓦片地图url组成的数组</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> urls = [</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-jan/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-bathy-jan/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-jul/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-bathy-jul/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span></span></span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 瓦片地图源</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> source = <span class="keyword">new</span> ol.source.XYZ();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">          target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">          layers: [</span><br><span class="line"><span class="javascript">              <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line">                  source: source</span><br><span class="line">              &#125;)</span><br><span class="line">          ],</span><br><span class="line"><span class="javascript">          view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">              center: [0, 0],</span><br><span class="line">              zoom: 2</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">updateUrl</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          source.setUrl(urls[index]);     <span class="comment">// 改变瓦片地图源的url</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> buttons = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;switcher&#x27;</span>);  </span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = buttons.length; i &lt; len; i++)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> button = buttons[i];</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 让瓦片地图的url随用户点击按钮而变化</span></span></span><br><span class="line"><span class="javascript">          button.addEventListener(<span class="string">&#x27;click&#x27;</span>, updateUrl.bind(<span class="literal">null</span>, <span class="built_in">Number</span>(button.value)));</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      updateUrl(<span class="number">0</span>);       <span class="comment">// 先预设置瓦片地图</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="矢量地图"><a href="#矢量地图" class="headerlink" title="矢量地图"></a>矢量地图</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>前面介绍的瓦片地图将地理信息以一块块瓦片的形式进行组织并渲染，瓦片的本质是图片，因此不能对瓦片地图进行修改样式、空间分析等操作，而且瓦片不包含属性信息，隐含的空间信息也不能直接获取使用。</p><p>矢量数据使用矢量数据模型来组织地理信息，矢量数据模型采用离散对象来表示地球表面的空间要素，因此，简单来说，矢量数据包含了各个地理要素的空间坐标与属性信息，这使我们能对地理信息进行细粒度的使用与操作。</p><p>常用的矢量数据格式有GeoJSON、TopoJSON、KML、GML、shapfile等等。</p><p>在WebGIS中，使用矢量数据构成的地图被称为矢量地图，矢量地图的原理就是将包含坐标信息与属性信息的矢量数据发送到客户端，然后由客户端负责绘制矢量图层。</p><p>响应速度与交互性是矢量地图的优点，一旦从服务器获得了矢量数据，Web地图用户与数据的交互就会非常迅速，不会有任何延迟。另外，矢量图形无论进行放大、缩小或旋转等操作，图形都不会失真。</p><p>矢量地图的缺点是不能同时绘制成百上千个要素，因为矢量地图的主要操作都在客户端，所以数据量变大，客户端就会卡、慢，甚至可能崩溃。</p><h4 id="在OpenLaters中直接组织矢量数据"><a href="#在OpenLaters中直接组织矢量数据" class="headerlink" title="在OpenLaters中直接组织矢量数据"></a>在OpenLaters中直接组织矢量数据</h4><p>在OpenLayers中，ol.source.Vector是矢量数据源基类，为矢量图层ol.layer.Vector类提供具体的数据来源，包括直接组织或读取的矢量数据（ol.Feature）、远程数据源的矢量数据（即通过url设置数据源路径）等。</p><p>现在我们来尝试直接在OpenLayers中组织矢量数据然后构建矢量地图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153102.png" alt="image-20210922143316507"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>直接组织矢量数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初始化一个点要素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pointFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">12958998</span>, <span class="number">4852221</span>]),       <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;点要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个线要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lineFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.LineString([[<span class="number">11590147</span>, <span class="number">4322577</span>], [<span class="number">13594369</span>, <span class="number">3872784</span>]]),  </span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;线要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个多边形要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> polygonFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Polygon([[[<span class="number">11801814</span>, <span class="number">3251012</span>], [<span class="number">14057391</span>, <span class="number">2748303</span>], [<span class="number">12714628</span>, <span class="number">1346008</span>], [<span class="number">11801814</span>, <span class="number">3251012</span>]]]),</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;多边形要素&#x27;</span>              <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量数据源, 并添加上面创建的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector();</span></span><br><span class="line">      vectorSource.addFeature(pointFeature);</span><br><span class="line">      vectorSource.addFeature(lineFeature);</span><br><span class="line">      vectorSource.addFeature(polygonFeature);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">          source: vectorSource</span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">          target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">          layers: [</span><br><span class="line"><span class="javascript">              <span class="keyword">new</span> ol.layer.Tile(&#123;             <span class="comment">// 底图</span></span></span><br><span class="line"><span class="javascript">                  source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">              &#125;),</span><br><span class="line">              vectorLayer</span><br><span class="line">          ],</span><br><span class="line"><span class="javascript">          view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">              center: [0, 0],</span><br><span class="line">              zoom: 0</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在OpenLayers中，使用ol.Feature类表示地理要素，一个Feature对象就表示一个地理要素。</p><p>其中，Feature对象可以包含空间信息与属性信息，在上面的示例中，Feature对象的空间信息分别通过ol.geom.Point类、ol.geom.LineString类、ol.geom.Polygon类来组织，然后再赋值给geometry参数。另外，name参数作为一个属性信息也被包含在Feature对象中。</p><p>构建了三个地理要素后，再把它们分别通过ol.source.Vector类的addFeature()方法加入到ol.source.Vector对象中，最后再通过ol.layer.Tile类构成矢量图层并一起加入到地图中。</p><p>除了直接构建，还可以通过url请求矢量数据源</p><h4 id="url请求矢量数据"><a href="#url请求矢量数据" class="headerlink" title="url请求矢量数据"></a>url请求矢量数据</h4><p>读取url设置的矢量数据源，需要通过解析器Format（即ol.format.Feature的子类）来解析各类矢量数据，如XML、Text、JSON、GML、KML、GPS、WFS、WKT、GeoJSON等地图数据。</p><p>解析器相关类的类结构图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922144624.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>url请求矢量数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">            target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">            layers: [</span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> ol.layer.Tile(&#123;             <span class="comment">// 底图</span></span></span><br><span class="line"><span class="javascript">                    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">                &#125;),</span><br><span class="line"><span class="javascript">                <span class="comment">// 再加载一个geojson的矢量地图</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="javascript">                    source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="javascript">                        url: <span class="string">&#x27;line.geojson&#x27;</span>,                <span class="comment">// 矢量数据来源</span></span></span><br><span class="line"><span class="javascript">                        format: <span class="keyword">new</span> ol.format.GeoJSON()                 <span class="comment">// 解析矢量数据的解析器</span></span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            ],</span><br><span class="line"><span class="javascript">            view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">                center: [0, 0],</span><br><span class="line">                zoom: 0</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922145958.png" alt="image-20210922145957173"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>样式设置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初始化一个点要素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pointFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">12958998</span>, <span class="number">4852221</span>]),       <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;点要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个线要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lineFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.LineString([[<span class="number">11590147</span>, <span class="number">4322577</span>], [<span class="number">13594369</span>, <span class="number">3872784</span>]]),  </span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;线要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个多边形要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> polygonFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Polygon([[[<span class="number">11801814</span>, <span class="number">3251012</span>], [<span class="number">14057391</span>, <span class="number">2748303</span>], [<span class="number">12714628</span>, <span class="number">1346008</span>], [<span class="number">11801814</span>, <span class="number">3251012</span>]]]),</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;多边形要素&#x27;</span>              <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量数据源, 并添加上面创建的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector();</span></span><br><span class="line">      vectorSource.addFeature(pointFeature);</span><br><span class="line">      vectorSource.addFeature(lineFeature);</span><br><span class="line">      vectorSource.addFeature(polygonFeature);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">          source: vectorSource,</span><br><span class="line"><span class="javascript">          style: <span class="keyword">new</span> ol.style.Style(&#123;                            <span class="comment">// 自定义矢量地图样式</span></span></span><br><span class="line"><span class="javascript">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="javascript">                color: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line">                width: 5</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">          target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">          layers: [</span><br><span class="line"><span class="javascript">              <span class="keyword">new</span> ol.layer.Tile(&#123;             <span class="comment">// 底图</span></span></span><br><span class="line"><span class="javascript">                  source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">              &#125;),</span><br><span class="line">              vectorLayer</span><br><span class="line">          ],</span><br><span class="line"><span class="javascript">          view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">              center: [0, 0],</span><br><span class="line">              zoom: 0</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要在feature上设置样式，就必须先获取到所有加载的feature，然后依次设置，显然直接设置layer的样式，会在代码编写上更容易一些。</p><p>自带样式的矢量地图修改样式</p><p>有些矢量地图数据自带样式，比如KML格式的矢量地图，如果要修改样式，则相对比较麻烦。得分情况考虑：</p><ul><li>一种是所有矢量地图都不使用自带的样式：</li></ul><ul><li>一种是部分矢量地图不使用自带的样式。</li></ul><p>对于第一种情况，则相对比较简单一点，只需要把ol.format.KML的构造参数extractStyles设置为false即可，然后为layer设定自定义的样式。</p><p>对于第二种情况，则相对麻烦一些，必须要读取加载的所有feature，并进行过滤，对符合条件的feature重新设置样式。</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><a href="https://segmentfault.com/a/1190000020297846">参考文章</a></p><h2 id="map（地图）"><a href="#map（地图）" class="headerlink" title="map（地图）"></a>map（地图）</h2><h3 id="创建基本地图"><a href="#创建基本地图" class="headerlink" title="创建基本地图"></a>创建基本地图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    target: <span class="string">&#x27;map&#x27;</span>,<span class="comment">//对象指向</span></span><br><span class="line">    layers: [<span class="comment">//图层</span></span><br><span class="line">      <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="comment">//这里定义的是平铺图层</span></span><br><span class="line">        source: <span class="keyword">new</span> ol.source.OSM()<span class="comment">//图层源 定义图层映射协议</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    view: <span class="keyword">new</span> ol.View(&#123;<span class="comment">//视图</span></span><br><span class="line">      center: ol.proj.fromLonLat([<span class="number">37.41</span>, <span class="number">8.82</span>]),<span class="comment">//地图中心</span></span><br><span class="line">      zoom: <span class="number">4</span><span class="comment">//缩放层级</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="属性选项"><a href="#属性选项" class="headerlink" title="属性选项"></a>属性选项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    target: <span class="string">&#x27;map&#x27;</span>,<span class="comment">//对象映射：要将`map`对象附加到div，` map`对象将`target`作为参数，值是`div`的`id`</span></span><br><span class="line">    layers: [<span class="comment">//图层</span></span><br><span class="line">      <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="comment">//这里定义的是平铺图层</span></span><br><span class="line">        source: <span class="keyword">new</span> ol.source.OSM()<span class="comment">//图层源 定义图层映射协议</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    view: <span class="keyword">new</span> ol.View(&#123;<span class="comment">//视图</span></span><br><span class="line">      center: ol.proj.fromLonLat([<span class="number">37.41</span>, <span class="number">8.82</span>]),<span class="comment">//地图中心</span></span><br><span class="line">      zoom: <span class="number">4</span><span class="comment">//缩放层级</span></span><br><span class="line">    &#125;),</span><br><span class="line">    controls:[<span class="comment">//最初添加到映射中的控件  如未设置 使用默认控件</span></span><br><span class="line">        <span class="keyword">new</span> ol.control.Control(&#123;</span><br><span class="line">            element:,<span class="comment">//元素是控件的容器元素(DOM)。只有在开发自定义控件时才需要指定这一点</span></span><br><span class="line">            render: ,<span class="comment">//控件重新呈现时调用的函数</span></span><br><span class="line">            target: <span class="comment">//如果想在映射的视图端口之外呈现控件，指定目标</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    interactions:[<span class="comment">//最初添加到映射中的交互 如未设置 使用默认交互</span></span><br><span class="line">        <span class="keyword">new</span> ol.interaction.Interaction(&#123;</span><br><span class="line">            handleEvent</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    overlays:[</span><br><span class="line">        <span class="keyword">new</span> ol.Overlay()</span><br><span class="line">    ],</span><br><span class="line">    maxTilesLoading:<span class="number">16</span>,<span class="comment">//同时加载的最大瓷砖数 默认16</span></span><br><span class="line">    loadTilesWhileAnimating:<span class="literal">false</span>,<span class="comment">//</span></span><br><span class="line">    loadTilesWhileInteracting:<span class="literal">false</span>,<span class="comment">//   </span></span><br><span class="line">    moveTolerance:<span class="number">1</span>,<span class="comment">//光标必须移动的最小距离(以像素为单位)才能被检测为map move事件，而不是单击。增加这个值可以使单击地图变得更容易</span></span><br><span class="line">    pixelRatio:<span class="built_in">window</span>.devicePixelRatio,<span class="comment">//</span></span><br><span class="line">    keyboardEventTarget:,<span class="comment">//要监听键盘事件的元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="地图事件"><a href="#地图事件" class="headerlink" title="地图事件"></a>地图事件</h3><table><thead><tr><th>地图事件</th><th>含义</th></tr></thead><tbody><tr><td>click</td><td>无拖动单击</td></tr><tr><td>dblclick</td><td>无拖动双击</td></tr><tr><td>moveend</td><td>移动地图结束时</td></tr><tr><td>movestart</td><td>移动地图开始时</td></tr><tr><td>pointerdrag</td><td>当拖动指针时触发</td></tr><tr><td>pointermove</td><td>当指针移动时触发。注意，在触摸设备上，这是在地图平移时触发的，因此与<code>mousemove</code>不同</td></tr><tr><td>postcompose</td><td></td></tr><tr><td>postrender</td><td>在映射帧呈现后触发</td></tr><tr><td>precompose</td><td></td></tr><tr><td>propertychange</td><td>当属性被更改时触发</td></tr><tr><td>rendercomplete</td><td>渲染完成时触发，即当前视图的所有源和tile都已加载完毕，所有tile都将淡出</td></tr><tr><td>singleclick</td><td>一个真正的无拖放和无双击的单击。注意，这个事件被延迟了250毫秒，以确保它不是双击</td></tr></tbody></table><h3 id="map的方法"><a href="#map的方法" class="headerlink" title="map的方法"></a>map的方法</h3><table><thead><tr><th>地图方法</th><th>功能</th></tr></thead><tbody><tr><td>addControl(control)</td><td>将给定的控件添加到地图中</td></tr><tr><td>removeControl(control)</td><td>从地图中移除已给定的控件</td></tr><tr><td>addInteraction(interaction)</td><td>将给定的交互添加到地图中</td></tr><tr><td>removeInteraction(interaction)</td><td>从地图中移除已给定的交互</td></tr><tr><td>addLayer(layer)</td><td>将给定的图层添加到地图的顶部</td></tr><tr><td>removeLayer(layer)</td><td>从地图中移除已给定的图层</td></tr><tr><td>addOverlay(overlay)</td><td>将给定的叠加层添加到地图中</td></tr><tr><td>removeOverlay(overlay)</td><td>从地图中移除已给定的叠加层</td></tr><tr><td>forEachFeatureAtPixel(pixel, callback, opt_options)</td><td>检测与视图端口上的像素相交的特性，并对每个相交的特性执行回调。检测中包含的层可以通过<code>opt_options</code>中的<code>layerFilter</code>选项配置</td></tr><tr><td>forEachLayerAtPixel(pixel, callback, opt_options)</td><td>检测在视图端口上的像素处具有颜色值的层，并对每个匹配的层执行回调。检测中包含的层可以通过<code>opt_layerFilter</code>配置</td></tr><tr><td>getControls()</td><td>获取地图控件</td></tr><tr><td>getCoordinateFromPixel(pixel)</td><td>获取给定像素的坐标。这将返回地图视图投影中的坐标。</td></tr><tr><td>getEventCoordinate(event)</td><td>返回浏览器事件的视图投影中的坐标</td></tr><tr><td>getEventPixel(event)</td><td>返回浏览器事件相对于视图端口的地图像素位置</td></tr><tr><td>getFeaturesAtPixel(pixel, opt_options)</td><td>获取视图端口上与像素相交的所有特性</td></tr><tr><td>getInteractions()</td><td>获取地图交互</td></tr><tr><td>getLayerGroup()</td><td>获取与此地图关联的图层组</td></tr><tr><td>setLayerGroup(layerGroup)</td><td>设置与此地图关联的图层组</td></tr><tr><td>getLayers()</td><td>获取与此地图关联的图层的集合</td></tr><tr><td>getOverlayById(id)</td><td>通过其标识符获取覆盖(<code>overlay. getId()</code>返回的值)。注意，索引将字符串和数字标识符视为相同的。<code>getoverlaybyid(2)</code>将返回id为2或2的叠加层。</td></tr><tr><td>getOverlays()</td><td>获得地图叠加</td></tr><tr><td>getPixelFromCoordinate(coordinate)</td><td>获取坐标的像素。它接受地图视图投影中的坐标并返回相应的像素</td></tr><tr><td>getSize()</td><td>获取地图尺寸</td></tr><tr><td>setSize(size)</td><td>设置地图尺寸</td></tr><tr><td>getTarget()</td><td>获取呈现此映射的目标。注意，这将返回作为选项或<code>setTarget</code>中输入的内容。如果这是一个元素，它将返回一个元素;如果是字符串，它会返回这个字符串</td></tr><tr><td>getTargetElement()</td><td>获取呈现此映射的<code>DOM</code>元素。与<code>getTarget</code>相反，这个方法总是返回一个元素，如果映射没有目标，则返回<code>null</code></td></tr><tr><td>getView()</td><td>获取地图视图。视图管理中心和分辨率等属性。</td></tr><tr><td>setView(view)</td><td>设置地图视图</td></tr><tr><td>getViewport()</td><td>获取作为<code>map</code>视图端口的元素</td></tr><tr><td>hasFeatureAtPixel(pixel, opt_options)</td><td>检测在<code>viewport</code>上是否与一个像素相交。可以通过<code>opt_layerFilter</code>配置在检测中包含的层。</td></tr></tbody></table><h2 id="Layers（图层）"><a href="#Layers（图层）" class="headerlink" title="Layers（图层）"></a>Layers（图层）</h2><p>定义图层：地图图层<code>layers:[...]</code>组定义映射中可用的图层组，用来盛放地图上的各种元素，其在地图上的显示顺序是按照数组中元素序列从下到上呈现的，可以直接在创建地图时定义图层，多个图层的时候可以单独定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;<span class="comment">//这里定义的是图层类型(Image/Title/Vector)</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.Vector(),<span class="comment">//矢量图层源  源是用于获取映射块的协议【必须】</span></span><br><span class="line">    style:[],<span class="comment">//图层样式 【必须】</span></span><br><span class="line">    feature:[],<span class="comment">//图层元素 【必须】</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>添加指定图层：<code>map.addLayer(layer)</code>；</li><li>移除指定图层：<code>map.removeLayer(layer)</code>；</li></ul><p>图层是轻量级容器，从数据源<code>Source</code>获取数据。</p><p><code>Source</code>d子类分别有，分别对应不同图层类：</p><ul><li><code>ol.source.ImageSource()</code></li><li><code>ol.source.TileSource()</code></li><li><code>ol.source.VectorSource()</code></li></ul><p><code>Source</code>主要有以下属性选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.source.VectorSource(&#123;</span><br><span class="line">    attributions:,<span class="comment">//</span></span><br><span class="line">    attributionsCollapsible:,<span class="comment">//布尔值  默认为true </span></span><br><span class="line">    projection:,<span class="comment">//投影系</span></span><br><span class="line">    state:<span class="string">&#x27;ready&#x27;</span>,<span class="comment">//默认为&#x27;ready&#x27;</span></span><br><span class="line">    wrapX:<span class="literal">false</span>,<span class="comment">//默认为false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>ol.layer.Tile()</code>和<code>ol.layer.Image()</code>图层类都具有相同的属性如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.layer.Tile/Image(&#123;<span class="comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span></span><br><span class="line">    opacity:<span class="number">2</span>,<span class="comment">//透明度 区间范围为(0, 1) 默认为1</span></span><br><span class="line">    visible:<span class="literal">true</span>,<span class="comment">//显示属性 布尔值 默认为true</span></span><br><span class="line">    extent:[],<span class="comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span></span><br><span class="line">    zIndex:<span class="number">2</span>,<span class="comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span></span><br><span class="line">    minResolution:<span class="number">3</span>,<span class="comment">//该层可见的最小分辨率(包括在内)</span></span><br><span class="line">    maxResolution:<span class="number">6</span>,<span class="comment">//该层可见的最大分辨率（包括在内）</span></span><br><span class="line">    repload:<span class="number">0</span>,<span class="comment">//预加载。将低分辨率瓦片加载到预加载级别。0表示没有预加载 默认为0</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.TileSource()/ImageSource(),<span class="comment">//图层源</span></span><br><span class="line">    map:  ,<span class="comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-ol-layer-Tile"><a href="#1-ol-layer-Tile" class="headerlink" title="(1)ol.layer.Tile()"></a>(1)<code>ol.layer.Tile()</code></h3><p>平铺图层。</p><p>对于提供预呈现、平铺的网格图像的层源，这些网格按特定分辨率的缩放级别组织。</p><h3 id="2-ol-layer-Image"><a href="#2-ol-layer-Image" class="headerlink" title="(2)ol.layer.Image()"></a>(2)<code>ol.layer.Image()</code></h3><p>图像图层。</p><p>服务器呈现的映像，可用于任意范围和分辨率。</p><h3 id="3-ol-layer-Vector"><a href="#3-ol-layer-Vector" class="headerlink" title="(3)ol.layer.Vector()"></a>(3)<code>ol.layer.Vector()</code></h3><p>矢量图层。</p><p>在客户端呈现矢量数据，其属性具备<code>getter</code>和<code>setter</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.layer.Vector(&#123;<span class="comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span></span><br><span class="line">    opacity:<span class="number">2</span>,<span class="comment">//透明度 区间范围为(0, 1) 默认为1</span></span><br><span class="line">    visible:<span class="literal">true</span>,<span class="comment">//显示属性 布尔值 默认为true</span></span><br><span class="line">    extent:[],<span class="comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span></span><br><span class="line">    zIndex:<span class="number">2</span>,<span class="comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span></span><br><span class="line">    minResolution:<span class="number">3</span>,<span class="comment">//该层可见的最小分辨率(包括在内)</span></span><br><span class="line">    maxResolution:<span class="number">6</span>,<span class="comment">//该层可见的最大分辨率（包括在内）</span></span><br><span class="line">    renderOrder:,<span class="comment">//呈现顺序。函数用于在呈现前对特性进行排序。默认情况下，特性是按照创建它们的顺序绘制的。使用null来避免排序，但是得到一个未定义的绘制顺序</span></span><br><span class="line">    renderBuffer:<span class="number">100</span>,<span class="comment">//默认为100 缓冲区</span></span><br><span class="line">    renderMode:<span class="string">&#x27;vector&#x27;</span>,<span class="comment">//默认为&#x27;vector&#x27; 矢量图层的渲染模式</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.VectorSource(),<span class="comment">//图层源</span></span><br><span class="line">    map:  ,<span class="comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用</span></span><br><span class="line">    declutter:<span class="literal">false</span>,<span class="comment">//默认为false 整理图片和文字。清理应用于所有图像和文本样式，优先级由样式的z-index定义。z-index指数越低，优先级越高</span></span><br><span class="line">    style:<span class="keyword">new</span> ol.style.Style(),<span class="comment">//图层样式</span></span><br><span class="line">    updateWhileAnimating:<span class="literal">false</span>,<span class="comment">//默认为false </span></span><br><span class="line">    updateWhileInteracting:<span class="literal">false</span>,<span class="comment">//默认为false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中渲染模式有两种：</p><ul><li><code>&#39;image&#39;</code>：矢量图层被渲染为图像。性能很好，但是点符号和文本总是随着视图旋转，像素在缩放动画中缩放</li><li><code>&#39;vector&#39;</code>：矢量图层被呈现为向量。即使在动画期间也有最准确的渲染，但性能较慢</li></ul><h4 id="1-Feature"><a href="#1-Feature" class="headerlink" title="1)Feature"></a>1)Feature</h4><p>用于地理特征的矢量元素，具有几何<code>geometry()</code>和其他属性，类似于矢量文件格式(如<code>GeoJSON</code>)中的特性。</p><ul><li>添加矢量元素：通过<code>vectorsource().addFeature(feature)</code>添加到矢量图层上。</li><li>移除图层所有的矢量元素：<code>vectorsource().clear()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">  geometry: <span class="keyword">new</span> ol.geom.Polygon(polyCoords),</span><br><span class="line">  labelPoint: <span class="keyword">new</span> ol.geom.Point(labelCoords),</span><br><span class="line">  style:<span class="keyword">new</span> ol.style.Style(&#123;&#125;),</span><br><span class="line">  name: <span class="string">&#x27;My Polygon&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>定义矢量元素：<code>new ol.Feature()</code>，；</p></li><li><p>矢量元素样式：</p><ul><li>设置样式：<code>new ol.style.Style()</code>，也可以使用<code>feature.setStyle(style)</code>，未定义的话，可以使用它的盛放容器<code>layer</code>的样式；</li><li>获取样式：<code>feature.getStyle()</code></li></ul></li><li><p>一个<code>feature</code>只有一个默认几何属性<code>geometry</code>，可以有任意数量的命名几何图形：</p><ul><li>获取默认几何属性：<code>feature.getGeometry()</code>；</li><li>设置几何属性：<code>feature.setGeometry(geometry)</code>；</li><li>设置几何属性名：<code>feature.setGeometryName(name)</code>；</li><li>矢量元素要呈现的几何图形的特征属性、几何图形或函数由<code>geometry</code>属性选项设定，主要有以下几种子类模块：<ul><li><code>ol.geom.Circle()</code>：圆形</li><li><code>ol.geom.Geometry()</code>：几何图形</li><li><code>ol.geom.GeometryCollection()</code>：</li><li><code>ol.geom.LinearRing()</code>：环线</li><li><code>ol.geom.LineString()</code>：线段</li><li><code>ol.geom.Point()</code>：点</li><li><code>ol.geom.Polygon()</code>：多边形</li><li><code>ol.geom.MultiLineString()</code></li><li><code>ol.geom.MultiPoint()</code></li><li><code>ol.geom.MultiPolygon()</code></li><li><code>ol.geom.SimpleGeometry()</code></li></ul></li></ul></li><li><p><code>feature</code>的稳定标识符<code>ID</code>：</p><ul><li>设置<code>feature</code>的<code>id</code>：<code>feature.setId(id)</code>，当<code>id</code>可能相同时，可以这样加以区分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature.setId(id + <span class="string">&quot;featureName&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>获取<code>feature</code>的<code>id</code>：<code>vector.getSource().getFeatureById()</code>或者<code>vectorsource().getFeatureById()</code></li></ul></li><li><p><code>feature</code>的<code>set(key, value, opt_silent)</code>：</p><ul><li>设置<code>key</code>：<code>feature.set(&quot;keyName&quot;,name)</code>，<code>keyName</code>是字符串，自己根据情况设置</li><li>获取<code>key</code>：之前设置的什么，就获取什么，<code>feature.get(&quot;keyName&quot;)</code>，会得到设置的值</li></ul></li></ul><h4 id="2-Style"><a href="#2-Style" class="headerlink" title="2)Style"></a>2)Style</h4><p>矢量特征呈现样式的容器。在重新呈现使用样式的特性或图层之前，通过<code>set*()</code>方法对样式及其子元素所做的任何更改都不会生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    geometry:<span class="keyword">new</span> ol.geom.LineString(),<span class="comment">//有以上ol.geom模块的几何图形可以参考</span></span><br><span class="line">    fill:<span class="keyword">new</span> ol.style.Fill(&#123;<span class="comment">//填充样式</span></span><br><span class="line">        color:color<span class="comment">//颜色、渐变或图案</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    image:<span class="keyword">new</span> ol.style.Image(&#123;<span class="comment">//图像</span></span><br><span class="line">        opacity:,<span class="comment">//数值</span></span><br><span class="line">        rotateWithView:,<span class="comment">//布尔值</span></span><br><span class="line">        rotation:,<span class="comment">//数值</span></span><br><span class="line">        scale:<span class="comment">//数值</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    image:<span class="keyword">new</span> ol.style.Icon(&#123;<span class="comment">//可以使用图片资源</span></span><br><span class="line">        anchor:[<span class="number">0.5</span>，<span class="number">0.5</span>]，<span class="comment">//锚。默认值是图标中心 默认值是[0.5,0.5]</span></span><br><span class="line">        anchorOrigin:<span class="string">&#x27;top-left&#x27;</span>,<span class="comment">//锚的原点:左下角、右下角、左上方或右上方。默认是左上</span></span><br><span class="line">        anchorXUnits:<span class="string">&#x27;fraction&#x27;</span>,<span class="comment">//指定锚点x值的单位。&#x27;fraction&#x27;的值表示x值是图标的&#x27;fraction&#x27;。&#x27;pixels&#x27;的值表示像素中的x值,默认为&#x27;fraction&#x27;</span></span><br><span class="line">        anchorYUnits:<span class="string">&#x27;fraction&#x27;</span>,<span class="comment">//指定锚点y值的单位。&#x27;fraction&#x27;的值表示y值是图标的&#x27;fraction&#x27;。&#x27;pixels&#x27;的值表示像素中的y值,默认为&#x27;fraction&#x27;</span></span><br><span class="line">        color:color,<span class="comment">//颜色、渐变或图案</span></span><br><span class="line">        crossOrigin:,</span><br><span class="line">        img:,<span class="comment">//图标的图像对象  如果没有提供src选项，则必须已经加载了提供的图像</span></span><br><span class="line">        imgSize:,<span class="comment">//</span></span><br><span class="line">        offset:[<span class="number">0</span>,<span class="number">0</span>].<span class="comment">//偏移值，默认为[0,0]</span></span><br><span class="line">        offsetOrigin:<span class="string">&#x27;top-left&#x27;</span>,<span class="comment">//偏移量的原点，bottom-left, bottom-right, top-left or top-right. 默认是`top-left`</span></span><br><span class="line">        opacity:<span class="number">1</span>,<span class="comment">//默认是1  （0，1）</span></span><br><span class="line">        scale:<span class="number">1</span>,<span class="comment">//默认是1</span></span><br><span class="line">        rotation：<span class="number">0</span>，<span class="comment">//以弧度旋转(顺时针方向正旋转) 默认为0</span></span><br><span class="line">        size：,<span class="comment">//图标大小(以像素为单位)。可与偏移量一起用于定义要从原点(sprite)图标图像使用的子矩形</span></span><br><span class="line">        src:<span class="string">&#x27;&#x27;</span>,<span class="comment">//图像URL源</span></span><br><span class="line">        rotateWithView：<span class="literal">false</span>,<span class="comment">//是否旋转视图中的图标  默认为false            </span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    stroke:<span class="keyword">new</span> ol.style.Stroke(&#123;<span class="comment">//描绘</span></span><br><span class="line">        width: ,<span class="comment">//宽</span></span><br><span class="line">        color:color,<span class="comment">//颜色、渐变或图案</span></span><br><span class="line">        lineCap:<span class="string">&#x27;round&#x27;</span>,<span class="comment">//线帽风格  butt, round, 或者 square 默认 round</span></span><br><span class="line">        lineJoin:<span class="string">&#x27;round&#x27;</span>,<span class="comment">//线连接方式 bevel, round, 或者 miter 默认 round</span></span><br><span class="line">        lineDash： []，<span class="comment">//线间隔模式 这个变化与分辨率有关 默认为undefined Internet Explorer 10和更低版本不支持</span></span><br><span class="line">        lineDashOffset:<span class="number">0</span>,<span class="comment">//线段间隔偏移 默认0</span></span><br><span class="line">        miterLimit:<span class="number">10</span>,<span class="comment">// 默认10                   </span></span><br><span class="line">    &#125;),</span><br><span class="line">        </span><br><span class="line">    text:<span class="keyword">new</span> ol.style.Text(&#123;<span class="comment">//文字</span></span><br><span class="line">        font:<span class="string">&#x27;&#x27;</span>,<span class="comment">//默认是&#x27;10px sans-serif&#x27;</span></span><br><span class="line">        text:<span class="string">&#x27;&#x27;</span>,<span class="comment">//文本内容</span></span><br><span class="line">        textAlign：<span class="string">&#x27;center&#x27;</span>,<span class="comment">//文本对齐 &#x27;left&#x27;, &#x27;right&#x27;, &#x27;center&#x27;, &#x27;end&#x27; &#x27;start&#x27;.针对于placement: &#x27;point&#x27;,默认为&#x27;center&#x27;；针对于placement: &#x27;line&#x27;，默认是让渲染器选择不超过maxAngle的位置</span></span><br><span class="line">        textBaseline:<span class="string">&#x27;middle&#x27;</span>,<span class="comment">//文本基线  &#x27;bottom&#x27;, &#x27;top&#x27;, &#x27;middle&#x27;, &#x27;alphabetic&#x27;, &#x27;hanging&#x27;, &#x27;ideographic&#x27; 默认&#x27;middle&#x27;</span></span><br><span class="line">        placement:<span class="string">&#x27;&#x27;</span>,<span class="comment">//文本布置</span></span><br><span class="line">        scale：，</span><br><span class="line">        padding:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],<span class="comment">//文本周围的像素填充。数组中值的顺序是[top, right, bottom, left]</span></span><br><span class="line">        fill:<span class="keyword">new</span> ol.style.Fill(),<span class="comment">//如果未设置，默认未#333</span></span><br><span class="line">        stroke:<span class="keyword">new</span> ol.style.Stroke(),</span><br><span class="line">        offsetX:<span class="number">0</span>,<span class="comment">//水平文本偏移量(以像素为单位)。正值将把文本右移。默认0</span></span><br><span class="line">        offsetY:<span class="number">0</span>,<span class="comment">//垂直文本偏移量(以像素为单位)。正值会将文本向下移动。默认0</span></span><br><span class="line">        rotation：<span class="number">0</span>，<span class="comment">//默认0</span></span><br><span class="line">        rotateWithView:<span class="literal">false</span>,</span><br><span class="line">        backgroundFill:  ,<span class="comment">//当placement:“point”时，填充文本背景的样式。默认为无填充 </span></span><br><span class="line">        backgroundStroke: ,<span class="comment">//当placement:“point”时，描绘文本背景的样式。默认为无描绘</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    zIndex:,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>ol.geom.Geomtry()</code>是矢量几何对象的抽象基类，通常只用于创建子类，而不是在应用程序中实例化。它的方法如下：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>set(key, value)</td><td>设置值。<code>key</code>：关键名字（字符串）；<code>value</code>：值</td></tr><tr><td>get(key)</td><td>获取值</td></tr><tr><td>setProperties(values, opt_silent)</td><td>设置键值对的集合。注意，这将更改任何现有属性并添加新属性(它不会删除任何现有属性)。</td></tr><tr><td>getProperties()</td><td>获取一个包含所有属性名和值的对象</td></tr><tr><td>getClosestPoint(point, opt_closestPoint)</td><td>将几何图形的最近点作为坐标返回到经过的点</td></tr><tr><td>getExtent(opt_extent)</td><td>获取几何的范围</td></tr><tr><td>getKeys()</td><td>获取对象属性名称列表</td></tr><tr><td>getRevision()</td><td>获取此对象的版本号。每次修改对象时，它的版本号都会增加。</td></tr><tr><td>intersectsCoordinate(coordinate)</td><td>如果该几何图形包含指定的坐标，则返回<code>true</code>。如果坐标位于几何图形的边界上，则返回<code>false</code></td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>simplify(tolerance)</td><td>创建这个几何图形的简化版本</td></tr><tr><td>transform(source, destination)</td><td>将圆的每个坐标从一个坐标系变换到另一个坐标系。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数。在内部，一个圆目前由两点表示:圆心<code>[cx, cy]</code>和圆心右边的点<code>[cx + r, cy]</code>。这个<code>transform</code>函数只变换这两点。所以得到的几何形状也是一个圆，而这个圆并不等同于通过变换原圆的每一点得到的形状</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><p>以下是<code>ol.geom.Geomtry</code>抽象基类创建的常见<a href="https://link.segmentfault.com/?url=https://openlayers.org/en/latest/apidoc/module-ol_geom_SimpleGeometry-SimpleGeometry.html">子类模块</a>：</p><h5 id="1）ol-geom-Circle"><a href="#1）ol-geom-Circle" class="headerlink" title="1）ol.geom.Circle()"></a>1）ol.geom.Circle()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.Circle(&#123;</span><br><span class="line">    center:[],<span class="comment">//中心点</span></span><br><span class="line">    radius:<span class="number">2</span>,<span class="comment">//圆半径</span></span><br><span class="line">    layout:<span class="comment">//布局</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>getCenter()</td><td>返回中心坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>layout</code></td></tr><tr><td>getRadius()</td><td>返回圆的半径</td></tr><tr><td>getType()</td><td>获取这个几何图形的类型</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和经过的区域是否相交，返回布尔值</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标。<code>angle</code>：以弧度为单位的旋转角度；<code>anchor</code>：旋转中心</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。<code>sx</code>：x方向上的缩放因子；<code>sy</code>：Y轴上的缩放因子；<code>opt_anchor</code>：缩放原点(默认为几何范围的中心)</td></tr><tr><td>setCenter(center)</td><td>将圆心设置为<code>coordinate</code></td></tr><tr><td>setCenterAndRadius(center, radius, opt_layout)</td><td>设置圆的中心(<code>coordinate</code>)和半径(<code>number</code>)</td></tr><tr><td>setRadius(radius)</td><td>设置圆的半径。半径的单位是投影的单位。</td></tr><tr><td>transform(source, destination)</td><td>将圆的每个坐标从一个坐标系变换到另一个坐标系。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数。在内部，一个圆目前由两点表示:圆心<code>[cx, cy]</code>和圆心右边的点<code>[cx + r, cy]</code>。这个<code>transform</code>函数只变换这两点。所以得到的几何形状也是一个，而这个圆并不等同于通过变换原圆的每一点得到的形状</td></tr><tr><td>translate(deltaX, deltaY)</td><td>f翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h5 id="2）ol-geom-LineString-coordinates-opt-layout"><a href="#2）ol-geom-LineString-coordinates-opt-layout" class="headerlink" title="2）ol.geom.LineString(coordinates, opt_layout)"></a>2）ol.geom.LineString(coordinates, opt_layout)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.LineString(&#123;</span><br><span class="line">    coordinate:[],<span class="comment">//坐标。对于内部使用，平面坐标结合opt_layout也可以接受</span></span><br><span class="line">    layout: <span class="comment">//Layout</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>appendCoordinate(coordinate)</td><td>将经过的坐标追加到<code>linestring</code>的坐标里</td></tr><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>forEachSegment(callback)</td><td>遍历每条线段，调用提供的回调函数。如果回调函数返回一个真值，则函数立即返回该值。否则函数返回<code>false</code></td></tr><tr><td>getCoordinateAt(fraction, opt_dest)</td><td>沿着线段返回给定部分的坐标。<code>fraction</code>是一个介于0和1之间的数字，其中0是线段的开始，1是线段的末尾</td></tr><tr><td>getCoordinates()</td><td>返回线段的坐标</td></tr><tr><td>setCoordinates(coordinates, opt_layout)</td><td>s设置线段的坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>Layout</code></td></tr><tr><td>getLength()</td><td>在投影平面上返回线段的长度</td></tr><tr><td>getType()</td><td>得到这个几何图形的类型</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h5 id="3）-ol-geom-Point-coordinates-opt-layout"><a href="#3）-ol-geom-Point-coordinates-opt-layout" class="headerlink" title="3）)ol.geom.Point(coordinates, opt_layout)"></a>3）)<code>ol.geom.Point(coordinates, opt_layout)</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.Point()</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>getCoordinates()</td><td>返回点的坐标</td></tr><tr><td>setCoordinates(coordinates, opt_layout)</td><td>设置点的坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>Layout</code></td></tr><tr><td>getType()</td><td>得到这个几何图形的类型</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><p>4）ol.geom.Polygon()</p><p>多边形几何图形。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.Polygon(&#123;</span><br><span class="line">    coordinates:[],<span class="comment">//定义多边形的线性环的数组</span></span><br><span class="line">    layout:,</span><br><span class="line">    ends:[],<span class="comment">//末端（平面坐标内部使用）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>appendLinearRing(linearRing)</td><td>在多边形上追加线性环</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>getCoordinates()</td><td>返回点的坐标</td></tr><tr><td>setCoordinates(coordinates, opt_layout)</td><td>设置点的坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getInteriorPoint()</td><td>返回多边形的内部点</td></tr><tr><td>getLinearRing(index)</td><td>返回多边形几何的第n个线性环。如果给定索引超出范围，则返回null。外部线性环在索引0处可用，而内部环在索引1及以上处可用</td></tr><tr><td>getLinearRings()</td><td>返回多边形的线性环</td></tr><tr><td>getLinearRingCount()</td><td>返回多边形的环数，这包括外部环和任何内部环</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>Layout</code></td></tr><tr><td>getType()</td><td>得到这个几何图形的类型</td></tr><tr><td>getArea()</td><td>返回投影平面上多边形的面积</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h5 id="4）ol-layer-VectorTile"><a href="#4）ol-layer-VectorTile" class="headerlink" title="4）ol.layer.VectorTile()"></a>4）<code>ol.layer.VectorTile()</code></h5><p>矢量平铺图层。</p><p>图层用于客户端呈现矢量平铺数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.layer.Vector(&#123;<span class="comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span></span><br><span class="line">    opacity:<span class="number">2</span>,<span class="comment">//透明度 区间范围为(0, 1) 默认为1</span></span><br><span class="line">    visible:<span class="literal">true</span>,<span class="comment">//显示属性 布尔值 默认为true</span></span><br><span class="line">    extent:[],<span class="comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span></span><br><span class="line">    zIndex:<span class="number">2</span>,<span class="comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span></span><br><span class="line">    minResolution:<span class="number">3</span>,<span class="comment">//该层可见的最小分辨率(包括在内)</span></span><br><span class="line">    maxResolution:<span class="number">6</span>,<span class="comment">//该层可见的最大分辨率（包括在内）</span></span><br><span class="line">    renderOrder:,<span class="comment">//呈现顺序。函数用于在呈现前对特性进行排序。默认情况下，特性是按照创建它们的顺序绘制的。使用null来避免排序，但是得到一个未定义的绘制顺序</span></span><br><span class="line">    renderBuffer:<span class="number">100</span>,<span class="comment">//默认为100 缓冲区</span></span><br><span class="line">    renderMode:<span class="string">&#x27;vector&#x27;</span>,<span class="comment">//默认为&#x27;vector&#x27; 矢量图层的渲染模式</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.VectorSource(),<span class="comment">//图层源</span></span><br><span class="line">    map:  ,<span class="comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用</span></span><br><span class="line">    declutter:<span class="literal">false</span>,<span class="comment">//默认为false 整理图片和文字。清理应用于所有图像和文本样式，优先级由样式的z-index定义。z-index指数越低，优先级越高</span></span><br><span class="line">    style:<span class="keyword">new</span> ol.style.Style(),<span class="comment">//图层样式</span></span><br><span class="line">    updateWhileAnimating:<span class="literal">false</span>,<span class="comment">//默认为false </span></span><br><span class="line">    updateWhileInteracting:<span class="literal">false</span>,<span class="comment">//默认为false</span></span><br><span class="line">    preload:,<span class="comment">//</span></span><br><span class="line">    renderOrder:,<span class="comment">//</span></span><br><span class="line">    useInterimTilesOnError:<span class="literal">true</span>,<span class="comment">//错误时使用临时贴片 默认true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="view（视图）"><a href="#view（视图）" class="headerlink" title="view（视图）"></a>view（视图）</h2><p>设置视图<code>view</code>由三种状态决定：<code>center</code>中心、<code>resolution</code>分辨率、<code>rotation</code>旋转，每个状态都有相应的<code>getter</code>和<code>setter</code>。</p><p>可以在视图里定义地图中心点、层级、分辨率、旋转以及地图投影等。</p><p>视图对象受到约束，主要有<strong>分辨率约束、旋转约束、中心约束</strong>。</p><ul><li><p><strong>分辨率约束</strong></p><p>切换到特定分辨率时，特定分辨率主要由以下选项决定：<code>resolutions</code>、<code>maxResolution</code>、<code>maxZoom</code>、<code>zoomFactor</code>。如果已经设置<code>resolutions</code>，其他选项就可忽略。</p></li><li><p><strong>旋转约束</strong></p><p>会切换到特定的角度。它由以下选项决定:<code>enableRotation</code>和<code>constrainRotation</code>。在默认情况下，当接近水平线时，旋转值会突然变为零。</p></li><li><p><strong>中心约束</strong></p><p>由范围选项决定。默认情况下，中心完全不受约束。</p></li></ul><h3 id="1-视图选项"><a href="#1-视图选项" class="headerlink" title="1)视图选项"></a>1)视图选项</h3><h4 id="1）中心点center"><a href="#1）中心点center" class="headerlink" title="1）中心点center"></a>1）中心点center</h4><p>视图的初始中心，中心的坐标系由投影<code>projection</code>指定，如果未设置此参数，则不会获取层源，但是之后可以使用<code>#setCenter</code>设置中心。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center = ol.proj.fromLonLat([longitude, latitude]);<span class="comment">//未限制地图范围时</span></span><br><span class="line"><span class="keyword">let</span> center = ol.proj.transform([minX, minY, maxX, maxY]，<span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="string">&#x27;EPSG:3857&#x27;</span>);<span class="comment">//限制地图显示范围时设置中心点  X代表经度， Y代表纬度</span></span><br></pre></td></tr></table></figure><h4 id="2）投影projection"><a href="#2）投影projection" class="headerlink" title="2）投影projection"></a>2）投影<code>projection</code></h4><p>视图拥有<code>projection</code>投影，投影决定了中心的坐标系，其单位决定了分辨率的单位(每个像素的投影单位)。默认投影为球面墨卡托(<code>EPSG:3857</code>)。</p><ul><li>获取投影：<code>map.getView().getProjection()</code></li><li>设置投影：<code>map.getView().setProjection()</code></li></ul><h4 id="3）分辨率resolution"><a href="#3）分辨率resolution" class="headerlink" title="3）分辨率resolution"></a>3）分辨率<code>resolution</code></h4><p>视图的初始分辨率，单位是每像素的投影单位(例如米每像素)。</p><p>另一种方法是设置缩放<code>zoom</code>。缩放可以设置：最大层级<code>maxZoom</code>、最小层级<code>minZoom</code>以及当前层级<code>zoom</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">    <span class="comment">// center: center,</span></span><br><span class="line">    zoom: curZoom,</span><br><span class="line">    minZoom: minZoom,</span><br><span class="line">    maxZoom: maxZoom,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>获取分辨率：<code>map.getView().getResolution()</code></li><li>获取给定范围(以映射单元为单位)和大小(以像素为单位)的分辨率：<code>map.getView().getResolutionForExtent(extent, opt_size)</code>；</li><li>获取缩放级别的分辨率：<code>map.getView().getResolutionForZoom(zoom)</code>；</li><li>获取视图最大值分辨率：<code>map.getView().getMaxResolution()</code>；</li><li>获取视图最小值分辨率：<code>map.getView().getMinResolution()</code>；</li><li>设置分辨率：<code>map.getView().setResolution(resolution)</code></li></ul><h4 id="4）旋转rotation"><a href="#4）旋转rotation" class="headerlink" title="4）旋转rotation"></a>4）旋转<code>rotation</code></h4><p>初始旋转角度为弧度(正顺时针旋转，0表示向北)。</p><ul><li>获取旋转调用方法<code>map.getView().getRotation()</code>；</li><li>设置旋转调用方法<code>map.getView().setRotation(rotation);</code></li></ul><h4 id="5-缩放zoom"><a href="#5-缩放zoom" class="headerlink" title="5)缩放zoom"></a>5)缩放<code>zoom</code></h4><p>仅在未定义分辨率时使用。</p><p>缩放级别用于计算视图的初始分辨率。初始分辨率是使用<code>#constrainResolution</code>方法确定的。</p><ul><li>获取缩放层级：<code>map.getView().getZoom()</code>；</li><li>获取最大缩放层级：<code>map.getView().getMaxZoom()</code>；</li><li>获取最小缩放层级：<code>map.getView().getMinZoom()</code>；</li><li>获取缩放层级的分辨率：<code>map.getView().getZoomForResolution(resolution)</code>；</li><li>设置缩放层级：<code>map.getView().setZoom(zoom)</code>；</li><li>设置最大缩放层级：<code>map.getView().setMaxZoom(zoom)</code>；</li><li>设置最小缩放层级：<code>map.getView().setMinZoom(zoom)</code>；</li></ul><h4 id="6-旋转约束constrainRotation"><a href="#6-旋转约束constrainRotation" class="headerlink" title="6)旋转约束constrainRotation"></a>6)旋转约束<code>constrainRotation</code></h4><p>旋转约束。<code>false</code>为未约束，<code>true</code>为未约束但是接近于0。数字限制了旋转到该值的数量。</p><h4 id="7-启用旋转enableRotation"><a href="#7-启用旋转enableRotation" class="headerlink" title="7)启用旋转enableRotation"></a>7)启用旋转<code>enableRotation</code></h4><p>如果为<code>false</code>，则始终使用将旋转设置为零的旋转约束。如果启用为<code>false</code>，则没有效果。</p><h4 id="8-约束范围extent"><a href="#8-约束范围extent" class="headerlink" title="8)约束范围extent"></a>8)约束范围<code>extent</code></h4><p>中心点不能超出这个范围。</p><h3 id="2）视图方法"><a href="#2）视图方法" class="headerlink" title="2）视图方法"></a>2）视图方法</h3><h4 id="1）动画"><a href="#1）动画" class="headerlink" title="1）动画"></a>1）动画</h4><blockquote><p>单个动画</p></blockquote><p>动画视图。视图的中心、缩放(或分辨率)和旋转可以通过动画来实现视图状态之间的平滑转换。</p><p>默认情况下，动画持续时间为1秒，并且类型为<code>in-and-out easing</code>。</p><p>通过设置持续时间<code>duration</code>(以毫秒为单位)和缓动选项<code>easing</code>(参见模块:<a href="https://link.segmentfault.com/?url=https://openlayers.org/en/latest/apidoc/module-ol_easing.html">ol/easing</a>)来定制此行为。</p><p><code>easing</code>:</p><ul><li><code>easeIn</code>：平缓加速</li><li><code>easeOut</code>：平缓减速</li><li><code>inAndOut</code>：平缓开始，先加速，再减速</li><li><code>linear</code>：匀速</li><li><code>upAndDown</code>：平缓开始，加速，最后再减速。这与模块的一般行为相同:<code>ol/easing~inAndOut</code>，但是最终的减速被延迟了</li></ul><blockquote><p>多个动画</p></blockquote><p>要将多个动画连接在一起，请使用多个动画对象调用该方法。</p><p>如果提供一个函数作为<code>animate</code>方法的最后一个参数，它将在动画系列的末尾被调用。</p><p>如果动画系列独立完成，回调函数将被调用<code>true</code>;如果动画系列被取消，回调函数将被调用<code>false</code>。</p><h4 id="2）取消动画cancelAnimations"><a href="#2）取消动画cancelAnimations" class="headerlink" title="2）取消动画cancelAnimations()"></a>2）取消动画<code>cancelAnimations()</code></h4><p>取消任何正在进行的动画。</p><h4 id="3）getAnimating"><a href="#3）getAnimating" class="headerlink" title="3）getAnimating()"></a>3）<code>getAnimating()</code></h4><p>确定视图是否处于动画状态。返回布尔值。</p><h4 id="4）计算范围calculateExtent-opt-size"><a href="#4）计算范围calculateExtent-opt-size" class="headerlink" title="4）计算范围calculateExtent(opt_size)"></a>4）计算范围<code>calculateExtent(opt_size)</code></h4><p>计算当前视图状态的范围和传递的大小。<code>opt_size</code>指盒子像素尺寸，如未提供，将使用此视图的第一个映射的大小。</p><p>尺寸是盒子的像素尺寸，计算的范围应该与之匹配。</p><p>想要获取整个底图映射的范围，使用<code>map.getSize()</code></p><h4 id="5）centerOn-coordinate-size-position"><a href="#5）centerOn-coordinate-size-position" class="headerlink" title="5）centerOn(coordinate, size, position)"></a>5）<code>centerOn(coordinate, size, position)</code></h4><p>以坐标和视图位置为中心。</p><ul><li><code>coordinate</code>：坐标点</li><li><code>size</code>：盒子像素尺寸</li><li><code>position</code>：视图的居中位置</li></ul><h2 id="interaction-交互"><a href="#interaction-交互" class="headerlink" title="interaction(交互)"></a><code>interaction</code>(交互)</h2><p>通常只用于创建子类，而不在应用程序中实例化。</p><p>用于更改映射状态的用户操作。有些类似于控件，但不与<code>DOM</code>元素关联。</p><p>虽然交互没有<code>DOM</code>元素，但是它们中的一些会呈现向量，因此在屏幕上是可见的。</p><p>添加交互动作使用：<code>map.addInteraction(interaction);</code></p><p><code>OpenLayers </code>中可实例化的子类及其功能如下：</p><table><thead><tr><th>可实例化子类</th><th>功能</th></tr></thead><tbody><tr><td>doubleclickzoom interaction</td><td>双击放大交互功能</td></tr><tr><td>draganddrop</td><td>以“拖文件到地图中”的交互添加图层</td></tr><tr><td>dragbox</td><td>拉框，用于划定一个矩形范围，常用于放大地图</td></tr><tr><td>dragpan</td><td>拖拽平移地图</td></tr><tr><td>dragrotateandzoom</td><td>拖拽方式进行缩放和旋转地图</td></tr><tr><td>dragrotate</td><td>拖拽方式旋转地图</td></tr><tr><td>dragzoom</td><td>拖拽方式缩放地图</td></tr><tr><td>draw</td><td>绘制地理要素功能</td></tr><tr><td>interaction defaults</td><td>默认添加的交互功能</td></tr><tr><td>keyboardpan</td><td>键盘方式平移地图</td></tr><tr><td>keyboardzoom</td><td>键盘方式缩放地图</td></tr><tr><td>select</td><td>选择要素功能</td></tr><tr><td>modify</td><td>更改要素</td></tr><tr><td>mousewheelzoom</td><td>鼠标滚轮缩放功能</td></tr><tr><td>pinchrotate</td><td>手指旋转地图，针对触摸屏</td></tr><tr><td>pinchzoom</td><td>手指进行缩放，针对触摸屏</td></tr><tr><td>pointer</td><td>鼠标的用户自定义事件基类</td></tr><tr><td>snap</td><td>鼠标捕捉，当鼠标距离某个要素一定距离之内，自动吸附到要素</td></tr></tbody></table><h3 id="1）默认交互功能ol-interaction-defaylts"><a href="#1）默认交互功能ol-interaction-defaylts" class="headerlink" title="1）默认交互功能ol.interaction.defaylts()"></a>1）默认交互功能<code>ol.interaction.defaylts()</code></h3><p>主要是最为常用的功能，如缩放、平移和旋转地图等，具体功能有如下这些：</p><table><thead><tr><th>默认交互</th><th>功能</th></tr></thead><tbody><tr><td>ol.interaction.DragRotate</td><td>鼠标拖拽旋转，一般配合一个键盘按键辅助</td></tr><tr><td>ol.interaction.DragZoom</td><td>鼠标拖拽缩放，一般配合一个键盘按键辅助</td></tr><tr><td>ol.interaction.DoubleClickZoom</td><td>鼠标或手指双击缩放地图</td></tr><tr><td>ol.interaction.PinchRotate</td><td>两个手指旋转地图，针对触摸屏</td></tr><tr><td>ol.interaction.PinchZoom</td><td>两个手指缩放地图，针对触摸屏</td></tr><tr><td>ol.interaction.DragPan</td><td>鼠标或手指拖拽平移地图</td></tr><tr><td>ol.interaction.KeyboardZoom</td><td>使用键盘 <code>+</code> 和 <code>-</code> 按键进行缩放</td></tr><tr><td>ol.interaction.KeyboardPan</td><td>使用键盘方向键平移地图</td></tr><tr><td>ol.interaction.MouseWheelZoom</td><td>鼠标滚轮缩放地图</td></tr></tbody></table><h3 id="2）针对矢量图层元素的交互功能"><a href="#2）针对矢量图层元素的交互功能" class="headerlink" title="2）针对矢量图层元素的交互功能"></a>2）针对矢量图层元素的交互功能</h3><h4 id="1）选择ol-interaction-Select"><a href="#1）选择ol-interaction-Select" class="headerlink" title="1）选择ol.interaction.Select()"></a>1）选择<code>ol.interaction.Select()</code></h4><p>选择矢量元素的交互功能。</p><p>默认情况下，所选矢量元素的样式不相同，因此这种交互可以用于可视化高亮显示，以及为其他操作(如修改或输出)选择特性。</p><p>选定的矢量元素将被添加到内部非托管图层。</p><p>有三种方式控制矢量元素的选择：</p><ul><li>使用由<code>condition</code>定义的浏览器事件和<code>toggle</code>切换的<code>add</code>/<code>remove</code>以及<code>multi</code>选项</li><li>一个<code>layer</code>过滤器</li><li>一个使用<code>filter</code>选项的进一步矢量元素过滤器</li></ul><h4 id="2）绘制ol-interaction-Draw"><a href="#2）绘制ol-interaction-Draw" class="headerlink" title="2）绘制ol.interaction.Draw()"></a>2）绘制<code>ol.interaction.Draw()</code></h4><p>用于绘制特征几何图形的交互功能。</p><p>绘制交互允许绘制几何地理要素，可选一个参数为对象，可包含参数如下：</p><ul><li><code>features</code>：绘制的要素的目标集合；</li><li><code>source</code>：绘制的要素的目标图层源；</li><li><code>snapTolerance</code>：自动吸附完成点的像素距离，也就是说当鼠标位置距离闭合点小于该值设置的时候，会自动吸附到闭合点，默认值是 <code>12</code>；</li><li><code>type</code>：绘制的地理要素类型，<code>ol.geom.GeometryType</code>类型，包含 <code>Point</code>、 <code>LineString</code>、 <code>Polygon</code>、<code>MultiPoint</code>、<code>MultiLineString</code> 或者 <code>MultiPolygon</code>；</li><li><code>minPointsPerRing</code>：绘制一个多边形需要的点数最小值，数值类型，默认是 <code>3</code>；</li><li><code>style</code>：要素素描的样式；</li><li><code>geometryName</code>：绘制的地理要素的名称，<code>string</code>类型</li></ul><h4 id="3-修改ol-interaction-Modify"><a href="#3-修改ol-interaction-Modify" class="headerlink" title="3)修改ol.interaction.Modify()"></a>3)修改<code>ol.interaction.Modify()</code></h4><p>用于修改矢量元素几何图形的交互功能。</p><p>若想修改已添加到存在的矢量源中的矢量元素，需要使用<code>modify</code>选项构建修改交互动作。</p><p>如若想修改集合中的矢量元素（比如用选择交互的集合），需要使用<code>features</code>选项构建交互。该交互必须使用<code>source</code>或者<code>features</code>构建。</p><p>默认情况下，当按下<code>alt</code>键时，交互允许删除顶点。想要使用不同的删除条件配置交互，请使用<code>deleteCondition</code>选项。</p><h2 id="controler-控件"><a href="#controler-控件" class="headerlink" title="controler(控件)"></a>controler(控件)</h2><p>控件是一个可见的小部件，其DOM元素位于屏幕上的固定位置。它们可以包含用户输入(按钮)，或者只是提供信息;位置是使用CSS确定的。这是一个虚基类，不负责实例化特定的控件。</p><p>默认情况下，这些元素被放置在具有CSS类名称<code>ol-overlaycontainer-stopevent</code>的容器中，但是可以使用任何外部DOM元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myControl = <span class="keyword">new</span> ol.control.Control(&#123;<span class="comment">//定义一个控件</span></span><br><span class="line">    element:myElement</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//然后添加到地图上</span></span><br><span class="line">map.addControl(myControl);</span><br></pre></td></tr></table></figure><p>主要的属性选项有：</p><ul><li><code>element</code>：DOM元素，元素是控件的容器元素。只有在开发自定义控件时才需要指定这一点</li><li><code>render</code>：重新呈现控件时调用的函数。这在<code>requestAnimationFrame</code>回调中调用</li><li><code>target</code>：DOM元素，想要控件在映射的视图端口之外呈现，需要指定目标对象</li></ul><p>其中包含的控件有：</p><table><thead><tr><th>控件</th><th>功能</th></tr></thead><tbody><tr><td>controldefaults</td><td>地图默认包含的控件，包含缩放控件和旋转控件</td></tr><tr><td>fullscreencontrol</td><td>全屏控件，用于全屏幕查看地图</td></tr><tr><td>mousepositioncontrol</td><td>鼠标位置控件，显示鼠标所在地图位置的坐标，可以自定义投影</td></tr><tr><td>overviewmapcontrol</td><td>地图全局视图控件</td></tr><tr><td>rotatecontrol</td><td>地图旋转控件</td></tr><tr><td>scalelinecontrol</td><td>比例尺控件</td></tr><tr><td>zoomcontrol</td><td>缩放控件</td></tr><tr><td>zoomslidercontrol</td><td>缩放刻度控件</td></tr><tr><td>zoomtoextentcontrol</td><td>缩放到全局控件</td></tr></tbody></table><h2 id="overlay-叠加层"><a href="#overlay-叠加层" class="headerlink" title="overlay(叠加层)"></a>overlay(叠加层)</h2><p>要显示在地图上方并附加到单个地图位置的元素。与控件不同的是，它们不在屏幕上的固定位置，而是绑定到地理坐标上，因此平移地图将移动 <code>overlay</code> ，而不是控件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;popup&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> popup = <span class="keyword">new</span> ol.Overlay(&#123;</span><br><span class="line">    element:<span class="built_in">document</span>.getElementById(<span class="string">&#x27;popup&#x27;</span>),</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line">popup.setPosition(coordinate);</span><br><span class="line">map.addOverlay(popup);</span><br></pre></td></tr></table></figure><h3 id="Overlay选项"><a href="#Overlay选项" class="headerlink" title="Overlay选项"></a><strong>Overlay选项</strong></h3><h4 id="1-id"><a href="#1-id" class="headerlink" title="(1)id"></a>(1)<code>id</code></h4><p>设置 <code>overlay</code>的 <code>id</code>，字符串类型。</p><ul><li>获取<code>id</code>：<code>map.getOverlayById(id)</code>或者<code>overlay.getId()</code></li></ul><h4 id="2-element"><a href="#2-element" class="headerlink" title="(2)element"></a>(2)<code>element</code></h4><p><code>overlay</code> 元素，<code>DOM</code>元素</p><ul><li>获取：<code>overlay.getElement()</code></li><li>设置：<code>overlay.setElement(element)</code></li></ul><h4 id="3-offset"><a href="#3-offset" class="headerlink" title="(3)offset"></a>(3)<code>offset</code></h4><p>偏移量(以像素为单位)，用于定位 <code>overlay</code> ，数组类型，默认为[0, 0]：</p><ul><li>数组第一个元素为水平偏移，正右负左；</li><li>数组第二个元素为垂直，正下负上；</li><li>获取偏移值：<code>overlay.getOffset()</code></li><li>设置偏移值：<code>overlay.setOffset(offset)</code></li></ul><h4 id="4-position"><a href="#4-position" class="headerlink" title="(4)position"></a>(4)<code>position</code></h4><p>地图投影中的位置。</p><ul><li>获取：<code>overlay.getPosition()</code></li><li>设置：<code>overlay.setPosition(position)</code>，如果位置未定义<code>undefined</code>，则覆盖被隐藏。</li></ul><h4 id="5-positioning"><a href="#5-positioning" class="headerlink" title="(5)positioning"></a>(5)<code>positioning</code></h4><p>定义 <code>overlay</code> 相对于其位置属性的实际位置，默认为<code>top-left</code>，还有<code>&#39;bottom-left&#39;</code>, <code>&#39;bottom-center&#39;</code>, <code>&#39;bottom-right&#39;</code>, <code>&#39;center-left&#39;</code>, <code>&#39;center-center&#39;</code>, <code>&#39;center-right&#39;</code>, <code>&#39;top-left&#39;</code>,<code>&#39;top-center&#39;</code>, and <code>&#39;top-right&#39;</code>.</p><ul><li>获取：<code>overlay.getPositioning()</code></li><li>设置：<code>overlay.setPositioning(positioning)</code></li></ul><h4 id="6-autoPan"><a href="#6-autoPan" class="headerlink" title="(6)autoPan"></a>(6)<code>autoPan</code></h4><p>默认为<code>false</code>，如果设置为true，则在调用<code>setPosition</code>将平移映射，以便在当前视图中 <code>overlay</code> 完全可见。</p><h4 id="7-autoPanAnimation"><a href="#7-autoPanAnimation" class="headerlink" title="(7)autoPanAnimation"></a>(7)<code>autoPanAnimation</code></h4><p>动画选项用于平移 <code>overlay</code> 到视图中。此动画仅在启用<code>autoPan</code>时使用。可以提供一个持续时间和缓动来定制动画。</p><h4 id="8-stopEvent"><a href="#8-stopEvent" class="headerlink" title="(8)stopEvent"></a>(8)<code>stopEvent</code></h4><p>默认为<code>true</code>，是否应该停止到map视图端口的事件传播。</p><ul><li>如果为<code>true</code>，则将 <code>overlay</code> 放置在与控件相同的容器中（CSS class name<code>ol-overlaycontainer-stopevent</code>）</li><li>如果为<code>false</code>，它用<code>className</code>属性指定的<code>CSS</code>类名放置在容器中。</li></ul><h4 id="9-className"><a href="#9-className" class="headerlink" title="(9)className"></a>(9)<code>className</code></h4><p><code>CSS class name</code>.</p><h4 id="10-autoPanMargin"><a href="#10-autoPanMargin" class="headerlink" title="(10)autoPanMargin"></a>(10)<code>autoPanMargin</code></h4><p>地图自动平移时，地图边缘与 <code>overlay</code> 的留白（空隙），单位是像素，默认是 20像素</p><h2 id="Projections（投影）"><a href="#Projections（投影）" class="headerlink" title="Projections（投影）"></a>Projections（投影）</h2><p>需要给所有坐标和范围提供视图投影系（默认是<code>EPAG:3857</code>）。</p><p>转换投影系，使用<code>ol.proj.transform()</code>和<code>ol.proj.transformExtendt</code>进行转换</p><h3 id="1）、ol-proj"><a href="#1）、ol-proj" class="headerlink" title="(1）、ol.proj"></a>(1）、<code>ol.proj</code></h3><h4 id="1）ol-proj-addCoordinateTransforms-source-destination-forward-inverse"><a href="#1）ol-proj-addCoordinateTransforms-source-destination-forward-inverse" class="headerlink" title="1）ol.proj.addCoordinateTransforms(source, destination, forward, inverse)"></a>1）<code>ol.proj.addCoordinateTransforms(source, destination, forward, inverse)</code></h4><p>注册坐标转换函数来转换源投影和目标投影之间的坐标。正、反函数转换坐标对;此函数将这些转换为内部使用的处理区段和坐标数组的函数</p><ul><li><code>source</code>：源投影</li><li><code>destination</code>：目标投影</li><li><code>forward</code>：接受<code>ol</code>的正向变换函数(即从源投影到目标投影)。作为参数，并返回转换后的<code>ol.Coordinate</code></li><li><code>inverse</code>：接受<code>ol</code>的逆变换函数(即从目标投影到源投影)。作为参数，并返回转换后的<code>ol.Coordinate</code></li></ul><h4 id="2-ol-proj-addEquivalentProjections-projections"><a href="#2-ol-proj-addEquivalentProjections-projections" class="headerlink" title="2)ol.proj.addEquivalentProjections(projections)"></a>2)<code>ol.proj.addEquivalentProjections(projections)</code></h4><p>注册不改变坐标的转换函数。它们允许在具有相同含义的投影之间进行转换。</p><h4 id="3）ol-proj-addProjection-projection"><a href="#3）ol-proj-addProjection-projection" class="headerlink" title="3）ol.proj.addProjection(projection)"></a>3）<code>ol.proj.addProjection(projection)</code></h4><p>将投影对象添加到受支持的投影列表中，这些投影可以通过它们的<code>SRS</code>码进行查找。</p><h4 id="4-ol-proj-equivalent-projection1-projection2"><a href="#4-ol-proj-equivalent-projection1-projection2" class="headerlink" title="4)ol.proj.equivalent(projection1, projection2)"></a>4)<code>ol.proj.equivalent(projection1, projection2)</code></h4><p>检查两个投影是否相同，即一个投影中的每个坐标确实表示另一个投影中的相同地理点。</p><h4 id="5-ol-proj-fromLonLat-coordinate-opt-projection"><a href="#5-ol-proj-fromLonLat-coordinate-opt-projection" class="headerlink" title="5)ol.proj.fromLonLat(coordinate, opt_projection)"></a>5)<code>ol.proj.fromLonLat(coordinate, opt_projection)</code></h4><p>将经纬度坐标转换为不同的投影</p><ul><li><code>coordinate</code>：经纬度数组，经度在前，纬度在后</li><li><code>projection</code>：目标投影。默认是<code>Web Mercator</code>，即<code>“EPSG: 3857”</code></li></ul><h4 id="6-ol-proj-get-projectionLike"><a href="#6-ol-proj-get-projectionLike" class="headerlink" title="6)ol.proj.get(projectionLike)"></a>6)<code>ol.proj.get(projectionLike)</code></h4><p>获取指定代码的投影对象。</p><h4 id="7-ol-proj-getTransform-source-destination"><a href="#7-ol-proj-getTransform-source-destination" class="headerlink" title="7)ol.proj.getTransform(source, destination)"></a>7)<code>ol.proj.getTransform(source, destination)</code></h4><p>给定类似于投影的对象，搜索转换函数将坐标数组从源投影转换为目标投影。</p><h4 id="8-ol-proj-setProj4-proj4"><a href="#8-ol-proj-setProj4-proj4" class="headerlink" title="8)ol.proj.setProj4(proj4)"></a>8)<code>ol.proj.setProj4(proj4)</code></h4><p>proj4注册。如果没有显式注册，则假定proj4js将加载在全局名称空间中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.proj.setProj4(proj4);</span><br></pre></td></tr></table></figure><h4 id="9-ol-proj-toLonLat-coordinate-opt-projection"><a href="#9-ol-proj-toLonLat-coordinate-opt-projection" class="headerlink" title="9)ol.proj.toLonLat(coordinate, opt_projection)"></a>9)<code>ol.proj.toLonLat(coordinate, opt_projection)</code></h4><p>将坐标转换为经度/纬度</p><ul><li><code>coordinate</code>：投影坐标</li><li><code>projection</code>：坐标的投影，默认是<code>Web Mercator</code>，即<code>“EPSG: 3857”</code></li></ul><h4 id="10-ol-proj-transform-coordinate-source-destination"><a href="#10-ol-proj-transform-coordinate-source-destination" class="headerlink" title="10)ol.proj.transform(coordinate, source, destination)"></a>10)<code>ol.proj.transform(coordinate, source, destination)</code></h4><p>将坐标从源投影转换为目标投影，这将返回一个新的坐标(并且不修改原始坐标)。</p><ul><li><code>coordinate</code>：坐标</li><li><code>source</code>：源投影</li><li><code>destination</code>：目标投影</li></ul><h4 id="11-ol-proj-transformExtent"><a href="#11-ol-proj-transformExtent" class="headerlink" title="11)ol.proj.transformExtent"></a>11)<code>ol.proj.transformExtent</code></h4><p>将范围从源投影转换为目标投影，这将返回一个新范围(并且不修改原始范围)。</p><h4 id="12-ol-proj-Units-string"><a href="#12-ol-proj-Units-string" class="headerlink" title="12)ol.proj.Units{string}"></a>12)<code>ol.proj.Units&#123;string&#125;</code></h4><p>投影单位：<code>&#39;degrees&#39;</code>, <code>&#39;ft&#39;</code>, <code>&#39;m&#39;</code>, <code>&#39;pixels&#39;</code>, <code>&#39;tile-pixels&#39;</code> or <code>&#39;us-ft&#39;</code></p>]]></content>
    
    
    <summary type="html">本人学习OpenLayers的记录</summary>
    
    
    
    <category term="javaScript" scheme="https://heavenimtoral.gitee.io/categories/javaScript/"/>
    
    
    <category term="WebGis" scheme="https://heavenimtoral.gitee.io/tags/WebGis/"/>
    
  </entry>
  
  <entry>
    <title>geoServer</title>
    <link href="https://heavenimtoral.gitee.io/2021/09/16/geoServer/"/>
    <id>https://heavenimtoral.gitee.io/2021/09/16/geoServer/</id>
    <published>2021-09-16T08:12:04.068Z</published>
    <updated>2021-09-22T07:23:44.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="geoServer"><a href="#geoServer" class="headerlink" title="geoServer"></a>geoServer</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Geoserver是一个功能齐全，遵循OGC开放标准的开源WFS-T和WMS服务器。利用Geoserver可以把数据作为maps/images来发布(利用WMS来实现)也可以直接发布实际的数据(利用WFS来实现)，同时也提供了修改，删除和新增的功能(利用WFS-T)。</p><p>GeoServer, 顾名思义,是一个Server. 它是开源的，允许用户查看和编辑地理数据。这是地理信息系统(GIS) 领域。GeoServer 是符合OGC 规范的一个全功能的WFS-T 和WMS server。</p><p>GeoServer能够发布的数据类型：</p><p>l 地图或影象——应用WMS，</p><p>l 实时数据——应用WFS，</p><p>l 用户更新、删除和编辑的数据——应用WFS-T。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="WMS-Web-Map-Service（Web地图服务）"><a href="#WMS-Web-Map-Service（Web地图服务）" class="headerlink" title="WMS: Web Map Service（Web地图服务）"></a>WMS: Web Map Service（Web地图服务）</h3><p>l利用具有地理空间位置信息的数据制作地图。其中将地图定义为地理数据可视的表现。这个规范定义了三个操作：</p><ul><li><p>GetCapabitities 返回服务级元数据，它是对服务信息内容和要求参数的一种描述；</p></li><li><p>GetMap 返回一个地图影像，其地理空间参考和大小参数是明确定义了的；</p></li><li><p>GetFeatureInfo（可选）返回显示在地图上的某些特殊要素的信息</p></li></ul><h3 id="WFS-Web-Feature-Service（Web要素服务）"><a href="#WFS-Web-Feature-Service（Web要素服务）" class="headerlink" title="WFS: Web Feature Service（Web要素服务）"></a>WFS: Web Feature Service（Web要素服务）</h3><ol><li><p>Web 地图服务返回的是图层级的地图影像，</p></li><li><p> Web要素服务（WFS）返回的是要素级的GML编码，并提供对要素的增加、修改、删除等事务操作，是对Web地图服务的进一步深入。OGC Web要素服务允许客户端从多个Web要素服务中取得使用地理标记语言（GML）编码的地理空间数据，定义了五个操作：</p></li></ol><ul><li><p>GetCapabilites 返回Web要素服务性能描述文档（用XML描述）；</p></li><li><p> DescribeFeatureType 返回描述可以提供服务的任何要素结构的XML文档；</p></li><li><p> GetFeature 一个获取要素实例的请求提供服务；</p></li><li><p> Transaction 为事务请求提供服务；</p></li><li><p>LockFeature 处理在一个事务期间对一个或多个要素类型实例上锁的请求。</p></li></ul><h3 id="WFS-T-Web-Map-Service-Transactional-允许用户以可传输的块编辑地理数据。"><a href="#WFS-T-Web-Map-Service-Transactional-允许用户以可传输的块编辑地理数据。" class="headerlink" title="WFS-T: Web Map Service-Transactional. 允许用户以可传输的块编辑地理数据。"></a>WFS-T: Web Map Service-Transactional. 允许用户以可传输的块编辑地理数据。</h3><h3 id="WCS：Web-Coverage-Service（Web覆盖服务）"><a href="#WCS：Web-Coverage-Service（Web覆盖服务）" class="headerlink" title="WCS：Web Coverage Service（Web覆盖服务）"></a>WCS：Web Coverage Service（Web覆盖服务）</h3><p>Web 覆盖服务（WCS）面向空间影像数据，它将包含地理位置值的地理空间数据作为“覆盖（Coverage）”在网上相互交换。</p><p>网络覆盖服务由三种操作组成：GetCapabilities，GetCoverage和DescribeCoverageType：</p><ul><li><p> GetCapabilities 操作返回描述服务和数据集的XML文档。</p></li><li><p> GetCoverage操作是在GetCapabilities确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的覆盖格式返回地理位置的值或属性。</p></li><li><p> DescribeCoverageType 操作允许客户端请求由具体的WCS服务器提供的任一覆盖层的完全描述。</p></li></ul><h3 id="GML-Geography-Markup-Language-一种用于描述地理数据的XML。"><a href="#GML-Geography-Markup-Language-一种用于描述地理数据的XML。" class="headerlink" title="GML: Geography Markup Language. 一种用于描述地理数据的XML。"></a>GML: Geography Markup Language. 一种用于描述地理数据的XML。</h3><h3 id="OGC——Open-Geospatial-Consortium——开放地理信息联盟"><a href="#OGC——Open-Geospatial-Consortium——开放地理信息联盟" class="headerlink" title="OGC——Open Geospatial Consortium——开放地理信息联盟"></a>OGC——Open Geospatial Consortium——开放地理信息联盟</h3><p>总之，GeoServer 是您需要显示地图在网页的那些工具的当中一个，用户可以缩放并且移动。可以与一些客户端联合使用，比如：MapBuilder (for web pages), UDig, GVSig,等等。对标准的使用允许信息从GeoServer 到其它地理信息可以很容易地被结合。</p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><h2 id="geoserver"><a href="#geoserver" class="headerlink" title="geoserver"></a>geoserver</h2><p><a href="http://geoserver.org/">官网地址</a></p><p>1、下载二进制压缩包</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161236.png" alt="image-20210916161130508"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161236.png" alt="image-20210916161227579"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161337.png" alt="image-20210916161335083"></p><p>2、解压压缩包</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161410.png" alt="image-20210916161409525"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161444.png" alt="image-20210916161442864"></p><p>3、运行geoServer,windows环境直接双击bin目录下的startup.bat，注意初始端口为8080，防止该端口被占用</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161601.png" alt="image-20210916161559218"></p><p>启动成功</p><p><img src="../../../../typora/images/image-20210916161934001.png" alt="image-20210916161934001"></p><p>4、登录页面（<a href="http://localhost:8080/geoserver/web/%EF%BC%89">http://localhost:8080/geoserver/web/）</a></p><p><strong>账号：admin</strong></p><p><strong>密码：geoserver</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916162040.png" alt="image-20210916162038804"></p><h2 id="QGIS"><a href="#QGIS" class="headerlink" title="QGIS"></a>QGIS</h2><p><a href="https://www.qgis.org/en/site/">QGIS官网</a></p><blockquote><p>介绍</p></blockquote><p>QGIS (原称Quantum GIS)是一个方便使用的开源桌面GIS软件，根据 GNU 通用公共许可授权。QGIS 是地理空间开源基金会 (OSGeo) 的一个正式专案，是一个跨平台的GIS桌面软件，可运行在 Windows、Linux、Mac OS X 和BSD上（ Android即将推出），并支持众多矢量、栅格、和数据库格式及功能。</p><p>QGIS的最大特点在于界面很友好，熟悉ArcGIS的人都能很快的掌握QGIS的操作，支持WMS并无缝集成PostGIS（对象-关系型数据库管理系统），几乎完全照搬了GRASS的分析功能，因此其分析功能也很强大。相比于商业GIS软件，QGIS的文件体积更小，需要的内存和处理能力也更小，因此它可以在旧的硬件上或CPU运算能力被限制的环境下运行，是一款轻量化的桌面GIS软件。</p><p>目前，QGIS被志愿者开发团体持续维护，已被翻译为31种语言，广泛使用在全世界的学术和专业环境中。</p><blockquote><p>下载安装</p></blockquote><p>1、下载</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916163635.png" alt="image-20210916163633893"></p><p>我的是windows系统，所以我选择windows下的QGIS</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916163736.png" alt="image-20210916163733071"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916163755.png" alt="image-20210916163753219"></p><p>2、点击安装</p><p>3、进入QGIS,，可以设置语言</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916165258.png" alt="image-20210916165256857"></p><p>点击setting</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916165239.png" alt="image-20210916165237421"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916165321.png" alt="image-20210916165320487"></p>]]></content>
    
    
    <summary type="html">本人学习geoServer的记录</summary>
    
    
    
    <category term="工具方法" scheme="https://heavenimtoral.gitee.io/categories/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"/>
    
    
    <category term="WebGis" scheme="https://heavenimtoral.gitee.io/tags/WebGis/"/>
    
  </entry>
  
  <entry>
    <title>excel数据转换成Sql</title>
    <link href="https://heavenimtoral.gitee.io/2021/07/10/excel%E6%95%B0%E6%8D%AE%E8%BD%ACsql/"/>
    <id>https://heavenimtoral.gitee.io/2021/07/10/excel%E6%95%B0%E6%8D%AE%E8%BD%ACsql/</id>
    <published>2021-07-10T02:39:42.001Z</published>
    <updated>2021-09-22T07:20:31.880Z</updated>
    
    <content type="html"><![CDATA[<p>我们在测试的时候，需要一些假数据，这些数据是从正式库经过特定条件查询出来的数据，一般情况下，可以直接导出sql语句，这个时候自然是万事大吉:smile:!但是运气不好的时候，遇到特别复杂的语句，比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">PARTITION</span> <span class="keyword">by</span> f.type <span class="keyword">order</span> <span class="keyword">by</span> f.op_time) rn,f.* </span><br><span class="line">                      <span class="keyword">from</span> pub.t_gisview_quality_detail_fs f  <span class="keyword">where</span> localnet_id = <span class="string">&#x27;104000&#x27;</span>) <span class="keyword">where</span> rn &lt;=<span class="number">3</span></span><br></pre></td></tr></table></figure><p>该条语句采用了子查询，由于数据库中没有子查询产生的表，所以无法导出sql语句，这个时候我们可以选择导出excel文件，在利用excel的函数，将这些数据转换成sql。</p><ol><li><p>将数据导出成excel文件</p></li><li><p>编写函数</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210710104053.png" alt="image-20210710104043838"></p><p>上边部分为写函数的地方，右边部分为sql生成的地方，sql生成后直接将鼠标放在边框上，当鼠标变成十字架时，往下拉到数据的最后一行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--excel的函数</span></span><br><span class="line">=CONCATENATE(&quot;<span class="keyword">insert</span> <span class="keyword">into</span> pub.T_GISVIEW_QUALITY_detail_his(<span class="keyword">ID</span>, LOCALNET_ID, LOCALNET_NAME, OP_TIME, <span class="keyword">TYPE</span>, TYPE_NAME, RES_ID, RES_TYPE)<span class="keyword">values</span> (sys_guid(),<span class="string">&#x27;&quot;,B2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,C2,&quot;&#x27;</span>,<span class="keyword">to_date</span>(<span class="string">&#x27;&quot;&amp;TEXT(D3,&quot;yyyy-mm-dd hh:mm:ss&quot;)&amp;&quot;&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>),<span class="string">&#x27;&quot;,E2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,F2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,G2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,J2,&quot;&#x27;</span>);&quot;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pub.T_GISVIEW_QUALITY_detail_his(<span class="keyword">ID</span>, LOCALNET_ID, LOCALNET_NAME, OP_TIME, <span class="keyword">TYPE</span>, TYPE_NAME, RES_ID, RES_TYPE)<span class="keyword">values</span> (sys_guid(),<span class="string">&#x27;104000&#x27;</span>,<span class="string">&#x27;泸州&#x27;</span>,<span class="keyword">to_date</span>(<span class="string">&#x27;2021-02-24 14:29:56&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>),<span class="string">&#x27;DEV-NCRPT#OUTPT&#x27;</span>,<span class="string">&#x27;支撑设施名称编码重复&#x27;</span>,<span class="string">&#x27;11418480D19D11DD8A1FA99D85251626&#x27;</span>,<span class="string">&#x27;局站&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>‘“,B2,”‘**相当于</strong>‘104000’<strong>，</strong>“,B2,”**就是在B2表格中的值，由于这是一个字符串数据，sql语句中要用’’包围，所以，我又加了一对单引号。</p><p>to_date(‘“&amp;TEXT(D3,”yyyy-mm-dd hh:mm:ss”)&amp;”‘,’YYYY-MM-DD HH24:MI:SS’)是将时间变成特定的格式，如果不加，它会变成时间戳，转换后为to_date(‘2021-02-24 14:29:56’,’YYYY-MM-DD HH24:MI:SS’)</p></blockquote></li><li><p>将sql复制进数据库中执行</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210710104410.png" alt="image-20210710104408801"></p></li></ol>]]></content>
    
    
    <summary type="html">在excel中将数据变成sql</summary>
    
    
    
    <category term="Sql" scheme="https://heavenimtoral.gitee.io/categories/Sql/"/>
    
    
    <category term="Sql" scheme="https://heavenimtoral.gitee.io/tags/Sql/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://heavenimtoral.gitee.io/2021/06/24/docker/"/>
    <id>https://heavenimtoral.gitee.io/2021/06/24/docker/</id>
    <published>2021-06-24T02:47:23.863Z</published>
    <updated>2021-09-22T07:18:28.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4">Docker学习视频</a></p><p><a href="https://www.docker.com/">Docker官网</a></p><p><a href="https://docs.docker.com/">Docker文档</a></p><p><a href="https://hub.docker.com/signup">Docker仓库网站</a>类似gitHub，我们可以把自己的镜像上传上去，也可以下载其他人的镜像。</p><blockquote><p>学前准备</p></blockquote><ul><li>了解一些基础的Linux命令</li></ul><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docker为什么出现"><a href="#Docker为什么出现" class="headerlink" title="Docker为什么出现"></a>Docker为什么出现</h3><p>一款产品，会存在多个环境，比如开发、测试、生产。多个环境会产生多个配置，导致问题。</p><p>环境配置是十分的麻烦，一般的环境还好解决，但是如果遇到集群（Redis，Es，Hadoop…..）费时费力。其次，开发人员将项目打包，运维人员将包安装后运行，会发现，如果该项目依赖Es，Redis等环境，运维人员需要去自己在本地去配置环境。还有，不能够跨平台，将windows上的项目打包发布到Linux上，由于环境不同，会出现问题。</p><p>所以思考，发布一个项目，可不可以带上环境安装打包！！！</p><p>传统：开发jar，运维来做！</p><p>现在：开发打包部署上线，一套流程做完！</p><p>如果开发一款手机应用，需要经历一下流程：java—apk—发布（应用商店）—安装即可用</p><p>现在使用Docker开发：java—jar（环境）—打包带上环境（镜像）—（docker仓库，商店）—下载发布的镜像—直接运行即可！</p><p>Docker给以上的问题提出了解决方案。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624143308.png" alt="image-20210624143259531"></p><blockquote><p>Docker的核心思想：隔离</p><p>以多个应用程序为例，Docker将每个程序隔离，像集装箱装载货物一样，一个程序占据一个集装箱（环境），不会干扰到其他程序。</p><p>通过隔离机制，可以将服务器利用到极致</p></blockquote><h3 id="Docker能干什么"><a href="#Docker能干什么" class="headerlink" title="Docker能干什么"></a>Docker能干什么</h3><blockquote><p>之前的虚拟机技术</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624150256.png" alt="image-20210624150255079"></p><p><strong>缺点</strong>：</p><ul><li>资源占用多</li><li>冗余步骤多</li><li>启动很慢</li></ul><blockquote><p>容器化技术</p></blockquote><p><strong>容器化技术不是模拟一个完整的系统！！！</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624150538.png" alt="image-20210624150537464"></p><p>每个程序各自隔离，</p><p><strong>Docker与虚拟机的不同：</strong></p><ul><li>传统虚拟机：虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主的内核，容器是没有自己的内核。</li><li>每个容器间是相互隔离，每个容器内都有一个属于自己的文件系统，互不影响。</li></ul><blockquote><p>DevOps(开发，运维)</p></blockquote><p><strong>应用更快速的交付和部署</strong></p><p>传统：一大堆帮助文档，安装程序。</p><p>Docker：打包镜像发布测试，一键运行</p><p><strong>更便捷的升级和扩容</strong></p><p>使用Docker后，我们部署的应用就和搭积木一样！</p><p>扩展时只需要在新服务器上运行打包出来的镜像。</p><p><strong>更简单的系统运维</strong></p><p>在容器化之后，我们开发、运维、测试的环境高度一致</p><p><strong>更高效的计算机资源利用</strong>：Docker是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例！服务器的性能可以被压榨到极致。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><strong>Docker的架构图</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624153009.png" alt="image-20210624153007126"></p><ul><li><p><strong>镜像（images）</strong></p><p>docker镜像好比一个模板，可以通过这个模板来创建容器服务，例如tomcat镜像===&gt;run===&gt;tomcat容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或项目运行在容器中）</p></li><li><p><strong>容器（container）</strong></p><p>Docker利用容器技术，独立运行一个或一个组应用，通过镜像创建的</p><p>启动，停止，删除等基本命令。</p><p>目前就可以把这个容器理解为一个简易的Linux系统</p></li><li><p><strong>仓库（registry）</strong></p><p>仓库就是存放镜像的地方！仓库分为私有仓库和公有仓库！Docker Hub是国外的仓库，但是阿里、百度这些也有，需要我们配置镜像加速（类似maven，maven仓库默认是国外的，我们在导入依赖的时候下载速度特别慢，但是我们可以配置阿里镜像源，这样下载速度就很快）</p></li></ul><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote><p>环境准备</p></blockquote><ul><li>会Linux基础</li><li>Linux服务器，CentOS 7</li><li>XShell 7(有学生免费使用版)</li></ul><blockquote><p>环境查看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统内核是3.10以上</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z /]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.6.1.el7.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#系统版本</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z /]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><ul><li>进入文档</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624155009.png" alt="image-20210624155008082"></p><ul><li>选择服务器</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624155113.png" alt="image-20210624155111321"></p><ul><li>选择操作系统</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624155309.png" alt="image-20210624155307688"></p><ul><li>卸载原有的Docker</li></ul><p>卸载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.卸载Docker</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash">2.需要的安装包</span>                 </span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3.设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo #国外的地址 速度特别慢</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  #Docker的阿里云镜像地址 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4.更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5.安装docker相关的 docker-ce 社区版 ee企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6.启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">7.检查docker</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">8.运行hello-world</span></span><br><span class="line">docker run hello-word</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">9.查看下载下来的hello-world镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载docker</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker #docker默认工作路径</span><br><span class="line">rm -rf /var/lib/containerd</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>docker version 结果</p><p><img src="../../../../typora/images/image-20210624170200382.png" alt="image-20210624170200382"></p><p>docker run hello-word 结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624170502.png" alt="image-20210624170500830"></p><p>docker images 结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624170620.png" alt="image-20210624170618701"></p><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><ul><li>登录阿里云，找到镜像服务加速</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625101551.png" alt="image-20210625101542761"></p><ul><li>找到镜像加速器，执行命令</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625101915.png" alt="image-20210625101912354"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;om9tizwe.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="docker-run-hello-world执行流程"><a href="#docker-run-hello-world执行流程" class="headerlink" title="docker run hello-world执行流程"></a>docker run hello-world执行流程</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625102343.png" alt="image-20210625102341883"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><strong>Docker是怎么工作的？</strong></p><p>Docker是一个client-server机构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问！</p><p>DockerService接收到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625104353.png" alt="image-20210625104352093"></p><p><strong>Docker为什么比VM快？</strong></p><ul><li>Docker有着比虚拟机更少的抽象层</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625104742.png" alt="image-20210625104741315"></p><ul><li><p>Docker利用的是宿主机的内核，VM需要的是Guest OS</p><p>所以说，新建一个容器的时候，docker不需要像虚拟机重新加载一个操作系统内核，避免引导，虚拟机是加载Guest OS，分钟级别的，而Docker是利用宿主机的操作系统，省略了这个复杂的过程， 秒级！</p></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625105438.png" alt="image-20210625105437335"></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #显示Docker版本信息</span><br><span class="line">docker info  #显示docker的系统级别信息 包括容器镜像的数量</span><br><span class="line">docker 命令 --help #万能命令</span><br></pre></td></tr></table></figure><blockquote><p>帮助文档地址</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210630141322.png" alt="image-20210630141313880"></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li><strong>docker images</strong> 显示镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   3 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG        镜像的标签</span><br><span class="line">IMAGE ID   镜像的id</span><br><span class="line">CREATED    镜像的创建时间</span><br><span class="line">SIZE       镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             #列出所有镜像</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           #只显示id</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>docker search</strong> 搜索镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11068     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4193      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   822                  [OK]</span><br><span class="line">percona                           Percona Server is a fork of the MySQL relati…   545       [OK]       </span><br><span class="line">phpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   259       [OK]       </span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   88                   </span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   88                   </span><br><span class="line">centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]</span><br><span class="line">bitnami/mysql                     Bitnami MySQL Docker Image                      52                   [OK]</span><br><span class="line">databack/mysql-backup             Back up mysql databases to... anywhere!         44                   </span><br><span class="line">deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]</span><br><span class="line">prom/mysqld-exporter                                                              39                   [OK]</span><br><span class="line">tutum/mysql                       Base docker image to run a MySQL database se…   35                   </span><br><span class="line">linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   30                   </span><br><span class="line">schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   29                   [OK]</span><br><span class="line">mysql/mysql-router                MySQL Router provides transparent routing be…   21                   </span><br><span class="line">centos/mysql-56-centos7           MySQL 5.6 SQL database server                   20                   </span><br><span class="line">circleci/mysql                    MySQL is a widely used, open-source relation…   20                   </span><br><span class="line">arey/mysql-client                 Run a MySQL client from a docker container      17                   [OK]</span><br><span class="line">fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   14                   [OK]</span><br><span class="line">openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6                    </span><br><span class="line">devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3                    </span><br><span class="line">ansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                2                    [OK]</span><br><span class="line">jelastic/mysql                    An image of the MySQL database server mainta…   1                    </span><br><span class="line">widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK</span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">  --filter=Stars=3000 #搜索收藏数大于3000的镜像</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>docker pull</strong>  下载镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载镜像 docker pull 镜像名[:tag]</span> </span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker pull mysql</span><br><span class="line">Using default tag: latest #如果不写tag 默认最新版本</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">b4d181a07f80: Pull complete  #分层下载：docker image的核心 联合文件系统</span><br><span class="line">a462b60610f5: Pull complete </span><br><span class="line">578fafb77ab8: Pull complete </span><br><span class="line">524046006037: Pull complete </span><br><span class="line">d0cbe54c8855: Pull complete </span><br><span class="line">aa18e05cc46d: Pull complete </span><br><span class="line">32ca814c833f: Pull complete </span><br><span class="line">9ecc8abdb7f5: Pull complete </span><br><span class="line">ad042b682e0f: Pull complete </span><br><span class="line">71d327c6bb78: Pull complete </span><br><span class="line">165d1d10a3fa: Pull complete </span><br><span class="line">2f40c47d0626: Pull complete </span><br><span class="line">Digest: sha256:52b8406e4c32b8cf0557f1b74517e14c5393aff5cf0384eff62d9e81f4985d4b #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest #真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">以下两个命令等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker.io/library/mysql:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>docker rmi</strong> 删除镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker pull imageId</span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><blockquote><p><strong>我们有了镜像才能创建容器</strong>，为了测试，我下载了一个centOS镜像，虽然在Linux centOS下在下一个centOS有点套娃</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker pull centos</span><br></pre></td></tr></table></figure><ul><li><strong>docker run</strong> 启动镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">参数列表</span></span><br><span class="line">--name=&quot;name&quot; 容器名字，用来区分容器</span><br><span class="line">-d           后台方式运行</span><br><span class="line">-it          使用交互方式运行，进入容器查看内容</span><br><span class="line">-p           指定容器的端口</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 主机端口:容器端口(常用)</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P           随机指定端口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker run -it centos /bin/bash #启动并进入容器</span><br><span class="line">[root@672f5830aa22 /]#  #你会发现此时的root id已经变了，表示我们已经进入了centos容器</span><br><span class="line">[root@672f5830aa22 /]# ls</span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">退出容器</span></span><br><span class="line">[root@672f5830aa22 /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ul><li><strong>docker ps</strong> 查看正在运行的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker ps -a  #查看曾经运行过的容器</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS                          PORTS     NAMES</span><br><span class="line">672f5830aa22   centos        &quot;/bin/bash&quot;   8 minutes ago   Exited (0) About a minute ago             interesting_hugle</span><br><span class="line">764eec518885   hello-world   &quot;/hello&quot;      5 days ago      Exited (0) 5 days ago                     sharp_borg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">-a #列出当前正在运行的容器，包括历史运行过的容器</span><br><span class="line">-n=? #显示最近创建的？个容器</span><br><span class="line">-q #只显示容器的编号</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>退出容器</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #退出并停止运行</span><br><span class="line">ctrl+p+q #容器不停止退出</span><br></pre></td></tr></table></figure><ul><li><strong>docker rm</strong> 删除容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id #删除指定容器</span><br><span class="line">docker rm -f $&#123;docker ps -aq&#125; #删除所有容器</span><br></pre></td></tr></table></figure><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210630163727.png" alt="image-20210630163726030"></p><h4 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a><strong>后台启动容器</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过docker run -d启动容器</span></span><br><span class="line">docker run -d centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">问题：docker ps 发现容器停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 20 容器</span><br></pre></td></tr></table></figure><h4 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure><h4 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通常我们的容器都是使用后台方式运行，需要进入容器</span></span><br><span class="line"></span><br><span class="line">docker exec -it 容器id </span><br><span class="line"></span><br><span class="line">docker attach 容器id</span><br><span class="line"></span><br><span class="line">exec 进入容器后，相当于开启一个新的终端</span><br><span class="line">attach 进入当前的终端</span><br></pre></td></tr></table></figure><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器di:路径 主机路径</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx #搜索镜像</span><br><span class="line"></span><br><span class="line">docker pull nginx #下载镜像</span><br><span class="line"></span><br><span class="line">docker images #查看镜像</span><br><span class="line"></span><br><span class="line">docker run -d --name nginx -p 3344:80 nginx #启动nginx容器 -d 后台运行 --name nginx 给容器起名nginx -p 3344：80 设置映射端口主机端口为3344 nginx容器内使用的端口80（nginx的默认端口）</span><br><span class="line"></span><br><span class="line">docker ps #查看正在运行的容器</span><br><span class="line"></span><br><span class="line">yum update -y &amp;&amp; yum install curl -y #安装curl</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本人学习Docker的记录</summary>
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="Docker" scheme="https://heavenimtoral.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap</title>
    <link href="https://heavenimtoral.gitee.io/2021/05/25/LinkedHashMap/"/>
    <id>https://heavenimtoral.gitee.io/2021/05/25/LinkedHashMap/</id>
    <published>2021-05-25T02:25:42.645Z</published>
    <updated>2021-06-24T02:15:02.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做一个展示数据的表格，发现没有按照顺序展示，查询数据的时候，发现数据是按顺序被查询出来的，哪到底是哪里出了问题喃:cry:?找了半天，最后发现在进行数据处理的时候，其他人采用了HashMap来存放数据，<strong>HashMap不能保证数据的顺序</strong>，这就是原因！！！最后，我将其类型由<strong>HashMap改成了LinkedHashMap</strong>就行了，LinkedHashMap是HashMap的子类，HashMap具有的方法LinkedHashMap也具有，而且也可以保证数据存放顺序，这样我就只需要修改一下类型，后面的处理就可以不用修改了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在做一个展示数据的表格，发现没有按照顺序展示，查询数据的时候，发现数据是按顺序被查询出来的，哪到底是哪里出了问题喃:cry:?找了半天，</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="LinkedHashMap" scheme="https://heavenimtoral.gitee.io/tags/LinkedHashMap/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习</title>
    <link href="https://heavenimtoral.gitee.io/2021/05/14/redis/"/>
    <id>https://heavenimtoral.gitee.io/2021/05/14/redis/</id>
    <published>2021-05-14T06:26:27.348Z</published>
    <updated>2021-06-24T02:10:29.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.bilibili.com/video/BV1S54y1R7SB">Redis学习视频</a></p><p>在做毕设的时候，关于权限框架，我本来打算采用shiro+Redis+JWT来实现的，可以原本放在阿里云上的redis服务连接不上了，但是在xshell访问到服务器上，却是可以使用的，而且我当初也成功地在本地访问到服务器上的redis了:sob:，我人傻了。现在只有在本地安装一手Redis了，顺带记录一手Redis的学习笔记。</p><p>这是我第三次学习redis了，真的难受。第一次学习时，是因为疫情原因，在家学习，效率有点低下。第二次，是在实习时，在学习后，我才搭建了自己的个人博客，所以没有学习笔记。在实习的时候，一直没有接触redis，对redis的操作都遗忘了，而且也没有学习笔记:cry:!只有重新学习了。</p><h2 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h2><p>我们以前学习的<strong>MySQL</strong>是关系型数据库，Redis是<strong>NoSql</strong>(非关系型数据库)。</p><h3 id="为什么要用NoSql"><a href="#为什么要用NoSql" class="headerlink" title="为什么要用NoSql"></a>为什么要用NoSql</h3><p>2021年是大数据的时代，以前的关系型数据库在面对如此庞大的数据量已经力不从心了。</p><h4 id="单机MySql时代"><a href="#单机MySql时代" class="headerlink" title="单机MySql时代"></a>单机MySql时代</h4><p>在早些年代，一个数据库可以应付其数据需求。</p><p>那个时候，更多的是去写静态网页Html，服务器不存在太大的压力。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514145324.png" alt="在这里插入图片描述"></p><p>在这种情况下，它存在这一些问题：</p><p>1、数据量如果太大，一个机器是放不下的。</p><p>2、数据的索引（B+Tree）如果太大，一个机器的内存也放不下</p><p>3、访问量（读写混合），服务器顶不住</p><p>如果出现以上问题，就需要去升级</p><h4 id="Memcached-MySQL-垂直拆分（读写分离）"><a href="#Memcached-MySQL-垂直拆分（读写分离）" class="headerlink" title="Memcached + MySQL + 垂直拆分（读写分离）"></a>Memcached + MySQL + 垂直拆分（读写分离）</h4><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦!</p><p>读写分离<br>mysql2：负责写操作，写完后将数据同步到 mysql1、mysql3<br>mysql1、mysql3：负责读取数据</p><p>每次都要去查询数据库的话就十分的麻烦!<br>缓存：Cache：只要数据不变，就从cache中拿数据，如果数据改变，就重新从 mysql1、mysql3中同步到缓存</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514150307.png" alt="在这里插入图片描述"></p><h4 id="分库分表-水平拆分（MySQL集群）"><a href="#分库分表-水平拆分（MySQL集群）" class="headerlink" title="分库分表 + 水平拆分（MySQL集群）"></a>分库分表 + 水平拆分（MySQL集群）</h4><p>技术和业务发展的同时，对人的要求也越来越高了。</p><blockquote><p>本质：数据库（读，写）</p></blockquote><p><strong>读</strong></p><p>由MyISAM变成Innodb</p><p>MyISAM：表锁，十分影响效率</p><p>Innodb：行锁</p><p><strong>写</strong></p><p>慢慢的就开始使用分库分表来解决写的压力</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514151008.png" alt="在这里插入图片描述"></p><h4 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h4><p>技术发展特别快，世界已经发生了翻天覆地的变化，现在的数据量大，变化很快。关系型数据库已经有点不够用了。在大数据的情况下，MySQL的表结构几乎无法更改，如果给具有1亿条的数据添加一个字段，想想都觉得恐怖。</p><blockquote><p>目前一个项目</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514152311.png" alt="在这里插入图片描述"></p><blockquote><p>为什么要用NoSql</p></blockquote><p>用户个人信息、社交网络、地理位置、用户产生的数据、用户日志等数据爆发式增长</p><p>这个时候，我们就需要使用NoSql数据库</p><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h3><blockquote><p>NoSQL</p></blockquote><p>NoSQL = Not Only SQL(不仅仅是数据库)</p><p>泛指非关系数据库，随着web2.0互联网的诞生！传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区！暴露出来很多难以克服的问题, NoSQL在当今大数据环境下发展的十分迅速, Redis是发展最快的,而且是我们当下必须要掌握的一个技术!</p><p>很多的数据类型用户的个人信息,社交网络,地理位置。这些数据类型的存储不需要-个固定的格式!<br>不需要多余的操作就可以横向扩展的! Map&lt;String,Object&gt; 使用键值对来控制!</p><blockquote><p>NoSQL的特点</p></blockquote><p>1、方便扩展（数据之间没有关系，很好扩展）</p><p>2、大数据最高性能（redis 1s能读取11万次，写8万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能比较高）</p><p>3、数据类型是多样型的（不需要事先设计数据库！随取随用！）</p><p>4、传统RDBMS和NoSQL</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">传统的RDBMS</span><br><span class="line"></span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中row co1</span><br><span class="line">- 操作操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br><span class="line">- ......</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NoSQL</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CPA原理</span><br><span class="line">- 高新能、高可用、高可扩</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>了解：3V+3高</p></blockquote><p>大数据时代的3V：主要是描述问题的</p><ul><li>海量Volume</li><li>多样Variety</li><li>实时Veiocity</li></ul><p>大数据时代的3高：主要是对程序的要求</p><ul><li>高并发</li><li>高可用</li><li>高性能</li></ul><p>在实际开发中：MySQL+NoSQL</p><h3 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h3><p><strong>kv键值对</strong></p><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memecache</li></ul><p><strong>文档型数据库（bson）</strong></p><ul><li><p>MongoDB</p><p>​    MongoDB是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档</p><p>​    MongoDB是一个介于关系型数据库和非关系型数据库中中间的产品！MongoDB是非关系型数据库中最像关系型数据库的！</p></li><li><p>ConthDB</p></li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521095432.png" alt="在这里插入图片描述"></p><p>图关系数据库存放的是关系，例如：朋友圈社交网络</p><blockquote><p>四者对比</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521095612.png" alt="在这里插入图片描述"></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Redis是什么</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务 !</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521100913.png" alt="在这里插入图片描述"></p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p><blockquote><p>Redis能干什么？</p></blockquote><ul><li>内存存储、持久化，内存中是断电即失，所以说持久化很重要（rab、aof）</li><li>效率高、可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量！）</li></ul><blockquote><p>特性</p></blockquote><ul><li>开源</li><li>支持多种语言</li><li>持久化</li><li>支持集群</li><li>支持事务 </li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p><a href="https://github.com/dmajkic/redis/releases">下载地址</a></p><ul><li>下载安装包</li><li>下载完毕，得到压缩包</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102123.png" alt="image-20210521102122239"></p><ul><li>解压</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102349.png" alt="image-20210521102348212"></p><ul><li>开启Redis（点击redis-server.exe）</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102456.png" alt="image-20210521102455296"></p><ul><li>使用Redis客户端，连接服务端（点击redis-cli.exe）</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102638.png" alt="image-20210521102636001"></p><blockquote><p>Windows下使用简单，但是Redis推荐Linux使用</p></blockquote><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>由于我在之前已经在我的linux安装了Redis，所以以下的操作，是我从其他地方找到的</p><ul><li><p>下载安装包！ redis-5.0.8.tar.gz</p></li><li><p>解压Redis的安装包！ 程序/opt</p></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103804.png" alt="在这里插入图片描述"></p><ul><li>进入解压后的文件，可以看到我们redis的配置文件</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103817.png" alt="在这里插入图片描述"></p><ul><li>基本的环境安装</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103834.png" alt="在这里插入图片描述"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103848.png" alt="在这里插入图片描述"></p><ul><li>redis的默认安装路径 /usr/local/bin</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103916.png" alt="在这里插入图片描述"></p><ul><li>将redis配置文件。复制到我们当前目录下</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103950.png" alt="在这里插入图片描述"></p><ul><li>redis默认不是后台启动的，修改配置文件！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104001.png" alt="在这里插入图片描述"></p><ul><li>启动Redis服务！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104015.png" alt="在这里插入图片描述"></p><ul><li>使用redis-cli 进行连接测试！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104030.png" alt="在这里插入图片描述"></p><ul><li>查看redis的进程是否开启！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104041.png" alt="在这里插入图片描述"></p><ul><li>如何关闭Redis服务呢？ shutdown</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104101.png" alt="在这里插入图片描述"></p><ul><li>再次查看进程是否存在</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104117.png" alt="在这里插入图片描述"></p><p>后面我们会使用单机多Redis启动集群测试！</p><blockquote><p>通过docker容器安装的redis，docker exec -it redis redis-cli</p></blockquote><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p>redis-benchmark 是一个压力测试工具！<br>官方自带的性能测试工具！<br>redis-benchmark 命令参数！<br>图片来自菜鸟教程</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104850.png" alt="在这里插入图片描述"></p><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试：100个并发连接100000个请求</span></span><br><span class="line"> redis-benchmark -c 100 -n 100000</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521105154.png" alt="image-20210521105152436"></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>Redis有16个数据库，默认使用第0个数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试是否联通</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line"><span class="comment">#测试是否联通选择数据库</span></span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#查看当前数库内容大小</span></span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">#存放 (name-&gt;hl)(k-&gt;v)</span></span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name hl</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#查看当前数据库所有key</span></span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="comment">#清除当前数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="comment">#清除全部数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521110255.png" alt="image-20210521110253552"></p><blockquote><p>Redis是单线程的！</p></blockquote><p>Redis是基于内存操作的，CPU不是Redis的性能瓶颈，Redis的瓶颈是根据机器的内存和网卡带宽，既然可以使用单线程实现，就使用单线程。</p><p>Redis是C语言写的，官方提供的数据为100000+的QPS,完全不比同样使用key-value的memecache差。</p><p><strong>Redis 为什么单线程还这么快？</strong></p><ul><li>误区1：高性能的服务器一定是多线程的</li><li>误区2：多线程一定比单线程效率高，实际上由于是多线程会进行CPU上下文切换</li></ul><p>Redis是将所有的数据全部放在内存中的，所以说使用单线程去操作就是最高的。</p><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><blockquote><p>官网文档</p></blockquote><p>edis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<strong>数据库、缓存和消息中间件</strong>。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><h4 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h4><h5 id="keys"><a href="#keys" class="headerlink" title="keys *"></a>keys *</h5><p>查看当前数据库下的所有key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135555.png" alt="image-20210521135448319"></p><h5 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set key value"></a>set key value</h5><p>添加 key-value的键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135450.png" alt="image-20210521135448319"></p><h5 id="get-key"><a href="#get-key" class="headerlink" title="get key"></a>get key</h5><p>获取key对应的值</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135636.png" alt="image-20210521135634794"></p><h5 id="exists-key"><a href="#exists-key" class="headerlink" title="exists key"></a>exists key</h5><p>这个key是否存在</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135816.png" alt="image-20210521135814689"></p><h5 id="move-key-db"><a href="#move-key-db" class="headerlink" title="move key db"></a>move key db</h5><p>将这个key移动到第db号数据库</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521140009.png" alt="image-20210521140007123"></p><h5 id="expire-key-time"><a href="#expire-key-time" class="headerlink" title="expire key time"></a>expire key time</h5><p>设置这个key的过期时间</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521140232.png" alt="image-20210521140229760"></p><blockquote><p>ttl key 可以查看剩余多少时间</p></blockquote><h5 id="type-key"><a href="#type-key" class="headerlink" title="type key"></a>type key</h5><p>查看key的类型</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521140538.png" alt="image-20210521140531368"></p><h5 id="del-key"><a href="#del-key" class="headerlink" title="del key"></a>del key</h5><p>删除key</p><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists key1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; append key1 ﾡﾱhelloﾡﾰ <span class="comment">#追加字符串，如果不存在则创建key</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1\xa1\xb1hello\xa1\xb0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key1 <span class="comment">#获取字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr views <span class="comment">#自增1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr views <span class="comment">#自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby views 10 <span class="comment">#指定增量</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; decrby views 10 <span class="comment">#指定减量</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 hello,hl</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 3 <span class="comment">#截取字符串[0,3]</span></span><br><span class="line"><span class="string">&quot;hell&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 -1 <span class="comment">#截取字符串</span></span><br><span class="line"><span class="string">&quot;hello,hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setrange key1 6 zsy <span class="comment">#替换字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,zsy&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#setex 设置到期时间</span></span><br><span class="line"><span class="comment">#setnx 不存在才设置</span></span><br><span class="line"><span class="comment">#mset 批量设置值</span></span><br><span class="line"><span class="comment">#mget 批量获取值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="built_in">set</span> user:1 &#123;name:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:18&#125;</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">getst <span class="comment">#先get后set</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list hello1 hello2 hello3 hello4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one <span class="comment"># 将一个值或者多个值 从列表左侧插入  one</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two <span class="comment"># 将一个值或者多个值 从列表左侧插入  two one</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three <span class="comment"># 将一个值或者多个值 从列表左侧插入  three two one</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class="comment"># 从左侧 依次取出所有元素</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1  <span class="comment"># 从左侧 依次取出0，1下标的元素</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list four  <span class="comment"># 将一个值或者多个值 从列表右侧插入  three two one four</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">LPOP：从左侧移除左侧第一个元素，返回移除的值</span><br><span class="line">RPOP：从右侧移除右侧第一个元素，返回溢出的值</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; Lpop list <span class="comment"># 从左侧移除左侧第一个元素，返回移除的值</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list <span class="comment"># 从右侧移除右侧第一个元素，返回溢出的值</span></span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">Lindex(list index)：获取从左侧开始数的对应下标的值</span><br><span class="line">Lindex list -1 获取最后一个值</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lindex list 0  <span class="comment"># 获取从左侧开始数的对应下标为0的值</span></span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">Llen  获取list长度</span><br><span class="line">127.0.0.1:6379&gt; llen list  <span class="comment"># 获取list长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">移除指定的值</span><br><span class="line">例子：取关</span><br><span class="line"></span><br><span class="line">Lrem  </span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 three <span class="comment"># 移除 一个  值为three</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 two  <span class="comment"># 移除 2个  值为two</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">ltrim 修剪  截取list</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; clear</span><br><span class="line">127.0.0.1:6379&gt; rpush list hello1 hello2 hello3 hello4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2  <span class="comment"># 从左侧开始只保留下标为1到2的</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">下面的list1也可以换为list  构建循环队列</span><br><span class="line">rpoplpush list list1：将list从右侧弹出一个元素，从左侧添加到list1(list1没有就创建)</span><br><span class="line">lpoprpush list list1</span><br><span class="line">rpoprpush list list1</span><br><span class="line">lpoplpush list list1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list list1</span><br><span class="line"><span class="string">&quot;hello3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;hello3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">lset list index valeu  根据下标设值，首先list必须存在，不然就报错，去覆盖下标的值，并不能新增，不然会报错下标越界</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">linsert key before|after value1 value2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpush list hello1 hello2 hello3 hello4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list before hello1 hello5 <span class="comment"># 在hello1的前面插入hello5</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello5&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">5) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list after hello1 hello6 <span class="comment"># 在hello1的后面插入hello5</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello5&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello6&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">5) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">6) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list after hello7 hello6  <span class="comment"># hello7不存在</span></span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>set中的值不能重复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello <span class="comment">#添加，如果没有则创建</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset a </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment">#展示所有元素</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset a <span class="comment">#判断该set集合中是否具有特定元素 1 具有 0不具有</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset c</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; scard myset <span class="comment">#获取集合中元素的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; srem myset hello <span class="comment">#移除特定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset <span class="comment">#随机抽选一个元素</span></span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2 <span class="comment">#随机抽选指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset <span class="comment">#随机移除一个元素</span></span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 c <span class="comment">#将指定元素从一个集合移动到另一个集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sdiff myset myset2  <span class="comment">#两个集合之间的差集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter myset myset2  <span class="comment">#两个集合之间的交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion myset myset2 <span class="comment">#两个集合之间并集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure><h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><p>Map集合，key-&gt;&lt;key,value&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash filed1 hl <span class="comment">#set一个具体的key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash filed1  <span class="comment">#get一个具体的key-value</span></span><br><span class="line"><span class="string">&quot;hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash a a b b <span class="comment">#set多个具体的key-value</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash a b   <span class="comment">#get多个具体的key-value</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash  <span class="comment">#get所有的key-value</span></span><br><span class="line">1) <span class="string">&quot;filed1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hl&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br><span class="line">5) <span class="string">&quot;b&quot;</span></span><br><span class="line">6) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash a  <span class="comment">#删除指定的key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;filed1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hl&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment">#获取key-value键值对数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash b <span class="comment">#判断指定字段是或存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment">#获取所有的key</span></span><br><span class="line">1) <span class="string">&quot;filed1&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash <span class="comment">#获取所有的value</span></span><br><span class="line">1) <span class="string">&quot;hl&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt;  hincrby myhash c 1 <span class="comment">#给特定字段（必须是数字）增加指定值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash c 3  <span class="comment">#如果特定字段不存在则添加 反之不做操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h5><p>在Set的基础上增加了一个值，zset k1 score1 v1，多了一个 score1，用于排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one <span class="comment">#添加1个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class="comment">#添加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange myset 0 -1 <span class="comment">#获取值</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 xiaohong</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 kuangshen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf <span class="comment">#升序排序 -inf 负无穷 +inf 正无穷</span></span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 withscores <span class="comment">#排序打印 负无穷到2500 withscores打印分数</span></span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 withscores <span class="comment">#降序排序 此时已经移除了xiaohong</span></span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;5000&quot;</span></span><br><span class="line">3) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">4) <span class="string">&quot;500&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaohong <span class="comment">#移除xiaohong</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary <span class="comment">#获取集合中的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2600&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">6) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcount salary 2500 3000 <span class="comment">#获取2500-3000区间之间的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote><p>简单介绍</p></blockquote><p>MySQL具有原子性，一致性、隔离性、持久性（acid），但是Redis的事务没有原子性。</p><p><strong>redis的单条命令可以保证原子性，但是事务不保证原子性！！！</strong></p><p><strong>redis的事务没有隔离级别概念</strong></p><p>所有的命令在事务中，并没有直接执行！只有发起执行命令（Exec）的时候才会执行！</p><p>Redis事务的本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行的过程中，会按照顺序执行！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多条命令按顺序执行，具有一次性、顺序性、排他性</span><br><span class="line"></span><br><span class="line">------ 队列 set set set 执行------</span><br></pre></td></tr></table></figure><blockquote><p>redis的事务分成3个阶段</p></blockquote><ul><li>开启事务（multi）</li><li>命令入队(….)</li><li>执行事务(exec)</li></ul><blockquote><p>正常执行事务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>   <span class="comment">#执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><blockquote><p>放弃事务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard <span class="comment">#取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4 </span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><blockquote><p>编译型异常（命令有错）！事务中的所有事务都不会执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 <span class="comment">#错误命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行事务</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k5</span><br><span class="line">(nil)                   <span class="comment">#set k5 v5没有执行</span></span><br></pre></td></tr></table></figure><blockquote><p>运行时异常，如果事务队列中存在语法性错误，那么执行命令的时候，其他命令可以正常执行的，错误的命令抛出异常</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; incr k1  <span class="comment">#错误语法 k1的值是字符串 不能+1</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行事务</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range  <span class="comment">#第一条命令错误</span></span><br><span class="line">2) OK                                                   <span class="comment">#第二条命令成功</span></span><br><span class="line">127.0.0.1:6379&gt; get k5</span><br><span class="line"><span class="string">&quot;v5&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Redis实现乐观锁"><a href="#Redis实现乐观锁" class="headerlink" title="Redis实现乐观锁"></a>Redis实现乐观锁</h4><p>watch：加锁 </p><p>unwatch：解锁</p><blockquote><p>监控</p></blockquote><p><strong>悲观锁：</strong></p><ul><li>很悲观，什么时候都会出问题，无论做什么都要加锁！</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li></ul><blockquote><p>Redis监测测试</p></blockquote><p>有100块的money，0块的out</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><blockquote><p>测试多线程修改值，使用watch可以当作redis的乐观锁</p></blockquote><p>此时money有80，out有20。</p><p>开启一个事务，消费10块</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210525154615.png" alt="image-20210525154606833"></p><p>在当前事务还没有执行的时候，另一个人直接修改了money</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210525154725.png" alt="image-20210525154723272"></p><p>在money被修改后，执行第一个事务</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210525154829.png" alt="image-20210525154827215"></p><p>此时返回nil，表示事务执行失败</p><h2 id="SpringBoot集合Redis"><a href="#SpringBoot集合Redis" class="headerlink" title="SpringBoot集合Redis"></a>SpringBoot集合Redis</h2><ol><li><p>创建项目</p></li><li><p>导入依赖</p><p>在SpringBoot2.x之后，原来使用的jedis被替换为了lettuce</p><p>因为jedis采用的直连，多个线程操作的话，是不安全的，如果想要避免，就要使用jedis pool连接池！BIO</p><p>lettuce采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据。NIO</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host&#x3D;localhost</span><br><span class="line">spring.redis.port&#x3D;6379</span><br></pre></td></tr></table></figure></li><li><p>redis配置类，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span><br><span class="line">    <span class="comment">// 自己定义了一个 RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认的序列化方式是JDK，我们可能会用JSON</span></span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>RedisUtil</strong>，对RedisTemplate的进一步封装，方便自己使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">      User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">      ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">      String jsonUser = om.writeValueAsString(user);</span><br><span class="line">      redisUtil.set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">      System.out.println(redisUtil.get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(redisUtil.get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210621093154.png" alt="image-20210621093145821"></p><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><blockquote><p>单位</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210621095422.png" alt="image-20210621095420638"></p><blockquote><p>包含</p></blockquote><p>可以将多个配置文件包含进来</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210621095521.png" alt="image-20210621095520268"></p><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#绑定的ip，目前只能本机访问，* 通配表示任意id都可以访问</span></span><br><span class="line">protected-mode yes <span class="comment">#是否开启保护模式</span></span><br><span class="line">port 6379 <span class="comment">#端口号</span></span><br></pre></td></tr></table></figure><blockquote><p>通用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes <span class="comment">#以守护进程的方式运行，默认是no，需要我们自己修改</span></span><br><span class="line">pidfile /var/run/redis.pid <span class="comment">#如果以后台的方式运行，我们需要指定一个pid文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志级别</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志文件名</span></span><br><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"><span class="comment"># Redis to log on the standard output. Note that if you use standard</span></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">databases 16 <span class="comment">#数据库个数，默认16个</span></span><br></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内执行了多少次操作则会持久化到.rdb和.aof文件中</p><p>redis是内存数据库，如果没有持久化，那么断电即失！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 <span class="comment">#900秒内 执行一次操作及以上 进行持久化</span></span><br><span class="line">save 300 10 <span class="comment">#300秒内 执行10次及以上的操作 进行持久化</span></span><br><span class="line">save 60 10000 <span class="comment">#60秒内 执行10000次及以上的操作 进行持久化</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#持久化如果出错，是否需要继续工作</span></span><br><span class="line"></span><br><span class="line">rdbcompression yes <span class="comment">#是否压缩rdb文件，需要消耗cpu资源</span></span><br><span class="line"></span><br><span class="line">rdbchecksum yes <span class="comment">#保存rdb文件时，是否进行检查</span></span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb <span class="comment">#rdb文件名</span></span><br><span class="line"></span><br><span class="line">dir ./ <span class="comment">#rdb保存目录</span></span><br></pre></td></tr></table></figure><blockquote><p>安全</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass foobared <span class="comment">#设置密码 默认被注释了</span></span><br></pre></td></tr></table></figure><blockquote><p>客户端</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 <span class="comment">#最大连接数</span></span><br><span class="line">maxmemory &lt;bytes&gt; <span class="comment">#最大内容容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment">#内存满后的处理策略 </span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; remove any key according to the LRU algorithm</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; remove a random key with an expire set</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; don&#x27;t expire at all, just return an error on write operations</span></span><br></pre></td></tr></table></figure><blockquote><p>APPEND ONLY MODE  aof</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment">#默认不开启aof模式，默认使用rdb方式持久化，在大部分情况下，rdb完全够用</span></span><br><span class="line"></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment">#持久化文件名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always 每次操作都要同步 速度慢</span></span><br><span class="line">appendfsync everysec <span class="comment">#每秒执行一次，可能会丢失这一秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no 不执行，操作系统自己执行同步</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>在指定的时间间隔内将内存中的数据及快照写入磁盘，也就是Snapshort快照，它恢复时是将快照文件直接读到内存里。Redis会单独创建一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化进程都结束了，再用这个文件替换上次持久化好的文件。整个过程中，主进程不进行任何IO操作。如果需要进行大规模的数据的恢复且对于数据恢复的完整性不是非常敏感，那么RDB方式要比AOF方式更加高效，RDB方式的缺点是最后一次持久化的数据可能会丢失。Redis默认的持久化就是RDB，一般情况下不需要修改这个配置。</p><blockquote><p>触发机制</p></blockquote><p>save的规则满足的情况下，会自动触发rdb规则</p><ul><li>执行flushall命令</li><li>退出redise</li><li>save</li></ul><blockquote><p>如何恢复rdb文件</p></blockquote><ul><li><p>将rdb文件放在指定目录下，redis启动的时候会自动检查dump.rdb 恢复其中的数据</p></li><li><p>查看存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;E:\\JavaUtil\\redis\\Redis-x64-3.2.100&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>将我们的所有命令都记录下来，恢复的时候将我们的所有命令都执行一遍。</p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次来完成数恢复工作。</p><blockquote><p>重写规则</p></blockquote><p>当aof文件大小超过64mb时，就会触发重写规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><blockquote><p>优点与缺点</p></blockquote><p><strong>优点</strong>：</p><ul><li><p>每一次修改都同步，文件完整性更好</p></li><li><p>每一秒同步一次，可能会丢失1秒数据</p></li><li><p>从不同步，效率最高</p></li></ul><p><strong>缺点</strong>：</p><ul><li>相对于数据文件来说，aof远大于rdb，修复的速度也比rdb慢</li><li>aof运行效率比rdb慢，所以redis默认是rdb持久化</li></ul><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息</p><p>redis客户端可以订阅任意数量的频道。</p><p>订阅/发布消息图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622092134.png" alt="image-20210622092125683"></p><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622092517.png" alt="img"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622092522.png" alt="img"></p><blockquote><p>命令</p></blockquote><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[PSUBSCRIBE pattern <a href="https://www.runoob.com/redis/pub-sub-psubscribe.html">pattern …]</a> 订阅一个或多个符合给定模式的频道。</td></tr><tr><td align="left">2</td><td align="left">[PUBSUB subcommand <a href="https://www.runoob.com/redis/pub-sub-pubsub.html">argument [argument …]]</a> 查看订阅与发布系统状态。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/pub-sub-publish.html">PUBLISH channel message</a> 将信息发送到指定的频道。</td></tr><tr><td align="left">4</td><td align="left">[PUNSUBSCRIBE <a href="https://www.runoob.com/redis/pub-sub-punsubscribe.html">pattern [pattern …]]</a> 退订所有给定模式的频道。</td></tr><tr><td align="left">5</td><td align="left">[SUBSCRIBE channel <a href="https://www.runoob.com/redis/pub-sub-subscribe.html">channel …]</a> 订阅给定的一个或多个频道的信息。</td></tr><tr><td align="left">6</td><td align="left">[UNSUBSCRIBE <a href="https://www.runoob.com/redis/pub-sub-unsubscribe.html">channel [channel …]]</a> 指退订给定的频道。</td></tr></tbody></table><blockquote><p>实例</p></blockquote><p>以下实例演示了发布订阅是如何工作的，需要开启两个 redis-cli 客户端。</p><p>在我们实例中我们创建了订阅频道名为 <strong>runoobChat</strong>:</p><p><strong>第一个 redis-cli 客户端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;SUBSCRIBE runoobChat</span><br><span class="line"></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1)<span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2)<span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3)(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 runoobChat 发布两次消息，订阅者就能接收到消息。</p><p><strong>第二个 redis-cli 客户端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;Redis PUBLISH test&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;Learn redis by runoob.com&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 订阅者的客户端会显示如下消息</span></span><br><span class="line"> 1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;runoobChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Redis PUBLISH test&quot;</span></span><br><span class="line"> 1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;runoobChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Learn redis by runoob.com&quot;</span></span><br></pre></td></tr></table></figure><p>gif 演示如下：</p><ul><li>开启本地 Redis 服务，开启两个 redis-cli 客户端。</li><li>在<strong>第一个 redis-cli 客户端</strong>输入 <strong>SUBSCRIBE runoobChat</strong>，意思是订阅 <code>runoobChat</code> 频道。</li><li>在<strong>第二个 redis-cli 客户端</strong>输入 <strong>PUBLISH runoobChat “Redis PUBLISH test”</strong> 往 runoobChat 频道发送消息，这个时候在第一个 redis-cli 客户端就会看到由第二个 redis-cli 客户端发送的测试消息。</li></ul><p><img src="../../../../typora/images/redis-pub-sub.gif" alt="img"></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><blockquote><p>集群环境配置</p></blockquote><p>由于我没有多服务器，只能进行伪集群搭建。</p><p>只需要配置从机，不需要配置主机。6379端口为主机，6380、6381端口为从机</p><ul><li>开启redis服务和客户端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z bin]<span class="comment"># redis-server /usr/myRedis/redis.conf</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z bin]<span class="comment"># redis-cli</span></span><br></pre></td></tr></table></figure><ul><li>查看主从信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication <span class="comment">#查看主从信息</span></span><br><span class="line"><span class="comment"># Replication </span></span><br><span class="line">role:master  <span class="comment">#master表示该redis为主机</span></span><br><span class="line">connected_slaves:0 <span class="comment">#从机数量为0</span></span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><ul><li>复制redis的配置文件，此时仅仅是复制了文件，还需要区修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z myRedis]<span class="comment"># cp redis.conf redis80.conf</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z myRedis]<span class="comment"># cp redis.conf redis81.conf</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z myRedis]<span class="comment"># ll -ls</span></span><br><span class="line">total 140</span><br><span class="line">44 -rw-r--r-- 1 root root 41431 Jun 22 11:26 redis80.conf</span><br><span class="line">44 -rw-r--r-- 1 root root 41431 Jun 22 11:27 redis81.conf</span><br><span class="line">44 -rw-r--r-- 1 root root 41431 Jun 22 11:06 redis.conf</span><br><span class="line"> 8 -rw-r--r-- 1 root root  4661 Jun 22 11:18 redis-log.log</span><br></pre></td></tr></table></figure><ul><li>修改从机的配置文件，即80和81。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">port 6380</span><br><span class="line">logfile <span class="string">&quot;/usr/myRedis/redis80-log.log&quot;</span></span><br><span class="line">dbfilename dump80.rdb</span><br></pre></td></tr></table></figure><p>81同上</p><ul><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep redis <span class="comment">#查看进程</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622114311.png" alt="image-20210622114309875"></p><ul><li><p>配置主从复制</p><p>现在三个redis都是主机，需要针对从机进行配置</p><blockquote><p>命令配置（暂时）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379 <span class="comment">#SLAVEOF ip地址 端口号</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; SLAVEOF no one <span class="comment">#使自己变成主机</span></span><br></pre></td></tr></table></figure><blockquote><p>配置文件（永远）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>此时，80和81都变成了从机。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622141005.png" alt="image-20210622141003606"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622141010.png" alt="image-20210622140945171"></p><p>主机的信息中也显示了从机的信息</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622141155.png" alt="image-20210622141152627"></p></li></ul><blockquote><p>主从复制</p></blockquote><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622104104.png" alt="image-20210622104103172"></p><p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><p>一般情况下，最少为一主二从，主机负责写操作，从机负责读操作。在实际环境中，一般是读操作数量远大于写操作。</p><blockquote><p>作用</p></blockquote><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>哨兵模式需要配置集群环境</p><blockquote><p>概述</p></blockquote><p><strong>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong>这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622151625.png" alt="img"></p><p>Redis哨兵</p><p>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p>用文字描述一下<strong>故障切换（failover）</strong>的过程。假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。这样对于客户端而言，一切都是透明的。</p><blockquote><p>使用</p></blockquote><ul><li>配置文件</li></ul><p>创建sentinel.conf文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>ip地址 端口号 1(数字1代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机)</p><ul><li>启动哨兵</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /usr/myRedis/sentinel.conf</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622153044.png" alt="image-20210622153043431"></p><blockquote><p>作用</p></blockquote><p>1、不时地监控redis是否按照预期良好地运行;<br>2、如果发现某个redis节点运行出现状况，能够通知另外一个进程(例如它的客户端);<br>3、能够进行自动切换。当一个master节点不可用时，能够选举出master的多个slave(如果有超过一个slave的话)中的一个来作为新的master,其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。<br>4、哨兵为客户端提供服务发现，客户端链接哨兵，哨兵提供当前master的地址然后提供服务，如果出现切换，也就是master挂了，哨兵会提供客户端一个新地址</p><blockquote><p>优缺点</p></blockquote><p>优点：</p><ol><li>哨兵集群，基于主从复制模式，主从复制的优点，他都有</li><li>主从可以切换，故障可以转移，系统的可用性更好</li><li>哨兵模式就是主从复制的升级，更加健壮</li></ol><p>缺点：</p><ol><li>redis不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦。</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多的选择。</li></ol><h2 id="缓存穿透和雪崩"><a href="#缓存穿透和雪崩" class="headerlink" title="缓存穿透和雪崩"></a>缓存穿透和雪崩</h2><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面，但同时，它带来了一些问题。其中，最重要的问题是数据一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性比较高，就不能使用缓存。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><blockquote><p>概念</p></blockquote><p>用户想要查询一个数据，发现redis内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库，这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622155546.png" alt="image-20210622155544824"></p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><blockquote><p>概述</p></blockquote><p>这里需要注意和缓存穿透的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p><blockquote><p>解决方案</p></blockquote><p><strong>设置热点数据永不过期</strong></p><p>从缓存层面上看，热点key永不过期，不会存在key过期导致的问题</p><p><strong>加互斥锁</strong></p><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去后端查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将压力转移到了分布式锁上，因此对分布式锁的考验很大。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概念</p></blockquote><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。</p><p>产生雪崩的原因之一，比如在双十一时，要到12点了，很快迎来一波抢购，这波商品时间比较集中的放入缓存。假设过期时间为1小时，那么到了凌晨一点的时候，这批商品的缓存都过期了，而对这批商品的访问查询，都落到数据库上，对于数据库而言，就会产生周期性的压力波峰，于是所有的请求都会到达存储层，造成存储层也挂掉的情况。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622164157.png" alt="image-20210622164156245"></p><blockquote><p>解决方案</p></blockquote><p><strong>redis高可用</strong></p><p>搭建集群（异地多活）</p><p><strong>限流降级</strong></p><p>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong></p><p>在正式部署之前，先把可能访问的数据预先访问一遍，这部分可能会被大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间尽量均匀。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1S54y1R7SB&quot;&gt;Redis学习视频&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="redis" scheme="https://heavenimtoral.gitee.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Jackson</title>
    <link href="https://heavenimtoral.gitee.io/2021/05/13/jackson/"/>
    <id>https://heavenimtoral.gitee.io/2021/05/13/jackson/</id>
    <published>2021-05-13T08:10:34.947Z</published>
    <updated>2021-10-19T08:49:19.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Boot 内置了jackson来完成JSON的序列化和反序列化操作。Jackson使用<strong>ObjectMapper</strong>类将POJO对象序列化成JSON字符串，也能将JSON字符串反序列化成POJO对象。</p><blockquote><p>JackSon支持三种层次的序列化和反序列化方式：</p></blockquote><p>1、采用JsonParser来解析JSON，解析结果是一串Tokens，采用JsonGenerator来生成JSON，这是最底层的方式。<br>2、采用树遍历方式，JSON被读入到JsonNode对象中，可以像操作XML DOM那样读取JSON。<br>3、采用DataBind方式，将POJO序列化成JSON，或者反序列化到POJO，这是最直接和最简单的一种方式，不过有时候需要辅助Jackson的注解或者上述序列化实现类来个性化序列化和反序列化操作。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="对象绑定"><a href="#对象绑定" class="headerlink" title="对象绑定"></a>对象绑定</h2><p>应用程序更常见的是使用Java对象来与JSON数据互相绑定，仅仅调用<strong>ObjectMapper</strong>的readValue来实现，我们现在举个例子，可以创建一个POJO对象来与JSON相对应，<strong>User</strong>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（1）使用readValue方法来反序列化上面的JSON字符串，即json转换为对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadValue</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;id\&quot;:10,\&quot;sex\&quot;:\&quot;男\&quot;,\&quot;role\&quot;:\&quot;admin\&quot;&#125;&quot;</span>;</span><br><span class="line">    User user = objectMapper.readValue(str,User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&quot;&#123;&#39;name&#39;:&#39;张三&#39;,&#39;id&#39;:10,&#39;sex&#39;:&#39;男&#39;,&#39;role&#39;:&#39;admin&#39;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可能有人好奇为什么不按照上面的格式来写json格式字符串，因为json中如果使用单引号会出现问题，只能使用双引号</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513164036.png" alt="image-20210513164035071"></p><blockquote><p>json字符串已经被转换成User对象了</p></blockquote><p><strong>（2）将POJO序列化成JSON，使用mapper的writeValueAsString方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPojoToJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        String jsonStr = objectMapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513164534.png" alt="image-20210513164533098"></p><blockquote><p>pojo对象转换成了json格式字符串</p></blockquote><p><strong>（3）json转集合</strong></p><p> json转集合比较麻烦，因为你无法同时把集合的class和元素的class同时传递到一个参数。因此Jackson做了一个类型工厂，用来解决这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJsonToCollection</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>,<span class="number">13</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//生成一个集合的json字符串</span></span><br><span class="line">        String jsonStr = objectMapper.writeValueAsString(Arrays.asList(user,user1));</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将json字符串转集合  objectMapper.getTypeFactory().constructCollectionType(List.class,User.class) 第一个参数为集合的class，第二个为&lt;&gt;中的class</span></span><br><span class="line">        List&lt;User&gt; userList = objectMapper.readValue(jsonStr,objectMapper.getTypeFactory().constructCollectionType(List.class,User.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(userList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514092202.png" alt="image-20210514092153327"></p><p><strong>json转任意复杂类型</strong></p><p>当对象泛型关系复杂时，类型工厂也不好使了。这个时候Jackson提供了<strong>TypeReference</strong>来接收类型泛型，然后底层通过反射来获取泛型上的具体类型。实现数据转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJsonTypeReference</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    User user1 = <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>,<span class="number">13</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    <span class="comment">//生成一个集合的json字符串</span></span><br><span class="line">    String jsonStr = objectMapper.writeValueAsString(Arrays.asList(user,user1));</span><br><span class="line">    System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将json字符串转集合  objectMapper.getTypeFactory().constructCollectionType(List.class,User.class) 第一个参数为集合的class，第二个为&lt;&gt;中的class</span></span><br><span class="line">    List&lt;User&gt; userList = objectMapper.readValue(jsonStr,<span class="keyword">new</span> TypeReference&lt;List&lt;User&gt;&gt;()&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(userList);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514092530.png" alt="image-20210514092529280"></p><h2 id="Jackson注解"><a href="#Jackson注解" class="headerlink" title="Jackson注解"></a>Jackson注解</h2><p>Jackson包含了很多注解，用来个性化序列化和反序列化操作，主要有如下注解。</p><p><strong>（1）@JsonProperty</strong>，作用在属性上，用来为JSON Key指定一个别名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(&quot;userName&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p> <strong>（2）@JsonIgnore</strong>，作用在属性上，用来忽略此属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure><p><strong>（3）@JsonIgnoreProperties</strong>，忽略一组属性，作用于类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;id&quot;,&quot;photo&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>（4）@JsonFormat</strong>，用于日期格式化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH-mm-ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date d;</span><br></pre></td></tr></table></figure><p><strong>（5）@JsonView</strong>，作用在类或者属性上，用来定义一个序列化组。Spring MVC的Controller方法可以使用同样的@JsonView来序列化属于这一组的配置。比如对于User对象，某些情况下只返回id属性就行，而某些情况下需要返回id和名称。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdView</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdNameView</span> <span class="keyword">extends</span> <span class="title">IdView</span></span>&#123;&#125;;</span><br><span class="line"><span class="meta">@JsonView(IdView.class)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="meta">@JsonView(IdNameView.class)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.id = id;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">controller</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@JsonView(User.IdView.class)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/id.json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">queryIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setName(<span class="string">&quot;scg&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>（6）@JsonSerialize</strong>，指定一个实现类来自定义序列化。类必须实现JsonSerializer接口。</p><h2 id="jackson-Stream"><a href="#jackson-Stream" class="headerlink" title="jackson Stream"></a>jackson Stream</h2><p>Jackson提供了一种对于<strong>性能要求</strong>应用程序操作json更加高效的方式——<strong>流式API</strong>，这种方式<strong>开销小，性能高</strong>，因此，如果应用程序或者程序逻辑对于性能有一定要求，可以使用这种方式来进行json文件的读写操作，而对于一般的读写，使用普通的databind api即可。</p><blockquote><p>注意</p></blockquote><p>1、与Java8的“流式”概念不同，这种Jackson的这种流式是属于IO流，在写出与读入的最后都要进行流的关闭 —— close()。</p><p>2、这种流式API（Streaming APIs），是一种高性能（high-performance）读写JSON的方式，同时也是一种增量模式（incremental mode）。</p><p>3、Token概念：使用流式API的时候，每一个JSON 字符串都是一个独立的 token ，每一个token都会被增量处理（可以理解为一个一个地往上增加，类似于垒砖），这就是“增量模式”的含义。比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Morty&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Token 1 = “{“</p><p>Token 2 = “name”</p><p>Token 3 = “Morty”</p><p>Token 4 = “}”</p><p>4、流式API的缺点：虽然流式API在性能上有所特长，但是通过第三点，也可以知道，每一个token都是增量处理的，也就是说，我们必须要小心翼翼地处理每个token，这可能会因为粗心导致丢掉必要的token （如 “}”、”]” 等），而且代码可能并不简洁，可读性也不一定好，因此，不到需要考虑性能的时候，一定不要使用这种方式。</p><blockquote><p>测试</p></blockquote><p>在使用的时候我们要关注两个类：<strong>JsonGenerator</strong>和<strong>JsonParser</strong></p><p><strong>JsonGenerator</strong>：是用来生成Json的</p><p><strong>JsonParser</strong>：是用来解析json的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJsonGenerator</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        JsonFactory factory = <span class="keyword">new</span> JsonFactory();</span><br><span class="line">        <span class="comment">// -----------------JsonGenerator --------------------</span></span><br><span class="line">        JsonGenerator gentor = factory.createGenerator(<span class="keyword">new</span> File(<span class="string">&quot;user.json&quot;</span>), JsonEncoding.UTF8);</span><br><span class="line">        gentor.writeStartObject(); <span class="comment">// &#123;</span></span><br><span class="line">        gentor.writeStringField(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tomson&quot;</span>);</span><br><span class="line">        gentor.writeNumberField(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        gentor.writeFieldName(<span class="string">&quot;messages&quot;</span>);</span><br><span class="line">        gentor.writeStartArray(); <span class="comment">// [</span></span><br><span class="line">        gentor.writeString(<span class="string">&quot;msg1&quot;</span>);</span><br><span class="line">        gentor.writeString(<span class="string">&quot;msg2&quot;</span>);</span><br><span class="line">        gentor.writeString(<span class="string">&quot;msg3&quot;</span>);</span><br><span class="line">        gentor.writeEndArray(); <span class="comment">// ]</span></span><br><span class="line">        gentor.writeEndObject(); <span class="comment">// &#125;</span></span><br><span class="line">        gentor.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ------------------JsonParser --------------------</span></span><br><span class="line">        JsonParser parser = factory.createParser(<span class="keyword">new</span> File(<span class="string">&quot;user.json&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (parser.nextToken() != JsonToken.END_OBJECT) &#123;</span><br><span class="line">            String fieldName = parser.getCurrentName();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;name&quot;</span>.equals(fieldName)) &#123;</span><br><span class="line">                <span class="comment">// current token is &quot;name&quot;,move to next which is &quot;name&quot;&#x27;s value.</span></span><br><span class="line">                parser.nextToken();</span><br><span class="line">                System.out.println(parser.getText());<span class="comment">// display &quot;Tomson&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;age&quot;</span>.equals(fieldName)) &#123;</span><br><span class="line">                parser.nextToken();</span><br><span class="line">                System.out.println(parser.getIntValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;messages&quot;</span>.equals(fieldName)) &#123;</span><br><span class="line">                parser.nextToken();</span><br><span class="line">                <span class="comment">// messages is array, loop until equals &quot;]&quot;</span></span><br><span class="line">                <span class="keyword">while</span>(parser.nextToken() != JsonToken.END_ARRAY) &#123;</span><br><span class="line">                    System.out.println(parser.getText());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        parser.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>由于{}，[]，()等都被算成独立token，所以我们在拼写或解析的时候，一定要注意不要丢三落四。</p><p><strong>生成的user.json文件</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514100510.png" alt="image-20210514100509418"></p><p><strong>从json文件当中读取的数据</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514100652.png" alt="image-20210514100650624"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Spring Boot 内置了jackson来完成JSON的序列化和反序列化操作。Jackson使用&lt;strong&gt;ObjectMapper</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="json" scheme="https://heavenimtoral.gitee.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Lambda</title>
    <link href="https://heavenimtoral.gitee.io/2021/05/13/Java8-Lanbda/"/>
    <id>https://heavenimtoral.gitee.io/2021/05/13/Java8-Lanbda/</id>
    <published>2021-05-13T06:57:44.351Z</published>
    <updated>2021-05-13T08:06:25.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从java8出现以来lambda是最重要的特性之一，它可以让我们用简洁流畅的代码完成一个功能。 很长一段时间java被吐槽是冗余和缺乏函数式编程能力的语言，随着函数式编程的流行java8种也引入了 这种编程风格。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513145847.png" alt="img"></p><blockquote><p>lambda是什么</p></blockquote><p>lambda表达式是一段可以传递的代码，它的核心思想是将面向对象中的传递数据变成传递行为。 我们回顾一下在使用java8之前要做的事，之前我们编写一个线程时是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;do something.&quot;</span>);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也有人会写一个类去实现Runnable接口，这样做没有问题，我们注意这个接口中只有一个run方法， 当把Runnable对象给Thread对象作为构造参数时创建一个线程，运行后将输出do something.。 我们使用匿名内部类的方式实现了该方法。</p><p>这实际上是一个代码即数据的例子，在run方法中是线程要执行的一个任务，但上面的代码中任务内容已经被规定死了。 当我们有多个不同的任务时，需要重复编写如上代码。</p><p>设计匿名内部类的目的，就是为了方便 Java 程序员将代码作为数据传递。不过，匿名内部 类还是不够简便。 为了执行一个简单的任务逻辑，不得不加上 6 行冗繁的样板代码。那如果是lambda该怎么做?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = () -&gt; System.out.println(<span class="string">&quot;do something.&quot;</span>);</span><br></pre></td></tr></table></figure><p>嗯，这代码看起来很酷，你可以看到我们用()和-&gt;的方式完成了这件事，这是一个没有名字的函数，也没有人和参数，再简单不过了。 使用-&gt;将参数和实现逻辑分离，当运行这个线程的时候执行的是-&gt;之后的代码片段，且编译器帮助我们做了类型推导； 这个代码片段可以是用{}包含的一段逻辑。下面一起来学习一下lambda的语法。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression &#x3D; (variable) -&gt; action</span><br></pre></td></tr></table></figure><ul><li><p>variable: 这是一个变量,一个占位符。像x,y,z,可以是多个变量；</p></li><li><p>action: 这里我称它为action, 这是我们实现的代码逻辑部分,它可以是一行代码也可以是一个代码片段。</p></li></ul><p>可以看到Java中lambda表达式的格式：参数、箭头、以及动作实现，当一个动作实现无法用一行代码完成，可以编写 一段代码用{}包裹起来。</p><p>lambda表达式可以包含多个参数,例如：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int sum &#x3D; (x, y) -&gt; x + y;</span><br></pre></td></tr></table></figure><p>这时候我们应该思考这段代码不是之前的x和y数字相加，而是创建了一个函数，用来计算两个操作数的和。 后面用int类型进行接收，在lambda中为我们省略去了return。</p><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>函数式接口是只有一个方法的接口，用作lambda表达式的类型。前面写的例子就是一个函数式接口，来看看jdk中的Runnable源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只有一个抽象方法run，实际上你不写public abstract也是可以的，在接口中定义的方法都是public abstract的。 同时也使用注解@FunctionalInterface告诉编译器这是一个函数式接口，当然你不这么写也可以，标识后明确了这个函数中 只有一个抽象方法，当你尝试在接口中编写多个方法的时候编译器将不允许这么干。</p><p>我们来编写一个函数式接口，输入一个年龄，判断这个人是否是成人。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionInterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行Predicate判断</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age       年龄</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> predicate Predicate函数式接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>          返回布尔类型结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doPredicate</span><span class="params">(<span class="keyword">int</span> age, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> predicate.test(age);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isAdult = doPredicate(<span class="number">20</span>, x -&gt; x &gt;= <span class="number">18</span>);</span><br><span class="line">        System.out.println(isAdult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个例子我们很轻松的完成 是否是成人 的动作，其次判断是否是成人，在此之前我们的做法一般是编写一个 判断是否是成人的方法，是无法将 判断 共用的。而在本例只，你要做的是将 行为 (判断是否是成人，或者是判断是否大于30岁) 传递进去，函数式接口告诉你结果是什么。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从java8出现以来lambda是最重要的特性之一，它可以让我们用简洁流畅的代码完成一个功能。 很长一段时间java被吐槽是冗余和缺乏函数式</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="Java8新特性" scheme="https://heavenimtoral.gitee.io/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity+JWT+SpringBoot</title>
    <link href="https://heavenimtoral.gitee.io/2021/05/10/springSecuity+JWT/"/>
    <id>https://heavenimtoral.gitee.io/2021/05/10/springSecuity+JWT/</id>
    <published>2021-05-10T11:04:53.322Z</published>
    <updated>2021-05-12T09:05:28.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如今，互联网项目对于安全的要求越来越严格，这就是对后端开发提出了更多的要求，目前比较成熟的几种大家比较熟悉的模式，像RBAC 基于角色权限的验证，shiro框架专门用于处理权限方面的，另一个比较流行的后端框架是Spring-Security，该框架提供了一整套比较成熟，也很完整的机制用于处理各类场景下的可以基于权限，资源路径，以及授权方面的解决方案，部分模块支持定制化，而且在和oauth2.0进行了很好的无缝连接，在移动互联网的授权认证方面有很强的优势，具体的使用大家可以结合自己的业务场景进行选取和使用</p><p>下面来说说关于单点登录中目前比较流行的一种使用方式，就是springsecurity+jwt实现无状态下用户登录；</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p>1、创建数据库及表</p><p>用户表创建sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><h2 id="项目工程准备"><a href="#项目工程准备" class="headerlink" title="项目工程准备"></a>项目工程准备</h2><p>1、创建项目工程</p><p>用spring init创建一个springboot项目。</p><p>2、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- security --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- mybatisPlus --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jwt --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springsecurity</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springsecurity?useUnicode=true&amp;characterEncoding=UTF-8&amp;useTimezone=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mappers/*Mapper.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="编程阶段"><a href="#编程阶段" class="headerlink" title="编程阶段"></a>编程阶段</h1><h2 id="开发必知"><a href="#开发必知" class="headerlink" title="开发必知"></a>开发必知</h2><h3 id="SpringSecurity相关"><a href="#SpringSecurity相关" class="headerlink" title="SpringSecurity相关"></a>SpringSecurity相关</h3><p>使用SpringSecurity进行权限控制，要实现UserDetailsService和UserDetails</p><blockquote><p>UserDetailsService在身份认证中的作用</p></blockquote><p> Spring Security中进行身份验证的是AuthenticationManager接口，ProviderManager是它的一个默认实现，但它并不用来处理身份认证，而是委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证。检查后或者返回Authentication对象或者抛出异常。</p><p>验证身份就是加载响应的UserDetails，看看是否和用户输入的账号、密码、权限等信息匹配。此步骤由实现AuthenticationProvider的DaoAuthenticationProvider（它利用UserDetailsService验证用户名、密码和授权）处理。包含 GrantedAuthority 的 UserDetails对象在构建 Authentication对象时填入数据。</p><blockquote><p>校验流程</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512101507.jpg" alt="img"></p><h3 id="类相关"><a href="#类相关" class="headerlink" title="类相关"></a>类相关</h3><p>在本次学习中我们将要完成以下类的开发</p><ol><li><p>基础类</p><p><strong>User</strong>(用户的实体类)</p><p><strong>UserMapper</strong>(用户DAO层接口，由于我们引入的是MybatisPlus,，所以这次开发中我们不需要xml文件)</p><p><strong>LoginUser</strong>(用于控制层接收登录时传递过来的数据)</p></li><li><p>Security相关</p><p><strong>SerurityCpnfig</strong>(Security的配置类)</p><p><strong>JwtAccessDeniedHandler</strong>（无权限时处理类）</p><p><strong>JwtAuthenticationEntryPoint</strong>(没有凭证时处理类)</p><p><strong>JWTAuthenticationFilter</strong>(认证拦截器类)</p><p><strong>JWTAuthorizationFilter</strong>(授权拦截器类)</p><p><strong>UserDetailsServiceImpl</strong>(实现了<strong>UserDetailsService</strong>接口，里面具有登陆时根据条件查询用户的方法)</p></li><li><p>JWT</p><p><strong>JWTUtils</strong>(JWT的方法封装，以及基础配置)</p><p><strong>JWTUser</strong>(实现了<strong>UserDetails</strong>接口)</p></li><li><p>测试</p><p><strong>LoginController</strong>(里面具有注册方法)</p><p><strong>UserController</strong>(里面有添加、修改、删除三个方法，添加要求必须登录，修改要求权限角色是ROLE_USER，删除要求权限角色是ROLE_ADMIN)</p></li></ol><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512095115.png" alt="image-20210512095106359"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;role&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h3><p>由于我们使用的是MyBatisPlus，所以一些基础的sql，我们可以不用写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoginUser"><a href="#LoginUser" class="headerlink" title="LoginUser"></a>LoginUser</h3><p>创建LoginUser，springsecurity有个自己的登录接口(POST)，用这个来接收对应的登录信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer rememberMe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTUser"><a href="#JWTUser" class="headerlink" title="JWTUser"></a>JWTUser</h3><p>JWTUser需要实现<strong>UserDetails</strong>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写一个能直接使用user创建jwtUser的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        id = user.getId();</span><br><span class="line">        username = user.getUsername();</span><br><span class="line">        password = user.getPassword();</span><br><span class="line">        authorities = Collections.singleton(<span class="keyword">new</span> SimpleGrantedAuthority(user.getRole()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTUtils"><a href="#JWTUtils" class="headerlink" title="JWTUtils"></a>JWTUtils</h3><p>JWT的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_HEADER = <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_PREFIX = <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">&quot;jwtsecret&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISS = <span class="string">&quot;zsy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 角色的key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROLE_CLAIMS = <span class="string">&quot;role&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过期时间是3600秒，既是1个小时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRATION = <span class="number">3600L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择了记住我之后的过期时间为7天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRATION_REMEMBER = <span class="number">604800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建token</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(Integer id, String username,String role, <span class="keyword">boolean</span> isRememberMe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> expiration = isRememberMe ? EXPIRATION_REMEMBER : EXPIRATION;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(ROLE_CLAIMS, role);</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, SECRET)</span><br><span class="line">                .setClaims(map)</span><br><span class="line">                .setIssuer(ISS)</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + expiration * <span class="number">1000</span>))</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从token中获取用户名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUsername</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getTokenBody(token).getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUserRole</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) getTokenBody(token).get(ROLE_CLAIMS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getUserId</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer) getTokenBody(token).get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否已过期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExpiration</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getTokenBody(token).getExpiration().before(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Claims <span class="title">getTokenBody</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(SECRET)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoginServiceImpl"><a href="#LoginServiceImpl" class="headerlink" title="LoginServiceImpl"></a>LoginServiceImpl</h3><p>由于使用的是SpringSecurity权限框架，所以需要实现<strong>UserDetailsService</strong>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据用户名去获取用户</span></span><br><span class="line">        User user = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery()</span><br><span class="line">                .eq(User::getUsername, s));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JWTUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>可以说到目前为止这是最复杂的一个步骤，其实搞清楚了还是挺简单的，网上挺多人都更倾向于使用shiro，但是偶尔也要尝试一下新东西的嘛，但是当时我在摸索的时候遇到挺多坑，当时也已经到了思考人生的地步了 框架不是为了简化开发吗！为什么！明明jwt加上权限框架是双倍的快乐！为什么会这样！(╯°口°)╯(┴—┴</p><p>回到正题，到底要怎么配置呢？使用过shiro的人会知道，鉴权的话需要自己实现一个realm，重写两个方法，第一是用户验证，第二是鉴权。在spring-security中也不例外，这边需要实现两个过滤器。使用JWTAuthenticationFilter去进行用户账号的验证，使用JWTAuthorizationFilter去进行用户权限的验证。</p><h4 id="JWTAuthenticationFilter"><a href="#JWTAuthenticationFilter" class="headerlink" title="JWTAuthenticationFilter"></a>JWTAuthenticationFilter</h4><p>JWTAuthenticationFilter继承于UsernamePasswordAuthenticationFilter<br>该拦截器用于获取用户登录的信息，只需创建一个token并调用authenticationManager.authenticate()让spring-security去进行验证就可以了，不用自己查数据库再对比密码了，这一步交给spring去操作。<br>这个操作有点像是shiro的subject.login(new UsernamePasswordToken())，验证的事情交给框架。</p><blockquote><p>由于我们定义了/pub/login登录访问路径，我们不需要去写controller层的login方法，只需要直接访问/pub/login路径，就会被认证拦截器拦截进入验证方法attemptAuthentication</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; rememberMe = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="comment">// 重新定义登录访问路径</span></span><br><span class="line">        <span class="keyword">super</span>.setFilterProcessesUrl(<span class="string">&quot;/pub/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中获取到登录的信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LoginUser loginUser = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), LoginUser.class);</span><br><span class="line">            rememberMe.set(loginUser.getRememberMe() == <span class="keyword">null</span> ? <span class="number">0</span> : loginUser.getRememberMe());</span><br><span class="line">            <span class="keyword">return</span> authenticationManager.authenticate(</span><br><span class="line">                    <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser.getUsername(), loginUser.getPassword(), <span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功验证后调用的方法</span></span><br><span class="line">    <span class="comment">// 如果验证成功，就生成token并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            FilterChain chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JWTUser jwtUser = (JWTUser) authResult.getPrincipal();</span><br><span class="line">        <span class="keyword">boolean</span> isRemember = rememberMe.get() == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        String role = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = jwtUser.getAuthorities();</span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : authorities)&#123;</span><br><span class="line">            role = authority.getAuthority();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = JWTUtils.createToken(jwtUser.getId(), jwtUser.getUsername(), role, isRemember);</span><br><span class="line"><span class="comment">//        String token = JwtTokenUtils.createToken(jwtUser.getUsername(), false);</span></span><br><span class="line">        <span class="comment">// 返回创建成功的token</span></span><br><span class="line">        <span class="comment">// 但是这里创建的token只是单纯的token</span></span><br><span class="line">        <span class="comment">// 按照jwt的规定，最后请求的时候应该是 `Bearer token`</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;token&quot;</span>, JWTUtils.TOKEN_PREFIX + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;authentication failed, reason: &quot;</span> + failed.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JWTAuthorizationFilter（进行用户权限的验证）"><a href="#JWTAuthorizationFilter（进行用户权限的验证）" class="headerlink" title="JWTAuthorizationFilter（进行用户权限的验证）"></a>JWTAuthorizationFilter（进行用户权限的验证）</h4><p>验证成功当然就是进行鉴权了，每一次需要权限的请求都需要检查该用户是否有该权限去操作该资源，当然这也是框架帮我们做的，那么我们需要做什么呢？很简单，只要告诉spring-security该用户是否已登录，是什么角色，拥有什么权限就可以了。<br>JWTAuthenticationFilter继承于BasicAuthenticationFilter，至于为什么要继承这个我也不太清楚了，这个我也是网上看到的其中一种实现，实在springSecurity苦手，不过我觉得不继承这个也没事呢（实现以下filter接口或者继承其他filter实现子类也可以吧）只要确保过滤器的顺序，JWTAuthorizationFilter在JWTAuthenticationFilter后面就没问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTAuthorizationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="comment">//JWTUtils.TOKEN_HEADER = Authorization，所以请求头中必须带有Authorization</span></span><br><span class="line">        String tokenHeader = request.getHeader(JWTUtils.TOKEN_HEADER);</span><br><span class="line">        <span class="comment">// 如果请求头中没有Authorization信息则直接放行了</span></span><br><span class="line">        <span class="keyword">if</span> (tokenHeader == <span class="keyword">null</span> || !tokenHeader.startsWith(JWTUtils.TOKEN_PREFIX)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果请求头中有token，则进行解析，并且设置认证信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(getAuthentication(tokenHeader));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//返回json形式的错误信息</span></span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">            String reason = <span class="string">&quot;统一处理，原因：&quot;</span> + e.getMessage();</span><br><span class="line">            response.getWriter().write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(reason));</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.doFilterInternal(request, response, chain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里从token中获取用户信息并新建一个token</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title">getAuthentication</span><span class="params">(String tokenHeader)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = tokenHeader.replace(JWTUtils.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> expiration = JWTUtils.isExpiration(token);</span><br><span class="line">        <span class="keyword">if</span> (expiration) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;token超时了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String username = JWTUtils.getUsername(token);</span><br><span class="line">            String role = JWTUtils.getUserRole(token);</span><br><span class="line">            Integer id = JWTUtils.getUserId(token);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, <span class="keyword">null</span>,</span><br><span class="line">                        Collections.singleton(<span class="keyword">new</span> SimpleGrantedAuthority(role))</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JwtAccessDeniedHandler无权限时处理方法"><a href="#JwtAccessDeniedHandler无权限时处理方法" class="headerlink" title="JwtAccessDeniedHandler无权限时处理方法"></a>JwtAccessDeniedHandler无权限时处理方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_FORBIDDEN, accessDeniedException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JwtAuthenticationEntryPoint无凭证时处理方法"><a href="#JwtAuthenticationEntryPoint无凭证时处理方法" class="headerlink" title="JwtAuthenticationEntryPoint无凭证时处理方法"></a>JwtAuthenticationEntryPoint无凭证时处理方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         AuthenticationException authException)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JwtAuthenticationEntryPoint:&quot;</span>+authException.getMessage());</span><br><span class="line">        response.sendError(HttpServletResponse.SC_UNAUTHORIZED,<span class="string">&quot;没有凭证&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SpringSecurity"><a href="#配置SpringSecurity" class="headerlink" title="配置SpringSecurity"></a>配置SpringSecurity</h3><p>到这里基本操作都写好啦，现在就需要我们将这些辛苦写好的“组件”组合到一起发挥作用了，那就需要配置了。需要开启一下注解@EnableWebSecurity然后再继承一下WebSecurityConfigurerAdapter就可以啦，springboot就是可以为所欲为~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerurityCpnfig</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDetailsServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密类，它可以进行配置，这里直接采用默认的密码加密规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsServiceImpl).passwordEncoder(bCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.cors().and().csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 拦截路径配置 配置方式与shiro有点相似 antMatchers(请求方式，请求路径) hasRole是否具有该角色权限 还有其他的方法</span></span><br><span class="line">                .antMatchers(HttpMethod.GET,<span class="string">&quot;/user/input&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>,<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">&quot;/user/update&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">&quot;/user/delete&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                <span class="comment">// 测试用资源，需要验证了的用户才能访问 authenticated必须登录</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).authenticated()</span><br><span class="line">                <span class="comment">// 静态资源等等</span></span><br><span class="line">                .antMatchers(</span><br><span class="line">                        HttpMethod.GET,</span><br><span class="line">                        <span class="string">&quot;/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.js&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/webSocket/**&quot;</span></span><br><span class="line">                ).permitAll()</span><br><span class="line">                <span class="comment">// swagger 文档 permitAll放行</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-resources/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/webjars/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/*/api-docs&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 文件</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/avatar/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/file/**&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 阿里巴巴 druid</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/druid/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/actuator/**&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 其他都放行了</span></span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .addFilter(<span class="keyword">new</span> JWTAuthenticationFilter(authenticationManager()))</span><br><span class="line">                .addFilter(<span class="keyword">new</span> JWTAuthorizationFilter(authenticationManager()))</span><br><span class="line">                <span class="comment">// 不需要session</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(<span class="keyword">new</span> JwtAuthenticationEntryPoint())</span><br><span class="line">                .accessDeniedHandler(<span class="keyword">new</span> JwtAccessDeniedHandler());      <span class="comment">//添加无权限时的处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, <span class="keyword">new</span> CorsConfiguration().applyPermitDefaultValues());</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h3><p><strong>LoginController</strong>类中只有注册的方法，因为登录已经交给SpringSecurity了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//密码验证类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">registerUser</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; registerUser)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(registerUser.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        <span class="comment">// 记得注册的时候把密码加密一下</span></span><br><span class="line">        user.setPassword(bCryptPasswordEncoder.encode(registerUser.get(<span class="string">&quot;password&quot;</span>)));</span><br><span class="line">        user.setRole(<span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        User user1 = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername, user.getUsername()));</span><br><span class="line">        <span class="keyword">return</span> user1.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h3><p><strong>UserController</strong>中具有三个测试方法，**@PreAuthorize(“hasAuthority(‘ROLE_ADMIN’)”)<strong>表示该请求必须具有权限</strong>ROLE_ADMIN**</p><blockquote><p>虽然我此时写了<strong>ROLE_ADMIN</strong>，但是hasAuthority()是针对权限的，针对角色的控制在SpringSecurity配置时完成了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">input</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;ROLE_USER&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;ROLE_ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="未登录时访问"><a href="#未登录时访问" class="headerlink" title="未登录时访问"></a>未登录时访问</h2><p><strong>input</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110509.png" alt="image-20210512110505343"></p><p><strong>update</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110546.png" alt="image-20210512110544327"></p><p><strong>delete</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110620.png" alt="image-20210512110618549"></p><h2 id="登录后访问"><a href="#登录后访问" class="headerlink" title="登录后访问"></a>登录后访问</h2><p>1、注册</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110718.png" alt="image-20210512110716899"></p><p>2、登录</p><p>登录后生成token被放入返回头中的token属性</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111022.png" alt="image-20210512111020692"></p><p>3、测试</p><p>在测试的时候我们必须带上生成的token，告诉服务端，我们已成功登录，由于进行权限验证时从请求头中获取token是读取的属性是Authorization，所以我们访问时是用Authorization携带token信息</p><p><strong>input</strong></p><p>由于input接口只要求认证，所以成功访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111208.png" alt="image-20210512111158744"></p><p><strong>update</strong></p><p>由于update要求的权限角色为ROLE_USER，而zsy账号的角色为ROLE_ADMIN，所以禁止访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111414.png" alt="image-20210512111413453"></p><p><strong>delete</strong></p><p>delete接口要求的权限角色为ROLE_ADMIN，所以可以正常访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111617.png" alt="image-20210512111615892"></p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="SpringSecurity的四种权限控制"><a href="#SpringSecurity的四种权限控制" class="headerlink" title="SpringSecurity的四种权限控制"></a>SpringSecurity的四种权限控制</h2><h3 id="表达式控制URL路径权限"><a href="#表达式控制URL路径权限" class="headerlink" title="表达式控制URL路径权限"></a>表达式控制URL路径权限</h3><p>Spring Security 支持在 URL 和方法权限控制时使用 SpEL 表达式，如果表达式返回值为 true 则表示需要对应的权限，否则表示不需要对应的权限。提供表达式的类是 SecurityExpressionRoot：</p><p><img src="../../../../typora/images/aHR0cDovL2ltZy5pdGJveWh1Yi5jb20vMjAyMC8wNi9TZWN1cml0eUV4cHJlc3Npb25Sb290LnBuZw" alt="img"></p><p>可以看到，SecurityExpressionRoot 有两个实现类，表示在应对 URL 权限控制和应对方法权限控制时，分别对 SpEL 所做的拓展，例如在基于 URL 路径做权限控制时，增加了 hasIpAddress 选项。</p><p>我们来看下 SecurityExpressionRoot 类中定义的最基本的 SpEL 有哪些：<br><img src="../../../../typora/images/aHR0cDovL2ltZy5pdGJveWh1Yi5jb20vMjAyMC8wNi8yMDIwMDYwODE2MDgxMS5wbmc" alt="img"></p><p>可以看到，这些都是该类对应的表达式，这些表达式我来给大家稍微解释下：</p><table><thead><tr><th>表达</th><th>备注</th></tr></thead><tbody><tr><td>hasRole</td><td>用户具备某个角色即可访问资源</td></tr><tr><td>hasAnyRole</td><td>备多个角色中的任意一个即可访问资源</td></tr><tr><td>hasAuthority</td><td>类似于 hasRole</td></tr><tr><td>hasAnyAuthority</td><td>类似于 hasAnyRole</td></tr><tr><td>permitAll</td><td>统统允许访问</td></tr><tr><td>denyAll</td><td>统统拒绝访问</td></tr><tr><td>isAnonymous</td><td>判断是否匿名用户</td></tr><tr><td>isAuthenticated</td><td>判断是否认证成功</td></tr><tr><td>isRememberMe</td><td>判断是否通过记住我登录的</td></tr><tr><td>isFullyAuthenticated</td><td>判断是否用户名/密码登录的</td></tr><tr><td>principle</td><td>当前用户</td></tr><tr><td>authentication</td><td>从 SecurityContext 中提取出来的用户对象</td></tr></tbody></table><p>这是最基本的，在它的继承类中，还有做一些拓展，我这个我就不重复介绍了。</p><p>如果是通过 URL 进行权限控制，那么我们只需要按照如下方式配置即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式控制方法权限"><a href="#表达式控制方法权限" class="headerlink" title="表达式控制方法权限"></a>表达式控制方法权限</h3><p>当然，我们也可以通过在方法上添加注解来控制权限。</p><p>在方法上添加注解控制权限，需要我们首先开启注解的使用，在 Spring Security 配置类上添加如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true,securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置开启了三个注解，分别是：</p><ul><li>@PreAuthorize：方法执行前进行权限检查</li><li>@PostAuthorize：方法执行后进行权限检查</li><li>@Secured：类似于 @PreAuthorize</li></ul><p>这三个结合 SpEL 之后，用法非常灵活，这里和大家稍微分享几个 Demo。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;principal.username.equals(&#x27;javaboy&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured(&#123;&quot;ROLE_user&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;#age&gt;98&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个 hello 方法，注解的约束是，只有当前登录用户名为 javaboy 的用户才可以访问该方法。<br>第二个 admin 方法，表示访问该方法的用户必须具备 admin 角色。<br>第三个 user 方法，表示方法该方法的用户必须具备 user 角色，但是注意 user 角色需要加上 ROLE_ 前缀。<br>第四个 getAge 方法，表示访问该方法的 age 参数必须大于 98，否则请求不予通过。<br>可以看到，这里的表达式还是非常丰富，如果想引用方法的参数，前面加上一个 # 即可，既可以引用基本类型的参数，也可以引用对象参数。</p><p>缺省对象除了 principal ，还有 authentication（参考第一小节）。</p><h3 id="使用过滤注解"><a href="#使用过滤注解" class="headerlink" title="使用过滤注解"></a>使用过滤注解</h3><p>Spring Security 中还有两个过滤函数 @PreFilter 和 @PostFilter，可以根据给出的条件，自动移除集合中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostFilter(&quot;filterObject.lastIndexOf(&#x27;2&#x27;)!=-1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        users.add(<span class="string">&quot;javaboy:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreFilter(filterTarget = &quot;ages&quot;,value = &quot;filterObject%2==0&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllAge</span><span class="params">(List&lt;Integer&gt; ages,List&lt;String&gt; users)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ages = &quot;</span> + ages);</span><br><span class="line">    System.out.println(<span class="string">&quot;users = &quot;</span> + users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 getAllUser 方法中，对集合进行过滤，只返回后缀为 2 的元素，filterObject 表示要过滤的元素对象。</li><li>在 getAllAge 方法中，由于有两个集合，因此使用 filterTarget 指定过滤对象。</li></ul><h3 id="动态权限"><a href="#动态权限" class="headerlink" title="动态权限"></a>动态权限</h3><p>动态权限主要通过重写拦截器和决策器来实现</p><h2 id="使用权限字符串进行权限控制"><a href="#使用权限字符串进行权限控制" class="headerlink" title="使用权限字符串进行权限控制"></a>使用权限字符串进行权限控制</h2><p>在前面的例子，我们采用的hasRole来进行权限控制，但是如果没有动态权限，这样就显的很被动，当想对某个角色权限进行修改的时候，就必须进入代码里面对代码进行修改。但是，在我使用shiro的时候，我只需要在接口前加上权限字符串，并将权限与角色的关联关系保存进数据库中，当我想要修改角色的权限时，只需要修改角色与权限的关联关系就可以了，到时候我们可以专门写一个接口来实现对角色权限的设置，而不用去修改代码。</p><p>在SpringSecurity中也可以基于权限字符串进行权限控制。我们将以insert接口为例讲解。</p><h3 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h3><p>1、首先SpringSecurity的配置类进行修改</p><blockquote><p>将/user/insert的权限控制设为登录</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512151931.png" alt="image-20210512151930421"></p><p>2、修改UserController</p><blockquote><p>给/user/insert设置权限其实可以直接在SpringSecurity中设置，但是为了方便对路径接口的权限控制，我一般写在controller层</p><p>有一个值得注意的点，在前面时update和delete方法上，我们使用的<strong>hasAuthority</strong>()，这是权限的注解写法，现在我们针对角色采用<strong>hasRole</strong>()，此时我们会发现要求的字符串由<strong>ROLE_USER</strong>变成了<strong>USER</strong>，这为什么喃？</p><p>很简单在SpringSecurity设置权限的时候可以将角色与权限一起设置进去，这个时候咋区分<strong>权限</strong>与角色？如何决定采用的是<strong>hasRole</strong>()还是<strong>hasAuthority</strong>()？这个时候对于角色则表示为“ROLE_”+角色名，在<strong>hasRole</strong>()进行判断的时候只需要填上<strong>角色名</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据权限字符串</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user_insert&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">input</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据角色</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;USER&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//根据角色</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、对<strong>UserDetailsServiceImpl</strong>修改</p><p>在前面中，我们没有考虑多权限，所以我们需要在这里查询该用户的角色以及权限，一般是根据用户查角色，根据角色查权限，我们在这里只是简单模拟以下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">       <span class="comment">// 根据用户名去获取用户</span></span><br><span class="line">       User user = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery()</span><br><span class="line">               .eq(User::getUsername, s));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;=========================进入数据库查询账户=======================================&quot;</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//权限集合</span></span><br><span class="line">       List&lt;String &gt; authoritiy = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="comment">//有些接口需要角色</span></span><br><span class="line">       authoritiy.add(user.getRole());</span><br><span class="line">       authoritiy.add(<span class="string">&quot;user_insert&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> JWTUser(user,authoritiy);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4、修改JWTUser的构造方法</p><p>由于前面只考虑了单个权限，而没有考虑多权限，所以现在需要对它进修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写一个能直接使用user创建jwtUser的构造器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">JWTUser</span><span class="params">(User user, List&lt;String&gt; authoritiy)</span> </span>&#123;</span><br><span class="line">       id = user.getId();</span><br><span class="line">       username = user.getUsername();</span><br><span class="line">       password = user.getPassword();</span><br><span class="line">       String authoritiyStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">//将查询出来的权限字符串拼成一个字符串</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;authoritiy.size();i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">              authoritiyStr+=authoritiy.get(i);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              authoritiyStr+=<span class="string">&quot;,&quot;</span>+authoritiy.get(i);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(authoritiyStr);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>5、修改JWTAuthenticationFilter</p><p>由于前面只考虑了单权限，多权限和角色时不适用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功验证后调用的方法</span></span><br><span class="line">    <span class="comment">// 如果验证成功，就生成token并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            FilterChain chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JWTUser jwtUser = (JWTUser) authResult.getPrincipal();</span><br><span class="line">        <span class="keyword">boolean</span> isRemember = rememberMe.get() == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        String role = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = jwtUser.getAuthorities();</span><br><span class="line">        <span class="keyword">int</span> i= <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//获取多权限字符串</span></span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : authorities)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                role += authority.getAuthority();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                role +=<span class="string">&quot;,&quot;</span>+authority.getAuthority();</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============================认证成功======================&quot;</span>);</span><br><span class="line">        System.out.println(role);</span><br><span class="line">        String token = JWTUtils.createToken(jwtUser.getId(), jwtUser.getUsername(), role, isRemember);</span><br><span class="line"><span class="comment">//        String token = JwtTokenUtils.createToken(jwtUser.getUsername(), false);</span></span><br><span class="line">        <span class="comment">// 返回创建成功的token</span></span><br><span class="line">        <span class="comment">// 但是这里创建的token只是单纯的token</span></span><br><span class="line">        <span class="comment">// 按照jwt的规定，最后请求的时候应该是 `Bearer token`</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;token&quot;</span>, JWTUtils.TOKEN_PREFIX + token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6、修改JWTAuthorizationFilter</p><p>由于前面只考虑了单权限，多权限和角色时不适用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里从token中获取用户信息并新建一个token</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title">getAuthentication</span><span class="params">(String tokenHeader)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String token = tokenHeader.replace(JWTUtils.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">       <span class="keyword">boolean</span> expiration = JWTUtils.isExpiration(token);</span><br><span class="line">       <span class="keyword">if</span> (expiration) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;token超时了&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           String username = JWTUtils.getUsername(token);</span><br><span class="line">           String role = JWTUtils.getUserRole(token);</span><br><span class="line">           Integer id = JWTUtils.getUserId(token);</span><br><span class="line">           <span class="keyword">if</span> (username != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, <span class="keyword">null</span>,</span><br><span class="line">                       AuthorityUtils.commaSeparatedStringToAuthorityList(role)</span><br><span class="line">               );</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><h4 id="具有ADMIN角色和user-insert权限"><a href="#具有ADMIN角色和user-insert权限" class="headerlink" title="具有ADMIN角色和user_insert权限"></a>具有ADMIN角色和user_insert权限</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162055.png" alt="image-20210512162054063"></p><p><strong>insert</strong></p><p>要求<strong>user_insert</strong>权限</p><p><img src="../../../../typora/images/image-20210512161754180.png" alt="image-20210512161754180"></p><p><strong>update</strong></p><p>要求<strong>USER</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512161926.png" alt="image-20210512161925021"></p><p><strong>delete</strong></p><p>要求<strong>ADMIN</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162657.png" alt="image-20210512162656169"></p><h4 id="只具有USER角色"><a href="#只具有USER角色" class="headerlink" title="只具有USER角色"></a>只具有USER角色</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162300.png" alt="image-20210512162258559"></p><p><strong>insert</strong></p><p>要求<strong>user_insert</strong>权限</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162457.png" alt="image-20210512162455583"></p><p><strong>update</strong></p><p>要求<strong>USER</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162531.png" alt="image-20210512162529212"></p><p><strong>delete</strong></p><p>要求<strong>ADMIN</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162512.png" alt="image-20210512162510660"></p><blockquote><p>通过这种方式，可以实现一个用户可以关联多个多个角色，亦或者修改角色的权限并不需要动代码，只需要修改角色与权限的关联关系。</p></blockquote>]]></content>
    
    
    <summary type="html">学习SpringSecurity记录</summary>
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="SpringSecurity" scheme="https://heavenimtoral.gitee.io/tags/SpringSecurity/"/>
    
    <category term="权限" scheme="https://heavenimtoral.gitee.io/tags/%E6%9D%83%E9%99%90/"/>
    
    <category term="JWT" scheme="https://heavenimtoral.gitee.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Stream流</title>
    <link href="https://heavenimtoral.gitee.io/2021/04/30/JavaStream%E6%B5%81/"/>
    <id>https://heavenimtoral.gitee.io/2021/04/30/JavaStream%E6%B5%81/</id>
    <published>2021-04-30T08:23:30.965Z</published>
    <updated>2021-05-13T06:40:02.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java8给我们提供了一个新功能：Stream流。单从“Stream”这个单词上来看，它似乎和 java.io 包下的InputStream 和 OutputStream 有些关系。实际上呢，没毛关系。它是为了解放程序员操作<strong>集合</strong>时的生产力，之所以能解放，很大一部分可以归功于同事出现的<strong>lambda表达式</strong>–极大的提高了变成效率和程序可读性。</p><blockquote><p>Stream是什么</p></blockquote><p>Stream就好像一个高级的迭代器，但只能遍历一次，就好像一江春水向东流；<strong>在流的过程中，对流中的元素执行一些操作，比如“过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等</strong>。要想操作流，首先需要有一个数据源，可以是数组或者集合。每次操作都会返回一个新的流对象，方便进行链式操作，但原有的流对象会保持不变。</p><blockquote><p>为什么要用Stream？</p></blockquote><p>Stream作为Java8的一大亮点，它与java.io包里的InputStream和OutputStream是完全不同的概念。它也不同于StAX对XML解析的Stream，也不是Amazon Kinesis对大数据实时处理的Stream。Java8中的Stream是对容器对象功能的增强，它专注于对容器对象进行各种非常便利、高效的 <strong>聚合操作（aggregate operation）</strong>，或者大批量数据操作 (bulk data operation)。Stream API借助于同样新出现的Lambda表达式，极大的提高编程效率和程序可读性。同时，它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用fork/join并行方式来拆分任务和加速处理过程。通常，编写并行代码很难而且容易出错, 但使用Stream API无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java8中首次出现的 <strong>java.util.stream是一个函数式语言+多核时代综合影响的产物。</strong></p><blockquote><p>什么是聚合操作</p></blockquote><p>在传统的J2EE应用中，Java代码经常不得不依赖于关系型数据库的聚合操作来完成诸如：</p><ul><li>客户每月平均消费金额</li><li>最昂贵的在售商品</li><li>本周完成的有效订单（排除了无效的）</li><li>取十个数据样本作为首页推荐</li></ul><p>这类的操作。但在当今这个数据大爆炸的时代，在数据来源多样化、数据海量化的今天，很多时候不得不脱离 RDBMS，或者以底层返回的数据为基础进行更上层的数据统计。而Java的集合API中，仅仅有极少量的辅助型方法，更多的时候是程序员需要用Iterator来遍历集合，完成相关的聚合应用逻辑，这是一种远不够高效、笨拙的方法。在Java7中，如果要发现type为grocery的所有交易，然后返回以交易值降序排序好的交易ID集合，我们需要这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Transaction&gt; groceryTransactions = <span class="keyword">new</span> Arraylist&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Transaction t: transactions)&#123;</span><br><span class="line"> <span class="keyword">if</span>(t.getType() == Transaction.GROCERY)&#123;</span><br><span class="line"> groceryTransactions.add(t);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Collections.sort(groceryTransactions, <span class="keyword">new</span> Comparator()&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Transaction t1, Transaction t2)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> t2.getValue().compareTo(t1.getValue());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; transactionIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Transaction t: groceryTransactions)&#123;</span><br><span class="line"> transactionsIds.add(t.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 Java 8 使用 Stream，代码更加简洁易读；而且使用并发模式，程序执行速度更快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = transactions.parallelStream()</span><br><span class="line">.filter(t -&gt; t.getType() == Transaction.GROCERY)</span><br><span class="line">.sorted(comparing(Transaction::getValue).reversed())</span><br><span class="line">.map(Transaction::getId).collect(toList());</span><br></pre></td></tr></table></figure><blockquote><p>操作类型</p></blockquote><p>1）中间操作，可以有多个，每次返回一个新的流，可进行链式操作。</p><p>2）终端操作，只能有一个，每次执行完，这个流也就用光光了，无法执行下一个操作，因此只能放在最后。</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><h2 id="流的构成"><a href="#流的构成" class="headerlink" title="流的构成"></a>流的构成</h2><p>当我们使用一个流的时候，通常包括三个基本步骤：获取一个数据源（source）→ 数据转换 → 执行操作获取想要的结果。<strong>每次转换原有Stream对象不改变，返回一个新的Stream对象（可以有多次转换）</strong>，这就允许对其操作可以像链条一样排列，变成一个管道，如下图所示:</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513101937.jpg" alt="20180315024847206"></p><h2 id="流的生成方式"><a href="#流的生成方式" class="headerlink" title="流的生成方式"></a>流的生成方式</h2><h3 id="从Collection和数组中获得"><a href="#从Collection和数组中获得" class="headerlink" title="从Collection和数组中获得"></a>从Collection和数组中获得</h3><ul><li>Collection.stream()</li><li>Collection.parallelStream()</li><li>Arrays.stream(T array) or Stream.of()</li></ul><h3 id="从BufferedReader获得"><a href="#从BufferedReader获得" class="headerlink" title="从BufferedReader获得"></a>从BufferedReader获得</h3><ul><li>java.io.BufferedReader.lines()</li></ul><h3 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h3><ul><li>java.util.stream.IntStream.range()</li><li>java.nio.file.Files.walk()</li></ul><h3 id="自己构建"><a href="#自己构建" class="headerlink" title="自己构建"></a>自己构建</h3><ul><li>java.util.Spliterator</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul><h2 id="流的操作类型"><a href="#流的操作类型" class="headerlink" title="流的操作类型"></a>流的操作类型</h2><p>流的操作类型分为两种：</p><ul><li><p>Intermediate：一个流可以后面跟随零个或多个intermediate操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</p></li><li><p>Terminal：一个流只能有一个terminal操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以,这必定是流的最后一个操作。Terminal操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个side effect。</p><p>　　在对一个Stream进行多次转换操作(Intermediate 操作)，每次都对Stream的每个元素进行转换，而且是执行多次，这样时间复杂度就是N（转换次数）个for循环里把所有操作都做掉的总和吗？其实不是这样的，<strong>转换操作都是lazy的，多个转换操作只会在Terminal操作的时候融合起来，一次循环完成。我们可以这样简单的理解，Stream里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，在Terminal 操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。</strong></p><p>  　　还有一种操作被称为<strong>short-circuiting</strong>。用以指：对于一个intermediate操作，如果它接受的是一个无限大（infinite/unbounded）的Stream，但返回一个有限的新Stream；对于一个terminal操作，如果它接受的是一个无限大的Stream，但能在有限的时间计算出结果。<br>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个short-circuiting操作是必要非充分条件。</p></li></ul><h2 id="流的使用详解"><a href="#流的使用详解" class="headerlink" title="流的使用详解"></a>流的使用详解</h2><h3 id="流的构造与转换"><a href="#流的构造与转换" class="headerlink" title="流的构造与转换"></a>流的构造与转换</h3><p>下面提供最常见的几种构造Stream的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Individual values</span></span><br><span class="line">Stream stream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Arrays</span></span><br><span class="line">String [] strArray = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">stream = Stream.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Collections</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">stream = list.stream();</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，对于基本数值型，目前有三种对应的包装类型Stream：IntStream、LongStream、DoubleStream。当然我们也可以用 Stream<Integer>、Stream<Long>和Stream<Double>，但是boxing/unboxing会很耗时，所以特别为这三种基本数值型提供了对应的Stream。</p></blockquote><p>　　Java8中还没有提供其它数值型Stream，因为这将导致扩增的内容较多。而常规的数值型聚合运算可以通过上面三种Stream进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).forEach(System.out::println);</span><br><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>流也可以转换为其它数据结构，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Array</span></span><br><span class="line">String[] strArray1 = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 2. Collection</span></span><br><span class="line">List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class="line">List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">Set set1 = stream.collect(Collectors.toSet());</span><br><span class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">// 3. String</span></span><br><span class="line">String str = stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></table></figure><h3 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h3><p>为了测试流的操作我们需要完成一些准备工作:①实体类User。②List生成类，用来生成User集合。</p><p><strong>User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 赏金</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GetUserList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetUserList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;李星云&quot;</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="string">&quot;渝州&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">1000</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;陆林轩&quot;</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="string">&quot;渝州&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">500</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;姬如雪&quot;</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="string">&quot;幻音坊&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">800</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;袁天罡&quot;</span>, <span class="number">99</span>, <span class="number">0</span>, <span class="string">&quot;藏兵谷&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">100000</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;张子凡&quot;</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="string">&quot;天师府&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">900</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;陆佑劫&quot;</span>, <span class="number">45</span>, <span class="number">0</span>, <span class="string">&quot;不良人&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">600</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;张天师&quot;</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="string">&quot;天师府&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">1100</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;蚩梦&quot;</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="string">&quot;万毒窟&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">800</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;李星云&quot;</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="string">&quot;渝州&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">1000</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Intermediate-操作"><a href="#Intermediate-操作" class="headerlink" title="Intermediate 操作"></a>Intermediate 操作</h4><p>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 limit、 skip、 parallel等 </p><blockquote><p>由于执行Intermediate操作，必须最后为终端操作，所以在以下的代码演示中都带有collect()和forEach()</p><p>collect()的作用是<strong>将结果收集到一起</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//收集到List</span></span><br><span class="line">&gt;collect(Collectors.toList());</span><br><span class="line">&gt;<span class="comment">//收集到Set</span></span><br><span class="line">&gt;collect(Collectors.toSet());</span><br><span class="line">&gt;<span class="comment">//总和、平均值，最大值，最小值</span></span><br><span class="line">&gt;<span class="keyword">int</span> sum = hereList.stream().collect(Collectors.summingInt(Integer::intValue));</span><br><span class="line">&gt;Double ave = hereList.stream().collect(Collectors.averagingInt(Integer::intValue));</span><br><span class="line">&gt;Integer max = hereList.stream().collect(Collectors.maxBy(Integer::compare)).get();</span><br><span class="line">&gt;Integer min = hereList.stream().collect(Collectors.minBy(Integer::compare)).get();</span><br><span class="line">&gt;<span class="comment">//一次性收集流中的结果，聚合为一个总和，平均值，最大值或最小值的对象。</span></span><br><span class="line">&gt;IntSummaryStatistics summaryStatistics = hereList.stream()</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　　　　.collect(Collectors.summarizingInt(Integer::intValue));</span><br><span class="line">&gt;<span class="comment">//收集到Map过于复杂，故不在这里写，在讲collect的时候详讲</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p> map方法指对一个流中的值进行某种形式的转换。需要传递给它一个转换的函数作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 将List&lt;User&gt; 变成 List&lt;Map&lt;String,String&gt;&gt; 且Map中只包含username和age</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .map(user -&gt; &#123;</span><br><span class="line">                    HashMap&lt;String ,String &gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;username&quot;</span>,user.getName());</span><br><span class="line">                    map.put(<span class="string">&quot;age&quot;</span>,user.getAge().toString());</span><br><span class="line">                    <span class="keyword">return</span> map;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.get(<span class="string">&quot;username&quot;</span>) + <span class="string">&quot; --&gt; &quot;</span> + item.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513111958.png" alt="image-20210513111957109"></p><blockquote><p>进行转换后，在forEach中，item获取值的时候，已经是map的key-value形式了</p></blockquote><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>从名字上就能看出来，这是一个Stream的过滤转换，此方法会生成一个新的流，其中包含符合某个特定条件的所有元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 只输出年龄大于20的</span></span><br><span class="line">       list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">               .collect(Collectors.toList())</span><br><span class="line">               .forEach(item -&gt; &#123;</span><br><span class="line">                   System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513110345.png" alt="image-20210513110344127"></p><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p><strong>distinct方法</strong>会根据原始流中的元素返回一个具有相同顺序、去除了重复元素的流，这个操作显然是需要记住之前读取的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDistinct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 将List&lt;User&gt; 变成 List&lt;Map&lt;String,String&gt;&gt; 且Map中只包含username和age</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513112437.png" alt="image-20210513112435322"></p><blockquote><p>我们去除了重复数据李星云，并且数据的顺序并没有发生改变 </p></blockquote><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a><strong>sorted</strong></h5><p><strong>sorted方法</strong>是需要遍历整个流的，并在产生任何元素之前对它进行排序。因为有可能排序后集合的第一个元素会在未排序集合的最后一位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSorted</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 按age升序排序</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .sorted(Comparator.comparing(User::getAge))</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513135042.png" alt="image-20210513135040878"></p><blockquote><p>sorted方法中需要传入比较规则</p></blockquote><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>limit(n)方法会返回一个包含n个元素的新的流（若总长小于n则返回原始流）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void testLimit()&#123;</span><br><span class="line">        List&lt;User&gt; list &#x3D; GetUserList.getUserList();</span><br><span class="line">        &#x2F;&#x2F; 获取前2个数据</span><br><span class="line">        list.stream()</span><br><span class="line">                .limit(2)</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + &quot; --&gt; &quot; + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p>skip(n)会丢弃掉前面的n个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testSkip</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 丢弃前2个数据</span></span><br><span class="line">       list.stream()</span><br><span class="line">               .skip(<span class="number">2</span>)</span><br><span class="line">               .collect(Collectors.toList())</span><br><span class="line">               .forEach(item -&gt; &#123;</span><br><span class="line">                   System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513135836.png" alt="image-20210513135834475"></p><h5 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h5><p>parallel方法可以将任意的串行流转换为一个并行流。</p><p>其次要确保传递给并行流操作的函数是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testParallel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 转换成并行流</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .parallel()</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513140318.png" alt="image-20210513140317237"></p><blockquote><p>我们可以发现数据被多次重复打印，因为此时已经是并行流了</p></blockquote><h4 id="Terminal-操作"><a href="#Terminal-操作" class="headerlink" title="Terminal 操作"></a>Terminal 操作</h4><p>forEach、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny等</p><blockquote><p>其中forEach、collect在前面已经使用了</p><p>toArray是将流变成数组</p></blockquote><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p>reduce是将流中的元素进行进一步计算的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Integer&gt; hearList = Lists.newArrayList();</span><br><span class="line">       hearList.add(<span class="number">15</span>);</span><br><span class="line">       hearList.add(<span class="number">32</span>);</span><br><span class="line">       hearList.add(<span class="number">5</span>);</span><br><span class="line">       hearList.add(<span class="number">232</span>);</span><br><span class="line">       hearList.add(<span class="number">56</span>);</span><br><span class="line">       hearList.add(<span class="number">29</span>);</span><br><span class="line">       hearList.add(<span class="number">104</span>);</span><br><span class="line">       <span class="comment">//求和</span></span><br><span class="line">       Integer sum = hearList.stream().reduce((x,y)-&gt;x+y).get();</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//简化一下，求和</span></span><br><span class="line">       sum = hearList.stream().reduce(Integer::sum).get();</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//含有初始标识的，求和</span></span><br><span class="line">       sum = hearList.stream().reduce(<span class="number">0</span>,(x,y)-&gt;x+y);</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//对元素的长度进行求和( (total,y)-&gt;total+y.toString().length()，类似于一个累加器，会被重复调用)</span></span><br><span class="line">       sum = hearList.stream().reduce(<span class="number">0</span>,(total,y)-&gt;total+y.toString().length(),(total1,total2)-&gt;total1+total2);</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//简化一下，对元素长度进行求和。</span></span><br><span class="line">       sum = hearList.stream().map(Objects::toString).mapToInt(String::length).sum();</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513141354.png" alt="image-20210513141353485"></p><h5 id="min"><a href="#min" class="headerlink" title="min"></a>min</h5><p>获取条件最小的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">    <span class="comment">// 获取age最小的数据</span></span><br><span class="line">    Optional minAge = list.stream().min(Comparator.comparing(User::getAge));</span><br><span class="line">    System.out.println(<span class="string">&quot;minAge :&quot;</span>+minAge);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513141729.png" alt="image-20210513141728138"></p><h5 id="max"><a href="#max" class="headerlink" title="max"></a>max</h5><p>获取条件最大的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 获取年龄最大</span></span><br><span class="line">       Optional maxAge = list.stream().max(Comparator.comparing(User::getAge));</span><br><span class="line">       System.out.println(<span class="string">&quot;maxAge :&quot;</span>+maxAge);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142226.png" alt="image-20210513142225297"></p><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>计数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 获取记录数</span></span><br><span class="line">        Long count = list.stream().count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count :&quot;</span>+count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142254.png" alt="image-20210513142253161"></p><h5 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h5><p>可以判定集合中是否还有匹配的元素。返回结果是一个boolean类型值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAnyMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">    <span class="comment">// 数据中是否有age&gt;100的数据</span></span><br><span class="line">    Boolean flag = list.stream().anyMatch(user -&gt; user.getAge()&gt;<span class="number">100</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;flag :&quot;</span>+flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142610.png" alt="image-20210513142609240"></p><h5 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h5><p>可以判定集合中是否所有元素都匹配。返回结果是一个boolean类型值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void testAllMatch()&#123;</span><br><span class="line">    List&lt;User&gt; list &#x3D; GetUserList.getUserList();</span><br><span class="line">    &#x2F;&#x2F; 数据中是否有age&gt;100的数据</span><br><span class="line">    Boolean flag &#x3D; list.stream().allMatch(user -&gt; user.getAge()&gt;10);</span><br><span class="line">    System.out.println(&quot;flag :&quot;+flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142903.png" alt="image-20210513142902197"></p><h5 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h5><p>可以判定集合中是否所有元素都不匹配。返回结果是一个boolean类型值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void testNoneMatch()&#123;</span><br><span class="line">    List&lt;User&gt; list &#x3D; GetUserList.getUserList();</span><br><span class="line">    &#x2F;&#x2F; 数据中是否有age&gt;100的数据</span><br><span class="line">    Boolean flag &#x3D; list.stream().noneMatch(user -&gt; user.getAge()&gt;100);</span><br><span class="line">    System.out.println(&quot;flag :&quot;+flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142922.png" alt="image-20210513142921801"></p><h5 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h5><p>findFirst方法返回非空集合中的第一个值，它通常与filter方法结合起来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFindFrist</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 只输出年龄大于20的的第一个数据</span></span><br><span class="line">       User user1 = list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">               .findFirst()</span><br><span class="line">               .get();</span><br><span class="line">       System.out.println(user1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513143210.png" alt="image-20210513143209156"></p><h5 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h5><p>findAny方法可以在集合中只要找到任何一个所匹配的元素，就返回，此方法在对流并行执行时十分有效（任何片段中发现第一个匹配元素都会结束计算，串行流中和findFirst返回一样)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFindAny</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">    <span class="comment">// 只输出年龄大于20的的第一个数据</span></span><br><span class="line">    User user1 = list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">            .findAny()</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513143413.png" alt="image-20210513143209156"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java8给我们提供了一个新功能：Stream流。单从“Stream”这个单词上来看，它似乎和 java.io 包下的InputStream</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="Java8新特性" scheme="https://heavenimtoral.gitee.io/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="https://heavenimtoral.gitee.io/2021/04/16/MyBatis-Plus/"/>
    <id>https://heavenimtoral.gitee.io/2021/04/16/MyBatis-Plus/</id>
    <published>2021-04-16T03:14:58.746Z</published>
    <updated>2021-04-20T06:11:23.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="为什么要学习MyBtis-Plus"><a href="#为什么要学习MyBtis-Plus" class="headerlink" title="为什么要学习MyBtis-Plus?"></a>为什么要学习MyBtis-Plus?</h2><p>Hibernate是一种全自动化的ORM框架，但是MyBatis不是，人们认为MyBatis属于半自动化的ORM框架，因为需要手写SQL语句。针对复杂的SQL进行手写倒也还好，但是一些简单的SQL还要手写就变得十分麻烦（我知道有注解，闭嘴！），同时还会让XML映射文件变得十分臃肿，那么有没有方法可以省略简单SQL的书写呢？</p><p>这时候，一个“天降猛男”登场了——MyBatis-Plus。💪</p><p>MyBatis-Plus可以很好地帮我们简化操作，对于一些简单的CRUD操作，不再需要我们编写。当然，除了这个最“肤浅”的作用外，MyBatis-Plus还有很多其他的特性，总之就是一句话：为了简化操作，为了偷懒。😂</p><p>MyBatis-Plus由国人开发，文档很详细，编码符合国人习惯，荣获【2019年度开源中国最受欢迎软件，开发工具类 TOP1】，还能简化开发，所以…不学一个？</p><p><a href="https://mp.baomidou.com/guide/">官方文档</a></p><h2 id="MyBtis-Plus概述"><a href="#MyBtis-Plus概述" class="headerlink" title="MyBtis-Plus概述"></a>MyBtis-Plus概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416111211.png" alt="img"></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="支持数据库"><a href="#支持数据库" class="headerlink" title="支持数据库"></a>支持数据库</h3><blockquote><p>任何能使用 <code>mybatis</code> 进行 crud, 并且支持标准 sql 的数据库</p></blockquote><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416111412.png" alt="image-20210416111410738"></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>我们将通过一个简单的 Demo 来阐述 MyBatis-Plus 的强大功能，在此之前，我们假设您已经：</p><ul><li>拥有 Java 开发环境以及相应 IDEA</li><li>熟悉 Spring Boot</li><li>熟悉 Maven</li></ul><hr><p>现有一张 <code>User</code> 表，其表结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>Jone</td><td>18</td><td><a href="mailto:&#x74;&#101;&#x73;&#x74;&#x31;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#x75;&#x2e;&#x63;&#111;&#109;">&#x74;&#101;&#x73;&#x74;&#x31;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#x75;&#x2e;&#x63;&#111;&#109;</a></td></tr><tr><td>2</td><td>Jack</td><td>20</td><td><a href="mailto:&#x74;&#101;&#x73;&#116;&#50;&#x40;&#98;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#x6f;&#117;&#46;&#99;&#x6f;&#x6d;">&#x74;&#101;&#x73;&#116;&#50;&#x40;&#98;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#x6f;&#117;&#46;&#99;&#x6f;&#x6d;</a></td></tr><tr><td>3</td><td>Tom</td><td>28</td><td><a href="mailto:&#116;&#101;&#115;&#116;&#x33;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#x64;&#111;&#x75;&#46;&#x63;&#x6f;&#x6d;">&#116;&#101;&#115;&#116;&#x33;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#x64;&#111;&#x75;&#46;&#x63;&#x6f;&#x6d;</a></td></tr><tr><td>4</td><td>Sandy</td><td>21</td><td><a href="mailto:&#116;&#x65;&#115;&#x74;&#x34;&#64;&#98;&#x61;&#111;&#109;&#105;&#100;&#111;&#117;&#46;&#99;&#111;&#109;">&#116;&#x65;&#115;&#x74;&#x34;&#64;&#98;&#x61;&#111;&#109;&#105;&#100;&#111;&#117;&#46;&#99;&#111;&#109;</a></td></tr><tr><td>5</td><td>Billie</td><td>24</td><td><a href="mailto:&#116;&#x65;&#115;&#116;&#x35;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#x64;&#111;&#x75;&#46;&#99;&#x6f;&#x6d;">&#116;&#x65;&#115;&#116;&#x35;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#x64;&#111;&#x75;&#46;&#99;&#x6f;&#x6d;</a></td></tr></tbody></table><p>其对应的数据库 Schema 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其对应的数据库 Data 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416112349.png" alt="image-20210416112347849"></p><h3 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h3><p>创建一个空的 Spring Boot 工程（工程将以MySql 作为默认数据库进行演示）</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis-Plus依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lombok依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 <code>application.yml</code> 配置文件中添加 MySql数据库的相关配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatisplus</span></span><br><span class="line">  <span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment">#数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">defaultDataSource</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.hl.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisplusApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisplusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>编写实体类 <code>User.java</code>（此处使用了 <a href="https://www.projectlombok.org/">Lombok (opens new window)</a>简化代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper类 <code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>添加测试类，进行功能测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserMapper 中的 <code>selectList()</code> 方法的参数为 MP 内置的条件封装器 <code>Wrapper</code>，所以不填写就是无任何条件</p></blockquote><p>控制台输出：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416140717.png" alt="image-20210416140715702"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！</p><p>从以上步骤中，我们可以看到集成<code>MyBatis-Plus</code>非常的简单，只需要引入 starter 工程，并配置 mapper 扫描路径即可。</p><p>但 MyBatis-Plus 的强大远不止这些功能，想要详细了解 MyBatis-Plus 的强大功能？那就继续往下看吧！</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><p>介绍 <code>MybatisPlus</code> 注解包相关类详解(更多详细描述可点击查看源码注释)</p></blockquote><p>注解类包：</p><p>👉 <a href="https://gitee.com/baomidou/mybatis-plus/tree/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation">mybatis-plus-annotation(opens new window)</a></p><h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableName.java">@TableName</a></h3><ul><li>描述：表名注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th>描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>表名</td></tr><tr><td align="center">schema</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>schema</td></tr><tr><td align="center">keepGlobalPrefix</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td></tr><tr><td align="center">resultMap</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>xml 中 resultMap 的 id</td></tr><tr><td align="center">autoResultMap</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td></tr><tr><td align="center">excludeProperty</td><td align="center">String[]</td><td align="center">否</td><td align="center">{}</td><td>需要排除的属性名(@since 3.3.1)</td></tr></tbody></table><blockquote><p>关于<code>autoResultMap</code>的说明:</p><p>mp会自动构建一个<code>ResultMap</code>并注入到mybatis里(一般用不上).下面讲两句: 因为mp底层是mybatis,所以一些mybatis的常识你要知道,mp只是帮你注入了常用crud到mybatis里 注入之前可以说是动态的(根据你entity的字段以及注解变化而变化),但是注入之后是静态的(等于你写在xml的东西) 而对于直接指定<code>typeHandler</code>,mybatis只支持你写在2个地方:</p><ol><li>定义在resultMap里,只作用于select查询的返回结果封装</li><li>定义在<code>insert</code>和<code>update</code>sql的<code>#&#123;property&#125;</code>里的<code>property</code>后面(例:<code>#&#123;property,typehandler=xxx.xxx.xxx&#125;</code>),只作用于<code>设置值</code> 而除了这两种直接指定<code>typeHandler</code>,mybatis有一个全局的扫描你自己的<code>typeHandler</code>包的配置,这是根据你的<code>property</code>的类型去找<code>typeHandler</code>并使用.</li></ol></blockquote><h3 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableId.java">@TableId</a></h3><ul><li>描述：主键注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center">主键类型</td></tr></tbody></table><h4 id="IdType"><a href="#IdType" class="headerlink" title="IdType"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java">IdType</a></h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center">数据库ID自增</td></tr><tr><td align="center">NONE</td><td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr><tr><td align="center">ID_WORKER</td><td align="center">分布式全局唯一ID 长整型类型(please use <code>ASSIGN_ID</code>)</td></tr><tr><td align="center">UUID</td><td align="center">32位UUID字符串(please use <code>ASSIGN_UUID</code>)</td></tr><tr><td align="center">ID_WORKER_STR</td><td align="center">分布式全局唯一ID 字符串类型(please use <code>ASSIGN_ID</code>)</td></tr></tbody></table><h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableField.java">@TableField</a></h3><ul><li>描述：字段注解(非主键)</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">数据库字段名</td></tr><tr><td align="center">el</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">映射为原生 <code>#&#123; ... &#125;</code> 逻辑,相当于写在 xml 里的 <code>#&#123; ... &#125;</code> 部分</td></tr><tr><td align="center">exist</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否为数据库表字段</td></tr><tr><td align="center">condition</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#&#123;%s&#125;</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考(opens new window)</a></td></tr><tr><td align="center">update</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td></tr><tr><td align="center">insertStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_NULL: <code>insert into table_a(&lt;if test=&quot;columnProperty != null&quot;&gt;column&lt;/if&gt;) values (&lt;if test=&quot;columnProperty != null&quot;&gt;#&#123;columnProperty&#125;&lt;/if&gt;)</code></td></tr><tr><td align="center">updateStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：IGNORED: <code>update table_a set column=#&#123;columnProperty&#125;</code></td></tr><tr><td align="center">whereStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_EMPTY: <code>where &lt;if test=&quot;columnProperty != null and columnProperty!=&#39;&#39;&quot;&gt;column=#&#123;columnProperty&#125;&lt;/if&gt;</code></td></tr><tr><td align="center">fill</td><td align="center">Enum</td><td align="center">否</td><td align="center">FieldFill.DEFAULT</td><td align="center">字段自动填充策略</td></tr><tr><td align="center">select</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否进行 select 查询</td></tr><tr><td align="center">keepGlobalFormat</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td align="center">是否保持使用全局的 format 进行处理</td></tr><tr><td align="center">jdbcType</td><td align="center">JdbcType</td><td align="center">否</td><td align="center">JdbcType.UNDEFINED</td><td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">typeHandler</td><td align="center">Class&lt;? extends TypeHandler&gt;</td><td align="center">否</td><td align="center">UnknownTypeHandler.class</td><td align="center">类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">numericScale</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">指定小数点后保留的位数</td></tr></tbody></table><blockquote><p>关于<code>jdbcType</code>和<code>typeHandler</code>以及<code>numericScale</code>的说明:</p><p><code>numericScale</code>只生效于 update 的sql. <code>jdbcType</code>和<code>typeHandler</code>如果不配合<code>@TableName#autoResultMap = true</code>一起使用,也只生效于 update 的sql. 对于<code>typeHandler</code>如果你的字段类型和set进去的类型为<code>equals</code>关系,则只需要让你的<code>typeHandler</code>让Mybatis加载到即可,不需要使用注解</p></blockquote><h4 id="FieldStrategy"><a href="#FieldStrategy" class="headerlink" title="FieldStrategy"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/FieldStrategy.java">FieldStrategy</a></h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IGNORED</td><td align="center">忽略判断</td></tr><tr><td align="center">NOT_NULL</td><td align="center">非NULL判断</td></tr><tr><td align="center">NOT_EMPTY</td><td align="center">非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断)</td></tr><tr><td align="center">DEFAULT</td><td align="center">追随全局配置</td></tr></tbody></table><h4 id="FieldFill"><a href="#FieldFill" class="headerlink" title="FieldFill"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/FieldFill.java">FieldFill</a></h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DEFAULT</td><td align="center">默认不处理</td></tr><tr><td align="center">INSERT</td><td align="center">插入时填充字段</td></tr><tr><td align="center">UPDATE</td><td align="center">更新时填充字段</td></tr><tr><td align="center">INSERT_UPDATE</td><td align="center">插入和更新时填充字段</td></tr></tbody></table><h3 id="Version"><a href="#Version" class="headerlink" title="@Version"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/Version.java">@Version</a></h3><ul><li>描述：乐观锁注解、标记 <code>@Verison</code> 在字段上</li></ul><h3 id="EnumValue"><a href="#EnumValue" class="headerlink" title="@EnumValue"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/EnumValue.java">@EnumValue</a></h3><ul><li>描述：通枚举类注解(注解在枚举字段上)</li></ul><h3 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableLogic.java">@TableLogic</a></h3><ul><li>描述：表字段逻辑处理注解（逻辑删除）</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">逻辑未删除值</td></tr><tr><td align="center">delval</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">逻辑删除值</td></tr></tbody></table><h3 id="SqlParser"><a href="#SqlParser" class="headerlink" title="@SqlParser"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlParser.java">@SqlParser</a></h3><blockquote><p>see @InterceptorIgnore</p></blockquote><h3 id="KeySequence"><a href="#KeySequence" class="headerlink" title="@KeySequence"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/KeySequence.java">@KeySequence</a></h3><ul><li>描述：序列主键策略 <code>oracle</code></li><li>属性：value、resultMap</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">序列名</td></tr><tr><td align="center">clazz</td><td align="center">Class</td><td align="center">否</td><td align="center">Long.class</td><td align="center">id的类型, 可以指定String.class，这样返回的Sequence值是字符串”1”</td></tr></tbody></table><h3 id="InterceptorIgnore"><a href="#InterceptorIgnore" class="headerlink" title="@InterceptorIgnore"></a><a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/InterceptorIgnore.java">@InterceptorIgnore</a></h3><blockquote><p>see <a href="https://mp.baomidou.com/guide/interceptor.html">插件主体</a></p></blockquote><h1 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h1><p>由于MyBatisPlus将一些常用的crud操作已经实现了，但是这些sql是不可见的，我们希望能看见这些sql</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日志配置    </span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416145946.png" alt="image-20210416145945073"></p><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//测试数据</span></span><br><span class="line">     User user = <span class="keyword">new</span> User();</span><br><span class="line">     user.setName(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">     user.setAge(<span class="number">18</span>);</span><br><span class="line">     user.setEmail(<span class="string">&quot;测试邮箱&quot;</span>);</span><br><span class="line">     <span class="comment">//插入数据</span></span><br><span class="line">     <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416150339.png" alt="image-20210416150337711"></p><p>你会发现id已经有值了，这是mybatisplus的主键自动生成策略生成并自动回填的，采用雪花算法生成</p><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><p>MyBatis-Plus默认采用的使用推特的<strong>雪花算法</strong></p><blockquote><p>默认ID_WORKER 全局唯一id</p></blockquote><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">分布式系统唯一ID生成方案汇总</a></p><blockquote><p>雪花算法</p></blockquote><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><h3 id="设置主键生成策略"><a href="#设置主键生成策略" class="headerlink" title="设置主键生成策略"></a>设置主键生成策略</h3><p>在主键对应的字段上加上注解@TableId(type = IdType.AUTO)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IdType</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span> </span>&#123;</span><br><span class="line">    AUTO(<span class="number">0</span>), <span class="comment">//主键自增，数据库主键字段一定是自增的</span></span><br><span class="line">    NONE(<span class="number">1</span>), <span class="comment">//未设置主键</span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//手动输入</span></span><br><span class="line">    ASSIGN_ID(<span class="number">3</span>),</span><br><span class="line">    ASSIGN_UUID(<span class="number">4</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER_STR(<span class="number">3</span>),<span class="comment">//ID_WORKER的字符串表示</span></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    UUID(<span class="number">4</span>);<span class="comment">//uuid 全局唯一id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IdType</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><p><strong>全部更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//测试数据</span></span><br><span class="line">     User user = <span class="keyword">new</span> User();</span><br><span class="line">     user.setId(<span class="number">1382952686951546882L</span>);</span><br><span class="line">     user.setName(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">     user.setAge(<span class="number">181</span>);</span><br><span class="line">     user.setEmail(<span class="string">&quot;测试邮箱1&quot;</span>);</span><br><span class="line">     <span class="comment">//更新数据</span></span><br><span class="line">     <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416152208.png" alt="image-20210416152206889"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;? WHERE id&#x3D;?</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 测试1(String), 181(Integer), 测试邮箱1(String), 1382952686951546882(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1</span><br></pre></td></tr></table></figure><p><strong>只更新某些字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//测试数据</span></span><br><span class="line">     User user = <span class="keyword">new</span> User();</span><br><span class="line">     user.setId(<span class="number">1382952686951546882L</span>);</span><br><span class="line">     user.setName(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line">     <span class="comment">//插入数据</span></span><br><span class="line">     <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416152523.png" alt="image-20210416152522426"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;? WHERE id&#x3D;?</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 测试2(String), 1382952686951546882(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1</span><br></pre></td></tr></table></figure><blockquote><p>对比两个更新操作生成Sql，你会发现MybatisPlus会根据你的条件，动态的生成sql</p></blockquote><h2 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h2><p>创建时间、更新时间！这些操作一般都是自动化完成的，我们不希望手动更新!</p><p>阿里巴巴开发手册中说过：<strong>所有的表都应该具有这两个字段L: gmt_create(创建时间)、gmt_modified(更新时间)。这样方便对数据进行追踪，而且需要自动化！</strong></p><blockquote><p>方式一：数据库级别</p></blockquote><p>1.在表中新增两个字段，create_time、update_time</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210419203741.png" alt="image-20210419203740111"></p><p>2.更新实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>方式二：代码方式</p></blockquote><p>1.删除数据库的默认值，更新操作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210419204148.png" alt="image-20210419204146977"></p><p>2.实体类字段属性上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写注解处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">handler</span>  <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始更新填充&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420091605.png" alt="image-20210420091554725"></p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><blockquote><p><strong>乐观锁</strong>：总是认为不会出现问题，无论干什么不去上锁！如果出了问题，再次更新值测试</p><p><strong>悲观锁</strong>：总是认为会出现问题，无论干什么都会上锁！再去操作！</p></blockquote><p>乐观锁实现方式：</p><ul><li>取出记录时获取当前version</li><li>更新时，带上这个version</li><li>执行更新时，set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">乐观锁：1.先查询，获取版本号 version = 1</span><br><span class="line"><span class="comment">--线程A</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">&quot;测试1&quot;</span> ,<span class="keyword">version</span> = <span class="keyword">version</span>+<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--线程B B抢先完成，version变成2 A再来修改的时候version不对 修改失败</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">&quot;测试1&quot;</span> ,<span class="keyword">version</span> = <span class="keyword">version</span>+<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试一下MP</p></blockquote><p>1.修改表的结构</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420093117.png" alt="image-20210420093116046"></p><p>2.修改实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.注册组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hl.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="comment">//开启事务管理 默认开启的</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 旧版</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新版</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>新版本中直接使用@Version注解</p></blockquote><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptomisticLocker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先查询数据</span></span><br><span class="line">        User user = userMapper.selectById(<span class="number">1382952686951546882L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;测试12&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;测试邮箱12&quot;</span>);</span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line">        <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420095545.png" alt="image-20210420095543380"></p><p>version自动变成version+1了</p><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id查询</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//查询</span></span><br><span class="line">       User user = userMapper.selectById(<span class="number">1382952686951546882L</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//测试批量查询</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//查询</span></span><br><span class="line">       List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//测试条件查询</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       HashMap&lt;String ,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">//查询</span></span><br><span class="line">       map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">       List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>1.配置插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试分页查询</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//当前ue，每页大小</span></span><br><span class="line">     Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">     <span class="comment">//查询</span></span><br><span class="line">     userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">     page.getRecords().forEach(System.out::println);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420101650.png" alt="image-20210420101648522"></p><p>查询出了目标数据及总数</p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p><strong>基本的删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//条件与前面的查询相似</span></span><br><span class="line"><span class="comment">//        userMapper.delete();</span></span><br><span class="line"><span class="comment">//        userMapper.deleteBatchIds(); 通过id集合删除</span></span><br><span class="line"><span class="comment">//        userMapper.deleteByMap(); 通过条件删除</span></span><br><span class="line"></span><br><span class="line">        userMapper.deleteById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>逻辑删除</strong></p><p>通过一个字段来表示该条数据的删除状态</p><p>1.修改表的字段</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420102440.png" alt="image-20210420102438813"></p><p>2.实体类中增加属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><p>3.配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span>  <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><blockquote><p>高版本直接使用 @TableLogic注解，不需要进行配置</p></blockquote><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//条件与前面的查询相似</span></span><br><span class="line"><span class="comment">//        userMapper.delete();</span></span><br><span class="line"><span class="comment">//        userMapper.deleteBatchIds(); 通过id集合删除</span></span><br><span class="line"><span class="comment">//        userMapper.deleteByMap(); 通过条件删除</span></span><br><span class="line"></span><br><span class="line">        userMapper.deleteById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420103419.png" alt="image-20210420103416617"></p><p>实际上是更新操作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420103457.png" alt="image-20210420103455365"></p><p>此时去查询</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420103543.png" alt="image-20210420103542189"></p><p>MP会自动的加上deleted = 0 这个条件</p><h1 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h1><p>我们在平时的开发中，会遇到一些慢Sql，我们需要去找到这些慢Sql</p><blockquote><p>MP3.x已经移除了这个方法</p></blockquote><p>MP给我们提供了一个插件，用于输出每条Sql语句及其执行时间</p><p>1.导入插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * SQL执行效率插件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span><span class="comment">// 设置 dev test 环境开启</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       PerformanceInterceptor performanceInterceptor =  <span class="keyword">new</span> PerformanceInterceptor() </span><br><span class="line">       performanceInterceptor.setMaxTime(<span class="number">100</span>);<span class="comment">//ms，超过此处设置的ms则sql不执行</span></span><br><span class="line">  performanceInterceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">       <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2.设置环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>3.测试使用</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420105036.png" alt="image-20210420105035450"></p><h1 id="条件构造器Wrapper"><a href="#条件构造器Wrapper" class="headerlink" title="条件构造器Wrapper"></a>条件构造器Wrapper</h1><p>我们写一些十分复杂的sql，就可以使用Wrapper</p><h2 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h2><p><strong>1、name、email不为空，age大于12</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper</span><br><span class="line">                .isNotNull(<span class="string">&quot;name&quot;</span>)<span class="comment">//name不为空</span></span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>)<span class="comment">//email不为空</span></span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>);<span class="comment">//年龄大于12</span></span><br><span class="line">        userMapper.selectList(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420105920.png" alt="image-20210420105919349"></p><p><strong>2、name=’xxx’</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper</span><br><span class="line">                .eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;测试&quot;</span>);<span class="comment">//name为测试</span></span><br><span class="line">        userMapper.selectList(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420110245.png" alt="image-20210420110244532"></p><p><strong>3、age在12到20之间的记录总数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">       wrapper</span><br><span class="line">               .between(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>,<span class="number">20</span>);<span class="comment">//name为测试</span></span><br><span class="line">       userMapper.selectCount(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420110701.png" alt="image-20210420110659754"></p><p><strong>4、name中不包含e，且email like ”测试%“</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">       wrapper</span><br><span class="line">               .notLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;t&quot;</span>)<span class="comment">//name中不包含e</span></span><br><span class="line">               .likeRight(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;测试&quot;</span>);<span class="comment">//like %测试</span></span><br><span class="line">       List&lt;Map&lt;String ,Object&gt;&gt; users =  userMapper.selectMaps(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../typora/images/image-20210420111331510.png" alt="image-20210420111331510"></p><p><strong>5、子查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id&lt;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; users =  userMapper.selectObjs(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420111654.png" alt="image-20210420111653224"></p><p><strong>6、通过id降序排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">       wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id&lt;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">       List&lt;Object&gt; users =  userMapper.selectObjs(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420112019.png" alt="image-20210420112018041"></p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h3 id="allEq"><a href="#allEq" class="headerlink" title="allEq"></a>allEq</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="keyword">boolean</span> condition, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure><ul><li>全部<a href="https://mp.baomidou.com/guide/wrapper.html#eq">eq</a>(或个别<a href="https://mp.baomidou.com/guide/wrapper.html#isnull">isNull</a>)</li></ul><blockquote><p>个别参数说明:</p><p><code>params</code> : <code>key</code>为数据库字段名,<code>value</code>为字段值<br><code>null2IsNull</code> : 为<code>true</code>则在<code>map</code>的<code>value</code>为<code>null</code>时调用 <a href="https://mp.baomidou.com/guide/wrapper.html#isnull">isNull</a> 方法,为<code>false</code>时则忽略<code>value</code>为<code>null</code>的</p></blockquote><ul><li>例1: <code>allEq(&#123;id:1,name:&quot;老王&quot;,age:null&#125;)</code>—&gt;<code>id = 1 and name = &#39;老王&#39; and age is null</code></li><li>例2: <code>allEq(&#123;id:1,name:&quot;老王&quot;,age:null&#125;, false)</code>—&gt;<code>id = 1 and name = &#39;老王&#39;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="keyword">boolean</span> condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull) </span><br></pre></td></tr></table></figure><blockquote><p>个别参数说明:</p><p><code>filter</code> : 过滤函数,是否允许字段传入比对条件中<br><code>params</code> 与 <code>null2IsNull</code> : 同上</p><ul><li>例1: <code>allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt;= 0, &#123;id:1,name:&quot;老王&quot;,age:null&#125;)</code>—&gt;<code>name = &#39;老王&#39; and age is null</code></li><li>例2: <code>allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt;= 0, &#123;id:1,name:&quot;老王&quot;,age:null&#125;, false)</code>—&gt;<code>name = &#39;老王&#39;</code></li></ul></blockquote><h3 id="eq"><a href="#eq" class="headerlink" title="eq"></a>eq</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eq(R column, Object val)</span><br><span class="line">eq(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>等于 =</li><li>例: <code>eq(&quot;name&quot;, &quot;老王&quot;)</code>—&gt;<code>name = &#39;老王&#39;</code></li></ul><h3 id="ne"><a href="#ne" class="headerlink" title="ne"></a>ne</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ne(R column, Object val)</span><br><span class="line">ne(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>不等于 &lt;&gt;</li><li>例: <code>ne(&quot;name&quot;, &quot;老王&quot;)</code>—&gt;<code>name &lt;&gt; &#39;老王&#39;</code></li></ul><h3 id="gt"><a href="#gt" class="headerlink" title="gt"></a>gt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gt(R column, Object val)</span><br><span class="line">gt(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>大于 &gt;</li><li>例: <code>gt(&quot;age&quot;, 18)</code>—&gt;<code>age &gt; 18</code></li></ul><h3 id="ge"><a href="#ge" class="headerlink" title="ge"></a>ge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ge(R column, Object val)</span><br><span class="line">ge(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>大于等于 &gt;=</li><li>例: <code>ge(&quot;age&quot;, 18)</code>—&gt;<code>age &gt;= 18</code></li></ul><h3 id="lt"><a href="#lt" class="headerlink" title="lt"></a>lt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lt(R column, Object val)</span><br><span class="line">lt(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>小于 &lt;</li><li>例: <code>lt(&quot;age&quot;, 18)</code>—&gt;<code>age &lt; 18</code></li></ul><h3 id="le"><a href="#le" class="headerlink" title="le"></a>le</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">le(R column, Object val)</span><br><span class="line">le(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>小于等于 &lt;=</li><li>例: <code>le(&quot;age&quot;, 18)</code>—&gt;<code>age &lt;= 18</code></li></ul><h3 id="between"><a href="#between" class="headerlink" title="between"></a>between</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">between(R column, Object val1, Object val2)</span><br><span class="line">between(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><ul><li>BETWEEN 值1 AND 值2</li><li>例: <code>between(&quot;age&quot;, 18, 30)</code>—&gt;<code>age between 18 and 30</code></li></ul><h3 id="notBetween"><a href="#notBetween" class="headerlink" title="notBetween"></a>notBetween</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notBetween(R column, Object val1, Object val2)</span><br><span class="line">notBetween(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><ul><li>NOT BETWEEN 值1 AND 值2</li><li>例: <code>notBetween(&quot;age&quot;, 18, 30)</code>—&gt;<code>age not between 18 and 30</code></li></ul><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">like(R column, Object val)</span><br><span class="line">like(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘%值%’</li><li>例: <code>like(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name like &#39;%王%&#39;</code></li></ul><h3 id="notLike"><a href="#notLike" class="headerlink" title="notLike"></a>notLike</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notLike(R column, Object val)</span><br><span class="line">notLike(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>NOT LIKE ‘%值%’</li><li>例: <code>notLike(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name not like &#39;%王%&#39;</code></li></ul><h3 id="likeLeft"><a href="#likeLeft" class="headerlink" title="likeLeft"></a>likeLeft</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeLeft(R column, Object val)</span><br><span class="line">likeLeft(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘%值’</li><li>例: <code>likeLeft(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name like &#39;%王&#39;</code></li></ul><h3 id="likeRight"><a href="#likeRight" class="headerlink" title="likeRight"></a>likeRight</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeRight(R column, Object val)</span><br><span class="line">likeRight(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘值%’</li><li>例: <code>likeRight(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name like &#39;王%&#39;</code></li></ul><h3 id="isNull"><a href="#isNull" class="headerlink" title="isNull"></a>isNull</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNull(R column)</span><br><span class="line">isNull(<span class="keyword">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><ul><li>字段 IS NULL</li><li>例: <code>isNull(&quot;name&quot;)</code>—&gt;<code>name is null</code></li></ul><h3 id="isNotNull"><a href="#isNotNull" class="headerlink" title="isNotNull"></a>isNotNull</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNotNull(R column)</span><br><span class="line">isNotNull(<span class="keyword">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><ul><li>字段 IS NOT NULL</li><li>例: <code>isNotNull(&quot;name&quot;)</code>—&gt;<code>name is not null</code></li></ul><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Collection&lt;?&gt; value)</span><br><span class="line">in(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><ul><li>字段 IN (value.get(0), value.get(1), …)</li><li>例: <code>in(&quot;age&quot;,&#123;1,2,3&#125;)</code>—&gt;<code>age in (1,2,3)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Object... values)</span><br><span class="line">in(<span class="keyword">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><ul><li>字段 IN (v0, v1, …)</li><li>例: <code>in(&quot;age&quot;, 1, 2, 3)</code>—&gt;<code>age in (1,2,3)</code></li></ul><h3 id="notIn"><a href="#notIn" class="headerlink" title="notIn"></a>notIn</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Collection&lt;?&gt; value)</span><br><span class="line">notIn(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN (value.get(0), value.get(1), …)</li><li>例: <code>notIn(&quot;age&quot;,&#123;1,2,3&#125;)</code>—&gt;<code>age not in (1,2,3)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Object... values)</span><br><span class="line">notIn(<span class="keyword">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN (v0, v1, …)</li><li>例: <code>notIn(&quot;age&quot;, 1, 2, 3)</code>—&gt;<code>age not in (1,2,3)</code></li></ul><h3 id="inSql"><a href="#inSql" class="headerlink" title="inSql"></a>inSql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inSql(R column, String inValue)</span><br><span class="line">inSql(<span class="keyword">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><ul><li>字段 IN ( sql语句 )</li><li>例: <code>inSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>—&gt;<code>age in (1,2,3,4,5,6)</code></li><li>例: <code>inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>—&gt;<code>id in (select id from table where id &lt; 3)</code></li></ul><h3 id="notInSql"><a href="#notInSql" class="headerlink" title="notInSql"></a>notInSql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notInSql(R column, String inValue)</span><br><span class="line">notInSql(<span class="keyword">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN ( sql语句 )</li><li>例: <code>notInSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>—&gt;<code>age not in (1,2,3,4,5,6)</code></li><li>例: <code>notInSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>—&gt;<code>id not in (select id from table where id &lt; 3)</code></li></ul><h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupBy(R... columns)</span><br><span class="line">groupBy(<span class="keyword">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>分组：GROUP BY 字段, …</li><li>例: <code>groupBy(&quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>group by id,name</code></li></ul><h3 id="orderByAsc"><a href="#orderByAsc" class="headerlink" title="orderByAsc"></a>orderByAsc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByAsc(R... columns)</span><br><span class="line">orderByAsc(<span class="keyword">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, … ASC</li><li>例: <code>orderByAsc(&quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>order by id ASC,name ASC</code></li></ul><h3 id="orderByDesc"><a href="#orderByDesc" class="headerlink" title="orderByDesc"></a>orderByDesc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByDesc(R... columns)</span><br><span class="line">orderByDesc(<span class="keyword">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, … DESC</li><li>例: <code>orderByDesc(&quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>order by id DESC,name DESC</code></li></ul><h3 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy"></a>orderBy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderBy(<span class="keyword">boolean</span> condition, <span class="keyword">boolean</span> isAsc, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, …</li><li>例: <code>orderBy(true, true, &quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>order by id ASC,name ASC</code></li></ul><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">having(String sqlHaving, Object... params)</span><br><span class="line">having(<span class="keyword">boolean</span> condition, String sqlHaving, Object... params)</span><br></pre></td></tr></table></figure><ul><li>HAVING ( sql语句 )</li><li>例: <code>having(&quot;sum(age) &gt; 10&quot;)</code>—&gt;<code>having sum(age) &gt; 10</code></li><li>例: <code>having(&quot;sum(age) &gt; &#123;0&#125;&quot;, 11)</code>—&gt;<code>having sum(age) &gt; 11</code></li></ul><h3 id="func"><a href="#func" class="headerlink" title="func"></a>func</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func(Consumer&lt;Children&gt; consumer)</span><br><span class="line">func(<span class="keyword">boolean</span> condition, Consumer&lt;Children&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>func 方法(主要方便在出现if…else下调用不同方法能不断链)</li><li>例: <code>func(i -&gt; if(true) &#123;i.eq(&quot;id&quot;, 1)&#125; else &#123;i.ne(&quot;id&quot;, 1)&#125;)</code></li></ul><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or()</span><br><span class="line">or(<span class="keyword">boolean</span> condition)</span><br></pre></td></tr></table></figure><ul><li>拼接 OR</li></ul><p>注意事项:</p><p>主动调用<code>or</code>表示紧接着下一个<strong>方法</strong>不是用<code>and</code>连接!(不调用<code>or</code>则默认为使用<code>and</code>连接)</p><ul><li>例: <code>eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;老王&quot;)</code>—&gt;<code>id = 1 or name = &#39;老王&#39;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or(Consumer&lt;Param&gt; consumer)</span><br><span class="line">or(<span class="keyword">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>OR 嵌套</li><li>例: <code>or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>—&gt;<code>or (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and(Consumer&lt;Param&gt; consumer)</span><br><span class="line">and(<span class="keyword">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>AND 嵌套</li><li>例: <code>and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>—&gt;<code>and (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul><h3 id="nested"><a href="#nested" class="headerlink" title="nested"></a>nested</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nested(Consumer&lt;Param&gt; consumer)</span><br><span class="line">nested(<span class="keyword">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>正常嵌套 不带 AND 或者 OR</li><li>例: <code>nested(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>—&gt;<code>(name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply(String applySql, Object... params)</span><br><span class="line">apply(<span class="keyword">boolean</span> condition, String applySql, Object... params)</span><br></pre></td></tr></table></figure><ul><li>拼接 sql</li></ul><blockquote><p>注意事项:</p><p>该方法可用于数据库<strong>函数</strong> 动态入参的<code>params</code>对应前面<code>applySql</code>内部的<code>&#123;index&#125;</code>部分.这样是不会有sql注入风险的,反之会有!</p></blockquote><ul><li>例: <code>apply(&quot;id = 1&quot;)</code>—&gt;<code>id = 1</code></li><li>例: <code>apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code>—&gt;<code>date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></li><li>例: <code>apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#123;0&#125;&quot;, &quot;2008-08-08&quot;)</code>—&gt;<code>date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></li></ul><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">last(String lastSql)</span><br><span class="line">last(<span class="keyword">boolean</span> condition, String lastSql)</span><br></pre></td></tr></table></figure><ul><li>无视优化规则直接拼接到 sql 的最后</li></ul><blockquote><p>注意事项:</p><p>只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</p></blockquote><ul><li>例: <code>last(&quot;limit 1&quot;)</code></li></ul><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exists(String existsSql)</span><br><span class="line">exists(<span class="keyword">boolean</span> condition, String existsSql)</span><br></pre></td></tr></table></figure><ul><li>拼接 EXISTS ( sql语句 )</li><li>例: <code>exists(&quot;select id from table where age = 1&quot;)</code>—&gt;<code>exists (select id from table where age = 1)</code></li></ul><h3 id="notExists"><a href="#notExists" class="headerlink" title="notExists"></a>notExists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notExists(String notExistsSql)</span><br><span class="line">notExists(<span class="keyword">boolean</span> condition, String notExistsSql)</span><br></pre></td></tr></table></figure><ul><li>拼接 NOT EXISTS ( sql语句 )</li><li>例: <code>notExists(&quot;select id from table where age = 1&quot;)</code>—&gt;<code>not exists (select id from table where age = 1)</code></li></ul><h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;jobob&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">&quot;模块名&quot;</span>));</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.baomidou.ant&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setSuperEntityClass(<span class="string">&quot;你自己的父类实体,没有就不用设置!&quot;</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">&quot;你自己的父类控制器,没有就不用设置!&quot;</span>);</span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行main方法，输入对应的表名  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;为什么要学习MyBtis-Plus&quot;&gt;&lt;a href=&quot;#为什么要学习MyBtis-Plus&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="mybatis" scheme="https://heavenimtoral.gitee.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式(不定时更新)</title>
    <link href="https://heavenimtoral.gitee.io/2021/04/06/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://heavenimtoral.gitee.io/2021/04/06/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-06T01:32:48.540Z</published>
    <updated>2021-04-16T02:43:11.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式相关内容介绍"><a href="#设计模式相关内容介绍" class="headerlink" title="设计模式相关内容介绍"></a>设计模式相关内容介绍</h1><h2 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h2><h3 id="软件设计模式产生的背景"><a href="#软件设计模式产生的背景" class="headerlink" title="软件设计模式产生的背景"></a>软件设计模式产生的背景</h3><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。 </p><h3 id="软件设计模式的概念"><a href="#软件设计模式的概念" class="headerlink" title="软件设计模式的概念"></a>软件设计模式的概念</h3><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h3 id="学习设计模式的必要性"><a href="#学习设计模式的必要性" class="headerlink" title="学习设计模式的必要性"></a>学习设计模式的必要性</h3><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><ul><li><p><strong>创建型模式</strong>（5种）</p><p><strong>用于描述“怎样创建对象”</strong>，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong>（7种）</p><p><strong>用于描述如何将类或对象按某种布局组成更大的结构</strong>，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong>（11种）</p><p><strong>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务</strong>，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图</p><h3 id="类图概述"><a href="#类图概述" class="headerlink" title="类图概述"></a>类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h3 id="类图的作用"><a href="#类图的作用" class="headerlink" title="类图的作用"></a>类图的作用</h3><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h3 id="类图表示法"><a href="#类图表示法" class="headerlink" title="类图表示法"></a>类图表示法</h3><h4 id="类的表示方式"><a href="#类的表示方式" class="headerlink" title="类的表示方式"></a>类的表示方式</h4><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095403.jpg" alt="Employee"></p><p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected</li></ul><p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong>  </p><p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><p>​    1，中括号中的内容表示是可选的</p><p>​    2，也有将类型放在变量名前面，返回值类型放在方法名前面</p></blockquote><p>举个栗子</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095524.png" alt="demo"></p><p>上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul><h4 id="类与类之间的关系表示方式"><a href="#类与类之间的关系表示方式" class="headerlink" title="类与类之间的关系表示方式"></a>类与类之间的关系表示方式</h4><h5 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h5><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联又可以分为单向关联，双向关联，自关联。</p><p>1、单向关联</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095912.png" alt="image-20210406095910934"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p>2、双向关联</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095926.png" alt="image-20210406095924257"></p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p>3、自关联</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095944.png" alt="image-20210406095942616"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h5 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h5><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100033.png" alt="image-20210406100031868"></p><h5 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h5><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100119.png" alt="image-20210406100118036"></p><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100141.png" alt="image-20210406100139365"></p><h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100217.png" alt="image-20210406100216017"></p><h5 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h5><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100248.png" alt="image-20210406100246805"></p><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><p>下面以 <code>搜狗输入法</code> 的皮肤为例介绍开闭原则的应用。</p><p>【例】<code>搜狗输入法</code> 的皮肤设计。</p><p>分析：<code>搜狗输入法</code> 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin和HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100346.png" alt="image-20210406100344849"></p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>里氏代换原则是面向对象设计的基本原则之一。</p><p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</strong></p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>下面看一个里氏替换原则中经典的一个例子</p><p>【例】正方形不是长方形。</p><p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100428.png" alt="image-20210406100427380"></p><p>代码如下：</p><p><strong>长方形类（Rectangle）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正方形（Square）：</strong></p><p>由于正方形的长和宽相同，所以在方法setLength和setWidth中，对长度和宽度都需要赋相同值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setLength(width);</span><br><span class="line">        <span class="keyword">super</span>.setWidth(width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setLength(length);</span><br><span class="line">        <span class="keyword">super</span>.setWidth(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类RectangleDemo是我们的软件系统中的一个组件，它有一个resize方法依赖基类Rectangle，resize方法是RectandleDemo类中的一个方法，用来实现宽度逐渐增长的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Rectangle rectangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (rectangle.getWidth() &lt;= rectangle.getLength()) &#123;</span><br><span class="line">            rectangle.setWidth(rectangle.getWidth() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印长方形的长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLengthAndWidth</span><span class="params">(Rectangle rectangle)</span> </span>&#123;</span><br><span class="line">        System.out.println(rectangle.getLength());</span><br><span class="line">        System.out.println(rectangle.getWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        rectangle.setLength(<span class="number">20</span>);</span><br><span class="line">        rectangle.setWidth(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle);</span><br><span class="line">        printLengthAndWidth(rectangle);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Rectangle rectangle1 = <span class="keyword">new</span> Square();</span><br><span class="line">        rectangle1.setLength(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle1);</span><br><span class="line">        printLengthAndWidth(rectangle1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们运行一下这段代码就会发现，假如我们把一个普通长方形作为参数传入resize方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度,代码就会停止，这种行为的结果符合我们的预期；假如我们再把一个正方形作为参数传入resize方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。所以，普通的长方形是适合这段代码的，正方形不适合。<br>我们得出结论：在resize方法中，Rectangle类型的参数是不能被Square类型的参数所代替，如果进行了替换就得不到预期结果。因此，Square类和Rectangle类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。</p><p>如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口(Quadrilateral)，让Rectangle类和Square类实现Quadrilateral接口</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100456.png" alt="image-20210406100455005"></p><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求<strong>对抽象进行编程，不要对实现进行编程</strong>，这样就降低了客户与实现模块间的耦合。</p><p>下面看一个例子来理解依赖倒转原则</p><p>【例】组装电脑</p><p>现要组装一台电脑，需要配件cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择cpu有很多选择，如Intel，AMD等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p><p><strong>类图如下：</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100528.png" alt="image-20210406100526640"></p><p>代码如下：</p><p><strong>希捷硬盘类（XiJieHardDisk）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiJieHardDisk</span> <span class="keyword">implements</span> <span class="title">HardDisk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Intel处理器（IntelCpu）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntelCpu</span> <span class="keyword">implements</span> <span class="title">Cpu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Intel处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>金士顿内存条（KingstonMemory）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KingstonMemory</span> <span class="keyword">implements</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿作为内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XiJieHardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> IntelCpu cpu;</span><br><span class="line">    <span class="keyword">private</span> KingstonMemory memory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IntelCpu <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(IntelCpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KingstonMemory <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(KingstonMemory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XiJieHardDisk <span class="title">getHardDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHardDisk</span><span class="params">(XiJieHardDisk hardDisk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">        cpu.run();</span><br><span class="line">        memory.save();</span><br><span class="line">        String data = hardDisk.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘中获取的数据为：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类（TestComputer）：</strong></p><p>测试类用来组装电脑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.setHardDisk(<span class="keyword">new</span> XiJieHardDisk());</span><br><span class="line">        computer.setCpu(<span class="keyword">new</span> IntelCpu());</span><br><span class="line">        computer.setMemory(<span class="keyword">new</span> KingstonMemory());</span><br><span class="line"></span><br><span class="line">        computer.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的cpu只能是Intel的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p><p>根据依赖倒转原则进行改进：</p><p>代码我们只需要修改Computer类，让Computer类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p><p><strong>类图如下：</strong></p><p><img src="../../../../typora/images/image-20210406100601988.png" alt="image-20210406100601988"></p><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HardDisk <span class="title">getHardDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHardDisk</span><span class="params">(HardDisk hardDisk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cpu <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(Cpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memory <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(Memory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>现有两个类：A类（方法1、方法2），B类需要A类中的方法1，但是如果B类实现A类，就会拥有方法2，这样B类就拥有一个它不需要的方法。</p><p>下面看一个例子来理解接口隔离原则</p><p>【例】安全门案例</p><p>我们需要创建一个<code>黑马</code>品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100647.png" alt="image-20210406100645056"></p><p>上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现SafetyDoor接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100707.png" alt="image-20210406100706202"></p><p>代码如下：</p><p><strong>AntiTheft（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AntiTheft</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fireproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fireproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Waterproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">waterproof</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HeiMaSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeiMaSafetyDoor</span> <span class="keyword">implements</span> <span class="title">AntiTheft</span>,<span class="title">Fireproof</span>,<span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waterproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ItcastSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItcastSafetyDoor</span> <span class="keyword">implements</span> <span class="title">AntiTheft</span>,<span class="title">Fireproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则又叫最少知识原则。</p><p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><p>下面看一个例子来理解迪米特法则</p><p>【例】明星与经纪人的关系实例</p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100747.png" alt="image-20210406100746609"></p><p>代码如下：</p><p><strong>明星类（Star）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Star</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>粉丝类（Fans）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fans</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fans</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>媒体公司类（Company）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经纪人类（Agent）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line">    <span class="keyword">private</span> Fans fans;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStar</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFans</span><span class="params">(Fans fans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fans = fans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(fans.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(company.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>合成复用原则是指：尽量先使用<strong>组合</strong>或者<strong>聚合</strong>等<strong>关联关系</strong>来实现，其次才考虑使用<strong>继承关系</strong>来实现。</p><p>通常类的复用分为<strong>继承复用</strong>和<strong>合成复用</strong>两种。</p><p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ol><li><strong>继承复用破坏了类的封装性</strong>。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li><strong>子类与父类的耦合度高</strong>。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li><strong>它限制了复用的灵活性</strong>。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p><ol><li><strong>它维持了类的封装性</strong>。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li><strong>对象间的耦合度低</strong>。可以在类的成员位置声明抽象。</li><li><strong>复用的灵活性高</strong>。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li></ol><p>下面看一个例子来理解合成复用原则</p><p>【例】汽车分类管理程序</p><p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下： </p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100843.png" alt="image-20210406100833817"></p><p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100853.png" alt="image-20210406100851809"></p><h1 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h1><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“<strong>将对象的创建与使用分离</strong>”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>原型模式</li><li>建造者模式</li></ul><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h3 id="单例模式的结构"><a href="#单例模式的结构" class="headerlink" title="单例模式的结构"></a>单例模式的结构</h3><p>单例模式的主要有以下角色：</p><ul><li>单例类。只能创建一个实例的类</li><li>访问类。使用单例类</li></ul><h3 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h3><blockquote><p>单例设计模式分类两种：</p><p>​    饿汉式：类加载就会导致该单实例对象被创建    </p><p>​    懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><h5 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.在本类中创建本类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.在静态代码块中赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p><h5 id="枚举方式"><a href="#枚举方式" class="headerlink" title="枚举方式"></a>枚举方式</h5><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    枚举方式属于饿汉方式。</p><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><h5 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p><h5 id="双重检查锁"><a href="#双重检查锁" class="headerlink" title="双重检查锁"></a>双重检查锁</h5><p>再来讨论一下懒汉模式中加锁的问题，对于 <code>getInstance()</code> 方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//只有当进行写操作的时候才会上锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//只有当进行写操作的时候才会上锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">小结：</font></p><p>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性/方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 <code>static</code> 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder</p><p>并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p><font color="red">小结：</font></p><p>​    静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="问题演示"><a href="#问题演示" class="headerlink" title="问题演示"></a>问题演示</h4><p>破坏单例模式：</p><p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p><ul><li><p>序列化反序列化</p><p>将<strong>Singleton类</strong>序列化写入文件，在从文件反序列化读取对象</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//往文件中写对象</span></span><br><span class="line">        <span class="comment">//writeObject2File();</span></span><br><span class="line">        <span class="comment">//从文件中读取对象</span></span><br><span class="line">        Singleton s1 = readObjectFromFile();</span><br><span class="line">        Singleton s2 = readObjectFromFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两个反序列化后的对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">readObjectFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象输入流对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//第一个读取Singleton对象</span></span><br><span class="line">        Singleton instance = (Singleton) ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObject2File</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的对象</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//创建对象输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将instance对象写出到文件中</span></span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式。</p></blockquote></li><li><p>反射</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的字节码对象</span></span><br><span class="line">        Class clazz = Singleton.class;</span><br><span class="line">        <span class="comment">//获取Singleton类的私有无参构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Singleton类的对象s1</span></span><br><span class="line">        Singleton s1 = (Singleton) constructor.newInstance();</span><br><span class="line">        <span class="comment">//创建Singleton类的对象s2</span></span><br><span class="line">        Singleton s2 = (Singleton) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断通过反射创建的两个Singleton对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式</p></blockquote></li></ul><blockquote><p><font color="red">注意：</font>枚举方式不会出现这两个问题。</p></blockquote><h4 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h4><ul><li><p>序列化、反序列方式破坏单例模式的解决方法</p><p>在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是为了解决序列化反序列化破解单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码解析：</strong></p><p>ObjectInputStream类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">    <span class="keyword">int</span> outerHandle = passHandle;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object obj = readObject0(<span class="keyword">false</span>);<span class="comment">//重点查看readObject0方法</span></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readObject0</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> TC_OBJECT:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));<span class="comment">//重点查看readOrdinaryObject方法</span></span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bin.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span></span><br><span class="line">    obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>; </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span></span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp; desc.hasReadResolveMethod()) &#123;</span><br><span class="line">    <span class="comment">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span></span><br><span class="line">    <span class="comment">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span></span><br><span class="line">    Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">     ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反射方式破解单例的解决方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           反射破解单例模式需要添加的代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">说明:</font></p><p>​    这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此种操作。</p><h4 id="JDK源码解析-Runtime类"><a href="#JDK源码解析-Runtime类" class="headerlink" title="JDK源码解析-Runtime类"></a>JDK源码解析-Runtime类</h4><p>Runtime类就是使用的单例设计模式。</p><ol><li><p>通过源代码查看使用的是哪儿种单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面源代码中可以看出Runtime类使用的是饿汉式（静态属性）方式来实现单例模式的。</p></li></ol></li></ul><ol start="2"><li><p>使用Runtime类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Runtime类对象</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 Java 虚拟机中的内存总量。</span></span><br><span class="line">        System.out.println(runtime.totalMemory());</span><br><span class="line">        <span class="comment">//返回 Java 虚拟机试图使用的最大内存量。</span></span><br><span class="line">        System.out.println(runtime.maxMemory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span></span><br><span class="line">        Process process = runtime.exec(<span class="string">&quot;ipconfig&quot;</span>);</span><br><span class="line">        <span class="comment">//获取命令执行后的结果，通过输入流获取</span></span><br><span class="line">        InputStream inputStream = process.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>* <span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> b = inputStream.read(arr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,b,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>需求：设计一个咖啡店点餐系统。  </p><p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p><p>具体类的设计如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406144553.png" alt="image-20210406144551509"></p><ul><li><p>Coffee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加奶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加糖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSugar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>AmericanCoffee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;美式咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LatteCoffee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffee</span>  <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CoffeeStroe</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">orderCoffee</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;american&quot;</span>.equals(type))&#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">            coffee.addMike();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type))&#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">            coffee.addSugar();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;对不起，没有你要的咖啡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p><p>在本教程中会介绍三种工厂的使用</p><ul><li>简单工厂模式（不属于GOF的23种经典设计模式）</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>简单工厂包含如下角色：</p><ul><li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品 ：实现或者继承抽象产品的子类</li><li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>现在使用简单工厂对上面案例进行改进，类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406150845.png" alt="image-20210406150840911"></p><p>工厂类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanoCoffee();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就解除了和Coffee实现类的耦合，同时又产生了新的耦合，<strong>CoffeeStore对象和SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合</strong>。</p><p>后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><p>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</p><p><strong>缺点：</strong></p><p>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><strong>静态工厂</strong></p><p>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是23种设计模式中的。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title">createCoffee</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanoCoffee();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不用创建对象，直接调用方法</p><h3 id="工厂方法模式-1"><a href="#工厂方法模式-1" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</p><h4 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h4><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>使用工厂方法模式对上例进行改进，类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406152122.png" alt="image-20210406152120502"></p><ul><li><p><strong>抽象工厂——CoffeeFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Coffee <span class="title">createCoffee</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>具体工厂</strong></p><p>AmericanCoffeeFactory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCoffeeFactory</span> <span class="keyword">implements</span> <span class="title">CoffeeFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LatteCoffeeFactory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffeeFactory</span> <span class="keyword">implements</span> <span class="title">CoffeeFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>抽象产品——Coffee</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加奶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加糖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSugar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>具体产品</strong></p><p>AmericonCoffee:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericonCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;美式咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LatteCoffee:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffee</span>  <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><p>CoffeeStore:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CoffeeFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(CoffeeFactory factory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">orderCoffee</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Coffee coffee = factory.createCoffee();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建咖啡店对象</span></span><br><span class="line">        CoffeeStore coffeeStore = <span class="keyword">new</span> CoffeeStore();</span><br><span class="line">        <span class="comment">//创建工厂对象</span></span><br><span class="line">        CoffeeFactory coffeeFactory = <span class="keyword">new</span> AmericanCoffeeFactory();</span><br><span class="line">        coffeeStore.setFactory(coffeeFactory);</span><br><span class="line">        Coffee coffee = coffeeStore.orderCoffee();</span><br><span class="line">        System.out.println(coffee.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>看起来变得比以前的繁琐，但是通过工厂方法模式，我们实现了开闭原则，对扩展开放，对修改关闭，当我们要添加新的咖啡的时候，只需要扩展对应的具体咖啡工厂和对应的咖啡类，而不需要去修改代码。</p></blockquote><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p><strong>缺点：</strong></p><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、传智播客只培养计算机软件专业的学生等。</p><p>这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p><p>本节要介绍的抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406154646.png" alt="image-20210406154644156"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406154700.png" alt="image-20210406154658784"></p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>抽象工厂模式的主要角色如下：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个<strong>不同等级</strong>的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406155004.png" alt="image-20210406155003037"></p><p>代码如下：</p><p>抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Coffee <span class="title">createCoffee</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dessert <span class="title">createDessert</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//美式甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanDessertFactory</span> <span class="keyword">implements</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dessert <span class="title">createDessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MatchaMousse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//意大利风味甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItalyDessertFactory</span> <span class="keyword">implements</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dessert <span class="title">createDessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tiramisu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong></p><p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p></li><li><p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p></li><li><p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p></li></ul><p>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</p><h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><p><strong>简单工厂+配置文件解除耦合</strong></p><p>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p><p>第一步：定义配置文件</p><p>为了演示方便，我们使用properties文件作为配置文件，名称为bean.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">american</span>=<span class="string">com.itheima.pattern.factory.config_factory.AmericanCoffee</span></span><br><span class="line"><span class="attr">latte</span>=<span class="string">com.itheima.pattern.factory.config_factory.LatteCoffee</span></span><br></pre></td></tr></table></figure><p>第二步：改进工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Coffee&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.load(is);</span><br><span class="line">            <span class="comment">//遍历Properties集合对象</span></span><br><span class="line">            Set&lt;Object&gt; keys = p.keySet();</span><br><span class="line">            <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">                <span class="comment">//根据键获取值（全类名）</span></span><br><span class="line">                String className = p.getProperty((String) key);</span><br><span class="line">                <span class="comment">//获取字节码对象</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                Coffee obj = (Coffee) clazz.newInstance();</span><br><span class="line">                map.put((String)key,obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title">createCoffee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。</p><h3 id="JDK源码解析-Collection-iterator方法"><a href="#JDK源码解析-Collection-iterator方法" class="headerlink" title="JDK源码解析-Collection.iterator方法"></a>JDK源码解析-Collection.iterator方法</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;令狐冲&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;风清扬&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;任我行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="comment">//使用迭代器遍历</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            String ele = it.next();</span><br><span class="line">            System.out.println(ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的代码大家应该很熟，使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407152922.png" alt="image-20210407152914504"></p><p>Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类，ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品类的对象。</p><blockquote><p>另：</p><p>​    1,DateForamt类中的getInstance()方法使用的是工厂模式；</p><p>​    2,Calendar类中的getInstance()方法使用的是工厂模式；</p></blockquote><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><p>原型模式包含如下角色：</p><ul><li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li></ul><p>接口类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407154119.png" alt="image-20210407154118556"></p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>原型模式的克隆分为浅克隆和深克隆。</p><blockquote><p>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p><p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p>Java中的Object类中提供了 <code>clone()</code> 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了Cloneable接口的子实现类就是具体的原型类。代码如下：</p><p><strong>Realizetype类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Realizetype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Realizetype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体原型对象已被克隆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realizetype <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始克隆&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (Realizetype)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>PrototypeTest类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个原型类对象</span></span><br><span class="line">        Realizetype realizetype = <span class="keyword">new</span> Realizetype();</span><br><span class="line">        Realizetype clone = realizetype.clone();</span><br><span class="line">        System.out.println(realizetype==clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407155414.png" alt="image-20210407155412821"></p><blockquote><p>构造方法只是在new的时候被执行了，在克隆的时候，执行的是克隆方法，而没有执行构造方法，克隆出来的新对象与原对象不是同一个对象。</p></blockquote><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>用原型模式生成“三好学生”奖状</strong></p><p>同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。</p><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407155703.png" alt="image-20210407155702578"></p><p><strong>Citation类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Citation</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="comment">//三好学生姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Citation <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Citation)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CitationTest类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CitationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建原型对象</span></span><br><span class="line">        Citation citation = <span class="keyword">new</span> Citation();</span><br><span class="line">        <span class="comment">//克隆原型对象</span></span><br><span class="line">        Citation citation1 = citation.clone();</span><br><span class="line"></span><br><span class="line">        citation.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        citation1.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        citation.show();</span><br><span class="line">        citation1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li><li>性能和安全要求比较高。</li></ul><h3 id="扩展（深克隆）"><a href="#扩展（深克隆）" class="headerlink" title="扩展（深克隆）"></a>扩展（深克隆）</h3><p>将上面的“三好学生”奖状的案例中Citation类的name属性修改为Student类型的属性。代码如下：</p><p><strong>Citation类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Citation</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="comment">//三好学生姓名</span></span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStu</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stu = stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(stu.getName() + <span class="string">&quot;同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Citation <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Citation)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CitationTest类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CitationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建原型对象</span></span><br><span class="line">        Citation citation = <span class="keyword">new</span> Citation();</span><br><span class="line"></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        citation.setStu(stu);</span><br><span class="line">        <span class="comment">//克隆原型对象</span></span><br><span class="line">        Citation citation1 = citation.clone();</span><br><span class="line"></span><br><span class="line">        citation1.getStu().setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        citation.show();</span><br><span class="line">        citation1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407161048.png" alt="image-20210407161047208"></p><blockquote><p><font color="red">说明：</font></p><p>​    stu对象和stu1对象是同一个对象，就会产生将stu1对象中name属性值改为“李四”，两个Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的引用类型的属性进行引用的复制。</p></blockquote><p>这种情况需要使用深克隆，而进行深克隆需要使用对象流。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CitationTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Citation c1 = <span class="keyword">new</span> Citation();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        c1.setStu(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象输出流对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\b.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将c1对象写出到文件中</span></span><br><span class="line">        oos.writeObject(c1);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象出入流对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\b.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//读取对象</span></span><br><span class="line">        Citation c2 = (Citation) ois.readObject();</span><br><span class="line">        <span class="comment">//获取c2奖状所属学生对象</span></span><br><span class="line">        Student stu1 = c2.getStu();</span><br><span class="line">        stu1.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断stu对象和stu1对象是否是同一个对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;stu和stu1是同一个对象？&quot;</span> + (stu == stu1));</span><br><span class="line"></span><br><span class="line">        c1.show();</span><br><span class="line">        c2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407161537.png" alt="image-20210407161536007"></p><blockquote><p>注意：Citation类和Student类必须实现Serializable接口，否则会抛NotSerializableException异常</p></blockquote><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407162245.png" alt="image-20210407162243645"></p><ul><li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li><li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li><li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li></ul><h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><p>建造者（Builder）模式包含如下角色：</p><ul><li><p>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。 </p></li><li><p>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。 </p></li><li><p>产品类（Product）：要创建的复杂对象。</p></li><li><p>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。 </p></li></ul><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407165541.png" alt="image-20210407165539519"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>创建共享单车</strong></p><p>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。</p><p>这里Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder和OfoBuilder是具体的建造者；Director是指挥者。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407165855.png" alt="image-20210407165854112"></p><p>具体的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自行车类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line">    <span class="keyword">private</span> String seat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrame</span><span class="params">(String frame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.frame = frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeat</span><span class="params">(String seat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seat = seat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象 builder 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Bike mBike = <span class="keyword">new</span> Bike();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Bike <span class="title">createBike</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//摩拜单车Builder类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobikeBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;铝合金车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;真皮车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">createBike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ofo单车Builder类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfoBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;碳纤维车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;橡胶车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">createBike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指挥者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder mBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        mBuilder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBuilder.buildFrame();</span><br><span class="line">        mBuilder.buildSeat();</span><br><span class="line">        <span class="keyword">return</span> mBuilder.createBike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        showBike(<span class="keyword">new</span> OfoBuilder());</span><br><span class="line">        showBike(<span class="keyword">new</span> MobikeBuilder());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showBike</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        Bike bike = director.construct();</span><br><span class="line">        System.out.println(bike.getFrame());</span><br><span class="line">        System.out.println(bike.getSeat());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>上面示例是 Builder模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把指挥者类和抽象建造者进行结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象 builder 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Bike mBike = <span class="keyword">new</span> Bike();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Bike <span class="title">createBike</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildFrame();</span><br><span class="line">        <span class="keyword">this</span>.BuildSeat();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createBike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果construct() 过于复杂，建议还是封装到 Director 中。</p><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性。</li><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li>建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。</li></ul><p><strong>缺点：</strong></p><p>造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><p>建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。</p><ul><li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li><li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。</li></ul><h3 id="模式扩展-1"><a href="#模式扩展-1" class="headerlink" title="模式扩展"></a>模式扩展</h3><p>建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。</p><p>重构前代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String cpu, String screen, String memory, String mainboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">        <span class="keyword">this</span>.mainboard = mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScreen</span><span class="params">(String screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(String memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMainboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMainboard</span><span class="params">(String mainboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mainboard = mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建Phone对象</span></span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone(<span class="string">&quot;intel&quot;</span>,<span class="string">&quot;三星屏幕&quot;</span>,<span class="string">&quot;金士顿&quot;</span>,<span class="string">&quot;华硕&quot;</span>);</span><br><span class="line">        System.out.println(phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面在客户端代码中构建Phone对象，传递了四个参数，如果参数更多呢？代码的可读性及使用的成本就是比较高。</p><p>重构后代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Phone</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        cpu = builder.cpu;</span><br><span class="line">        screen = builder.screen;</span><br><span class="line">        memory = builder.memory;</span><br><span class="line">        mainboard = builder.mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String screen;</span><br><span class="line">        <span class="keyword">private</span> String memory;</span><br><span class="line">        <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">cpu</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            cpu = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">screen</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            screen = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">memory</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            memory = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">mainboard</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            mainboard = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Phone <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Phone(<span class="keyword">this</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone.Builder()</span><br><span class="line">                .cpu(<span class="string">&quot;intel&quot;</span>)</span><br><span class="line">                .mainboard(<span class="string">&quot;华硕&quot;</span>)</span><br><span class="line">                .memory(<span class="string">&quot;金士顿&quot;</span>)</span><br><span class="line">                .screen(<span class="string">&quot;三星&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构后的代码在使用起来更方便，某种程度上也可以提高开发效率。从软件设计上，对程序员的要求比较高。</p><h2 id="创建者模式对比"><a href="#创建者模式对比" class="headerlink" title="创建者模式对比"></a>创建者模式对比</h2><h3 id="工厂方法模式VS建造者模式"><a href="#工厂方法模式VS建造者模式" class="headerlink" title="工厂方法模式VS建造者模式"></a>工厂方法模式VS建造者模式</h3><p>工厂方法模式注重的是<strong>整体对象的创建方式</strong>；而建造者模式注重的是<strong>部件构建的过程</strong>，意在通过一步一步地精确构造创建出一个复杂的对象。</p><p>我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。</p><h3 id="抽象工厂模式VS建造者模式"><a href="#抽象工厂模式VS建造者模式" class="headerlink" title="抽象工厂模式VS建造者模式"></a>抽象工厂模式VS建造者模式</h3><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p><p>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p><p>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</p><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。</p><p>由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。</p><p>结构型模式分为以下 7 种：</p><ul><li>代理模式</li><li>适配器模式</li><li>装饰者模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>享元模式</li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>Java中的代理按照代理类生成时机不同又分为<strong>静态代理</strong>和<strong>动态代理</strong>。<strong>静态代理代理类在编译期就生成</strong>，而动<strong>态代理代理类则是在Java运行时动态生成</strong>。动态代理又有JDK代理和CGLib代理两种。</p><h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><p>代理（Proxy）模式分为三种角色：</p><ul><li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>我们通过案例来感受一下静态代理。</p><p>【例】火车站卖票</p><p>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火车站是目标对象，代售点是代理对象。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407193651.png" alt="image-20210407193650385"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代售点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPoint</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用&quot;</span>);</span><br><span class="line">        station.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyPoint pp = <span class="keyword">new</span> ProxyPoint();</span><br><span class="line">        pp.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象和目标对象的中介。同时也对sell方法进行了增强（代理点收取一些服务费用）。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>接下来我们使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂，用来创建代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SellTickets <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Proxy获取代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            newProxyInstance()方法参数说明：</span></span><br><span class="line"><span class="comment">                ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口</span></span><br><span class="line"><span class="comment">                InvocationHandler h ： 代理对象的调用处理程序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        InvocationHandler中invoke方法参数说明：</span></span><br><span class="line"><span class="comment">                            proxy ： 代理对象</span></span><br><span class="line"><span class="comment">                            method ： 对应于在代理对象上调用的接口方法的 Method 实例</span></span><br><span class="line"><span class="comment">                            args ： 代理对象调用接口方法时传递的实际参数</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        <span class="comment">//执行真实对象</span></span><br><span class="line">                        Object result = method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        </span><br><span class="line">        SellTickets proxyObject = factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">使用了动态代理，我们思考下面问题：</font></p><ul><li><p>ProxyFactory是代理类吗？</p><p>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.proxy.dynamic.jdk.SellTickets;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m2, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m0, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的类中，我们可以看到以下几个信息：</p><ul><li>代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。</li><li>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</li></ul></li><li><p>动态代理的执行流程是什么样？</p><p>下面是摘取的重点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序运行过程中动态生成的代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java提供的动态代理相关类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Proxy</span><span class="params">(InvocationHandler h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SellTickets <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        Object result = method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试访问类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        SellTickets proxyObject = factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行流程如下：</p><pre><code>1. 在测试类中通过代理对象调用sell()方法2. 根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法3. 代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法4. invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</code></pre><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>同样是上面的案例，我们再次使用CGLIB代理实现。</p><p>如果没有定义SellTickets接口，只定义了TrainStation(火车站类)。很显然JDK代理是无法使用了，因为JDK动态代理要求必须定义接口，对接口进行代理。</p><p>CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。</p><p>CGLIB是第三方提供的包，所以需要引入jar包的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//火车站</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation target = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrainStation <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class="line">        Enhancer enhancer =<span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类的字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        TrainStation obj = (TrainStation) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        intercept方法参数说明：</span></span><br><span class="line"><span class="comment">            o ： 代理对象</span></span><br><span class="line"><span class="comment">            method ： 真实对象中的方法的Method实例</span></span><br><span class="line"><span class="comment">            args ： 实际参数</span></span><br><span class="line"><span class="comment">            methodProxy ：代理对象中的方法的method实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrainStation <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用(CGLIB动态代理方式)&quot;</span>);</span><br><span class="line">        TrainStation result = (TrainStation) methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建代理工厂对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        TrainStation proxyObject = factory.getProxyObject();</span><br><span class="line"></span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种代理对比"><a href="#三种代理对比" class="headerlink" title="三种代理对比"></a>三种代理对比</h3><ul><li><p>jdk代理和CGLIB代理</p><p>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p><p>在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果<strong>有接口使用JDK动态代理，如果没有接口使用CGLIB代理</strong>。</p></li><li><p>动态代理和静态代理                                                                                                                </p><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p><p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p></li></ul><h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><p><strong>缺点：</strong></p><ul><li>增加了系统的复杂度；</li></ul><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>远程（Remote）代理</p><p>本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。</p></li><li><p>防火墙（Firewall）代理</p><p>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。</p></li><li><p>保护（Protect or Access）代理</p><p>控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p></li></ul><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>如果去欧洲国家去旅游的话，他们的插座如下图最左边，是欧洲标准。而我们使用的插头如下图最右边的。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第1面插入当地的插座，第2面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210408145143.png" alt="image-20210408145135245"></p><p><strong>定义：</strong></p><p>​    将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p><p>​    适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><h3 id="结构-6"><a href="#结构-6" class="headerlink" title="结构"></a>结构</h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p><p>【例】读卡器</p><p>现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将TF卡中的内容读取出来。</p><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210408145221.png" alt="image-20210408145219793"></p><h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h3 id="JDK源码解析"><a href="#JDK源码解析" class="headerlink" title="JDK源码解析"></a>JDK源码解析</h3><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1>]]></content>
    
    
    <summary type="html">Java的23种设计模式</summary>
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="设计模式" scheme="https://heavenimtoral.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch7.6.x</title>
    <link href="https://heavenimtoral.gitee.io/2021/04/01/ElasticSearch/"/>
    <id>https://heavenimtoral.gitee.io/2021/04/01/ElasticSearch/</id>
    <published>2021-04-01T07:21:54.300Z</published>
    <updated>2021-04-02T09:01:20.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="搜索技术简介"><a href="#搜索技术简介" class="headerlink" title="搜索技术简介"></a>搜索技术简介</h2><blockquote><p>ElasticSearch</p></blockquote><p>Elasticsearch是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。<br>它用于<strong>全文搜索</strong>、<strong>结构化搜索</strong>、<strong>分析</strong>以及将这三者混合使用：<br>维基百科使用Elasticsearch提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。<br>英国卫报使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。<br>StackOverflow结合全文搜索与地理位置查询，以及more-like-this功能来找到相关的问题和答案。<br>Github使用Elasticsearch检索1300亿行的代码。<br>但是Elasticsearch不仅用于大型企业，它还让像DataDog以及Klout这样的创业公司将最初的想法变成可扩展的解决方案。Elasticsearch可以在你的笔记本上运行，也可以在数以百计的服务器上处理PB级别的数据 。</p><p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。<br>但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。<br>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API 来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><blockquote><p>solr简介</p></blockquote><p>Solr 是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p><p>Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><p>solr是基于lucene开发企业级搜索服务器，实际上就是封装了lucene。</p><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果。</p><blockquote><p>Lucene简介</p></blockquote><p>Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费Java信息检索程序库。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p><p>Lucene是一个全文检索引擎的架构。那什么是全文搜索引擎？</p><p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p><p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的7家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如Lycos引擎。</p><h2 id="ElasticSearch与Solr区别"><a href="#ElasticSearch与Solr区别" class="headerlink" title="ElasticSearch与Solr区别"></a>ElasticSearch与Solr区别</h2><blockquote><p>对已有数据搜索</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153826.png" alt="image-20210401153825103"></p><blockquote><p>当实时建立索引时</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153843.png" alt="image-20210401153841250"></p><blockquote><p>数据量增加</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153856.png" alt="image-20210401153854558"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153909.png" alt="image-20210401153907424"></p><blockquote><p>ElasticSearch vs Solr 总结</p></blockquote><p>　　（1）es基本是开箱即用，非常简单。Solr安装略微复杂一丢丢，可关注（<a href="http://www.cnblogs.com/blueskyli/p/7100443.html#3763227">solr6.6教程-基础环境搭建(一)</a>）</p><p>　　（2）Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</p><p>　　（3）Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。</p><p>　　（4）Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑</p><p>　　（5）Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；</p><p>　　　　 ES建立索引快（即查询慢），<strong>即实时性查询快</strong>，用于facebook新浪等搜索。</p><p>　　   Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p><p>　　（6）Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而 Elasticsearch相对开发维护者较少，更新太快，学习使用成本较高。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="elasticSearch"><a href="#elasticSearch" class="headerlink" title="elasticSearch"></a>elasticSearch</h2><p>要求：JDK1.8、node.js</p><blockquote><p>下载</p></blockquote><p><a href="https://www.elastic.co/cn/">官网</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401161302.png" alt="image-20210401161204395"></p><p>下载解压即可使用</p><blockquote><p>Elasticsearch 7.6.1 目录</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin：启动文件</span><br><span class="line">config：配置文件</span><br><span class="line">log4j2 日志文件</span><br><span class="line">jvm.options java 虚拟机相关配置</span><br><span class="line">elasticsearch.yml 配置文件  比如默认9200端口! 跨域问题！ </span><br><span class="line">lib：相关jar包</span><br><span class="line"></span><br><span class="line">modules：功能模块</span><br><span class="line">plugins：插件：比如ik插件</span><br></pre></td></tr></table></figure><blockquote><p>启动</p></blockquote><p>点击bin目录下的elasticsearch.bat文件，访问localhost:9200</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401162230.png" alt="image-20210401162227644"></p><h2 id="可视化界面elasticSearch-head"><a href="#可视化界面elasticSearch-head" class="headerlink" title="可视化界面elasticSearch-head"></a>可视化界面elasticSearch-head</h2><p>该可视化界面依赖node.js</p><blockquote><p>下载</p></blockquote><p><a href="https://github.com/mobz/elasticsearch-head">下载地址</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401162701.png" alt="image-20210401162658084"></p><blockquote><p>安装</p></blockquote><p>解压后，在目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401162959.png" alt="image-20210401162958033"></p><blockquote><p>启动</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401163142.png" alt="image-20210401163136112"></p><p>访问localhost:9100</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401163228.png" alt="image-20210401163226040"></p><p>你会发现，它报了许多错误，都是与跨域有关，所以我们需要去elasticSearch的elasticsearch.yml文件配置跨域处理</p><blockquote><p>跨域处理</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401163515.png" alt="image-20210401163513716"></p><p>在elasticSearch的elasticsearch.yml的末尾加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>在重启elasticSearch</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401164000.png" alt="image-20210401163959011"></p><blockquote><p>这个head我们就把它当作数据展示工具！我们后面所有的查询通过Kibana</p></blockquote><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><p>Kibana 是一个针对ElasticSearch的开源分析及可视化平台，用来搜索、查看交互存储在ElasticSearch索引中的数据。使用Kibana,可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示ElasticSearch查询动态，设置Kibana非常简单，无需编码或者格外的基础架构，几分钟内就可以完成Kibana安装并启动ElasticSearch索引检测。</p><blockquote><p>下载</p></blockquote><p><a href="https://www.elastic.co/cn/kibana">官网</a></p><p>Kibana版本要和ElasticSearch一致</p><blockquote><p>安装</p></blockquote><p>解压时间有点久，不要以为出问题关了！！！！！！！！！！！！！！！！！</p><blockquote><p>启动</p></blockquote><p>点击bin目录下的kibana.bat</p><p><img src="../../../../typora/images/image-20210402091114408.png" alt="image-20210402091114408"></p><p>访问localhost:5601<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402091159.png" alt="image-20210402091150793"></p><p>以后代码都在这里面写</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402091514.png" alt="image-20210402091510562"></p><blockquote><p>汉化</p></blockquote><p>检查kibana-7.6.1-windows-x86_64\x-pack\plugins\translations\translations目录是否有zh-CN这个文件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402091935.png" alt="image-20210402091932545"></p><p>kibana-7.6.1-windows-x86_64\config\kibaba.yml最后一行加上设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure><p>重启kibana</p><p>已经变成中文了</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402092124.png" alt="image-20210402092122028"></p><h1 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h1><p>1、索引</p><p>2、类型（mapping）</p><p>3、文档</p><p>4.倒排索引</p><blockquote><p>ElasticSearch是面向文档，一切都是json</p></blockquote><blockquote><p>关系型数据库和ElasticSearch的对比</p></blockquote><table><thead><tr><th>关系型数据库</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库database</td><td>索引 indices（数据库）</td></tr><tr><td>表tables</td><td>ypes （以后会被启用）</td></tr><tr><td>行rows</td><td>documents （文档）</td></tr><tr><td>字段columns</td><td>fields</td></tr></tbody></table><blockquote><p>物理设计</p></blockquote><p>ElasticSearch在后台把每个索引分成多个分片，每份分片可以在集群中的不同服务器间迁移</p><blockquote><p>逻辑设计</p></blockquote><ol><li><p>文档：索引和搜索数据的最小单位是文档（就是一条条数据）</p><ol><li>自我包含：一篇文档同时包含字段和对应的值，也就是同时包含key：value！</li><li>层次型：可以实层次型，一个文档中包含自文档，复杂的逻辑实体就是这么来的！（就是json对象）</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能用，在ElasticSearch中，对于字段是非常灵活的，有时候，我们可以忽略这个字段，或者动态的添加一个字段</li></ol></li><li><p>类型</p><ol><li>类型是文档的逻辑容器,就像关系型数据库一样,表格是行的容器。类型中对于字段的定义称为映射,比如name映射为字符串类型。我们说文档是无模式的 ,它们不需要拥有映射中所定义的所有字段,比如新增一个字段,那么elasticsearch是怎么做的呢?elasticsearch会自动的将新字段加入映射,但是这个字段的不确定它是什么类型, elasticsearch就开始猜,如果这个值是18 ,那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对 ，所以最安全的方式就是提前定义好所需要的映射,这点跟关系型数据库殊途同归了,先定义好字段,然后再使用,别整什么幺蛾子。</li></ol></li><li><p>索引</p><ol><li><p>就是数据库!</p><p>索引是映射类型的容器, elasticsearch中的索引是一个非常大的文档集合。索|存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p></li><li><p>物理设计：节点和分片如何工作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402095216.png" alt="image-20210402095215406"></p><p>一个集群至少有一 个节点,而一个节点就是一个elasricsearch进程 ,节点可以有多个索引默认的,如果你创建索引,那么索引将会有个5个分片( primary shard ,又称主分片)构成的,每一个主分片会有-一个副本( replica shard ,又称复制分片）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402095246.png" alt="image-20210402095245423"></p><p>主分片和对应的复制分片都不会在同一个节点内,这样有利于某个节点挂掉了,数据也不至于丢失。实际上, 一个分片是一个Lucene索引, 一个包含<strong>倒排索引</strong>的文件目录,倒排索引的结构使得elasticsearch在不扫描全部文档的情况下,就能告诉你哪些文档包含特定的关键字。</p></li></ol></li><li><p>倒排索引</p></li></ol><p>elasticsearch使用的是一种称为倒排索引的结构,采用Lucene倒排索作为底层。这种结构适用于快速的全文搜索，一个索引由文档中所有不重复的列表构成,对于每一个词,都有一个包含它的文档列表。 例如,现在有两个文档，每个文档包含如下内容:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Study every day， good good up to forever  # 文档1包含的内容</span><br><span class="line">To forever, study every day，good good up  # 文档2包含的内容</span><br></pre></td></tr></table></figure><p>为创建倒排索引,我们首先要将每个文档拆分成独立的词(或称为词条或者tokens) ,然后创建一一个包含所有不重 复的词条的排序列表,然后列出每个词条出现在哪个文档:</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>Study</td><td>√</td><td>x</td></tr><tr><td>To</td><td>x</td><td>x</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>day</td><td>√</td><td>√</td></tr><tr><td>study</td><td>x</td><td>√</td></tr><tr><td>good</td><td>√</td><td>√</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>to</td><td>√</td><td>x</td></tr><tr><td>up</td><td>√</td><td>√</td></tr></tbody></table><p>现在，我们试图搜索 to  forever,只需要查看包含每个词条的文档</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>to</td><td>√</td><td>x</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr></tbody></table><p>两个文档都匹配,但是第一个文档比第二个匹配程度更高。如果没有别的条件,现在,这两个包含关键字的文档都将返回。</p><p>再来看一个示例,比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构:</p><table><thead><tr><th>博客文章(原始数据)</th><th>博客文章(原始数据)</th><th>索引列表(倒排索引)</th><th>索引列表(倒排索引)</th></tr></thead><tbody><tr><td>博客文章ID</td><td>标签</td><td>标签</td><td>博客文章ID</td></tr><tr><td>1</td><td>python</td><td>python</td><td>1，2，3</td></tr><tr><td>2</td><td>python</td><td>linux</td><td>3，4</td></tr><tr><td>3</td><td>python，</td><td></td><td></td></tr><tr><td>4</td><td>linux</td><td></td><td></td></tr></tbody></table><p>如果要搜索含有python标签的文章,那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要查看标签这一栏,然后获取相关的文章ID即可。完全过滤掉无关的所有数据,提高效率!</p><p>elasticsearch的索引和Lucene的索引对比</p><p>在elasticsearch中，索引(库)这个词被频繁使用,这就是术语的使用。在elasticsearch中 ,索引被分为多个分片,每份分片是-个Lucene的索引。所以一个elasticsearch索引是由多 个Lucene索引组成的。别问为什么,谁让elasticsearch使用Lucene作为底层呢!如无特指，说起索引都是指elasticsearch的索引。</p><p>接下来的一切操作都在kibana中Dev Tools下的Console里完成。基础操作!</p><h1 id="ik分词器"><a href="#ik分词器" class="headerlink" title="ik分词器"></a>ik分词器</h1><blockquote><p>什么是ik分词器？</p></blockquote><p>分词:即把一-段中文或者别的划分成一个个的关键字,我们在搜索时候会把自己的信息进行分词,会把数据库中或者索引库中的数据进行分词,然后进行一个匹配操作,默认的中文分词是将每个字看成一个词,比如“我爱狂神”会被分为”我”,“爱”,“狂”,“神” ,这显然是不符合要求的,所以我们需要安装中文分词器ik来解决这个问题。</p><p>如果要使用中文,建议使用ik分词器!</p><p>IK提供了两个分词算法: ik_ smart和ik_ max_ word ,其中ik_ smart为最少切分, ik_ max_ _word为最细粒度划分!一会我们测试!</p><p>什么是IK分词器：</p><ul><li>把一句话分词</li><li>如果使用中文：推荐IK分词器</li><li>两个分词算法：ik_smart（最少切分），ik_max_word（最细粒度划分）</li></ul><blockquote><p>下载</p></blockquote><p><a href="https://github.com/medcl/elasticsearch-analysis-ik">下载地址</a></p><p>注意版本</p><blockquote><p>安装</p></blockquote><p>在elasticsearch下的plugins文件夹下新建ik空文件夹，将ik的压缩包解压到该文件夹下，删除压缩包</p><blockquote><p>重启elasticSearch</p></blockquote><p>在es的bin目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elastic<span class="built_in">search-plugin</span> list</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402103056.png" alt="image-20210402103054868"></p><blockquote><p>使用</p></blockquote><p>1、使用ik_smart(最少切分)算法，在kibana的控制台中编写代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华人民共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402103823.png" alt="image-20210402103820058"></p><p>2、使用ik_max_word（最细粒度）算法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华人民共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华人民&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;华人&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;人民共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;人民&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;共和&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">7</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402104000.png" alt="image-20210402103959165"></p><blockquote><p>问题</p></blockquote><p>我想对<strong>超级无敌力霸王</strong>进行分词，想要将<strong>力霸王</strong>放在一起，但是发现被分开了，原因是ik自带的字典中没有<strong>力霸王</strong>这个词</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402104738.png" alt="image-20210402104736484"></p><p>所以需要的词，要加到我们的分词器的字典中！</p><p>1、编写自己的字典 hl.dic</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402105126.png" alt="image-20210402105124737"></p><p>里面只有<strong>力霸王</strong></p><p>2、在E:\JavaUtil\elasticSearch\elasticsearch-7.6.1\plugins\ik\config目录下IKAnalyzer.cfg.xml文件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402105236.png" alt="image-20210402105234540"></p><p>3、重启es</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402105433.png" alt="image-20210402105432051"></p><p>你会发现已经有<strong>力霸王</strong>了</p><p>以后如果要配置我们自己的分词，就在自己定义的dic文件中配置就行了</p><h1 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h1><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更加简洁，更易于实现缓存等机制。</p><p>基本Rest命令说明</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9100/索引名称/类型名称/文档id</td><td>创建文档（指定id）</td></tr><tr><td>POST</td><td>localhost:9100/索引名称/类型名称</td><td>创建文档（随机id）</td></tr><tr><td>POST</td><td>localhost:9100/索引名称/文档类型/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9100/索引名称/文档类型/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9100/索引名称/文档类型/文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost:9100/索引名称/文档类型/_search</td><td>查询所有文档</td></tr></tbody></table><h1 id="关于索引的基本操作"><a href="#关于索引的基本操作" class="headerlink" title="关于索引的基本操作"></a>关于索引的基本操作</h1><h2 id="创建一个索引"><a href="#创建一个索引" class="headerlink" title="创建一个索引"></a>创建一个索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;索引名&#x2F;类型(以后没有了)&#x2F;文档id</span><br><span class="line">&#123;</span><br><span class="line">请求体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT &#x2F;hl&#x2F;type1&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;hl&quot;,</span><br><span class="line">  &quot;age&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402110539.png" alt="image-20210402110538178"></p><p>结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402110746.png" alt="image-20210402110744510"></p><p>hl索引里面已经有1文档，且已经有数据了</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402110913.png" alt="image-20210402110912145"></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li>字符串类型</li></ul><p>text、keyword</p><ul><li>数值类型</li></ul><p>long、integer、short、byte、double、float、half float、scaled float</p><ul><li>日期类型</li></ul><p>date</p><ul><li>布尔值类型</li></ul><p>boolean</p><ul><li>二进制类型</li></ul><p>binary</p><p>等等……</p><h2 id="指定字段的类型"><a href="#指定字段的类型" class="headerlink" title="指定字段的类型"></a>指定字段的类型</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402111746.png" alt="image-20210402111743468"></p><h2 id="获取索引的信息，通过get信息"><a href="#获取索引的信息，通过get信息" class="headerlink" title="获取索引的信息，通过get信息"></a>获取索引的信息，通过get信息</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test1</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402111928.png" alt="image-20210402111927344"></p><h2 id="取消类型设置采用默认"><a href="#取消类型设置采用默认" class="headerlink" title="取消类型设置采用默认"></a>取消类型设置采用默认</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /test2/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;hl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;brithday&quot;</span>:<span class="string">&quot;1998-09-05&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112234.png" alt="image-20210402112233410"></p><h2 id="查看数据类型"><a href="#查看数据类型" class="headerlink" title="查看数据类型"></a>查看数据类型</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112414.png" alt="image-20210402112412821"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>通过命令查看ElasticSearch索引情况,通过get _cat命令可以获取es当前许多信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/health </span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112930.png" alt="image-20210402112929550"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看版本信息</span></span><br><span class="line">GET _cat/indices?v</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112916.png" alt="image-20210402112914577"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul><li>采用put</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402134023.png" alt="image-20210402134020609"></p><p>但是如果数据漏掉了，索引里面只会有传过去的数据</p><ul><li><p>采用post</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test2/_doc/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>:&#123;</span><br><span class="line">     <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;hl113&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402134355.png" alt="image-20210402134354341"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除索引</span></span><br><span class="line">DELETE test1</span><br><span class="line"><span class="comment">//删除文档</span></span><br><span class="line">DELETE /test2/_doc/1</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402134453.png" alt="image-20210402134451811"></p><h1 id="关于文档的基本操作"><a href="#关于文档的基本操作" class="headerlink" title="关于文档的基本操作"></a>关于文档的基本操作</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">向hl索引下user文档添加id为1的数据</span><br><span class="line">PUT /hl/user/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;hl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">&quot;desc&quot;</span>:<span class="string">&quot;一个码农&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>:[<span class="string">&quot;技术&quot;</span>,<span class="string">&quot;it&quot;</span>,<span class="string">&quot;直男&quot;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402135616.png" alt="image-20210402135614936"></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li><p>put 覆盖</p></li><li><p>post 更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;hl&#x2F;user&#x2F;3&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;age&quot;:99</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /h1/user/1</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402140357.png" alt="image-20210402140356291"></p><h3 id="条件搜索"><a href="#条件搜索" class="headerlink" title="条件搜索"></a>条件搜索</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...../_search?q=条件</span></span><br><span class="line">GET hl/user/_search?q=name:hl</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402140718.png" alt="image-20210402140715030"></p><h3 id="复杂查询（排序、分页、高亮、模糊）"><a href="#复杂查询（排序、分页、高亮、模糊）" class="headerlink" title="复杂查询（排序、分页、高亮、模糊）"></a>复杂查询（排序、分页、高亮、模糊）</h3><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要name属性中带有 张三 的数据，都能查询出来，但是 单个英文字符未生效</span></span><br><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个hist中value表示查询出的记录数，relation表示查询规则，hits则是查询出的数据集合</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402142145.png" alt="image-20210402142143654"></p><p>在查询出的3个数据中，存在一个score属性，即为权重，权重越高，搜索出来的位置越靠前，在本次搜索中，我们搜索了<strong>张三</strong>，所以张三的权重为最高</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402142323.png" alt="image-20210402142319169"></p><h4 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h4><p>指定查询字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;desc&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402143005.png" alt="image-20210402143003620"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>排序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//排序字段</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//desc 降序 asc 升序</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402143303.png" alt="image-20210402143302188"></p><h4 id="from-和-size"><a href="#from-和-size" class="headerlink" title="from 和 size"></a>from 和 size</h4><p>分页 from：从哪开始，size：每页大小</p><p>类似 limit 0,2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//分页</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402143604.png" alt="image-20210402143603228"></p><h4 id="布尔值查询"><a href="#布尔值查询" class="headerlink" title="布尔值查询"></a>布尔值查询</h4><blockquote><p>must</p></blockquote><p>must（add）,所有条件都要符合</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402144214.png" alt="image-20210402144212358"></p><blockquote><p>should(or)</p></blockquote><p>只需要满足一个条件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;13&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402144347.png" alt="image-20210402144346078"></p><blockquote><p>must_not(not)</p></blockquote><p>不满足条件的才能被查询出来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402144546.png" alt="image-20210402144545452"></p><blockquote><p>过滤器</p></blockquote><p>进行数据过滤</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//范围  </span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">//gt &gt; gte &gt;= lt &lt; lte &lt;=</span></span><br><span class="line">              <span class="attr">&quot;gt&quot;</span>: <span class="number">14</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402145007.png" alt="image-20210402145006104"></p><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p>只要满足一个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET hl&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;男 it&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;tags&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402145614.png" alt="image-20210402145612817"></p><p>匹配条件为“男 it“ ，hl两个条件都符合，所以他的score(权重)比李四高</p><h4 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h4><p>term是直接通过倒排索引进行精确查询</p><h4 id="关于分词"><a href="#关于分词" class="headerlink" title="关于分词"></a>关于分词</h4><p>term:直接查询精确</p><p>match:会使用分词器解析（先分析文档，然后通过分析的文档进行查询）</p><blockquote><p>如果类型为keyword，不会被分词器拆分</p></blockquote><h4 id="多个值精确查询"><a href="#多个值精确查询" class="headerlink" title="多个值精确查询"></a>多个值精确查询</h4><p>bool+term</p><h4 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tags&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402152443.png" alt="image-20210402152442314"></p><blockquote><p>自定义高亮显示</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tags&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/p&gt;&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402152812.png" alt="image-20210402152811428"></p><h1 id="集成Springboot"><a href="#集成Springboot" class="headerlink" title="集成Springboot"></a>集成Springboot</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>1、创建项目</p><p>2、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意检查版本是否对应</p><p>3、配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 索引的创建</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndexRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1.创建索引请求</span></span><br><span class="line">       CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="comment">//2.执行索引请求,请求后获得相应</span></span><br><span class="line">       CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取索引,判断是否存在</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testGetIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(exists);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       AcknowledgedResponse delete = restHighLevelClient.indices().delete(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(delete);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加文档</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       <span class="comment">//创建对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">&quot;hl&quot;</span>,<span class="number">18</span>);</span><br><span class="line">       <span class="comment">//创建请求</span></span><br><span class="line">       IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="comment">//设置规则</span></span><br><span class="line">       request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">       request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将数据放入请求,由于要求json数据，所以需要将数据转成json格式</span></span><br><span class="line">       request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">       <span class="comment">//发送请求,获取响应</span></span><br><span class="line">       IndexResponse response = restHighLevelClient.index(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(response.toString());</span><br><span class="line">       System.out.println(response.status());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取文档,判断是否存在</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       <span class="keyword">boolean</span> exists = restHighLevelClient.exists(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(exists);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取文档,判断是否存在</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testGetDocumentInfo</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       GetResponse response = restHighLevelClient.get(request,RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">//打印文档的信息</span></span><br><span class="line">       System.out.println(response.getSourceAsString());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新文档</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">       <span class="comment">//更新文档</span></span><br><span class="line">       request.doc(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;hl1&quot;</span>,<span class="number">18</span>)),XContentType.JSON);</span><br><span class="line">       <span class="comment">//发送请求</span></span><br><span class="line">       UpdateResponse response = restHighLevelClient.update(request,RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">//打印文档的信息</span></span><br><span class="line">       System.out.println(response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除文档</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">       <span class="comment">//发送请求</span></span><br><span class="line">       DeleteResponse response = restHighLevelClient.delete(request,RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">//打印文档的信息</span></span><br><span class="line">       System.out.println(response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量插入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       <span class="comment">//创建请求</span></span><br><span class="line">       BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">       <span class="comment">//设置规则</span></span><br><span class="line">       request.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">       <span class="comment">//创建对象</span></span><br><span class="line">       ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl&quot;</span>,<span class="number">18</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl1&quot;</span>,<span class="number">18</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl2&quot;</span>,<span class="number">18</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl3&quot;</span>,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;users.size();i++) &#123;</span><br><span class="line">           request.add(</span><br><span class="line">                   <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test3&quot;</span>)</span><br><span class="line">                   .id(<span class="string">&quot;&quot;</span>+i)</span><br><span class="line">                   .source(JSON.toJSONString(users.get(i)),XContentType.JSON)</span><br><span class="line">           );</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//发送请求,获取响应</span></span><br><span class="line">       BulkResponse response = restHighLevelClient.bulk(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(response.toString());</span><br><span class="line">       System.out.println(response.status());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testSearchDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="comment">//构建搜索条件</span></span><br><span class="line">       SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       <span class="comment">//设置了高亮</span></span><br><span class="line">       sourceBuilder.highlighter();</span><br><span class="line">       <span class="comment">//term name为cyx1的</span></span><br><span class="line">       TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hl&quot;</span>);</span><br><span class="line">       sourceBuilder.query(termQueryBuilder);</span><br><span class="line">       sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">       request.source(sourceBuilder);</span><br><span class="line">       SearchResponse response = restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;测试查询文档-----&quot;</span>+JSON.toJSONString(response.getHits()));</span><br><span class="line">       System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (SearchHit documentFields : response.getHits().getHits()) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;测试查询文档--遍历参数--&quot;</span>+documentFields.getSourceAsMap());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;搜索技术简介&quot;&gt;&lt;a href=&quot;#搜索技术简介&quot; class=&quot;headerlink&quot; title=&quot;搜索技术简介&quot;&gt;&lt;/a&gt;搜</summary>
      
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
    <category term="ElasticSearch" scheme="https://heavenimtoral.gitee.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>如何利用Navicat将Mysql的表结构导出成表格？</title>
    <link href="https://heavenimtoral.gitee.io/2021/04/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Navicat%E5%B0%86Mysql%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84%E5%AF%BC%E5%87%BA%E6%88%90%E8%A1%A8%E6%A0%BC%EF%BC%9F/"/>
    <id>https://heavenimtoral.gitee.io/2021/04/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Navicat%E5%B0%86Mysql%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84%E5%AF%BC%E5%87%BA%E6%88%90%E8%A1%A8%E6%A0%BC%EF%BC%9F/</id>
    <published>2021-04-01T03:48:04.967Z</published>
    <updated>2021-04-01T03:57:05.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何利用Navicat将Mysql的表结构导出成表格？"><a href="#如何利用Navicat将Mysql的表结构导出成表格？" class="headerlink" title="如何利用Navicat将Mysql的表结构导出成表格？"></a>如何利用Navicat将Mysql的表结构导出成表格？</h1><p>在某些时候，我们需要表格形式的表结构，但是在建表的时候，我们并没有采用设计工具（1.表格形式的表结构2.导出成sql语句3.执行sql语句），而是直接创建了表。</p><p>我们可以执行以下sql语句，执行的时候将‘–数据库名’和‘–数据表名’去掉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COLUMN_NAME 列名,</span><br><span class="line">COLUMN_TYPE 数据类型,</span><br><span class="line">DATA_TYPE 字段类型,</span><br><span class="line">CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">IS_NULLABLE 是否为空,</span><br><span class="line">COLUMN_DEFAULT 默认值,</span><br><span class="line">COLUMN_COMMENT 备注</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">INFORMATION_SCHEMA. <span class="keyword">COLUMNS</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="comment">--数据库名</span></span><br><span class="line">table_schema = <span class="string">&#x27;schoolbar&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line"><span class="comment">--数据表名</span></span><br><span class="line">table_name = <span class="string">&#x27;tb_user&#x27;</span> </span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401112358.png" alt="image-20210401112347806"></p><p>在复制出来，在复制的时候是全选，由于截图不是全选，只是选中了‘用户id’，所以到时候只有‘用户id’</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401112732.png" alt="image-20210401112730047"></p><p>在excel种ctrl+v，结果如下</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401112923.png" alt="image-20210401112914925"></p>]]></content>
    
    
    <summary type="html">在某些时候，我们需要表格形式的表结构，但是在建表的时候，我们并没有采用设计工具（1.表格形式的表结构2.导出成sql语句3.执行sql语句），而是直接创建了表。</summary>
    
    
    
    <category term="sql" scheme="https://heavenimtoral.gitee.io/categories/sql/"/>
    
    
    <category term="MySql" scheme="https://heavenimtoral.gitee.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>如何在静态工具类里使用Mapper或Service</title>
    <link href="https://heavenimtoral.gitee.io/2021/04/01/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%87%8C%E4%BD%BF%E7%94%A8Mapper%E6%88%96Service/"/>
    <id>https://heavenimtoral.gitee.io/2021/04/01/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%87%8C%E4%BD%BF%E7%94%A8Mapper%E6%88%96Service/</id>
    <published>2021-04-01T03:07:14.551Z</published>
    <updated>2021-04-01T03:58:07.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在静态工具类里使用Mapper或Service"><a href="#如何在静态工具类里使用Mapper或Service" class="headerlink" title="如何在静态工具类里使用Mapper或Service?"></a>如何在静态工具类里使用Mapper或Service?</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BanWordUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BanWordMapper banWordMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BanWordUtils banWordUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBanWordUtils</span><span class="params">(BanWordUtils  banWordUtils)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.banWordUtils = banWordUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span>     <span class="comment">//关键二   通过@PostConstruct 和 @PreDestroy 方法 实现初始化和销毁bean之前进行的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        banWordUtils = <span class="keyword">this</span>;</span><br><span class="line">        banWordUtils.banWordUtils = <span class="keyword">this</span>.banWordUtils;   <span class="comment">// 初使化时将已静态化的testService实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ...工具方法...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">有些时候我们会在静态工具类里面使用Mapper或者Service类，但是一般情况下都会报空指针异常，所以我们需要使用一个技巧来处理。</summary>
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java中常见的对象类型简述（DO、BO、DTO、VO、AO、PO）</title>
    <link href="https://heavenimtoral.gitee.io/2021/03/17/java%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%AE%80%E8%BF%B0%EF%BC%88DO%E3%80%81BO%E3%80%81DTO%E3%80%81VO%E3%80%81AO%E3%80%81PO%EF%BC%89/"/>
    <id>https://heavenimtoral.gitee.io/2021/03/17/java%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%AE%80%E8%BF%B0%EF%BC%88DO%E3%80%81BO%E3%80%81DTO%E3%80%81VO%E3%80%81AO%E3%80%81PO%EF%BC%89/</id>
    <published>2021-03-17T06:00:47.180Z</published>
    <updated>2021-03-17T06:03:31.588Z</updated>
    
    <content type="html"><![CDATA[<p>转载自这篇<a href="https://blog.csdn.net/uestcyms/article/details/80244407">博客</a></p><h1 id="概念及理解"><a href="#概念及理解" class="headerlink" title="概念及理解"></a>概念及理解</h1><p>这些概念用于描述对象的类型；由于java是面向对象的语言；程序的世界就是各个对象之间的“交互”；在交互的工程中会存在多个层次，每个层次中所拥有（关注）的内容都是不一样的；</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210317140315.jpg" alt="preview"></p><h2 id="PO-Persistant-Object-持久对象"><a href="#PO-Persistant-Object-持久对象" class="headerlink" title="PO(Persistant Object) 持久对象"></a>PO(Persistant Object) 持久对象</h2><p>用于表示数据库中的一条记录映射成的 java 对象。PO 仅仅用于表示数据，没有任何数据操作。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</p><p>可以理解是一个PO就是数据库中的一条记录；可以理解某个事务依赖的原始数据；好处是可以将一条记录最为一个对象处理，可以方便转化为其他对象</p><h2 id="BO-Business-Object-业务对象"><a href="#BO-Business-Object-业务对象" class="headerlink" title="BO(Business Object) 业务对象"></a>BO(Business Object) 业务对象</h2><p>封装对象、复杂对象，里面可能包含多个类<br>主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。</p><p>用于表示一个业务对象。BO 包括了业务逻辑，常常封装了对 DAO、RPC 等的调用，可以进行 PO 与 VO/DTO 之间的转换。BO 通常位于业务层，要区别于直接对外提供服务的服务层：BO 提供了基本业务单元的基本业务操作，在设计上属于被服务层业务流程调用的对象，一个业务流程可能需要调用多个 BO 来完成。</p><p>比如一个简历，有教育经历、工作经历、社会关系等等。<br>我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。<br>建立一个对应简历的BO对象处理简历，每个BO包含这些PO。<br>这样处理业务逻辑时，我们就可以针对BO去处理。</p><h2 id="VO-Value-Object-表现对象"><a href="#VO-Value-Object-表现对象" class="headerlink" title="VO(Value Object) 表现对象"></a>VO(Value Object) 表现对象</h2><p>前端界面展示；value object值对象；ViewObject表现层对象；主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值；对于Android而言即是activity或view中的数据元素。</p><p>用于表示一个与前端进行交互的 java 对象。有的朋友也许有疑问，这里可不可以使用 PO 传递数据？实际上，这里的 VO 只包含前端需要展示的数据即可，对于前端不需要的数据，比如数据创建和修改的时间等字段，出于减少传输数据量大小和保护数据库结构不外泄的目的，不应该在 VO 中体现出来。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</p><h2 id="DTO-Data-Transfer-Object-数据传输对象"><a href="#DTO-Data-Transfer-Object-数据传输对象" class="headerlink" title="DTO(Data Transfer Object) 数据传输对象"></a>DTO(Data Transfer Object) 数据传输对象</h2><p>前端调用时传输；也可理解成“上层”调用时传输;<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。但是我们界面上只要显示10个字段，客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO.</p><p>用于表示一个数据传输对象。DTO 通常用于不同服务或服务不同分层之间的数据传输。DTO 与 VO 概念相似，并且通常情况下字段也基本一致。但 DTO 与 VO 又有一些不同，这个不同主要是设计理念上的，比如 API 服务需要使用的 DTO 就可能与 VO 存在差异。通常遵守 Java Bean 的规范，拥有 getter/setter 方法</p><h2 id="DAO-Data-access-object-数据访问对象"><a href="#DAO-Data-access-object-数据访问对象" class="headerlink" title="DAO(Data access object) 数据访问对象"></a>DAO(Data access object) 数据访问对象</h2><p>这个大家最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要.，主要用来封装对数据库的访问。通过它可以把POJO持久化为PO，用PO组装出来VO、DTO；</p><p>用于表示一个数据访问对象。使用 DAO 访问数据库，包括插入、更新、删除、查询等操作，与 PO 一起使用。DAO 一般在持久层，完全封装数据库操作，对外暴露的方法使得上层应用不需要关注数据库相关的任何信息。</p><h2 id="POJO-Plain-ordinary-java-object-简单java对象"><a href="#POJO-Plain-ordinary-java-object-简单java对象" class="headerlink" title="POJO(Plain ordinary java object) 简单java对象"></a>POJO(Plain ordinary java object) 简单java对象</h2><p>一个POJO持久化以后就是PO；直接用它传递、传递过程中就是DTO；直接用来对应表示层就是VO。</p><p>举个例子：<br>事情：统计研发部门中的季度绩效（暂定以工程师填写的为准，当然实际上大部分不是）<br>过程：CTO发布统计绩效请求（附带要求：每个人对应的绩效等级）-&gt;各个组（也可以是子部门）负责人发布统计绩效请求（每个对应的绩效等级，并将绩效分为了3个方面）-&gt;每位开发工程师统计自己绩效（自身各个方面）；<br>可以从例子中看到：每个责任人要求都不同；<br>对于CTO，他需要知道的是该季度所用员工的绩效等级；这里可以认为VO：员工姓名、绩效等级；<br>开发工程师：需将本人这个季度的各个方面的表现都列出来：员工姓名、绩效等级、Ａ方面表现内容及等级、B方面表现内容及等级、C方面表现内容及等级、D方面表现内容及等级、E方面表现内容及等级、F方面表现内容及等级、E方面表现内容及等级；此处可认为是PO：员工姓名、绩效等级、A方面表现内容、A方面等级….E方面表现内容、E方面等级；<br>然后开发工程师将员工姓名、绩效等级、Ａ方面表现内容及等级、B方面表现内容及等级、C方面表现内容及等级内容传递给小组负责人；此处传递的对象就是DTO<br>小组负责人：从开发工程师中获取到数据后，经过评定，然后得出员工姓名、绩效等级、原因；此处的评定，可以理解为ＢＯ；</p><p>例子是根据当前正在进行的绩效评估事件总结，简单的例子可以参照上述知乎上面大神的回答。</p>]]></content>
    
    
    <summary type="html">阿狸JAVA开发手册</summary>
    
    
    
    <category term="java" scheme="https://heavenimtoral.gitee.io/categories/java/"/>
    
    
    <category term="阿里" scheme="https://heavenimtoral.gitee.io/tags/%E9%98%BF%E9%87%8C/"/>
    
  </entry>
  
</feed>
