<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PgSql获取json格式字符串中某个属性的值</title>
      <link href="2022/07/27/PgSql%E8%8E%B7%E5%8F%96json%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC/"/>
      <url>2022/07/27/PgSql%E8%8E%B7%E5%8F%96json%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>最近遇到个问题，因为别人的代码存在bug，导致新建实体的某个字段属性没有保存，生产环境上出现了一大堆错误数据，后面别人把bug改了，但是让我来处理错误数据，幸运的是这个字段的值被保存下来了，不幸的是这个字段的值被保存在json字符串里，由于是生产环境，我不能通过代码处理，所以我需要通过sql来获取json字符串中的某个字段的值，百度了一下，找到了解决方案（也是第一次知道数据库可以直接获取 json字符串中某个字段的值）</p><ul><li><p>json字符串数据结构</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#x27;project&#x27;:&#123;</span><br><span class="line">.......</span><br><span class="line">&#x27;newValues&#x27;:&#123;</span><br><span class="line">.......</span><br><span class="line">&#x27;specId&#x27;:&#x27;xxxxxxxxx&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据库处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- detailoperate::json pgsql的语法 将字符串转换成json  ， detailoperate::json-&gt;&gt;&#x27;project&#x27; 从json中获取key为 project 的值</span></span><br><span class="line"><span class="keyword">select</span> detailoperate::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;project&#x27;</span> <span class="keyword">as</span> <span class="keyword">project</span> <span class="keyword">from</span> tp_app_adddod <span class="keyword">where</span>  gwxid  = <span class="string">&#x27;706f9a5013b84f8496f3f474cd66a7c3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.project::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;newValues&#x27;</span> <span class="keyword">as</span> newValues <span class="keyword">from</span> (<span class="keyword">select</span> detailoperate::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;project&#x27;</span> <span class="keyword">as</span> <span class="keyword">project</span> <span class="keyword">from</span> tp_app_adddod <span class="keyword">where</span>  gwxid  = <span class="string">&#x27;706f9a5013b84f8496f3f474cd66a7c3&#x27;</span>) a </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>  b.newValues::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;specId&#x27;</span> <span class="keyword">from</span> (<span class="keyword">select</span> a.project::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;newValues&#x27;</span> <span class="keyword">as</span> newValues <span class="keyword">from</span> (<span class="keyword">select</span> detailoperate::<span class="keyword">json</span>-&gt;&gt;<span class="string">&#x27;project&#x27;</span> <span class="keyword">as</span> <span class="keyword">project</span> <span class="keyword">from</span> tp_app_adddod <span class="keyword">where</span>  gwxid  = <span class="string">&#x27;706f9a5013b84f8496f3f474cd66a7c3&#x27;</span>) a </span><br></pre></td></tr></table></figure></li><li><p>拓展</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--mysql 只有一级</span></span><br><span class="line"><span class="keyword">select</span> claim_payment-&gt;<span class="string">&#x27;$.bank_name&#x27;</span> <span class="keyword">from</span> claim</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-批量处理</title>
      <link href="2022/03/25/Mybatis-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
      <url>2022/03/25/Mybatis-%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>一般在开发中，我们项目与数据库的交互是通过网络请求的，每次网络请求都会耗时，在与数据库交互次数较小的时候，耗时感觉不明显，但是如果是大数据巨量的数据交互，在分次执行，耗时就会变得特别大，这个时候我们就需要进行<strong>批量执行</strong>。批量执行指的是<strong>一数据库连接，执行多条sql语句</strong>。如果后面的功能依赖于前面查询出来的数据，这个时候批量执行不太适应，所以在进行大批量插入的时候，使用批量执行，就很有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//SqlSessionTemplate 这个是mybatis提供的 sqlSession模板</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取sqlSession  ExecutorType.BATCH 表示执行的方式，BATCH是批量，此外还有REUSE、SIMPLE</span></span><br><span class="line">SqlSession sqlSession = sqlSessionTemplate.getSqlSessionFactory().openSession(ExecutorType.BATCH);</span><br><span class="line"><span class="comment">//获取mapper 只有这个mapper的方法才会进行批量处理</span></span><br><span class="line">ProcGisviewScQualityDetailMapper mapper =sqlSession.getMapper(ProcGisviewScQualityDetailMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        mapper.insert();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">2500</span>)&#123;</span><br><span class="line"><span class="comment">//批量 提交插入语句</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">            <span class="comment">//清空缓存</span></span><br><span class="line">sqlSession.clearCache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//回滚</span></span><br><span class="line">     sqlSession.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/10/22/jvm/"/>
      <url>2021/10/22/jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="内存与垃圾回收"><a href="#内存与垃圾回收" class="headerlink" title="内存与垃圾回收"></a>内存与垃圾回收</h1><h1 id="字节码与类的加载"><a href="#字节码与类的加载" class="headerlink" title="字节码与类的加载"></a>字节码与类的加载</h1><h1 id="性能监控与调优"><a href="#性能监控与调优" class="headerlink" title="性能监控与调优"></a>性能监控与调优</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="2021/09/30/typeScript/"/>
      <url>2021/09/30/typeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>javaScript概述</p></blockquote><p>JavaScript（缩写：JS）是一种运行在客户端（比如：浏览器）中的编程语言。</p><p>当应用于浏览器时，为网站提供动态交互特性，让网页“动”起来。</p><p>JavaScript 的运行环境：1 浏览器 2 Node.js。<br>Node.js 让 JavaScript 摆脱了浏览器的束缚，可以实现服务端/桌面端编程等。<br>其他： 微信小程序、微信小游戏 等等。<br>总结：JavaScript 既能运行在 浏览器 中，也可以运行在 Node.js 中，前后端通吃，无所不能。</p><blockquote><p>TypeScript概述</p></blockquote><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; TypeScript 代码：有明确的类型，即 : number （数值类型） </span><br><span class="line">let age: number &#x3D; 18</span><br><span class="line">&#x2F;&#x2F; JavaScript 代码：无明确的类型 </span><br><span class="line">let age &#x3D; 18</span><br></pre></td></tr></table></figure><blockquote><p>TypeScript 相比 JS 的优势</p></blockquote><p>悲伤的故事：男程序员都是好男人，因为他们总会在电脑前问：我到底又错在哪了？<br>JS 的类型系统存在“先天缺陷” ，绝大部分错误都是类型错误（ Uncaught TypeError ）。</p><ul><li>优势一：类型化思维方式，使得开发更加严谨，提前发现错误，减少改 Bug 时间。</li><li>优势二：类型系统提高了代码可读性，并使维护和重构代码更加容易。</li><li>优势三：补充了接口、枚举等开发大型应用时 JS 缺失的功能。</li><li>Vue 3 源码使用 TS 重写，释放出重要信号：TS 是趋势。</li><li>Angular 默认支持 TS；React 与 TS 完美配合，是很多大型项目的首选。</li></ul><blockquote><p>TypeScript相较于JavaScript增加了什么</p></blockquote><ul><li>类型（js种的类型是针对值的，ts中针对变量，ts还增加了一些类型）</li><li>支持es的新特性</li><li>添加es不具备的新特性（如装饰器、抽象类等）</li><li>丰富的配置选项</li><li>ts要转化成js运行，ts可以转化成不同版本的js,提高了兼容性</li><li>强大的开发工具</li></ul><h1 id="TypeScript开环境搭建"><a href="#TypeScript开环境搭建" class="headerlink" title="TypeScript开环境搭建"></a>TypeScript开环境搭建</h1><ol><li><p>下载Node.js</p><ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li><p>安装Node.js</p></li><li><p>使用npm全局安装typescript</p><ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li><p>创建一个ts文件</p></li><li><p>使用tsc对ts文件进行编译</p><ul><li><p>进入命令行</p></li><li><p>进入ts文件所在目录</p></li><li><p>执行命令：tsc xxx.ts</p></li></ul></li></ol><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><blockquote><p>javaScript中变量声明</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&#x27;10&#x27;</span>;</span><br></pre></td></tr></table></figure><p>js中a的类型没有确定，a可以是数字也可以是字符串；</p><blockquote><p>TypeScript中变量声明</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:<span class="built_in">number</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&#x27;10&#x27;</span>;<span class="comment">//此行代码会报错，因为a指定类型是number，但是这种写法符合js写法，可以编译通过（可以设置成编译不通过）。</span></span><br></pre></td></tr></table></figure><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明及其类型定义</span></span><br><span class="line"><span class="keyword">let</span> a:<span class="built_in">number</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b:<span class="built_in">string</span>;</span><br><span class="line">b=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量但不定义其类型</span></span><br><span class="line"><span class="keyword">let</span> c;</span><br><span class="line">c = <span class="literal">true</span>;</span><br><span class="line">c = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明赋值同时进行</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="literal">true</span>;</span><br><span class="line">d = <span class="number">123</span>;<span class="comment">//此行报错，d在声明赋值同时进行时d的类型就已经确定为boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数 形参 返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">sum</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span> </span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量声明 e只能等于10</span></span><br><span class="line"><span class="keyword">let</span> e : <span class="number">10</span>;</span><br><span class="line">e=<span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//联合类型 f只能为联合类型中的一种</span></span><br><span class="line"><span class="keyword">let</span> f:<span class="string">&#x27;male&#x27;</span>|<span class="string">&#x27;female&#x27;</span></span><br><span class="line">f=<span class="string">&#x27;male&#x27;</span></span><br><span class="line">f=<span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g:<span class="built_in">number</span> |<span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//any 任意类型 一个变量设置成any 相当于对这个变量关闭了类型检测 相当于js中变量,any变量赋值给其他变量会导致其类型也变成any</span></span><br><span class="line"><span class="keyword">let</span> h :<span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量不定义类型会导致ts自动将这个变量设置为any类型</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line">i = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">i = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown 位置类型 基本上是和any一致 但是将这个变量赋值给其他变量 会进行类型检测</span></span><br><span class="line"><span class="keyword">let</span> j:unknown;</span><br><span class="line">j = <span class="number">10</span>;</span><br><span class="line">j = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">j = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型断言 b的类型是string j是unknow 本来不能进行赋值的 但是通过 as string类型赋值可以进行赋值</span></span><br><span class="line">b = j <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void 以函数为例 表示函数没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//never 以函数为例 m没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//object 一般不使用，因为在js中&#123;&#125;就已经表示是一个对象了，而且使用&#123;&#125;可以对其内部的属性进行定义</span></span><br><span class="line"><span class="comment">//k的类型被定义为一个对象 该对象中 name为必须属性且类型为string age为可选属性且类型为number</span></span><br><span class="line"><span class="keyword">let</span> k : &#123;<span class="attr">name</span>:<span class="built_in">string</span>,age?:<span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line">k=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>&#125;; <span class="comment">//正常，因为age为可选</span></span><br><span class="line">k=&#123;<span class="attr">age</span>:<span class="number">18</span>&#125;; <span class="comment">//报错 没有name属性</span></span><br><span class="line">k=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;<span class="comment">//正常</span></span><br><span class="line">k=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;;<span class="comment">//错误 k的类型对象中没有sex属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[propName:string]:表示任意属性 m的类型要求必须要有name，其他不作任何要求</span></span><br><span class="line"><span class="keyword">let</span> m : &#123;<span class="attr">name</span>:<span class="built_in">string</span>,[propName:<span class="built_in">string</span>]:<span class="built_in">any</span>&#125;</span><br><span class="line">m=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数结构类型声明 该函数要求输入两个number参数返回number参数</span></span><br><span class="line"><span class="keyword">let</span> n :<span class="function">(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//array string[]字符串数组 number[]数字数组 </span></span><br><span class="line"><span class="keyword">let</span>  o: <span class="built_in">string</span>[];</span><br><span class="line"><span class="comment">//数值数组</span></span><br><span class="line"><span class="keyword">let</span> p:<span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//元组（固定长度的数组）</span></span><br><span class="line"><span class="keyword">let</span> q:[<span class="built_in">string</span>,<span class="built_in">string</span>]<span class="comment">//长度为2，且元素类型都为string的元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="built_in">enum</span> Gender&#123;</span><br><span class="line">  Male = <span class="number">0</span>,</span><br><span class="line">  Female = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, <code>hi</code></td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table><ul><li><p>number</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> big: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li><li><p>boolean</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>string</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li><li><p>字面量</p><p> 也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>any</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li><p>unknown</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: unknown = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>void</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li><li><p>never</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>object（没啥用）</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>array</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p>tuple</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure></li><li><p>enum</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green = <span class="number">2</span>,</span><br><span class="line">  Blue = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li><li><p>类型断言</p><p> 有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li><pre><code class="typescript">let someValue: unknown = &quot;this is a string&quot;;let strLength: number = (someValue as string).length;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第二种</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;typescript</span><br><span class="line">    let someValue: unknown &#x3D; &quot;this is a string&quot;;</span><br><span class="line">    let strLength: number &#x3D; (&lt;string&gt;someValue).length;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><ul><li><p>自动编译文件</p><ul><li><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p></li><li><p>示例：</p><ul><li><pre><code class="powershell">tsc xxx.ts -w<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 自动编译整个项目</span><br><span class="line"></span><br><span class="line">  - 如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</span><br><span class="line"></span><br><span class="line">  - 但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</span><br><span class="line"></span><br><span class="line">  - tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</span><br><span class="line"></span><br><span class="line">  - 配置选项：</span><br><span class="line"></span><br><span class="line">    - include</span><br><span class="line"></span><br><span class="line">      - 定义希望被编译文件所在的目录</span><br><span class="line"></span><br><span class="line">      - 默认值：[&quot;\*\*&#x2F;\*&quot;]</span><br><span class="line"></span><br><span class="line">      - 示例：</span><br><span class="line"></span><br><span class="line">        - &#96;&#96;&#96;json</span><br><span class="line">          &quot;include&quot;:[&quot;src&#x2F;**&#x2F;*&quot;, &quot;tests&#x2F;**&#x2F;*&quot;]</span><br></pre></td></tr></table></figure>  - 上述示例中，所有src目录和tests目录下的文件都会被编译</code></pre></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><ul><li><pre><code class="json">&quot;exclude&quot;: [&quot;./src/hello/**/*&quot;]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 上述示例中，src下hello目录下的文件都不会被编译</span><br><span class="line"></span><br><span class="line">- extends</span><br><span class="line"></span><br><span class="line">  - 定义被继承的配置文件</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;json</span><br><span class="line">      &quot;extends&quot;: &quot;.&#x2F;configs&#x2F;base&quot;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p></li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><ul><li><pre><code class="json">&quot;files&quot;: [    &quot;core.ts&quot;,    &quot;sys.ts&quot;,    &quot;types.ts&quot;,    &quot;scanner.ts&quot;,    &quot;parser.ts&quot;,    &quot;utilities.ts&quot;,    &quot;binder.ts&quot;,    &quot;checker.ts&quot;,    &quot;tsc.ts&quot;  ]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 列表中的文件都会被TS编译器所编译</span><br><span class="line"></span><br><span class="line">- compilerOptions</span><br><span class="line"></span><br><span class="line">   - 编译选项是配置文件中非常重要也比较复杂的配置选项</span><br><span class="line"></span><br><span class="line">   - 在compilerOptions中包含多个子选项，用来完成对编译的配置</span><br><span class="line"></span><br><span class="line">     - 项目选项</span><br><span class="line"></span><br><span class="line">       - target</span><br><span class="line"></span><br><span class="line">         - 设置ts代码编译的目标版本</span><br><span class="line"></span><br><span class="line">         - 可选值：</span><br><span class="line"></span><br><span class="line">           - ES3（默认）、ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</span><br><span class="line"></span><br><span class="line">         - 示例：</span><br><span class="line"></span><br><span class="line">           - &#96;&#96;&#96;json</span><br><span class="line">             &quot;compilerOptions&quot;: &#123;</span><br><span class="line">                 &quot;target&quot;: &quot;ES6&quot;</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure>      - 如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码  - lib    - 指定代码运行时所包含的库（宿主环境）    - 可选值：      - ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......    - 示例：      - ```json        &quot;compilerOptions&quot;: &#123;            &quot;target&quot;: &quot;ES6&quot;,            &quot;lib&quot;: [&quot;ES6&quot;, &quot;DOM&quot;],            &quot;outDir&quot;: &quot;dist&quot;,            &quot;outFile&quot;: &quot;dist/aa.js&quot;        &#125;        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- module</span><br><span class="line"></span><br><span class="line">  - 设置编译后代码使用的模块化系统</span><br><span class="line"></span><br><span class="line">  - 可选值：</span><br><span class="line"></span><br><span class="line">    - CommonJS、UMD、AMD、System、ES2020、ESNext、None</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;typescript</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;module&quot;: &quot;CommonJS&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - outDir    - 编译后文件的所在目录    - 默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置    - 示例：      - ```json        &quot;compilerOptions&quot;: &#123;            &quot;outDir&quot;: &quot;dist&quot;        &#125;        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 设置后编译后的js文件将会生成到dist目录</span><br><span class="line"></span><br><span class="line">- outFile</span><br><span class="line"></span><br><span class="line">  - 将所有的文件编译为一个js文件</span><br><span class="line"></span><br><span class="line">  - 默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;json</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;outFile&quot;: &quot;dist&#x2F;app.js&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - rootDir    - 指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录    - 示例：      - ```json        &quot;compilerOptions&quot;: &#123;            &quot;rootDir&quot;: &quot;./src&quot;        &#125;        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- allowJs</span><br><span class="line"></span><br><span class="line">  - 是否对js文件编译</span><br><span class="line"></span><br><span class="line">- checkJs</span><br><span class="line"></span><br><span class="line">  - 是否对js文件进行检查</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;json</span><br><span class="line">      &quot;compilerOptions&quot;: &#123;</span><br><span class="line">          &quot;allowJs&quot;: true,</span><br><span class="line">          &quot;checkJs&quot;: true</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>  - removeComments    - 是否删除注释    - 默认值：false  - noEmit    - 不对代码进行编译    - 默认值：false  - sourceMap    - 是否生成sourceMap    - 默认值：false</code></pre></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>      - 严格检查        - strict          - 启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查        - alwaysStrict          - 总是以严格模式对代码进行编译        - noImplicitAny          - 禁止隐式的any类型        - noImplicitThis          - 禁止类型不明确的this        - strictBindCallApply          - 严格检查bind、call和apply的参数列表        - strictFunctionTypes          - 严格检查函数的类型        - strictNullChecks          - 严格的空值检查        - strictPropertyInitialization          - 严格检查属性是否初始化      - 额外检查        - noFallthroughCasesInSwitch          - 检查switch语句包含正确的break        - noImplicitReturns          - 检查函数没有隐式的返回值        - noUnusedLocals          - 检查未使用的局部变量        - noUnusedParameters          - 检查未使用的参数      - 高级        - allowUnreachableCode          - 检查不可达代码          - 可选值：            - true，忽略不可达代码            - false，不可达代码将引起错误        - noEmitOnError          - 有错误的情况下不进行编译          - 默认值：false</code></pre><h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><ul><li>初始化项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>该命令会创建一个package.json文件，内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;typeScript&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;01_hello.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下载构建数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>如果你设置了镜像，使用一下语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>下载完依赖后，package.json会显示安装了哪些依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;typeScript&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;01_hello.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line"><span class="meta">  #</span><span class="bash">依赖</span></span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;ts-loader&quot;: &quot;^9.2.6&quot;,</span><br><span class="line">    &quot;typescript&quot;: &quot;^4.4.4&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.58.2&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^4.9.0&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^4.3.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一共安装了七个包</p><ol><li>webpack：构建工具webpack</li><li>webpack-cli：webpack的命令行工具</li><li>webpack-dev-server：webpack的开发服务器</li><li>typescript：ts编译器</li><li>ts-loader：ts加载器，用于在webpack中编译ts文件</li><li>html-webpack-plugin：webpack中html插件，用来自动创建html文件</li><li>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录</li></ol><ul><li>根目录下创建webpack的配置文件webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack中的所有配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        minimize: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    devtool: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定打包文件所在目录</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      <span class="comment">//指定打包文件的目录</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">      <span class="comment">//打包后的文件名</span></span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        environment: &#123;</span><br><span class="line">            arrowFunction: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//webpack打包时使用的模块</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">//指定加载的规则</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">//test指定规则生效的文件，是一个正则表达式，目前指定的是.ts文件</span></span><br><span class="line">                test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="comment">//要使用的loader</span></span><br><span class="line">                use: &#123;</span><br><span class="line">                   loader: <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//要排除的文件</span></span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根目录下创建tsconfig.json，配置可以根据自己需要</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>:&#123;        </span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改package.json添加如下配置</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    ...略...  </span><br><span class="line">    &quot;scripts&quot;: &#123;    </span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,    </span><br><span class="line">    &quot;start&quot;: &quot;webpack serve --open chrome.exe&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h3 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h3><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li>定义</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">参数: 类型</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    </span><br><span class="line">name: <span class="built_in">string</span>;    </span><br><span class="line">age: <span class="built_in">number</span>;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        </span><br><span class="line"><span class="built_in">this</span>.name = name;        </span><br><span class="line"><span class="built_in">this</span>.age = age;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;        </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.sayHello();</span><br></pre></td></tr></table></figure><h2 id="面向对象特点"><a href="#面向对象特点" class="headerlink" title="面向对象特点"></a>面向对象特点</h2><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p><p>只读属性（readonly）：如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</p><p>TS中属性具有三种修饰符：</p><ul><li><p>public（默认值），可以在类、子类和对象中修改</p></li><li><p>protected ，可以在类、子类中修改</p></li><li><p>private ，可以在类中修改</p></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li>示例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure><blockquote><p>重写</p></blockquote><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure><p>在子类中可以使用super来完成对父类的引用</p><blockquote><p>抽象类</p></blockquote><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> run(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li>示例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">per: Person</span>)</span>&#123;</span><br><span class="line">    per.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    sayHello():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><p>举个例子：</p><ul><li><pre><code class="typescript">function test(arg: any): any&#123;    return arg;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</span><br><span class="line"></span><br><span class="line">- 使用泛型：</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;typescript</span><br><span class="line">  function test&lt;T&gt;(arg: T): T&#123;</span><br><span class="line">  return arg;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</p></li><li><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><ul><li><pre><code class="typescript">test(10)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</span><br><span class="line"></span><br><span class="line">- 方式二（指定类型）：</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;typescript</span><br><span class="line">    test&lt;number&gt;(10)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>也可以在函数后手动指定泛型</p></li></ul></li></ul></li><li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><ul><li><pre><code class="typescript">function test&lt;T, K&gt;(a: T, b: K): K&#123;    return b;&#125;test&lt;number, string&gt;(10, &quot;hello&quot;);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用泛型时，完全可以将泛型当成是一个普通的类去使用</span><br><span class="line"></span><br><span class="line">- 类中同样可以使用泛型：</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;typescript</span><br><span class="line">    class MyClass&lt;T&gt;&#123;</span><br><span class="line">        prop: T;</span><br><span class="line">    </span><br><span class="line">        constructor(prop: T)&#123;</span><br><span class="line">            this.prop &#x3D; prop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>除此之外，也可以对泛型的范围进行约束</p><ul><li><pre><code class="typescript">interface MyInter&#123;    length: number;&#125;function test&lt;T extends MyInter&gt;(arg: T): number&#123;    return arg.length;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</span><br><span class="line"></span><br><span class="line">## 个人练习</span><br><span class="line"></span><br><span class="line">项目结构</span><br><span class="line"></span><br><span class="line">![image-20211022155621898](https:&#x2F;&#x2F;heavenimmortal.oss-cn-chengdu.aliyuncs.com&#x2F;img&#x2F;20211022155630.png)</span><br><span class="line"></span><br><span class="line">- 配置文件</span><br><span class="line"></span><br><span class="line">**webpack.config.js**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;webpack中的所有配置信息都应该写在module.exports中</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        minimize: true &#x2F;&#x2F; 关闭代码压缩，可选</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指定入口文件</span><br><span class="line">    entry: &quot;.&#x2F;src&#x2F;index.ts&quot;,</span><br><span class="line">    </span><br><span class="line">    devtool: &quot;inline-source-map&quot;,</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: &#39;.&#x2F;dist&#39;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指定打包文件所在目录</span><br><span class="line">    output: &#123;</span><br><span class="line">      &#x2F;&#x2F;指定打包文件的目录</span><br><span class="line">        path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">      &#x2F;&#x2F;打包后的文件名</span><br><span class="line">        filename: &quot;bundle.js&quot;,</span><br><span class="line">        environment: &#123;</span><br><span class="line">            arrowFunction: false &#x2F;&#x2F; 关闭webpack的箭头函数，可选</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [&quot;.ts&quot;, &quot;.js&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;webpack打包时使用的模块</span><br><span class="line">    module: &#123;</span><br><span class="line">        &#x2F;&#x2F;指定加载的规则</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">              &#x2F;&#x2F;test指定规则生效的文件，是一个正则表达式，目前指定的是.ts文件</span><br><span class="line">                test: &#x2F;\.ts$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;要使用的loader</span><br><span class="line">                use: &#123;</span><br><span class="line">                   loader: &quot;ts-loader&quot;     </span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F;要排除的文件</span><br><span class="line">                exclude: &#x2F;node_modules&#x2F;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F;less 文件的处理</span><br><span class="line">            &#123;</span><br><span class="line">              test: &#x2F;\.less$&#x2F;,</span><br><span class="line">              &#x2F;&#x2F;从下往上执行</span><br><span class="line">              use:[</span><br><span class="line">                &quot;style-loader&quot;,</span><br><span class="line">                &quot;css-loader&quot;,</span><br><span class="line">                &#x2F;&#x2F; 引入postcss</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: &quot;postcss-loader&quot;,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        postcssOptions:&#123;</span><br><span class="line">                            plugins:[</span><br><span class="line">                                [</span><br><span class="line">                                    &quot;postcss-preset-env&quot;,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        browsers: &#39;last 2 versions&#39;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                ]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;less-loader&quot;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">          template:&quot;.&#x2F;src&#x2F;index.html&quot;</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p><strong>tsconfig.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>:&#123;        </span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        </span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;snake&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;clean-webpack-plugin&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^4.1.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^10.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss&quot;</span>: <span class="string">&quot;^8.3.9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss-preset-env&quot;</span>: <span class="string">&quot;^6.7.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ts-loader&quot;</span>: <span class="string">&quot;^9.2.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^4.4.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^5.58.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^4.3.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TypeScript</strong></li></ul><p><strong>index.ts</strong></p><p>本来各个类应该分开的，但是我为了方便就写在了一起</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/index.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义食物类Food</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个属性表示食物所指的div块</span></span><br><span class="line">  element: HTMLElement;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取页面中的food元素</span></span><br><span class="line">    <span class="built_in">this</span>.element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;food&quot;</span>)!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取食物的x轴坐标</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">X</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element.offsetLeft;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取食物的x轴坐标</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">Y</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element.offsetTop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重新生成食物</span></span><br><span class="line">  <span class="function"><span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//重新生成的食物坐标符合大小 ，</span></span><br><span class="line">    <span class="comment">//且 因为蛇一次移动一格即10px,所以食物的坐标必须是10的倍数</span></span><br><span class="line">    <span class="built_in">this</span>.element.style.left = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">29</span>)*<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.element.style.top = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">29</span>)*<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义记分板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScorePanel</span></span>&#123;</span><br><span class="line">  score = <span class="number">0</span>;</span><br><span class="line">  level = <span class="number">1</span>;</span><br><span class="line">  scoreEle: HTMLElement;</span><br><span class="line">  levelEle: HTMLElement;</span><br><span class="line">  maxLevel: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">maxLevel: <span class="built_in">number</span>=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.scoreEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;score&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.levelEle = <span class="built_in">document</span>.getElementById(<span class="string">&quot;level&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.maxLevel = maxLevel;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//加分</span></span><br><span class="line">  <span class="function"><span class="title">addScore</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.score++;</span><br><span class="line">    <span class="built_in">this</span>.scoreEle.innerHTML = <span class="built_in">this</span>.score+<span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.score % <span class="number">10</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.levelUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//提升等级</span></span><br><span class="line">  <span class="function"><span class="title">levelUp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.level&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.level++;</span><br><span class="line">      <span class="built_in">this</span>.levelEle.innerHTML = <span class="built_in">this</span>.level+<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//蛇类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span></span>&#123;</span><br><span class="line">  <span class="comment">//蛇头</span></span><br><span class="line">  head: HTMLElement;</span><br><span class="line">  <span class="comment">//蛇的身体 包括蛇头</span></span><br><span class="line">  bodies: HTMLCollection;</span><br><span class="line">  element: HTMLElement;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#snake&gt;div&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;snake&quot;</span>)!;</span><br><span class="line">    <span class="built_in">this</span>.bodies = <span class="built_in">this</span>.element.getElementsByTagName(<span class="string">&quot;div&quot;</span>)!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取蛇头的坐标</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">X</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head.offsetLeft;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">Y</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head.offsetTop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">X</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.X==value)&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否撞墙</span></span><br><span class="line">    <span class="keyword">if</span>(value&lt;<span class="number">0</span> || value&gt;<span class="number">290</span>)&#123;</span><br><span class="line">      <span class="comment">//蛇撞墙了</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;蛇撞墙了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改x时，是在修改水平坐标，蛇在向右移动时，不能向右，反之亦然</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.bodies[<span class="number">1</span>]&amp;&amp;(<span class="built_in">this</span>.bodies[<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetLeft ===value)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value&gt;<span class="built_in">this</span>.X)&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.X - <span class="number">10</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.X + <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.moveBody();</span><br><span class="line">    <span class="built_in">this</span>.head.style.left = value+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">Y</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.Y==value)&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(value&lt;<span class="number">0</span> || value&gt;<span class="number">290</span>)&#123;</span><br><span class="line">      <span class="comment">//蛇撞墙了</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;蛇撞墙了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.bodies[<span class="number">1</span>]&amp;&amp;(<span class="built_in">this</span>.bodies[<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetTop ===value)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value&gt;<span class="built_in">this</span>.Y)&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.Y - <span class="number">10</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        value = <span class="built_in">this</span>.X + <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.moveBody();</span><br><span class="line">    <span class="built_in">this</span>.head.style.top = value+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//增加身体</span></span><br><span class="line">  <span class="function"><span class="title">addBody</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element.insertAdjacentHTML(<span class="string">&quot;beforeend&quot;</span>,<span class="string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移动身体</span></span><br><span class="line">  <span class="function"><span class="title">moveBody</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="built_in">this</span>.bodies.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">      <span class="keyword">let</span> X = (<span class="built_in">this</span>.bodies[i-<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetLeft;</span><br><span class="line">      <span class="keyword">let</span> Y = (<span class="built_in">this</span>.bodies[i-<span class="number">1</span>] <span class="keyword">as</span> HTMLElement).offsetTop;</span><br><span class="line"></span><br><span class="line">      (<span class="built_in">this</span>.bodies[i] <span class="keyword">as</span> HTMLElement).style.left = X+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">      (<span class="built_in">this</span>.bodies[i] <span class="keyword">as</span> HTMLElement).style.left = Y+<span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏控制器，控制其他的所有类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameControl</span></span>&#123;</span><br><span class="line">  <span class="comment">//蛇</span></span><br><span class="line">  snake: Snake;</span><br><span class="line">  <span class="comment">//食物</span></span><br><span class="line">  food: Food;</span><br><span class="line">  <span class="comment">//记分牌</span></span><br><span class="line">  scorePanel: ScorePanel;</span><br><span class="line">  <span class="comment">//当前蛇的移动方向</span></span><br><span class="line">  direction: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="comment">//游戏是否结束</span></span><br><span class="line">  isLive: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="built_in">this</span>.snake = <span class="keyword">new</span> Snake();</span><br><span class="line">    <span class="built_in">this</span>.food = <span class="keyword">new</span> Food();</span><br><span class="line">    <span class="built_in">this</span>.scorePanel = <span class="keyword">new</span> ScorePanel();</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化方法</span></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//绑定键盘按下的事件</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&quot;keydown&quot;</span>,<span class="built_in">this</span>.keydownHandler.bind(<span class="built_in">this</span>));</span><br><span class="line">    <span class="comment">//蛇移动</span></span><br><span class="line">    <span class="built_in">this</span>.run();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//键盘相应函数</span></span><br><span class="line">  <span class="function"><span class="title">keydownHandler</span>(<span class="params">event: KeyboardEvent</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.key);</span><br><span class="line">    <span class="keyword">if</span>(event.key==<span class="string">&quot;ArrowUp&quot;</span> ||</span><br><span class="line">    event.key==<span class="string">&quot;ArrowDown&quot;</span>||</span><br><span class="line">    event.key==<span class="string">&quot;ArrowLeft&quot;</span>||</span><br><span class="line">    event.key==<span class="string">&quot;ArrowRight&quot;</span> )&#123;</span><br><span class="line">      <span class="built_in">this</span>.direction = event.key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//移动蛇</span></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      根据方向移动</span></span><br><span class="line"><span class="comment">      向右 left 增加</span></span><br><span class="line"><span class="comment">      向左 left 减少</span></span><br><span class="line"><span class="comment">      像上 top 减少</span></span><br><span class="line"><span class="comment">      向下 top 增加</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      头和身体是否碰撞</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> X = <span class="built_in">this</span>.snake.X;</span><br><span class="line">    <span class="keyword">let</span> Y = <span class="built_in">this</span>.snake.Y;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.direction);</span><br><span class="line">    <span class="keyword">switch</span>(<span class="built_in">this</span>.direction)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">        Y-=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">        Y+=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span><br><span class="line">        X-=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span><br><span class="line">        X+=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查蛇是否吃到食物</span></span><br><span class="line">    <span class="built_in">this</span>.checkEat(X,Y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;X:&quot;</span>+X+<span class="string">&quot; Y:&quot;</span>+Y);</span><br><span class="line">      <span class="built_in">this</span>.snake.X = X;</span><br><span class="line">      <span class="built_in">this</span>.snake.Y = Y;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line">      <span class="built_in">this</span>.isLive = <span class="literal">false</span>;</span><br><span class="line">      alert((e <span class="keyword">as</span> <span class="built_in">Error</span>).message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.isLive &amp;&amp; <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.run.bind(<span class="built_in">this</span>),<span class="number">300</span>-(<span class="built_in">this</span>.scorePanel.level-<span class="number">1</span>)*<span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查蛇是否吃到食物</span></span><br><span class="line">  <span class="function"><span class="title">checkEat</span>(<span class="params">X: <span class="built_in">number</span>,Y:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(X===<span class="built_in">this</span>.food.X &amp;&amp; Y===<span class="built_in">this</span>.food.Y)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;吃到食物&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.food.change();</span><br><span class="line">      <span class="built_in">this</span>.scorePanel.addScore();</span><br><span class="line">      <span class="built_in">this</span>.snake.addBody();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gameControl = <span class="keyword">new</span> GameControl();</span><br></pre></td></tr></table></figure><ul><li><strong>html</strong></li></ul><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--游戏主容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置游戏的舞台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;stage&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--🐍--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;snake&quot;</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--食物--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;food&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--记分牌--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;score-panel&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        SCORE:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&quot;score&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        LEVEL:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&quot;score&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>less</strong></li></ul><p><strong>index.less</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置变量</span></span><br><span class="line"><span class="variable">@bg-color:</span> <span class="number">#b7d4a8</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">20px</span> <span class="string">&quot;Courier&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除默认样式</span></span><br><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//改变盒子模型的计算方式</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置主窗口的样式</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">  <span class="comment">//设置背景颜色</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@bg-color</span>;</span><br><span class="line">  <span class="comment">//设置居中</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">  <span class="comment">//设置圆角</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="comment">//开启弹性盒布局</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">//设置主轴的方向</span></span><br><span class="line">  <span class="attribute">flex-flow</span>: column;</span><br><span class="line">  <span class="comment">//设置侧轴的对齐方式</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="comment">//设置主轴的对其方式</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置舞台的样式</span></span><br><span class="line"><span class="selector-id">#stage</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">304px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">//设置蛇的样式</span></span><br><span class="line">  <span class="selector-id">#snake</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@bg-color</span>;</span><br><span class="line">      <span class="comment">//开启绝对定位</span></span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置食物</span></span><br><span class="line">  <span class="selector-tag">&amp;</span>&gt;<span class="selector-id">#food</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@bg-color</span>;</span><br><span class="line">    <span class="comment">//开启绝对定位</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记分牌</span></span><br><span class="line"><span class="selector-id">#score-panel</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">//设置主轴对其方式</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers</title>
      <link href="2021/09/22/OpenLayers/"/>
      <url>2021/09/22/OpenLayers/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://blog.csdn.net/qq_35732147/article/details/90675012">参考博客</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>OpenLayers是一个用于开发WebGIS客户端的JavaScript包，最初基于BSD许可发行。</p><p>OpenLayers是一个开源的项目，其设计之意是为互联网客户端提供强大的地图展示功能，包括地图数据显示与相关操作，并具有灵活的扩展机制。</p><p>目前OpenLayers已经成为一个拥有众多开发者和帮助社区的成熟、流行的框架。</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>支持瓦片图层</li></ul><p>OpenLayers支持从OSM、Bing、MapBox、Stamen和其他任何你能找到的XYZ瓦片资源中提取地图瓦片并在前端展示。同时也支持OGC的WMTS规范的瓦片服务以及ArcGIS规范的瓦片服务。</p><ul><li>支持矢量切片（或者矢量瓦片）</li></ul><p>OpenLayers也支持矢量切片的访问和展示，包括MapBox矢量切片中的pbf格式，或者GeoJSON格式和TopoJSON格式的矢量切片。</p><ul><li>支持矢量图层</li></ul><p>能够渲染GeoJSON、TopoJSON、KML、GML和其他格式的矢量数据，上面说的矢量切片形式的数据也可以被认为是在矢量图层中渲染。</p><ul><li>支持OGC规范</li></ul><p>OpenLayers支持OGC制定的WMS、WFS等GIS网络服务规范。</p><ul><li>运用前沿技术</li></ul><p>利用Canvas 2D、WebGL以及HTML5中其他最新的技术来构建功能。同时支持在移动设备上运行。</p><ul><li>易于定制和扩展</li></ul><p>可以直接调整CSS来为地图控件设计样式。而且可以对接到不同层级的API进行功能扩展，或者使用第三方库来定制和扩展。</p><ul><li>面向对象的思想</li></ul><p>最新版本的OpenLayers采用纯面向对象的ECMA Script 6进行开发，可以说，在OpenLayers中万物皆对象。</p><ul><li>优秀的交互体验</li></ul><p>OpenLayers实现了类似于Ajax的无刷新功能，可以结合很多优秀的JavaScript功能插件，带给用户更多丰富的交互体验。</p><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src="E:\typora\images\20210917151257.jpg" alt="img"></p><p>可以看到OpenLayers实现了上百个类，用于对GIS中的各种事物进行抽象表达。</p><p>其中，Map、Layer、Source和View是OpenLayers框架体系中的核心类，几乎所有的动作都围绕这几个核心类展开，以实现地图加载和相关操作。</p><p>在OpenLayers的体系框架中：把整个地图看作一个容器（Map），核心为地图图层（Layer），每个图层有对应的数据源（Source），并由地图视图（View）进行地图表现。地图容器上还支持一些与用户交互的控件（Control和Interaction），另外，OpenLayers还支持事件机制。</p><h3 id="基本类介绍"><a href="#基本类介绍" class="headerlink" title="基本类介绍"></a>基本类介绍</h3><ul><li><strong>Map</strong><br>地图容器，必要属性layers，view，target。</li><li>View<br>可以说是地图的视角，它可以控制地图的中心和级别等其他属性。</li><li><strong>Layer和Source</strong><br>首先需要明白的一点是，Source和Layer是一对一的关系，有一个Source，必然需要一个Layer，然后把这个Layer添加到Map上，就可以显示出来了。</li></ul><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p><a href="https://openlayers.org/">openLayers官网</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1、进入官网下载</p><p><img src="E:\typora\images\20210916203503.png" alt="image-20210916203500551"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install ol 是在具有node.js环境中下载</span><br><span class="line">dist后缀的压缩包 是进行过代码压缩过的</span><br></pre></td></tr></table></figure><p><img src="E:\typora\images\20210916203612.png" alt="image-20210916203609938"></p><p>2、解压，build下的ol.js和css下的ol.css是我们后面要用的的文件</p><p><img src="E:\typora\images\20210918091353.png" alt="image-20210918091255213"></p><p><img src="E:\typora\images\20210918091347.png" alt="image-20210918091318944"></p><p><img src="E:\typora\images\20210918091350.png" alt="image-20210918091340085"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="构建简单的地图应用"><a href="#构建简单的地图应用" class="headerlink" title="构建简单的地图应用"></a>构建简单的地图应用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>构建简单的地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>关于上面的代码，我们做了哪些事</p></blockquote><ol><li>调用ol.Map生成的地图容器map，并使用target属性将该地图容器与id为‘map’的div容器关联起来</li><li>通过layers参数设置的需要加载的瓦片图层（ol.layer.Tile），这个瓦片图层中包含了一个数据源（ol.source.OSM），这个数据源是OpenStreetMap（一个开放数据源的免费地图）的地图数据，也就是ol.source.OSM这个类封装了加载OSM地图数据的详细实现。</li><li>通过view设置地图视图（ol.View），地图视图中也设置了相应的空间参考系统（projection）、地图视图中心点（center），地图视图缩放级别（zoom）。</li></ol><p><img src="E:\typora\images\20210918091512.png" alt="image-20210918091511152"></p><blockquote><p>被渲染后的div容器</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152722.png" alt="image-20210918095535410"></p><p>我们可以看见div容器被渲染后，分成的3个层级</p><ul><li><p>ol-unselectable</p><p>地图渲染层，地图基于canvas方式渲染</p></li><li><p>ol-overlaycontainer</p><p>内容叠加层，用于放置叠置层（ol.Overlay）内容，如在地图上添加图片、弹窗等</p></li><li><p>ol-overlaycontainer-stopevent</p><p>地图控件层，用于放置控件，默认情况下会放置ol.control.Zoom（用于控制地图放大、缩小）、ol.control.Rotate（用于控制地图旋转）、ol.control.Attribution（用于控制地图右下角标记）这三个控件。</p></li></ul><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><p>OpenLayers封装了很多控件用于对地图进行操作、显示地图信息等。</p><p>具体来说，控件是一个地图上可见的小部件，其DOM元素位于屏幕上的固定位置。它们可以包含用户输入（以按钮的形式），也可以只提供信息。控件的位置是使用CSS来确定，当然也可以使用CSS来调整。默认情况下，控件被放置在地图控件层，也就是CSS类名为ol-overlayContainer-stopEvent的元素中，但也可以调整，使控件基于外部DOM元素来实现。</p><p>从OpenLayers的API来看，具体有如下控件类：<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152728.png" alt="img"></p><p>具体来说，这些控件是干嘛的呢？这里简单介绍一下</p><ul><li>归属控件（Attribution）    ——    用于展示地图资源的版权或者归属，它会默认加入到地图中。</li><li>全屏控件（FullScreen）    ——    控制地图全屏展示</li><li>坐标拾取控件（MousePosition）    ——    用于在地图上拾取坐标</li><li>鹰眼控件（OverviewMap）    ——    生成地图的一个概览图</li><li>旋转控件（Rotate）    ——    用于鼠标拖拽旋转地图，它会默认加入到地图中。</li><li>比例尺控件（ScaleLine）    ——    用于生成地图比例尺</li><li>滑块缩放控件（ZoomSlider）    ——    以滑块的形式缩放地图</li><li>缩放至特定位置控件（ZoomToExtent）    ——    用于将地图视图缩放至特定位置</li><li>普通缩放控件（Zoom）    ——    普通缩放控件，它会默认加入到地图中。</li></ul><h3 id="zoom控件"><a href="#zoom控件" class="headerlink" title="zoom控件"></a>zoom控件</h3><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>我们将上一点完成的html文件复制成zoom.html文件。运行起来后</p><p>缩放控件、旋转控件、归属控件默认加入地图容器中。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152733.png" alt="image-20210918101010562"></p><p>我们在console中输入**map.getControls().getArray()**，可以拿到该地图容器的控件数组，第一个就是缩放控件。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152737.png" alt="image-20210918101351729"></p><p>而在地图控件层中，缩放控件已在里面</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152741.png" alt="image-20210918101500713"></p><blockquote><p>zoomAPI</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152745.png" alt="image-20210918102950836"></p><h4 id="滑块缩放控件（ol-control-ZoomSlider）与缩放至特定地点控件（ol-control-ZoomToExtent）"><a href="#滑块缩放控件（ol-control-ZoomSlider）与缩放至特定地点控件（ol-control-ZoomToExtent）" class="headerlink" title="滑块缩放控件（ol.control.ZoomSlider）与缩放至特定地点控件（ol.control.ZoomToExtent）"></a>滑块缩放控件（ol.control.ZoomSlider）与缩放至特定地点控件（ol.control.ZoomToExtent）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>zoom<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">           <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;)</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>滑块缩放上面的E是缩放到特定地点的控价，由于设置成深圳市，点击E之后会跳到深圳市</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152751.png" alt="image-20210918104832208"></p><h4 id="归属控件与全屏控件"><a href="#归属控件与全屏控件" class="headerlink" title="归属控件与全屏控件"></a>归属控件与全屏控件</h4><h5 id="归属控件"><a href="#归属控件" class="headerlink" title="归属控件"></a>归属控件</h5><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152756.png" alt="image-20210918105446350"></p><h5 id="全屏控件（ol-control-FullScreen）"><a href="#全屏控件（ol-control-FullScreen）" class="headerlink" title="全屏控件（ol.control.FullScreen）"></a>全屏控件（ol.control.FullScreen）</h5><p>一般情况下，我们的地图只在浏览器的客户区进行展示，我们可以通过全屏控件让地图进行全屏展示</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152800.png" alt="image-20210918105629073"></p><p>我们将上一节的zoom.html复制成一份新文件，我们只需要在控件层中加入 <strong>new ol.control.FullScreen()</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>全屏控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen()</span></span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152806.png" alt="image-20210918110122511"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152810.png" alt="image-20210918110137149"></p><h4 id="坐标拾取控件与鹰眼控件"><a href="#坐标拾取控件与鹰眼控件" class="headerlink" title="坐标拾取控件与鹰眼控件"></a>坐标拾取控件与鹰眼控件</h4><h5 id="坐标拾取（ol-control-MousePosition-）"><a href="#坐标拾取（ol-control-MousePosition-）" class="headerlink" title="坐标拾取（ol.control.MousePosition()）"></a>坐标拾取（ol.control.MousePosition()）</h5><p>很多时候我们想要实时获取鼠标光标指示处对应的坐标，就像高德地图的坐标拾取</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152813.png" alt="image-20210918110402870"></p><p> OpenLayers提供的ol.control.MousePosition类也能够实现坐标拾取功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>坐标拾取控件与鹰眼控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition() </span></span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152818.png"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152821.png" alt="image-20210918110647785"></p><h5 id="鹰眼控件-ol-control-OverviewMap"><a href="#鹰眼控件-ol-control-OverviewMap" class="headerlink" title="鹰眼控件(ol.control.OverviewMap())"></a>鹰眼控件(ol.control.OverviewMap())</h5><p>鹰眼图是GIS中的一个基本的功能，鹰眼图，顾名思义，在鹰眼图上可以像从空中俯视一样查看地图框中所显示的地图在整个图中的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>坐标拾取控件与鹰眼控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;)       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152826.png" alt="image-20210918110938565"></p><h4 id="旋转控件与比例尺控件"><a href="#旋转控件与比例尺控件" class="headerlink" title="旋转控件与比例尺控件"></a>旋转控件与比例尺控件</h4><h5 id="旋转控件"><a href="#旋转控件" class="headerlink" title="旋转控件"></a>旋转控件</h5><p>旋转控件默认加入map容器的控件层</p><p>按住Shift+Alt，再用鼠标移动，就可以旋转。</p><p>旋转前</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152829.png" alt="image-20210918111932902"></p><p>旋转后</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152833.png" alt="image-20210918111959574"></p><h5 id="比例尺控件（ol-control-ScaleLine-）"><a href="#比例尺控件（ol-control-ScaleLine-）" class="headerlink" title="比例尺控件（ol.control.ScaleLine()）"></a>比例尺控件（ol.control.ScaleLine()）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>旋转控件与比例尺控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ScaleLine()      </span></span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152837.png" alt="image-20210918112151277"></p><p>可以发现，这里比例尺控件使用的单位是km，如果想使用其他单位，可以修改ScaleLine类中的units属性。</p><p> units属性接受”degrees”、”imperial”、”us”、”nautical”或”metric”（默认为”metric”)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.control.ScaleLine(&#123;</span><br><span class="line">units:<span class="string">&#x27;degrees&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152841.png" alt="image-20210918112359349"></p><h4 id="自定义切换图层控件"><a href="#自定义切换图层控件" class="headerlink" title="自定义切换图层控件"></a>自定义切换图层控件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义切换图层控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;osm&quot;</span> <span class="attr">checked</span> /&gt;</span>OpenStreetMap</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bingmap&quot;</span> /&gt;</span>Bing Map</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;stamen&quot;</span> /&gt;</span>Stamen Map</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;),</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 <span class="comment">// Bing Map图层</span></span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.BingMaps(&#123;</span></span><br><span class="line"><span class="javascript">                  key: <span class="string">&#x27;AgpZJo9V53etmuVovrsSv2Aev6CjrdshpbxSyOCQ9DQpXlLdynagW7Wxhr52WdRB&#x27;</span>,<span class="comment">// 可以自行到Bing Map官网申请key</span></span></span><br><span class="line"><span class="javascript">                  imagerySet: <span class="string">&#x27;Aerial&#x27;</span></span></span><br><span class="line">              &#125;),</span><br><span class="line"><span class="javascript">              visible: <span class="literal">false</span>                  <span class="comment">// 先隐藏该图层</span></span></span><br><span class="line">          &#125;),</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="javascript">                  layer: <span class="string">&#x27;watercolor&#x27;</span></span></span><br><span class="line">              &#125;),</span><br><span class="line"><span class="javascript">              visible: <span class="literal">false</span>                  <span class="comment">// 先隐藏该图层</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ScaleLine(&#123;</span></span><br><span class="line"><span class="javascript">          units:<span class="string">&#x27;degrees&#x27;</span></span></span><br><span class="line">        &#125;)      </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> controls = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;controls&#x27;</span>);     </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 事件委托</span></span></span><br><span class="line"><span class="javascript">        controls.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(event.target.checked)&#123;                       <span class="comment">// 如果选中某一复选框</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 通过DOM元素的id值来判断应该对哪个图层进行显示</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span>(event.target.id)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;osm&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">0</span>).setVisible(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;bingmap&quot;</span>:</span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">1</span>).setVisible(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;stamen&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">2</span>).setVisible(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;                                         <span class="comment">// 如果取消某一复选框</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 通过DOM元素的id值来判断应该对哪个图层进行隐藏</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span>(event.target.id)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;osm&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">0</span>).setVisible(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;bingmap&quot;</span>:</span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">1</span>).setVisible(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;stamen&quot;</span>: </span></span><br><span class="line"><span class="javascript">                        map.getLayers().item(<span class="number">2</span>).setVisible(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152846.png" alt="image-20210918142333522"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152903.png" alt="image-20210918142346157"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152908.png" alt="image-20210918142404494"></p><p>在以上的代码中，我们通过**map.getLayers().item(0).setVisible(true)**来设置当前展示图层</p><p>visible就是控制图层显示的属性</p><h2 id="多源数据"><a href="#多源数据" class="headerlink" title="多源数据"></a>多源数据</h2><h3 id="数据组织"><a href="#数据组织" class="headerlink" title="数据组织"></a>数据组织</h3><p>数据是GIS的血液，可以说GIS应用系统的几乎所有活动与行为都围绕数据展开。那么在GIS对数据加载、存储、分析与操作这几个过程中，我们首先讨论在由OpenLayers构建的WebGIS系统中，数据如何合理加载。    </p><p>随着WebGIS应用的不断发展，目前出现了大量网络地图服务资源，包括国外互联网公司的Google地图、Bing 地图、Yahoo 地图，国外的开源地图OpenStreetMap，也包括国内互联网公司的百度地图、高德地图、腾讯地图。还有ESRI、超图、中地数码等大型GIS厂商提供的自定格式的GIS数据，以及其他企事业单位或研究机构提供的各种格式的GIS数据等。如何将这些多源异构数据加载到Web客户端中进行显示，实现数据无缝融合，这是WebGIS中需要首先解决的关键问题。</p><p>OpenLayers的地图数据通过图层（Layer）进行组织渲染，然后通过数据源（Source）设置具体的地图数据来源。</p><p>Layer可看作渲染地图的层容器，具体的数据需要通过Source设置。</p><p>地图数据根据数据源（Source）可分为Image、Tile、Vector三大类型的数据源类，对应设置到地图图层（Layer）的Image、Tile、Vector三大类的图层中。其中，矢量图层Vector通过样式（Style）来设置矢量要素渲染的方式和外观。</p><p>Source和Layer是一对一的关系，有一个Source，必然需要一个Layer，然后把Layer添加到Map上，就可以显示出来了。</p><p><img src="../../../../typora/images/20180727115727932" alt="img"></p><p>在数据源中：</p><ul><li>Tile类为<strong>瓦片抽象基类</strong>，其子类作为各类瓦片数据的数据源。、</li><li>Vector类为<strong>矢量数据源基类</strong>，为矢量图层提供具体的数据来源，包括直接组织或读取的矢量数据（<strong>Features</strong>）、远程数据源的矢量数据（即通过url设置数据源路径）等。若是url设置的矢量数据源，则通过解析器Format（即ol.format.Feature的子类）来解析各类矢量数据，如XML、Text、JSON、GML、KML、GPS、WFS、WKT、GeoJSON等地图数据。</li><li>Image类为<strong>单一图像基类</strong>，其子类为画布（canvas）元素、服务器图片、单个静态图片、WMS单一图像等的数据源。它与Tile类的区别在于，Image类对应的是一整张大图片，而不像瓦片那样很多张小图片，从而无需切片，也可以加载一些地图，适用于一些小场景地图。</li></ul><p>从复杂度来分析，Image类和Vector类都不复杂，其数据格式和来源方式都简单。而Tile类则不一样，由于一些历史问题，多个服务提供商，多种标准等诸多原因，导致要支持世界上大多数的瓦片数据源，就需要针对这些差异（这些差异主要是瓦片坐标系不同、分辨率不同等，后面会详细介绍）提供不同的Tile数据源支持。我们先来看一下OpenLayers现在支持的Source具体有哪些：<br><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152916.png" alt="img"></p><p>   上图中的类是按照继承关系，从左向右展开的，左边的为父类，右边的为子类。在使用时，一般来说，都是直接使用叶子节点上的类，基本就可以完成需求。父类需要自己进一步扩展或者处理才能有效使用。</p><p>我们先了解最为复杂的ol.source.Tile，其叶子节点类有很多，大致可以分为几类：</p><ul><li><strong>在线服务的Source</strong>，包括ol.source.BingMaps（使用的是微软提供的Bing在线地图数据）、ol.source.Stamen（使用的是Stamen提供的在线地图数据）。没有自己的地图服务器的情况下，可直接使用它们，加载地图底图。</li><li><strong>支持协议标准的Source</strong>，包括ol.source.TileArcGISRest、ol.source.TileWMS、ol.source.WMTS、ol.source.UTFGrid、ol.source.TileJSON。如果要使用它们，首先你得先学习对应的协议，之后必须找到支持这些协议的服务器来提供数据源，这些服务器可以是底图服务提供商提供的，也可以是自己搭建的服务器，关键是得支持这些协议。</li><li> <strong>ol.source.XYZ</strong>，这个需要单独提一下，因为是可以直接使用的，而且现在很多地图服务（在线的，或者自己搭建的服务器）都支持xyz方式的请求。国内在线的地图服务，高德、天地图等，都可以通过这种方式加载，本地离线瓦片地图也可以，用途广泛，且简单易学。</li></ul><p>ol.source.Image虽然有几种不同的子类，但大多比较简单，因为不牵涉到过多的协议和服务提供商。而ol.source.Vector就更加简单了，但有时候其唯一的子类ol.source.Cluster在处理大量的要素时，我们可能需要使用。</p><p>在大概了解了整个Source之后，紧接着该介绍它的搭档Layer了，同样的，我们还是先从OpenLayers现有的Layer类图大致了解一下：</p><p><img src="../../../../typora/images/20180731110040946" alt="img"></p><p>为了便于了解和使用，图中标注了每一个Layer对应的Source。通过上图可以看到Layer相对于Source而言，真是太简单了。</p><p>其中ol.layer.Group是一个用于将多个图层存储在一起的集合类，以后接触到相关内容再介绍。</p><h3 id="瓦片地图"><a href="#瓦片地图" class="headerlink" title="瓦片地图"></a>瓦片地图</h3><h4 id="瓦片地图-1"><a href="#瓦片地图-1" class="headerlink" title="瓦片地图"></a>瓦片地图</h4><p>瓦片地图（也叫切片地图）源于一种大地图解决方案，就是在多个比例尺下配置地图，然后提前把每个比例尺下的地图绘制为小块图片（瓦片），保存在服务器上用于缓存的目录中。这样客户端在访问地图时，可以直接获取需要的小块图片拼接成整幅地图，而不是由服务器动态创建（实时创建）出一幅图片再发送到客户端，从而极大提高了访问速度。</p><p>瓦片地图起始于谷歌地图。在2005年前后谷歌地图已经开始将矢量图层融合为一张栅格化的大图像，大图像被切分为256像素 x 256像素的图片（瓦片）。这些图片预先生成并存储在磁盘上，以便快速分发（通过AJAX）到客户端。这样做可以同时支持成千上万个并发请求（异步-因为瓦片地图根据请求范围加载），而这对于动态地图绘制而言基本是不可能的。</p><p>瓦片地图的缺点是不能改变图层的符号，可以认为它们是一些”死图片”，不能进行更新。因此，WebGIS中通常的做法是将通用的基础底图图层发布为瓦片，在其上叠加另外的包含专题信息的图层，这种图层结构可以被比喻为”图层三明治”。</p><p>如今有许多软件提供创建地图瓦片的功能，商业软件中，功能强大的ArcGIS软件系列的ArcGIS Server（价格较贵）能够进行创建瓦片地图操作，国内的超图SuperMap iServer同样也能创建瓦片地图。另外，开源的Mapnik库也可以创建地图瓦片，Mapnik库被封装在用户友好的应用程序TileMill中。</p><h4 id="LOD"><a href="#LOD" class="headerlink" title="LOD"></a>LOD</h4><p>LOD是<strong>Levels of Detail（细节层级）</strong>的简写，用于根据当前的环境，渲染不同的图像，用于降低非重要内容的细节度，从而提高渲染效率，在电子游戏中经常运用，对于需要显示全球地图的GIS系统而言，更需要应用这项技术。</p><p>在不同的LOD下，自然分辨率就可能不一样，这两者是紧密结合在一起的。对于图形显示系统而言，分辨率作为屏幕坐标和世界坐标之间计算的纽带，其作用是非常重要的（例如，屏幕上两个像素点间的距离对应的现实世界的距离是多少，这就需要通过分辨率来衡量与计算——分辨率将在后面进行介绍）。</p><p>在详细讲解之前，假设给你两张A4纸，在其中一张纸上把你家整个绘制上去，在另一张纸上只把你睡的房间绘制上去。如果别人想看你家，你会给哪一张纸？如果想看你睡的房间，你会给哪一张纸？相信你不会给错，LOD就是这种根据不同需要，采用不同图的技术方案。在地图应用中，最直观的体验，就是地图放大缩小。当地图放大后，能看到更详细的地理信息，比如街道、商店等等。当地图缩小再缩小，原来能看到的街道、商店就看不见了，但是能看到更大的区域。我们的屏幕就相当于是A4纸，大小不变。</p><p>LOD这个技术方案非常棒！非常符合我们的自然习惯，所以在很多图形系统中都使用了这项技术。在GIS系统中，不断放大，就能看到更多地图细节，了解更加详细的信息。对于GIS引擎的开发者而言，需要实现这项技术，当发现用户放大地图时，就立马使用更有细节的地图图片，替换现在显示的地图图片。现在问题来了：意思是说对于同一个地点而言，需要有更多张呈现不同细节程度的图片？是的，你没有猜错。虽然在使用瓦片地图的过程中，感觉放大、缩小地图是浑然一体的，但其实就在你眼皮下发生了图片替换。不同层级使用具有不同细节的地图瓦片，这就需要为每一个层级准备图片，如果使用离线工具下载瓦片地图，会看到下载的图片是按照层级Z进行存储的。开发者不用担心数据源的处理，只需要知道这个原理就可以了。</p><p>为了便于理解GIS系统中不同层级，使用不同的图片，下面使用google在线瓦片地图进行说明。最小层级0情况下，只用了一张256*256像素的图片表示整个地球平面：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152924.png" alt="img"></p><p>稍大一个层级1情况下，用了四张256*256像素的图片（各张图片中表示的信息更丰富了）来表示整个地球：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152929.png" alt="image-20210922092323241"></p><h4 id="瓦片计算"><a href="#瓦片计算" class="headerlink" title="瓦片计算"></a>瓦片计算</h4><blockquote><p>切片方式</p></blockquote><p>   如果对整个地球图片进行切片，需要考虑的是整个地球图片大小，以及切片规则，切片（瓦片）大小。</p><p>对于WebGIS而言，在线地图几乎都采用Web墨卡托投影坐标系（EPSG:3857，后面会详解介绍)，地球投影到平面上就是一个正方形。为了方便使用，切片时大多按照正方形的方式来进行切片，比如大小为256<em>256的瓦片（单位像素），一个1024</em>1024的地图，就可以切片4张小的256*256的瓦片。</p><p>瓦片大小几乎都是256<em>256，有一些则会增加到512</em>512（由于以前的屏幕分辨率通常比较低，所以256<em>256的瓦片在低分辨率的屏幕上显示效果比较好，随着屏幕分辨率的提高，瓦片大小自然就会增加到512</em>512。但目前主流仍是256*256大小的瓦片）。</p><p>LOD会使得不同层级下的全球地图大小不一致，结合瓦片地图技术一起，就出现了金字塔瓦片结构：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152933.png" alt="img"></p><p>在金字塔瓦片结构中，上一层级的一张瓦片，在更大一层级中，会用4张瓦片来表示，依次类推，比如上一篇文章中看到的<strong>Google在线瓦片地图</strong>的第0级和第1级的瓦片地图就呈现这样的规律。这样做可以维持正方形的投影方式不变，同时按照2的幂次方放大（<strong>瓦片</strong>的边长），计算效率非常高。</p><blockquote><p>瓦片数量计算</p></blockquote><p>通过上面切片的介绍，我们可以对每一层级拥有的瓦片的数量进行简单的计算：</p><ul><li>层级0的瓦片数是 1 = 2^0 ∗ 2^0</li><li>层级1的瓦片数是 4 = 2^1 * 2^1</li><li>层级2的瓦片数是 16 = 2^2 * 2^2</li><li>层级3的瓦片数是 64 = 2^3 * 2^3</li><li>层级z的瓦片数是 2^z * 2^z</li></ul><blockquote><p>瓦片坐标系</p></blockquote><p>从以上的金字塔瓦片结构可以看出来，瓦片的组织方式是三维的，因此对一幅地图进行切片时，需要给每一块瓦片进行详细的编号，即需要指定每一块瓦片的行号、列号以及层级数。</p><p>这个问题就涉及到了瓦片坐标系，瓦片坐标系是瓦片地图的组织参考框架。它规定每一块瓦片的行号、列号以及层级数，另外，在瓦片坐标系中列号一般从左到右方向递增，而在瓦片坐标系中行号有可能沿着从上到下的方向递增，或者从下到上递增，所以不同的瓦片坐标系的起始点（原点）不同。</p><p>不同的在线地图服务商，可能定义不一样的瓦片坐标系，瓦片坐标系不一样，那么对应的同一个位置的瓦片的坐标也会不一样。需要引起重视。</p><p>OpenLayers提供了一个用于调试瓦片坐标系的ol.source.TileDebug类。借助这个类，我们可以清晰的看到每一个瓦片的坐标：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152938.png" alt="image-20210922094122522"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>瓦片坐标<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#map</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;),</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.TileDebug(&#123;</span></span><br><span class="line"><span class="javascript">                projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,            <span class="comment">// Web墨卡托投影坐标系</span></span></span><br><span class="line"><span class="javascript">                tileGrid: osmSource.getTileGrid()   <span class="comment">// 获取OSM地图的瓦片坐标系</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//滑块缩放控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//缩放至特定地点控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ZoomToExtent(&#123;           <span class="comment">// 缩放至特定位置控件      </span></span></span><br><span class="line">          extent: [</span><br><span class="line"><span class="javascript">            <span class="comment">//前两个元素表示位置矩形的左下角坐标，后两个元素表示位置矩形的右上角坐标,该点坐标是深圳市</span></span></span><br><span class="line">            12667718, 2562800,</span><br><span class="line">            12718359, 2597725</span><br><span class="line">          ]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="comment">//全屏控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//坐标拾取控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="javascript">        <span class="comment">//鹰眼控件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.OverviewMap(&#123;        <span class="comment">// 实例化一个OverviewMap类的对象，并加入到地图中</span></span></span><br><span class="line"><span class="javascript">          collapsed: <span class="literal">false</span></span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.control.ScaleLine(&#123;</span></span><br><span class="line"><span class="javascript">          units:<span class="string">&#x27;degrees&#x27;</span></span></span><br><span class="line">        &#125;)      </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 首先从上图可以看到地图上多了网格，每一个网格对应的就是一个<strong>瓦片</strong>。</p><p>  其次网格中有三个数字，这些数字就表示当前<strong>瓦片</strong>的坐标：</p><ul><li>第一个数字是层级z</li><li>第二个数字是表示经度方向上的x（列号）</li><li>第三个数字是表示纬度方向上的y（行号）</li></ul><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>分辨率的简单定义是屏幕上的1像素表示的现实世界的地面实际距离。</p><p>上一节说到了金字塔瓦片结构中每一个层级，会使用不同数量的瓦片来表示整个地球，那么无论是哪一个层级，所表示的实际地理空间范围都是一致的，但使用的瓦片个数却是不一样的。</p><p>以Google在线地图为例，层级0使用了一个瓦片，层级1使用了4个瓦片。通过计算可以知道层级0的整个地球图像（瓦片）为256<em>256像素大小，层级1整个地球图像为512</em>512像素大小。而层级0和层级1表示的地球范围都是一样的（经度[-180°, 180°]，纬度[-90°, 90°]）。在层级0的时候，一个像素在水平方向就表示360°/256 = 1.40625°这么长的经度范围（以度为单位），在竖直方向就表示180°/256 = 0.703125°这么长的纬度范围（以度为单位）。而这两个数字就是分辨率了，即一个像素所表示的现实世界的范围是多少，这个范围可能是度（在地理坐标系统中），可能是米（在投影坐标系统中），或者其他单位，根据具体的情况而定。</p><h4 id="Web墨卡托投影坐标系中的分辨率"><a href="#Web墨卡托投影坐标系中的分辨率" class="headerlink" title="Web墨卡托投影坐标系中的分辨率"></a>Web墨卡托投影坐标系中的分辨率</h4><p>我们知道，在WebGIS中使用的在线瓦片地图是采用的Web墨卡托（Mercator）投影坐标系（可以查看这篇文章-墨卡托投影-来了解详细内容），经过投影后，整个地球是一个正方形，所能表示的地球范围为：</p><p><strong>经度[-180°, 180°]，纬度[-85°, 85°]，单位为度。</strong></p><p>对应的Web墨卡托坐标系的范围为：</p><p><strong>x[-20037508.3427892, 20037508.3427892]，范围y同样是[-20037508.3427892, 20037508.3427892]，单位为米。</strong></p><p>或许，你会好奇这个范围是怎么计算而来的，如果详细了解过它的定义，应该知道<strong>Web墨卡托投影只是简单的把地球球面剖开拉伸为一个正方形，由于南北极两端采用这种拉伸会严重变形，并且南北极在使用过程中很少用到，所以干脆就只投影了地球的[-85, 85]纬度范围。然后在经度-180度（或+180）的地方从上到下剖开地球，然后按照赤道方向来展开成一张平面，那么这个平面的边长，就等于以地球赤道半径按照圆来计算的周长</strong>。近似的按照6378137米为地球半径来计算，那么整个赤道周长的一半，即为：</p><p>π∗r=3.1415926∗6378137=20037508.0009862</p><p>以上就是Web墨卡托投影坐标系范围的完整的计算过程，墨卡托投影也有很多变形，会有细微的不同，OpenLayers默认使用的就是EPSG:3857（Web墨卡托投影坐标系），对于该坐标系的详细定义，可以参见epsg.io.3867。</p><p>有了范围之后，要想计算Web墨卡托投影坐标系中的分辨率，按照上面的计算过程就非常简单了，还是以Google在线瓦片地图为例，x、y方向上的各层级瓦片地图分辨率计算公式可以归纳为：</p><p>*<em>resolution = rang / (256 * 2^z)*</em></p><p>rang    ——    表示x方向或y方向上的整个范围，比如20037508.3427892 * 2。<br>256    ——    表示一个瓦片的边长，单位为像素。<br>2^z    ——    表示在层级z下，x或y方向上的瓦片个数。<br>那么整个公式计算出来就是在x或y方向，屏幕上一个像素所能代表的实际地理范围，即分辨率。</p><h4 id="OpenLayers默认使用的分辨率"><a href="#OpenLayers默认使用的分辨率" class="headerlink" title="OpenLayers默认使用的分辨率"></a>OpenLayers默认使用的分辨率</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152944.png" alt="image-20210922100134999"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>OpenLayers中默认的分辨率<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>当前地图等级:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&#x27;zoom&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>当前分辨率:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">&#x27;resolution&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">              source: <span class="keyword">new</span> ol.source.OSM()     <span class="comment">// OpenStreetMap数据源</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line">       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    map.getView().on(<span class="string">&#x27;change:resolution&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;zoom&#x27;</span>).innerHTML =  <span class="built_in">this</span>.getZoom() + <span class="string">&#x27;，&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;resolution&#x27;</span>).innerHTML = <span class="built_in">this</span>.getResolution();</span></span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;zoom&#x27;</span>).innerHTML = map.getView().getZoom() + <span class="string">&#x27;，&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;resolution&#x27;</span>).innerHTML = + map.getView().getResolution();</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缩放上面的地图，从层级0开始，用前面介绍的公式和当前地图显示的<strong>分辨率</strong>进行比较，你会发现OpenLayers默认采用的<strong>分辨率</strong>和<strong>Google在线瓦片地图</strong>一样。  </p><p>OpenLayers<strong>瓦片地图</strong>默认分辨率表（地面比例尺）：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152949.png" alt="img"></p><blockquote><p>注意事项</p></blockquote><p>为什么我们上面一直以<strong>Google在线瓦片地图</strong>举例说明？</p><p>因为不同的<strong>在线瓦片地图</strong>可能采用不一样的<strong>分辨率</strong>，比如<strong>百度在线瓦片地图</strong>。所以在使用<strong>在线瓦片地图</strong>或者自己制作的<strong>瓦片地图</strong>时，都需要知道使用的<strong>分辨率</strong>是多少。如若不然，可能也会出现位置偏移。</p><h3 id="使用XYZ方式加载瓦片数据"><a href="#使用XYZ方式加载瓦片数据" class="headerlink" title="使用XYZ方式加载瓦片数据"></a>使用XYZ方式加载瓦片数据</h3><h4 id="使用XYZ方式加载高德瓦片数据"><a href="#使用XYZ方式加载高德瓦片数据" class="headerlink" title="使用XYZ方式加载高德瓦片数据"></a>使用XYZ方式加载高德瓦片数据</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922152954.png" alt="image-20210922103307387"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XYZ方式加载搞得瓦片数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">                    url:<span class="string">&#x27;http://webst0&#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span></span></span><br><span class="line">                &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line">       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目前高德的瓦片地址有如下两种：</p><ul><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7%E5%92%8C">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7和</a></li><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x={x}&amp;y={y}&amp;z={z}</a></li></ul><p>前者是高德的新版地址，后者是老版地址。</p><p>高德新版的参数：</p><ul><li>lang可以通过zh_cn设置中文，en设置英文；</li><li>size基本无作用；</li><li>scl设置标注还是底图，scl=1代表注记，scl=2代表底图（矢量或者影像）；</li><li>style设置影像和路网，style=6为影像图，style=7为矢量路网，style=8为影像路网。</li></ul><p>总结之：</p><ul><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7</a> 为矢量图（含路网、含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=7">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=7</a> 为矢量图（含路网，不含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=6">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=6</a> 为影像底图（不含路网，不含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=6">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=6</a> 为影像底图（不含路网、不含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=8">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=8</a> 为影像路图（含路网，含注记）</li><li><a href="http://wprd0{1-4}.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=8">http://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=8</a> 为影像路网（含路网，不含注记）</li></ul><p>高德旧版可以通过style参数设置影像、矢量、路网。</p><p>总结之：</p><ul><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&amp;x={x}&amp;y={y}&amp;z={z}</a> 为影像底图（不含路网，不含注记）</li><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x={x}&amp;y={y}&amp;z={z}</a> 为矢量地图（含路网，含注记）</li><li><a href="http://webst0{1-4}.is.autonavi.com/appmaptile?style=8&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">http://webst0{1-4}.is.autonavi.com/appmaptile?style=8&amp;x={x}&amp;y={y}&amp;z={z}</a> 为影像路网（含路网，含注记）</li></ul><h4 id="使用XYZ方式加载雅虎地图"><a href="#使用XYZ方式加载雅虎地图" class="headerlink" title="使用XYZ方式加载雅虎地图"></a>使用XYZ方式加载雅虎地图</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153000.png" alt="image-20210922104017162"></p><p>代码如下;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XYZ方式加载雅虎瓦片数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建地图容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//指定关联的div容器</span></span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//瓦片图层                          </span></span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">          <span class="keyword">new</span> ol.layer.Tile(&#123;                 </span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">              url:<span class="string">&#x27;https://&#123;0-3&#125;.base.maps.api.here.com/maptile/2.1/maptile/newest/normal.day/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;/512/png8?lg=ENG&amp;ppi=250&amp;token=TrLJuXVK62IQk0vuXFzaig%3D%3D&amp;requestid=yahoo.prod&amp;app_id=eAdkWGYRoc4RfxVo0Z4B&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              tileSize: <span class="number">512</span>               <span class="comment">// 设置对应的瓦片大小</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      <span class="comment">//地图视图</span></span></span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//空间参考系统 openLayers 自带两个空间参考系统 EPSG:3857 和 EPSG:4326  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//我们一般使用的经纬度 是 WGS84 需要拓展</span></span></span><br><span class="line"><span class="javascript">          projection: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//地图中心点</span></span></span><br><span class="line">          center: [0, 0],</span><br><span class="line"><span class="javascript">          <span class="comment">//缩放级别</span></span></span><br><span class="line">          zoom: 0</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">      <span class="comment">//控件层</span></span></span><br><span class="line"><span class="javascript">      controls: ol.control.defaults().extend([    <span class="comment">// 往地图增加滑块缩放控件</span></span></span><br><span class="line">       </span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大同小异，非常简单。上面的三个例子，只有Yahoo地图的代码有点不一样：多了tileSize参数的设置。</p><p>默认情况下，tileSize为256，这也是现在绝大多数瓦片采用的大小。但Yahoo地图使用的是512，所以我们需要指定。</p><h3 id="OpenLayers修改瓦片坐标系及分辨率"><a href="#OpenLayers修改瓦片坐标系及分辨率" class="headerlink" title="OpenLayers修改瓦片坐标系及分辨率"></a>OpenLayers修改瓦片坐标系及分辨率</h3><p>前面的文章已经简单介绍了瓦片坐标系是瓦片地图的组织框架，现在我们来详细探讨OpenLayers中的瓦片坐标系，从而让我们在加载各种瓦片地图的过程中能得心应手。</p><h4 id="OpenLayers中定义瓦片坐标系的接口"><a href="#OpenLayers中定义瓦片坐标系的接口" class="headerlink" title="OpenLayers中定义瓦片坐标系的接口"></a>OpenLayers中定义瓦片坐标系的接口</h4><p>前面的文章介绍了使用ol.source.TileDebug类可以让我们清晰的看到每一个瓦片的坐标，我们来看一下TileDebug这个类的API文档：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153005.png" alt="img"></p><p>可以看到实例化类的参数中有一个tileGrid参数，这个参数就是用于指定ol.source.TileDebug的瓦片坐标系，而ol.tilegrid.TileGrid类就是瓦片坐标系的抽象表示，即在OpenLayers中就是用这个类来定义瓦片坐标系。</p><p>那我们就来看看ol.tilegrid.TileGrid类的API：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153009.png" alt="image-20210922105528937"></p><p>上面各个初始化类的参数分别表示：</p><ul><li>extent    ——    请求加载的瓦片的范围，不在这个范围内的瓦片不会被请求并加载。默认是全球范围</li><li>minZoom    ——    瓦片坐标系的最小层级，比minZoom更小层级的瓦片不会被请求并加载。</li><li>origin    ——    瓦片坐标系水平方向上的起始点（原点）。默认的原点为extent的左上角（top-left）。其中，瓦片坐标在x方向从左到右递增，在y方向从下到上递增。</li><li>origins    ——    瓦片坐标系各个层级的水平方向上的起始点（原点），即每个层级可以指定不同的水平方向上的原点。</li><li>resolutions    ——    瓦片坐标系各个层级的瓦片分辨率，即不同层级的瓦片的分辨率可以不同。</li><li>tileSize    ——    瓦片的大小。</li><li>tileSizes    ——    瓦片坐标系各个层级的瓦片大小，即不同层级的瓦片的大小可以不同。</li></ul><h4 id="自定义OpenLayers瓦片坐标系来加载百度地图"><a href="#自定义OpenLayers瓦片坐标系来加载百度地图" class="headerlink" title="自定义OpenLayers瓦片坐标系来加载百度地图"></a>自定义OpenLayers瓦片坐标系来加载百度地图</h4><p>前面一篇文章讲到可以使用XYZ的方式非常简单的加载瓦片地图，但遗憾地是，这种简单方法并不适用于所有的在线瓦片地图，总有一些是特殊的，比如百度地图。</p><p>瓦片地图加载的关键在于找对瓦片，但要找对瓦片，就得知道瓦片的坐标，而瓦片坐标又需要明确的瓦片坐标系。</p><p>通过前面的API文档，我们可以知道OpenLayer的默认瓦片坐标系的原点在左上角，从左到右为x轴正方向，从下到上为y轴正方向。</p><p>具体到地图上来讲，地球经过投影，投影到一个平面上，平面最左边对应地球最西边，平面最上边对应地球最北边。原点就处于整个平面的左上角，即地球的西北角，从北向南为y轴负方向，从西向东为x轴正方向。理解这一点非常重要，因为并不是所有在线的瓦片地图都是采用这样的瓦片坐标系。用OpenLayers加载它们的时候，如果瓦片坐标系不同，计算出来的瓦片地址就获取不到对应的瓦片，为解决这个问题，我们必须要先对瓦片坐标进行转换。</p><p>那么，具体该怎么实现转换？最详细明了的方式还是看实例，下面我们看一下加载百度地图的一种实现方式：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153014.png" alt="image-20210922110819191"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义瓦片坐标系加载百度地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// 百度地图图层</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> baiduMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">      source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">          tilePixelRatio: 2,</span><br><span class="line"><span class="javascript">          tileUrlFunction: <span class="function"><span class="keyword">function</span>(<span class="params">tileCoord</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> y = tileCoord[<span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 计算当前层级下X或Y方向上瓦片总数的一半，用于定位整个地图的中心点</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> halfTileNum = <span class="built_in">Math</span>.pow(<span class="number">2</span>, z - <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 原点从左上角移到中心点后，计算xy方向上新的坐标位置</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> baiduX = x - halfTileNum;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> baiduY = y + halfTileNum;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 百度瓦片服务url将负数使用M前缀来标识</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span>(baiduX &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                  baiduX = <span class="string">&#x27;M&#x27;</span> + (-baiduX);</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              <span class="keyword">if</span>(baiduY &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                  baiduY = <span class="string">&#x27;M&#x27;</span> + (-baiduY);</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              <span class="comment">// 返回经过转换后，对应于百度在线瓦片的url</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="string">&#x27;http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&#x27;</span> + baiduX + <span class="string">&#x27;&amp;y=&#x27;</span> + baiduY + <span class="string">&#x27;&amp;z=&#x27;</span> + z + <span class="string">&#x27;&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0&#x27;</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">      layers: [</span><br><span class="line">        baiduMapLayer</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">        center: ol.proj.fromLonLat([<span class="number">104.06</span>, <span class="number">30.67</span>]),  <span class="comment">// 设置成都为中心点</span></span></span><br><span class="line">        zoom: 4</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们需要理解一下<strong>tilePixelRatio</strong>参数，它表示瓦片服务使用的像素比，例如，<strong>如果瓦片服务发布256px * 256px的瓦片，但是实际发送的却是512px * 512px的图像，则tilePixelRatio需要设置为2</strong>。百度地图这个例子就是这个情况。</p><p>和前面几个加载在线瓦片地图的例子不一样的地方在于，我们没有设置url，而是设置了<strong>tileUrlFunction</strong>，这是一个<strong>获取瓦片url的函数</strong>。如果自定义这个函数，就可以实现不同瓦片坐标系之间的转换，从而返回在线地图服务对应的url。通过代码可以看到，函数参数是一个瓦片坐标，然后进行一系列的转换，得到百度在线地图的瓦片地址。</p><p>tileUrlFunction这个自定义函数的代码实现有可能看不懂，虽然知道在进行坐标转换，但并不知道为什么要这样实现。为了彻底弄明白代码，我们必须得把之前遗漏的一个重要环节补上：弄明白待加载的在线瓦片地图的坐标系。</p><p>对百度在线瓦片坐标系进行简单分析发现，<strong>它是以某一个位置为原点，向右为x正方向，向上为y正方向的瓦片坐标系。进一步分析发现，原点应该在中心位置</strong>，在此基础上编写函数tileUrlFunction的实现。halfTileNum表示的是在当前缩放层级之下，x方向或y方向的瓦片个数的一半，意味着它就是中心位置。对于baiduX小于0的情况，百度使用了M来表示负号，所以要特殊处理一下。想必这下应该更加理解代码实现了。不同的在线瓦片地图的转换代码可能不同，需要根据对应的瓦片坐标系来确定。</p><p>但上面这个地图并不完美，因为我们设定的地图中心为成都，然而实际上显示的地图中心并不在成都。虽然无缝拼接，但位置偏差有点远。由此基本可以排除坐标转换的问题，看起来应该是<strong>OpenLayers的分辨率和百度在线瓦片地图使用的分辨率对不上</strong>。经过分析发现，确实如此，在网上也有很多分析文章可以查询。那么我们是否可以重新定义分辨率呢？答案是肯定的。</p><p>我们可以通过自定义瓦片坐标系来修改分辨率：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153031.png" alt="image-20210922112704703"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义瓦片坐标系加载百度地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> resolutions = [];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> maxZoom = <span class="number">18</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="comment">// 计算百度使用的分辨率</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;=maxZoom; i++)&#123;</span></span><br><span class="line"><span class="javascript">            resolutions[i] = <span class="built_in">Math</span>.pow(<span class="number">2</span>, maxZoom-i);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tilegrid  = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span></span><br><span class="line"><span class="javascript">      origin: [<span class="number">0</span>, <span class="number">0</span>],                     <span class="comment">// 将原点设置成和百度瓦片坐标系一致</span></span></span><br><span class="line"><span class="javascript">      resolutions: resolutions            <span class="comment">// 设置分辨率</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">     <span class="comment">// 百度地图图层</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> baiduMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">      source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">          tilePixelRatio: 2,</span><br><span class="line">          tileGrid: tilegrid,</span><br><span class="line"><span class="javascript">          tileUrlFunction: <span class="function"><span class="keyword">function</span>(<span class="params">tileCoord</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> y = tileCoord[<span class="number">2</span>];</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">            <span class="comment">// 百度瓦片服务url将负数使用M前缀来标识</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                x = <span class="string">&#x27;M&#x27;</span> + (-x);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(y &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                y = <span class="string">&#x27;M&#x27;</span> + (-y);</span></span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"><span class="javascript">            <span class="comment">// 返回经过转换后，对应于百度在线瓦片的url</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&#x27;</span> + x + <span class="string">&#x27;&amp;y=&#x27;</span> + y + <span class="string">&#x27;&amp;z=&#x27;</span> + z + <span class="string">&#x27;&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0&#x27;</span>;</span></span><br><span class="line">                </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">      layers: [</span><br><span class="line">        baiduMapLayer</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">        center: ol.proj.fromLonLat([<span class="number">104.06</span>, <span class="number">30.67</span>]),  <span class="comment">// 设置成都为中心点</span></span></span><br><span class="line">        zoom: 10</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于将瓦片坐标系的原点设置成百度瓦片坐标系一致，所以tileUrlFunction里就不需要对针对原点进行瓦片坐标的转换操作了。</p><h4 id="分析瓦片地图的瓦片坐标系"><a href="#分析瓦片地图的瓦片坐标系" class="headerlink" title="分析瓦片地图的瓦片坐标系"></a>分析瓦片地图的瓦片坐标系</h4><p>如何分析不同在线瓦片地图的瓦片坐标系呢？非常重要的一点是，先从特例触发，找简单的情况分析，比如选择z为2或者3进行分析，这种情况下，瓦片的数量比较少，可以查看整个地球范围内的地图的瓦片请求，注意分析其请求的url参数。</p><p>瓦片的url解析对于想直接使用在线瓦片服务的开发者而言，是一项经常要做的事。根据难度，大致可以分为三种情况：</p><ul><li>第一种情况最简单，请求瓦片的url明确有xyz参数，比如高德地图和百度地图。</li><li>第二种稍微难一点，xyz作为路径直接存在url里面，没有明确的参数表明哪些是xyz，比如Open Street Map和Yahoo地图，这种情况下，地图服务器收到请求后，就直接在服务器按照这个路径获取图片，按照这个逻辑，一般第一个参数表示是z，第二个参数为x，第三个参数为y。要想确认是否真是这样，可以写一个小程序来验证一下，如果还有问题，建议按照上面分析地图坐标系中的方法，从z比较小的情况入手来分析x、y、z的位置。</li><li>第三种则最难，地图服务提供商为了防止大家直接非法使用瓦片地图，对瓦片的url进行了加密，比如现在的微软Bing中文地图和Google地图，这种情况下只有知道如何解密才能使用。</li></ul><p>前面两种url的实例已经有了，此处分享一下第三种情况的url解密，以微软Bing中文地图为例：</p><h5 id="加载微软bing中文地图"><a href="#加载微软bing中文地图" class="headerlink" title="加载微软bing中文地图"></a>加载微软bing中文地图</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153047.png" alt="image-20210922140215783"></h5><p>图中显示的瓦片地图请求的url，没有明显的xyz参数，最有可能的存放xyz参数的地方在于url前面那一串数字，真实情况确实是这样的，经过分析和解码，最终实现了加载Bing中文地图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153053.png" alt="image-20210922140618088"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载Bing中文地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">         target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">         layers: [</span><br><span class="line"><span class="javascript">             <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">                 source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">                     tileUrlFunction: <span class="function"><span class="keyword">function</span>(<span class="params">tileCoord</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> y = -tileCoord[<span class="number">2</span>] - <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                         <span class="keyword">let</span> result=<span class="string">&#x27;&#x27;</span>, zIndex=<span class="number">0</span>;</span></span><br><span class="line">                 </span><br><span class="line"><span class="javascript">                         <span class="keyword">for</span>(zIndex = <span class="number">0</span>; zIndex &lt; z; zIndex++) &#123;</span></span><br><span class="line">                             result = ((x &amp; 1) + 2 * (y &amp; 1)).toString() + result;</span><br><span class="line">                             x &gt;&gt;= 1;</span><br><span class="line">                             y &gt;&gt;= 1;</span><br><span class="line">                         &#125;</span><br><span class="line"><span class="javascript">                         <span class="keyword">return</span> <span class="string">&#x27;http://dynamic.t0.tiles.ditu.live.com/comp/ch/&#x27;</span> + result + <span class="string">&#x27;?it=G,VE,BX,L,LA&amp;mkt=zh-cn,syr&amp;n=z&amp;og=111&amp;ur=CN&#x27;</span>;</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;)</span><br><span class="line">             &#125;)</span><br><span class="line">         ],</span><br><span class="line"><span class="javascript">         view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">             center: [0, 0],</span><br><span class="line">             zoom: 3</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是地图数据是非常昂贵的，如果使用某一个在线地图服务，请先核实对方的版权和数据使用申明，不要侵犯对方的权益，按照要求合法使用地图。几乎所有的在线地图服务都提供了响应的服务接口，强烈建议在商用项目中使用这些接口。对于这些接口的使用，服务商都有详细的说明，在此不赘述。</p><h5 id="加载Google中文地图"><a href="#加载Google中文地图" class="headerlink" title="加载Google中文地图"></a>加载Google中文地图</h5><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载Google中文地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">      target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">      layers: [</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">&#x27;http://www.google.cn/maps/vt/pb=!1m4!1m3!1i&#123;z&#125;!2i&#123;x&#125;!3i&#123;y&#125;!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0&#x27;</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">        center: [0, 0],</span><br><span class="line">        zoom: 3</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没爬墙的话，是访问不通的。</p><h3 id="可重用数据源"><a href="#可重用数据源" class="headerlink" title="可重用数据源"></a>可重用数据源</h3><p>这个示例展示如何更新地图中的瓦片。</p><p>可以调用*<strong>*source.setUrl()**</strong>来更新瓦片地图源的URL，请注意，当更改瓦片地图源的URL时，在加载完新的瓦片之前，将不会替换现有的瓦片。</p><p>如果想要清除当前呈现的瓦片，则可以调用source.refresh()方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>可重用数据源<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>January<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>January (with bathymetry)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>July<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;switcher&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>July (With bathymetry)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 有mapbox瓦片地图url组成的数组</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> urls = [</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-jan/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-bathy-jan/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-jul/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;https://&#123;a-c&#125;.tiles.mapbox.com/v3/mapbox.blue-marble-topo-bathy-jul/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span></span></span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 瓦片地图源</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> source = <span class="keyword">new</span> ol.source.XYZ();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">          target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">          layers: [</span><br><span class="line"><span class="javascript">              <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line">                  source: source</span><br><span class="line">              &#125;)</span><br><span class="line">          ],</span><br><span class="line"><span class="javascript">          view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">              center: [0, 0],</span><br><span class="line">              zoom: 2</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">updateUrl</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          source.setUrl(urls[index]);     <span class="comment">// 改变瓦片地图源的url</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> buttons = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;switcher&#x27;</span>);  </span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = buttons.length; i &lt; len; i++)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> button = buttons[i];</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 让瓦片地图的url随用户点击按钮而变化</span></span></span><br><span class="line"><span class="javascript">          button.addEventListener(<span class="string">&#x27;click&#x27;</span>, updateUrl.bind(<span class="literal">null</span>, <span class="built_in">Number</span>(button.value)));</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      updateUrl(<span class="number">0</span>);       <span class="comment">// 先预设置瓦片地图</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="矢量地图"><a href="#矢量地图" class="headerlink" title="矢量地图"></a>矢量地图</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>前面介绍的瓦片地图将地理信息以一块块瓦片的形式进行组织并渲染，瓦片的本质是图片，因此不能对瓦片地图进行修改样式、空间分析等操作，而且瓦片不包含属性信息，隐含的空间信息也不能直接获取使用。</p><p>矢量数据使用矢量数据模型来组织地理信息，矢量数据模型采用离散对象来表示地球表面的空间要素，因此，简单来说，矢量数据包含了各个地理要素的空间坐标与属性信息，这使我们能对地理信息进行细粒度的使用与操作。</p><p>常用的矢量数据格式有GeoJSON、TopoJSON、KML、GML、shapfile等等。</p><p>在WebGIS中，使用矢量数据构成的地图被称为矢量地图，矢量地图的原理就是将包含坐标信息与属性信息的矢量数据发送到客户端，然后由客户端负责绘制矢量图层。</p><p>响应速度与交互性是矢量地图的优点，一旦从服务器获得了矢量数据，Web地图用户与数据的交互就会非常迅速，不会有任何延迟。另外，矢量图形无论进行放大、缩小或旋转等操作，图形都不会失真。</p><p>矢量地图的缺点是不能同时绘制成百上千个要素，因为矢量地图的主要操作都在客户端，所以数据量变大，客户端就会卡、慢，甚至可能崩溃。</p><h4 id="在OpenLaters中直接组织矢量数据"><a href="#在OpenLaters中直接组织矢量数据" class="headerlink" title="在OpenLaters中直接组织矢量数据"></a>在OpenLaters中直接组织矢量数据</h4><p>在OpenLayers中，ol.source.Vector是矢量数据源基类，为矢量图层ol.layer.Vector类提供具体的数据来源，包括直接组织或读取的矢量数据（ol.Feature）、远程数据源的矢量数据（即通过url设置数据源路径）等。</p><p>现在我们来尝试直接在OpenLayers中组织矢量数据然后构建矢量地图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922153102.png" alt="image-20210922143316507"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>直接组织矢量数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初始化一个点要素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pointFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">12958998</span>, <span class="number">4852221</span>]),       <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;点要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个线要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lineFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.LineString([[<span class="number">11590147</span>, <span class="number">4322577</span>], [<span class="number">13594369</span>, <span class="number">3872784</span>]]),  </span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;线要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个多边形要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> polygonFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Polygon([[[<span class="number">11801814</span>, <span class="number">3251012</span>], [<span class="number">14057391</span>, <span class="number">2748303</span>], [<span class="number">12714628</span>, <span class="number">1346008</span>], [<span class="number">11801814</span>, <span class="number">3251012</span>]]]),</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;多边形要素&#x27;</span>              <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量数据源, 并添加上面创建的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector();</span></span><br><span class="line">      vectorSource.addFeature(pointFeature);</span><br><span class="line">      vectorSource.addFeature(lineFeature);</span><br><span class="line">      vectorSource.addFeature(polygonFeature);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">          source: vectorSource</span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">          target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">          layers: [</span><br><span class="line"><span class="javascript">              <span class="keyword">new</span> ol.layer.Tile(&#123;             <span class="comment">// 底图</span></span></span><br><span class="line"><span class="javascript">                  source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">              &#125;),</span><br><span class="line">              vectorLayer</span><br><span class="line">          ],</span><br><span class="line"><span class="javascript">          view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">              center: [0, 0],</span><br><span class="line">              zoom: 0</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在OpenLayers中，使用ol.Feature类表示地理要素，一个Feature对象就表示一个地理要素。</p><p>其中，Feature对象可以包含空间信息与属性信息，在上面的示例中，Feature对象的空间信息分别通过ol.geom.Point类、ol.geom.LineString类、ol.geom.Polygon类来组织，然后再赋值给geometry参数。另外，name参数作为一个属性信息也被包含在Feature对象中。</p><p>构建了三个地理要素后，再把它们分别通过ol.source.Vector类的addFeature()方法加入到ol.source.Vector对象中，最后再通过ol.layer.Tile类构成矢量图层并一起加入到地图中。</p><p>除了直接构建，还可以通过url请求矢量数据源</p><h4 id="url请求矢量数据"><a href="#url请求矢量数据" class="headerlink" title="url请求矢量数据"></a>url请求矢量数据</h4><p>读取url设置的矢量数据源，需要通过解析器Format（即ol.format.Feature的子类）来解析各类矢量数据，如XML、Text、JSON、GML、KML、GPS、WFS、WKT、GeoJSON等地图数据。</p><p>解析器相关类的类结构图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922144624.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>url请求矢量数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">            target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">            layers: [</span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> ol.layer.Tile(&#123;             <span class="comment">// 底图</span></span></span><br><span class="line"><span class="javascript">                    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">                &#125;),</span><br><span class="line"><span class="javascript">                <span class="comment">// 再加载一个geojson的矢量地图</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="javascript">                    source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="javascript">                        url: <span class="string">&#x27;line.geojson&#x27;</span>,                <span class="comment">// 矢量数据来源</span></span></span><br><span class="line"><span class="javascript">                        format: <span class="keyword">new</span> ol.format.GeoJSON()                 <span class="comment">// 解析矢量数据的解析器</span></span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            ],</span><br><span class="line"><span class="javascript">            view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">                center: [0, 0],</span><br><span class="line">                zoom: 0</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210922145958.png" alt="image-20210922145957173"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>样式设置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入ol.css 和 ol.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/ol.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;map&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初始化一个点要素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pointFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">12958998</span>, <span class="number">4852221</span>]),       <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;点要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个线要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lineFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.LineString([[<span class="number">11590147</span>, <span class="number">4322577</span>], [<span class="number">13594369</span>, <span class="number">3872784</span>]]),  </span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;线要素&#x27;</span>                  <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个多边形要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> polygonFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 空间信息</span></span></span><br><span class="line"><span class="javascript">          geometry: <span class="keyword">new</span> ol.geom.Polygon([[[<span class="number">11801814</span>, <span class="number">3251012</span>], [<span class="number">14057391</span>, <span class="number">2748303</span>], [<span class="number">12714628</span>, <span class="number">1346008</span>], [<span class="number">11801814</span>, <span class="number">3251012</span>]]]),</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;多边形要素&#x27;</span>              <span class="comment">// 属性信息</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量数据源, 并添加上面创建的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector();</span></span><br><span class="line">      vectorSource.addFeature(pointFeature);</span><br><span class="line">      vectorSource.addFeature(lineFeature);</span><br><span class="line">      vectorSource.addFeature(polygonFeature);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化一个矢量图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">          source: vectorSource,</span><br><span class="line"><span class="javascript">          style: <span class="keyword">new</span> ol.style.Style(&#123;                            <span class="comment">// 自定义矢量地图样式</span></span></span><br><span class="line"><span class="javascript">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="javascript">                color: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line">                width: 5</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">          target: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line">          layers: [</span><br><span class="line"><span class="javascript">              <span class="keyword">new</span> ol.layer.Tile(&#123;             <span class="comment">// 底图</span></span></span><br><span class="line"><span class="javascript">                  source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">              &#125;),</span><br><span class="line">              vectorLayer</span><br><span class="line">          ],</span><br><span class="line"><span class="javascript">          view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">              center: [0, 0],</span><br><span class="line">              zoom: 0</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要在feature上设置样式，就必须先获取到所有加载的feature，然后依次设置，显然直接设置layer的样式，会在代码编写上更容易一些。</p><p>自带样式的矢量地图修改样式</p><p>有些矢量地图数据自带样式，比如KML格式的矢量地图，如果要修改样式，则相对比较麻烦。得分情况考虑：</p><ul><li>一种是所有矢量地图都不使用自带的样式：</li></ul><ul><li>一种是部分矢量地图不使用自带的样式。</li></ul><p>对于第一种情况，则相对比较简单一点，只需要把ol.format.KML的构造参数extractStyles设置为false即可，然后为layer设定自定义的样式。</p><p>对于第二种情况，则相对麻烦一些，必须要读取加载的所有feature，并进行过滤，对符合条件的feature重新设置样式。</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><a href="https://segmentfault.com/a/1190000020297846">参考文章</a></p><h2 id="map（地图）"><a href="#map（地图）" class="headerlink" title="map（地图）"></a>map（地图）</h2><h3 id="创建基本地图"><a href="#创建基本地图" class="headerlink" title="创建基本地图"></a>创建基本地图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    target: <span class="string">&#x27;map&#x27;</span>,<span class="comment">//对象指向</span></span><br><span class="line">    layers: [<span class="comment">//图层</span></span><br><span class="line">      <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="comment">//这里定义的是平铺图层</span></span><br><span class="line">        source: <span class="keyword">new</span> ol.source.OSM()<span class="comment">//图层源 定义图层映射协议</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    view: <span class="keyword">new</span> ol.View(&#123;<span class="comment">//视图</span></span><br><span class="line">      center: ol.proj.fromLonLat([<span class="number">37.41</span>, <span class="number">8.82</span>]),<span class="comment">//地图中心</span></span><br><span class="line">      zoom: <span class="number">4</span><span class="comment">//缩放层级</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="属性选项"><a href="#属性选项" class="headerlink" title="属性选项"></a>属性选项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    target: <span class="string">&#x27;map&#x27;</span>,<span class="comment">//对象映射：要将`map`对象附加到div，` map`对象将`target`作为参数，值是`div`的`id`</span></span><br><span class="line">    layers: [<span class="comment">//图层</span></span><br><span class="line">      <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="comment">//这里定义的是平铺图层</span></span><br><span class="line">        source: <span class="keyword">new</span> ol.source.OSM()<span class="comment">//图层源 定义图层映射协议</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    view: <span class="keyword">new</span> ol.View(&#123;<span class="comment">//视图</span></span><br><span class="line">      center: ol.proj.fromLonLat([<span class="number">37.41</span>, <span class="number">8.82</span>]),<span class="comment">//地图中心</span></span><br><span class="line">      zoom: <span class="number">4</span><span class="comment">//缩放层级</span></span><br><span class="line">    &#125;),</span><br><span class="line">    controls:[<span class="comment">//最初添加到映射中的控件  如未设置 使用默认控件</span></span><br><span class="line">        <span class="keyword">new</span> ol.control.Control(&#123;</span><br><span class="line">            element:,<span class="comment">//元素是控件的容器元素(DOM)。只有在开发自定义控件时才需要指定这一点</span></span><br><span class="line">            render: ,<span class="comment">//控件重新呈现时调用的函数</span></span><br><span class="line">            target: <span class="comment">//如果想在映射的视图端口之外呈现控件，指定目标</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    interactions:[<span class="comment">//最初添加到映射中的交互 如未设置 使用默认交互</span></span><br><span class="line">        <span class="keyword">new</span> ol.interaction.Interaction(&#123;</span><br><span class="line">            handleEvent</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    overlays:[</span><br><span class="line">        <span class="keyword">new</span> ol.Overlay()</span><br><span class="line">    ],</span><br><span class="line">    maxTilesLoading:<span class="number">16</span>,<span class="comment">//同时加载的最大瓷砖数 默认16</span></span><br><span class="line">    loadTilesWhileAnimating:<span class="literal">false</span>,<span class="comment">//</span></span><br><span class="line">    loadTilesWhileInteracting:<span class="literal">false</span>,<span class="comment">//   </span></span><br><span class="line">    moveTolerance:<span class="number">1</span>,<span class="comment">//光标必须移动的最小距离(以像素为单位)才能被检测为map move事件，而不是单击。增加这个值可以使单击地图变得更容易</span></span><br><span class="line">    pixelRatio:<span class="built_in">window</span>.devicePixelRatio,<span class="comment">//</span></span><br><span class="line">    keyboardEventTarget:,<span class="comment">//要监听键盘事件的元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="地图事件"><a href="#地图事件" class="headerlink" title="地图事件"></a>地图事件</h3><table><thead><tr><th>地图事件</th><th>含义</th></tr></thead><tbody><tr><td>click</td><td>无拖动单击</td></tr><tr><td>dblclick</td><td>无拖动双击</td></tr><tr><td>moveend</td><td>移动地图结束时</td></tr><tr><td>movestart</td><td>移动地图开始时</td></tr><tr><td>pointerdrag</td><td>当拖动指针时触发</td></tr><tr><td>pointermove</td><td>当指针移动时触发。注意，在触摸设备上，这是在地图平移时触发的，因此与<code>mousemove</code>不同</td></tr><tr><td>postcompose</td><td></td></tr><tr><td>postrender</td><td>在映射帧呈现后触发</td></tr><tr><td>precompose</td><td></td></tr><tr><td>propertychange</td><td>当属性被更改时触发</td></tr><tr><td>rendercomplete</td><td>渲染完成时触发，即当前视图的所有源和tile都已加载完毕，所有tile都将淡出</td></tr><tr><td>singleclick</td><td>一个真正的无拖放和无双击的单击。注意，这个事件被延迟了250毫秒，以确保它不是双击</td></tr></tbody></table><h3 id="map的方法"><a href="#map的方法" class="headerlink" title="map的方法"></a>map的方法</h3><table><thead><tr><th>地图方法</th><th>功能</th></tr></thead><tbody><tr><td>addControl(control)</td><td>将给定的控件添加到地图中</td></tr><tr><td>removeControl(control)</td><td>从地图中移除已给定的控件</td></tr><tr><td>addInteraction(interaction)</td><td>将给定的交互添加到地图中</td></tr><tr><td>removeInteraction(interaction)</td><td>从地图中移除已给定的交互</td></tr><tr><td>addLayer(layer)</td><td>将给定的图层添加到地图的顶部</td></tr><tr><td>removeLayer(layer)</td><td>从地图中移除已给定的图层</td></tr><tr><td>addOverlay(overlay)</td><td>将给定的叠加层添加到地图中</td></tr><tr><td>removeOverlay(overlay)</td><td>从地图中移除已给定的叠加层</td></tr><tr><td>forEachFeatureAtPixel(pixel, callback, opt_options)</td><td>检测与视图端口上的像素相交的特性，并对每个相交的特性执行回调。检测中包含的层可以通过<code>opt_options</code>中的<code>layerFilter</code>选项配置</td></tr><tr><td>forEachLayerAtPixel(pixel, callback, opt_options)</td><td>检测在视图端口上的像素处具有颜色值的层，并对每个匹配的层执行回调。检测中包含的层可以通过<code>opt_layerFilter</code>配置</td></tr><tr><td>getControls()</td><td>获取地图控件</td></tr><tr><td>getCoordinateFromPixel(pixel)</td><td>获取给定像素的坐标。这将返回地图视图投影中的坐标。</td></tr><tr><td>getEventCoordinate(event)</td><td>返回浏览器事件的视图投影中的坐标</td></tr><tr><td>getEventPixel(event)</td><td>返回浏览器事件相对于视图端口的地图像素位置</td></tr><tr><td>getFeaturesAtPixel(pixel, opt_options)</td><td>获取视图端口上与像素相交的所有特性</td></tr><tr><td>getInteractions()</td><td>获取地图交互</td></tr><tr><td>getLayerGroup()</td><td>获取与此地图关联的图层组</td></tr><tr><td>setLayerGroup(layerGroup)</td><td>设置与此地图关联的图层组</td></tr><tr><td>getLayers()</td><td>获取与此地图关联的图层的集合</td></tr><tr><td>getOverlayById(id)</td><td>通过其标识符获取覆盖(<code>overlay. getId()</code>返回的值)。注意，索引将字符串和数字标识符视为相同的。<code>getoverlaybyid(2)</code>将返回id为2或2的叠加层。</td></tr><tr><td>getOverlays()</td><td>获得地图叠加</td></tr><tr><td>getPixelFromCoordinate(coordinate)</td><td>获取坐标的像素。它接受地图视图投影中的坐标并返回相应的像素</td></tr><tr><td>getSize()</td><td>获取地图尺寸</td></tr><tr><td>setSize(size)</td><td>设置地图尺寸</td></tr><tr><td>getTarget()</td><td>获取呈现此映射的目标。注意，这将返回作为选项或<code>setTarget</code>中输入的内容。如果这是一个元素，它将返回一个元素;如果是字符串，它会返回这个字符串</td></tr><tr><td>getTargetElement()</td><td>获取呈现此映射的<code>DOM</code>元素。与<code>getTarget</code>相反，这个方法总是返回一个元素，如果映射没有目标，则返回<code>null</code></td></tr><tr><td>getView()</td><td>获取地图视图。视图管理中心和分辨率等属性。</td></tr><tr><td>setView(view)</td><td>设置地图视图</td></tr><tr><td>getViewport()</td><td>获取作为<code>map</code>视图端口的元素</td></tr><tr><td>hasFeatureAtPixel(pixel, opt_options)</td><td>检测在<code>viewport</code>上是否与一个像素相交。可以通过<code>opt_layerFilter</code>配置在检测中包含的层。</td></tr></tbody></table><h2 id="Layers（图层）"><a href="#Layers（图层）" class="headerlink" title="Layers（图层）"></a>Layers（图层）</h2><p>定义图层：地图图层<code>layers:[...]</code>组定义映射中可用的图层组，用来盛放地图上的各种元素，其在地图上的显示顺序是按照数组中元素序列从下到上呈现的，可以直接在创建地图时定义图层，多个图层的时候可以单独定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;<span class="comment">//这里定义的是图层类型(Image/Title/Vector)</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.Vector(),<span class="comment">//矢量图层源  源是用于获取映射块的协议【必须】</span></span><br><span class="line">    style:[],<span class="comment">//图层样式 【必须】</span></span><br><span class="line">    feature:[],<span class="comment">//图层元素 【必须】</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>添加指定图层：<code>map.addLayer(layer)</code>；</li><li>移除指定图层：<code>map.removeLayer(layer)</code>；</li></ul><p>图层是轻量级容器，从数据源<code>Source</code>获取数据。</p><p><code>Source</code>d子类分别有，分别对应不同图层类：</p><ul><li><code>ol.source.ImageSource()</code></li><li><code>ol.source.TileSource()</code></li><li><code>ol.source.VectorSource()</code></li></ul><p><code>Source</code>主要有以下属性选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.source.VectorSource(&#123;</span><br><span class="line">    attributions:,<span class="comment">//</span></span><br><span class="line">    attributionsCollapsible:,<span class="comment">//布尔值  默认为true </span></span><br><span class="line">    projection:,<span class="comment">//投影系</span></span><br><span class="line">    state:<span class="string">&#x27;ready&#x27;</span>,<span class="comment">//默认为&#x27;ready&#x27;</span></span><br><span class="line">    wrapX:<span class="literal">false</span>,<span class="comment">//默认为false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>ol.layer.Tile()</code>和<code>ol.layer.Image()</code>图层类都具有相同的属性如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.layer.Tile/Image(&#123;<span class="comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span></span><br><span class="line">    opacity:<span class="number">2</span>,<span class="comment">//透明度 区间范围为(0, 1) 默认为1</span></span><br><span class="line">    visible:<span class="literal">true</span>,<span class="comment">//显示属性 布尔值 默认为true</span></span><br><span class="line">    extent:[],<span class="comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span></span><br><span class="line">    zIndex:<span class="number">2</span>,<span class="comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span></span><br><span class="line">    minResolution:<span class="number">3</span>,<span class="comment">//该层可见的最小分辨率(包括在内)</span></span><br><span class="line">    maxResolution:<span class="number">6</span>,<span class="comment">//该层可见的最大分辨率（包括在内）</span></span><br><span class="line">    repload:<span class="number">0</span>,<span class="comment">//预加载。将低分辨率瓦片加载到预加载级别。0表示没有预加载 默认为0</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.TileSource()/ImageSource(),<span class="comment">//图层源</span></span><br><span class="line">    map:  ,<span class="comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-ol-layer-Tile"><a href="#1-ol-layer-Tile" class="headerlink" title="(1)ol.layer.Tile()"></a>(1)<code>ol.layer.Tile()</code></h3><p>平铺图层。</p><p>对于提供预呈现、平铺的网格图像的层源，这些网格按特定分辨率的缩放级别组织。</p><h3 id="2-ol-layer-Image"><a href="#2-ol-layer-Image" class="headerlink" title="(2)ol.layer.Image()"></a>(2)<code>ol.layer.Image()</code></h3><p>图像图层。</p><p>服务器呈现的映像，可用于任意范围和分辨率。</p><h3 id="3-ol-layer-Vector"><a href="#3-ol-layer-Vector" class="headerlink" title="(3)ol.layer.Vector()"></a>(3)<code>ol.layer.Vector()</code></h3><p>矢量图层。</p><p>在客户端呈现矢量数据，其属性具备<code>getter</code>和<code>setter</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.layer.Vector(&#123;<span class="comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span></span><br><span class="line">    opacity:<span class="number">2</span>,<span class="comment">//透明度 区间范围为(0, 1) 默认为1</span></span><br><span class="line">    visible:<span class="literal">true</span>,<span class="comment">//显示属性 布尔值 默认为true</span></span><br><span class="line">    extent:[],<span class="comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span></span><br><span class="line">    zIndex:<span class="number">2</span>,<span class="comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span></span><br><span class="line">    minResolution:<span class="number">3</span>,<span class="comment">//该层可见的最小分辨率(包括在内)</span></span><br><span class="line">    maxResolution:<span class="number">6</span>,<span class="comment">//该层可见的最大分辨率（包括在内）</span></span><br><span class="line">    renderOrder:,<span class="comment">//呈现顺序。函数用于在呈现前对特性进行排序。默认情况下，特性是按照创建它们的顺序绘制的。使用null来避免排序，但是得到一个未定义的绘制顺序</span></span><br><span class="line">    renderBuffer:<span class="number">100</span>,<span class="comment">//默认为100 缓冲区</span></span><br><span class="line">    renderMode:<span class="string">&#x27;vector&#x27;</span>,<span class="comment">//默认为&#x27;vector&#x27; 矢量图层的渲染模式</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.VectorSource(),<span class="comment">//图层源</span></span><br><span class="line">    map:  ,<span class="comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用</span></span><br><span class="line">    declutter:<span class="literal">false</span>,<span class="comment">//默认为false 整理图片和文字。清理应用于所有图像和文本样式，优先级由样式的z-index定义。z-index指数越低，优先级越高</span></span><br><span class="line">    style:<span class="keyword">new</span> ol.style.Style(),<span class="comment">//图层样式</span></span><br><span class="line">    updateWhileAnimating:<span class="literal">false</span>,<span class="comment">//默认为false </span></span><br><span class="line">    updateWhileInteracting:<span class="literal">false</span>,<span class="comment">//默认为false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中渲染模式有两种：</p><ul><li><code>&#39;image&#39;</code>：矢量图层被渲染为图像。性能很好，但是点符号和文本总是随着视图旋转，像素在缩放动画中缩放</li><li><code>&#39;vector&#39;</code>：矢量图层被呈现为向量。即使在动画期间也有最准确的渲染，但性能较慢</li></ul><h4 id="1-Feature"><a href="#1-Feature" class="headerlink" title="1)Feature"></a>1)Feature</h4><p>用于地理特征的矢量元素，具有几何<code>geometry()</code>和其他属性，类似于矢量文件格式(如<code>GeoJSON</code>)中的特性。</p><ul><li>添加矢量元素：通过<code>vectorsource().addFeature(feature)</code>添加到矢量图层上。</li><li>移除图层所有的矢量元素：<code>vectorsource().clear()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">  geometry: <span class="keyword">new</span> ol.geom.Polygon(polyCoords),</span><br><span class="line">  labelPoint: <span class="keyword">new</span> ol.geom.Point(labelCoords),</span><br><span class="line">  style:<span class="keyword">new</span> ol.style.Style(&#123;&#125;),</span><br><span class="line">  name: <span class="string">&#x27;My Polygon&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>定义矢量元素：<code>new ol.Feature()</code>，；</p></li><li><p>矢量元素样式：</p><ul><li>设置样式：<code>new ol.style.Style()</code>，也可以使用<code>feature.setStyle(style)</code>，未定义的话，可以使用它的盛放容器<code>layer</code>的样式；</li><li>获取样式：<code>feature.getStyle()</code></li></ul></li><li><p>一个<code>feature</code>只有一个默认几何属性<code>geometry</code>，可以有任意数量的命名几何图形：</p><ul><li>获取默认几何属性：<code>feature.getGeometry()</code>；</li><li>设置几何属性：<code>feature.setGeometry(geometry)</code>；</li><li>设置几何属性名：<code>feature.setGeometryName(name)</code>；</li><li>矢量元素要呈现的几何图形的特征属性、几何图形或函数由<code>geometry</code>属性选项设定，主要有以下几种子类模块：<ul><li><code>ol.geom.Circle()</code>：圆形</li><li><code>ol.geom.Geometry()</code>：几何图形</li><li><code>ol.geom.GeometryCollection()</code>：</li><li><code>ol.geom.LinearRing()</code>：环线</li><li><code>ol.geom.LineString()</code>：线段</li><li><code>ol.geom.Point()</code>：点</li><li><code>ol.geom.Polygon()</code>：多边形</li><li><code>ol.geom.MultiLineString()</code></li><li><code>ol.geom.MultiPoint()</code></li><li><code>ol.geom.MultiPolygon()</code></li><li><code>ol.geom.SimpleGeometry()</code></li></ul></li></ul></li><li><p><code>feature</code>的稳定标识符<code>ID</code>：</p><ul><li>设置<code>feature</code>的<code>id</code>：<code>feature.setId(id)</code>，当<code>id</code>可能相同时，可以这样加以区分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature.setId(id + <span class="string">&quot;featureName&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>获取<code>feature</code>的<code>id</code>：<code>vector.getSource().getFeatureById()</code>或者<code>vectorsource().getFeatureById()</code></li></ul></li><li><p><code>feature</code>的<code>set(key, value, opt_silent)</code>：</p><ul><li>设置<code>key</code>：<code>feature.set(&quot;keyName&quot;,name)</code>，<code>keyName</code>是字符串，自己根据情况设置</li><li>获取<code>key</code>：之前设置的什么，就获取什么，<code>feature.get(&quot;keyName&quot;)</code>，会得到设置的值</li></ul></li></ul><h4 id="2-Style"><a href="#2-Style" class="headerlink" title="2)Style"></a>2)Style</h4><p>矢量特征呈现样式的容器。在重新呈现使用样式的特性或图层之前，通过<code>set*()</code>方法对样式及其子元素所做的任何更改都不会生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    geometry:<span class="keyword">new</span> ol.geom.LineString(),<span class="comment">//有以上ol.geom模块的几何图形可以参考</span></span><br><span class="line">    fill:<span class="keyword">new</span> ol.style.Fill(&#123;<span class="comment">//填充样式</span></span><br><span class="line">        color:color<span class="comment">//颜色、渐变或图案</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    image:<span class="keyword">new</span> ol.style.Image(&#123;<span class="comment">//图像</span></span><br><span class="line">        opacity:,<span class="comment">//数值</span></span><br><span class="line">        rotateWithView:,<span class="comment">//布尔值</span></span><br><span class="line">        rotation:,<span class="comment">//数值</span></span><br><span class="line">        scale:<span class="comment">//数值</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    image:<span class="keyword">new</span> ol.style.Icon(&#123;<span class="comment">//可以使用图片资源</span></span><br><span class="line">        anchor:[<span class="number">0.5</span>，<span class="number">0.5</span>]，<span class="comment">//锚。默认值是图标中心 默认值是[0.5,0.5]</span></span><br><span class="line">        anchorOrigin:<span class="string">&#x27;top-left&#x27;</span>,<span class="comment">//锚的原点:左下角、右下角、左上方或右上方。默认是左上</span></span><br><span class="line">        anchorXUnits:<span class="string">&#x27;fraction&#x27;</span>,<span class="comment">//指定锚点x值的单位。&#x27;fraction&#x27;的值表示x值是图标的&#x27;fraction&#x27;。&#x27;pixels&#x27;的值表示像素中的x值,默认为&#x27;fraction&#x27;</span></span><br><span class="line">        anchorYUnits:<span class="string">&#x27;fraction&#x27;</span>,<span class="comment">//指定锚点y值的单位。&#x27;fraction&#x27;的值表示y值是图标的&#x27;fraction&#x27;。&#x27;pixels&#x27;的值表示像素中的y值,默认为&#x27;fraction&#x27;</span></span><br><span class="line">        color:color,<span class="comment">//颜色、渐变或图案</span></span><br><span class="line">        crossOrigin:,</span><br><span class="line">        img:,<span class="comment">//图标的图像对象  如果没有提供src选项，则必须已经加载了提供的图像</span></span><br><span class="line">        imgSize:,<span class="comment">//</span></span><br><span class="line">        offset:[<span class="number">0</span>,<span class="number">0</span>].<span class="comment">//偏移值，默认为[0,0]</span></span><br><span class="line">        offsetOrigin:<span class="string">&#x27;top-left&#x27;</span>,<span class="comment">//偏移量的原点，bottom-left, bottom-right, top-left or top-right. 默认是`top-left`</span></span><br><span class="line">        opacity:<span class="number">1</span>,<span class="comment">//默认是1  （0，1）</span></span><br><span class="line">        scale:<span class="number">1</span>,<span class="comment">//默认是1</span></span><br><span class="line">        rotation：<span class="number">0</span>，<span class="comment">//以弧度旋转(顺时针方向正旋转) 默认为0</span></span><br><span class="line">        size：,<span class="comment">//图标大小(以像素为单位)。可与偏移量一起用于定义要从原点(sprite)图标图像使用的子矩形</span></span><br><span class="line">        src:<span class="string">&#x27;&#x27;</span>,<span class="comment">//图像URL源</span></span><br><span class="line">        rotateWithView：<span class="literal">false</span>,<span class="comment">//是否旋转视图中的图标  默认为false            </span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    stroke:<span class="keyword">new</span> ol.style.Stroke(&#123;<span class="comment">//描绘</span></span><br><span class="line">        width: ,<span class="comment">//宽</span></span><br><span class="line">        color:color,<span class="comment">//颜色、渐变或图案</span></span><br><span class="line">        lineCap:<span class="string">&#x27;round&#x27;</span>,<span class="comment">//线帽风格  butt, round, 或者 square 默认 round</span></span><br><span class="line">        lineJoin:<span class="string">&#x27;round&#x27;</span>,<span class="comment">//线连接方式 bevel, round, 或者 miter 默认 round</span></span><br><span class="line">        lineDash： []，<span class="comment">//线间隔模式 这个变化与分辨率有关 默认为undefined Internet Explorer 10和更低版本不支持</span></span><br><span class="line">        lineDashOffset:<span class="number">0</span>,<span class="comment">//线段间隔偏移 默认0</span></span><br><span class="line">        miterLimit:<span class="number">10</span>,<span class="comment">// 默认10                   </span></span><br><span class="line">    &#125;),</span><br><span class="line">        </span><br><span class="line">    text:<span class="keyword">new</span> ol.style.Text(&#123;<span class="comment">//文字</span></span><br><span class="line">        font:<span class="string">&#x27;&#x27;</span>,<span class="comment">//默认是&#x27;10px sans-serif&#x27;</span></span><br><span class="line">        text:<span class="string">&#x27;&#x27;</span>,<span class="comment">//文本内容</span></span><br><span class="line">        textAlign：<span class="string">&#x27;center&#x27;</span>,<span class="comment">//文本对齐 &#x27;left&#x27;, &#x27;right&#x27;, &#x27;center&#x27;, &#x27;end&#x27; &#x27;start&#x27;.针对于placement: &#x27;point&#x27;,默认为&#x27;center&#x27;；针对于placement: &#x27;line&#x27;，默认是让渲染器选择不超过maxAngle的位置</span></span><br><span class="line">        textBaseline:<span class="string">&#x27;middle&#x27;</span>,<span class="comment">//文本基线  &#x27;bottom&#x27;, &#x27;top&#x27;, &#x27;middle&#x27;, &#x27;alphabetic&#x27;, &#x27;hanging&#x27;, &#x27;ideographic&#x27; 默认&#x27;middle&#x27;</span></span><br><span class="line">        placement:<span class="string">&#x27;&#x27;</span>,<span class="comment">//文本布置</span></span><br><span class="line">        scale：，</span><br><span class="line">        padding:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],<span class="comment">//文本周围的像素填充。数组中值的顺序是[top, right, bottom, left]</span></span><br><span class="line">        fill:<span class="keyword">new</span> ol.style.Fill(),<span class="comment">//如果未设置，默认未#333</span></span><br><span class="line">        stroke:<span class="keyword">new</span> ol.style.Stroke(),</span><br><span class="line">        offsetX:<span class="number">0</span>,<span class="comment">//水平文本偏移量(以像素为单位)。正值将把文本右移。默认0</span></span><br><span class="line">        offsetY:<span class="number">0</span>,<span class="comment">//垂直文本偏移量(以像素为单位)。正值会将文本向下移动。默认0</span></span><br><span class="line">        rotation：<span class="number">0</span>，<span class="comment">//默认0</span></span><br><span class="line">        rotateWithView:<span class="literal">false</span>,</span><br><span class="line">        backgroundFill:  ,<span class="comment">//当placement:“point”时，填充文本背景的样式。默认为无填充 </span></span><br><span class="line">        backgroundStroke: ,<span class="comment">//当placement:“point”时，描绘文本背景的样式。默认为无描绘</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    zIndex:,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>ol.geom.Geomtry()</code>是矢量几何对象的抽象基类，通常只用于创建子类，而不是在应用程序中实例化。它的方法如下：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>set(key, value)</td><td>设置值。<code>key</code>：关键名字（字符串）；<code>value</code>：值</td></tr><tr><td>get(key)</td><td>获取值</td></tr><tr><td>setProperties(values, opt_silent)</td><td>设置键值对的集合。注意，这将更改任何现有属性并添加新属性(它不会删除任何现有属性)。</td></tr><tr><td>getProperties()</td><td>获取一个包含所有属性名和值的对象</td></tr><tr><td>getClosestPoint(point, opt_closestPoint)</td><td>将几何图形的最近点作为坐标返回到经过的点</td></tr><tr><td>getExtent(opt_extent)</td><td>获取几何的范围</td></tr><tr><td>getKeys()</td><td>获取对象属性名称列表</td></tr><tr><td>getRevision()</td><td>获取此对象的版本号。每次修改对象时，它的版本号都会增加。</td></tr><tr><td>intersectsCoordinate(coordinate)</td><td>如果该几何图形包含指定的坐标，则返回<code>true</code>。如果坐标位于几何图形的边界上，则返回<code>false</code></td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>simplify(tolerance)</td><td>创建这个几何图形的简化版本</td></tr><tr><td>transform(source, destination)</td><td>将圆的每个坐标从一个坐标系变换到另一个坐标系。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数。在内部，一个圆目前由两点表示:圆心<code>[cx, cy]</code>和圆心右边的点<code>[cx + r, cy]</code>。这个<code>transform</code>函数只变换这两点。所以得到的几何形状也是一个圆，而这个圆并不等同于通过变换原圆的每一点得到的形状</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><p>以下是<code>ol.geom.Geomtry</code>抽象基类创建的常见<a href="https://link.segmentfault.com/?url=https://openlayers.org/en/latest/apidoc/module-ol_geom_SimpleGeometry-SimpleGeometry.html">子类模块</a>：</p><h5 id="1）ol-geom-Circle"><a href="#1）ol-geom-Circle" class="headerlink" title="1）ol.geom.Circle()"></a>1）ol.geom.Circle()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.Circle(&#123;</span><br><span class="line">    center:[],<span class="comment">//中心点</span></span><br><span class="line">    radius:<span class="number">2</span>,<span class="comment">//圆半径</span></span><br><span class="line">    layout:<span class="comment">//布局</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>getCenter()</td><td>返回中心坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>layout</code></td></tr><tr><td>getRadius()</td><td>返回圆的半径</td></tr><tr><td>getType()</td><td>获取这个几何图形的类型</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和经过的区域是否相交，返回布尔值</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标。<code>angle</code>：以弧度为单位的旋转角度；<code>anchor</code>：旋转中心</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。<code>sx</code>：x方向上的缩放因子；<code>sy</code>：Y轴上的缩放因子；<code>opt_anchor</code>：缩放原点(默认为几何范围的中心)</td></tr><tr><td>setCenter(center)</td><td>将圆心设置为<code>coordinate</code></td></tr><tr><td>setCenterAndRadius(center, radius, opt_layout)</td><td>设置圆的中心(<code>coordinate</code>)和半径(<code>number</code>)</td></tr><tr><td>setRadius(radius)</td><td>设置圆的半径。半径的单位是投影的单位。</td></tr><tr><td>transform(source, destination)</td><td>将圆的每个坐标从一个坐标系变换到另一个坐标系。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数。在内部，一个圆目前由两点表示:圆心<code>[cx, cy]</code>和圆心右边的点<code>[cx + r, cy]</code>。这个<code>transform</code>函数只变换这两点。所以得到的几何形状也是一个，而这个圆并不等同于通过变换原圆的每一点得到的形状</td></tr><tr><td>translate(deltaX, deltaY)</td><td>f翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h5 id="2）ol-geom-LineString-coordinates-opt-layout"><a href="#2）ol-geom-LineString-coordinates-opt-layout" class="headerlink" title="2）ol.geom.LineString(coordinates, opt_layout)"></a>2）ol.geom.LineString(coordinates, opt_layout)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.LineString(&#123;</span><br><span class="line">    coordinate:[],<span class="comment">//坐标。对于内部使用，平面坐标结合opt_layout也可以接受</span></span><br><span class="line">    layout: <span class="comment">//Layout</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>appendCoordinate(coordinate)</td><td>将经过的坐标追加到<code>linestring</code>的坐标里</td></tr><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>forEachSegment(callback)</td><td>遍历每条线段，调用提供的回调函数。如果回调函数返回一个真值，则函数立即返回该值。否则函数返回<code>false</code></td></tr><tr><td>getCoordinateAt(fraction, opt_dest)</td><td>沿着线段返回给定部分的坐标。<code>fraction</code>是一个介于0和1之间的数字，其中0是线段的开始，1是线段的末尾</td></tr><tr><td>getCoordinates()</td><td>返回线段的坐标</td></tr><tr><td>setCoordinates(coordinates, opt_layout)</td><td>s设置线段的坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>Layout</code></td></tr><tr><td>getLength()</td><td>在投影平面上返回线段的长度</td></tr><tr><td>getType()</td><td>得到这个几何图形的类型</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h5 id="3）-ol-geom-Point-coordinates-opt-layout"><a href="#3）-ol-geom-Point-coordinates-opt-layout" class="headerlink" title="3）)ol.geom.Point(coordinates, opt_layout)"></a>3）)<code>ol.geom.Point(coordinates, opt_layout)</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.Point()</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>getCoordinates()</td><td>返回点的坐标</td></tr><tr><td>setCoordinates(coordinates, opt_layout)</td><td>设置点的坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>Layout</code></td></tr><tr><td>getType()</td><td>得到这个几何图形的类型</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><p>4）ol.geom.Polygon()</p><p>多边形几何图形。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.geom.Polygon(&#123;</span><br><span class="line">    coordinates:[],<span class="comment">//定义多边形的线性环的数组</span></span><br><span class="line">    layout:,</span><br><span class="line">    ends:[],<span class="comment">//末端（平面坐标内部使用）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>applyTransform(transformFn)</td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td>appendLinearRing(linearRing)</td><td>在多边形上追加线性环</td></tr><tr><td>clone()</td><td>把几何图形复制一份</td></tr><tr><td>getCoordinates()</td><td>返回点的坐标</td></tr><tr><td>setCoordinates(coordinates, opt_layout)</td><td>设置点的坐标</td></tr><tr><td>getFirstCoordinate()</td><td>返回几何图形的第一个坐标</td></tr><tr><td>getLastCoordinate()</td><td>返回几何图形的最后一个坐标</td></tr><tr><td>getInteriorPoint()</td><td>返回多边形的内部点</td></tr><tr><td>getLinearRing(index)</td><td>返回多边形几何的第n个线性环。如果给定索引超出范围，则返回null。外部线性环在索引0处可用，而内部环在索引1及以上处可用</td></tr><tr><td>getLinearRings()</td><td>返回多边形的线性环</td></tr><tr><td>getLinearRingCount()</td><td>返回多边形的环数，这包括外部环和任何内部环</td></tr><tr><td>getLayout()</td><td>返回几何图形的<code>Layout</code></td></tr><tr><td>getType()</td><td>得到这个几何图形的类型</td></tr><tr><td>getArea()</td><td>返回投影平面上多边形的面积</td></tr><tr><td>intersectsExtent(extent)</td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td>rotate(angle, anchor)</td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td>scale(sx, opt_sy, opt_anchor)</td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor`：缩放原点(默认为几何范围的中心)</td></tr><tr><td>translate(deltaX, deltaY)</td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h5 id="4）ol-layer-VectorTile"><a href="#4）ol-layer-VectorTile" class="headerlink" title="4）ol.layer.VectorTile()"></a>4）<code>ol.layer.VectorTile()</code></h5><p>矢量平铺图层。</p><p>图层用于客户端呈现矢量平铺数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.layer.Vector(&#123;<span class="comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span></span><br><span class="line">    opacity:<span class="number">2</span>,<span class="comment">//透明度 区间范围为(0, 1) 默认为1</span></span><br><span class="line">    visible:<span class="literal">true</span>,<span class="comment">//显示属性 布尔值 默认为true</span></span><br><span class="line">    extent:[],<span class="comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span></span><br><span class="line">    zIndex:<span class="number">2</span>,<span class="comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span></span><br><span class="line">    minResolution:<span class="number">3</span>,<span class="comment">//该层可见的最小分辨率(包括在内)</span></span><br><span class="line">    maxResolution:<span class="number">6</span>,<span class="comment">//该层可见的最大分辨率（包括在内）</span></span><br><span class="line">    renderOrder:,<span class="comment">//呈现顺序。函数用于在呈现前对特性进行排序。默认情况下，特性是按照创建它们的顺序绘制的。使用null来避免排序，但是得到一个未定义的绘制顺序</span></span><br><span class="line">    renderBuffer:<span class="number">100</span>,<span class="comment">//默认为100 缓冲区</span></span><br><span class="line">    renderMode:<span class="string">&#x27;vector&#x27;</span>,<span class="comment">//默认为&#x27;vector&#x27; 矢量图层的渲染模式</span></span><br><span class="line">    source:<span class="keyword">new</span> ol.source.VectorSource(),<span class="comment">//图层源</span></span><br><span class="line">    map:  ,<span class="comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用</span></span><br><span class="line">    declutter:<span class="literal">false</span>,<span class="comment">//默认为false 整理图片和文字。清理应用于所有图像和文本样式，优先级由样式的z-index定义。z-index指数越低，优先级越高</span></span><br><span class="line">    style:<span class="keyword">new</span> ol.style.Style(),<span class="comment">//图层样式</span></span><br><span class="line">    updateWhileAnimating:<span class="literal">false</span>,<span class="comment">//默认为false </span></span><br><span class="line">    updateWhileInteracting:<span class="literal">false</span>,<span class="comment">//默认为false</span></span><br><span class="line">    preload:,<span class="comment">//</span></span><br><span class="line">    renderOrder:,<span class="comment">//</span></span><br><span class="line">    useInterimTilesOnError:<span class="literal">true</span>,<span class="comment">//错误时使用临时贴片 默认true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="view（视图）"><a href="#view（视图）" class="headerlink" title="view（视图）"></a>view（视图）</h2><p>设置视图<code>view</code>由三种状态决定：<code>center</code>中心、<code>resolution</code>分辨率、<code>rotation</code>旋转，每个状态都有相应的<code>getter</code>和<code>setter</code>。</p><p>可以在视图里定义地图中心点、层级、分辨率、旋转以及地图投影等。</p><p>视图对象受到约束，主要有<strong>分辨率约束、旋转约束、中心约束</strong>。</p><ul><li><p><strong>分辨率约束</strong></p><p>切换到特定分辨率时，特定分辨率主要由以下选项决定：<code>resolutions</code>、<code>maxResolution</code>、<code>maxZoom</code>、<code>zoomFactor</code>。如果已经设置<code>resolutions</code>，其他选项就可忽略。</p></li><li><p><strong>旋转约束</strong></p><p>会切换到特定的角度。它由以下选项决定:<code>enableRotation</code>和<code>constrainRotation</code>。在默认情况下，当接近水平线时，旋转值会突然变为零。</p></li><li><p><strong>中心约束</strong></p><p>由范围选项决定。默认情况下，中心完全不受约束。</p></li></ul><h3 id="1-视图选项"><a href="#1-视图选项" class="headerlink" title="1)视图选项"></a>1)视图选项</h3><h4 id="1）中心点center"><a href="#1）中心点center" class="headerlink" title="1）中心点center"></a>1）中心点center</h4><p>视图的初始中心，中心的坐标系由投影<code>projection</code>指定，如果未设置此参数，则不会获取层源，但是之后可以使用<code>#setCenter</code>设置中心。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center = ol.proj.fromLonLat([longitude, latitude]);<span class="comment">//未限制地图范围时</span></span><br><span class="line"><span class="keyword">let</span> center = ol.proj.transform([minX, minY, maxX, maxY]，<span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="string">&#x27;EPSG:3857&#x27;</span>);<span class="comment">//限制地图显示范围时设置中心点  X代表经度， Y代表纬度</span></span><br></pre></td></tr></table></figure><h4 id="2）投影projection"><a href="#2）投影projection" class="headerlink" title="2）投影projection"></a>2）投影<code>projection</code></h4><p>视图拥有<code>projection</code>投影，投影决定了中心的坐标系，其单位决定了分辨率的单位(每个像素的投影单位)。默认投影为球面墨卡托(<code>EPSG:3857</code>)。</p><ul><li>获取投影：<code>map.getView().getProjection()</code></li><li>设置投影：<code>map.getView().setProjection()</code></li></ul><h4 id="3）分辨率resolution"><a href="#3）分辨率resolution" class="headerlink" title="3）分辨率resolution"></a>3）分辨率<code>resolution</code></h4><p>视图的初始分辨率，单位是每像素的投影单位(例如米每像素)。</p><p>另一种方法是设置缩放<code>zoom</code>。缩放可以设置：最大层级<code>maxZoom</code>、最小层级<code>minZoom</code>以及当前层级<code>zoom</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">    <span class="comment">// center: center,</span></span><br><span class="line">    zoom: curZoom,</span><br><span class="line">    minZoom: minZoom,</span><br><span class="line">    maxZoom: maxZoom,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>获取分辨率：<code>map.getView().getResolution()</code></li><li>获取给定范围(以映射单元为单位)和大小(以像素为单位)的分辨率：<code>map.getView().getResolutionForExtent(extent, opt_size)</code>；</li><li>获取缩放级别的分辨率：<code>map.getView().getResolutionForZoom(zoom)</code>；</li><li>获取视图最大值分辨率：<code>map.getView().getMaxResolution()</code>；</li><li>获取视图最小值分辨率：<code>map.getView().getMinResolution()</code>；</li><li>设置分辨率：<code>map.getView().setResolution(resolution)</code></li></ul><h4 id="4）旋转rotation"><a href="#4）旋转rotation" class="headerlink" title="4）旋转rotation"></a>4）旋转<code>rotation</code></h4><p>初始旋转角度为弧度(正顺时针旋转，0表示向北)。</p><ul><li>获取旋转调用方法<code>map.getView().getRotation()</code>；</li><li>设置旋转调用方法<code>map.getView().setRotation(rotation);</code></li></ul><h4 id="5-缩放zoom"><a href="#5-缩放zoom" class="headerlink" title="5)缩放zoom"></a>5)缩放<code>zoom</code></h4><p>仅在未定义分辨率时使用。</p><p>缩放级别用于计算视图的初始分辨率。初始分辨率是使用<code>#constrainResolution</code>方法确定的。</p><ul><li>获取缩放层级：<code>map.getView().getZoom()</code>；</li><li>获取最大缩放层级：<code>map.getView().getMaxZoom()</code>；</li><li>获取最小缩放层级：<code>map.getView().getMinZoom()</code>；</li><li>获取缩放层级的分辨率：<code>map.getView().getZoomForResolution(resolution)</code>；</li><li>设置缩放层级：<code>map.getView().setZoom(zoom)</code>；</li><li>设置最大缩放层级：<code>map.getView().setMaxZoom(zoom)</code>；</li><li>设置最小缩放层级：<code>map.getView().setMinZoom(zoom)</code>；</li></ul><h4 id="6-旋转约束constrainRotation"><a href="#6-旋转约束constrainRotation" class="headerlink" title="6)旋转约束constrainRotation"></a>6)旋转约束<code>constrainRotation</code></h4><p>旋转约束。<code>false</code>为未约束，<code>true</code>为未约束但是接近于0。数字限制了旋转到该值的数量。</p><h4 id="7-启用旋转enableRotation"><a href="#7-启用旋转enableRotation" class="headerlink" title="7)启用旋转enableRotation"></a>7)启用旋转<code>enableRotation</code></h4><p>如果为<code>false</code>，则始终使用将旋转设置为零的旋转约束。如果启用为<code>false</code>，则没有效果。</p><h4 id="8-约束范围extent"><a href="#8-约束范围extent" class="headerlink" title="8)约束范围extent"></a>8)约束范围<code>extent</code></h4><p>中心点不能超出这个范围。</p><h3 id="2）视图方法"><a href="#2）视图方法" class="headerlink" title="2）视图方法"></a>2）视图方法</h3><h4 id="1）动画"><a href="#1）动画" class="headerlink" title="1）动画"></a>1）动画</h4><blockquote><p>单个动画</p></blockquote><p>动画视图。视图的中心、缩放(或分辨率)和旋转可以通过动画来实现视图状态之间的平滑转换。</p><p>默认情况下，动画持续时间为1秒，并且类型为<code>in-and-out easing</code>。</p><p>通过设置持续时间<code>duration</code>(以毫秒为单位)和缓动选项<code>easing</code>(参见模块:<a href="https://link.segmentfault.com/?url=https://openlayers.org/en/latest/apidoc/module-ol_easing.html">ol/easing</a>)来定制此行为。</p><p><code>easing</code>:</p><ul><li><code>easeIn</code>：平缓加速</li><li><code>easeOut</code>：平缓减速</li><li><code>inAndOut</code>：平缓开始，先加速，再减速</li><li><code>linear</code>：匀速</li><li><code>upAndDown</code>：平缓开始，加速，最后再减速。这与模块的一般行为相同:<code>ol/easing~inAndOut</code>，但是最终的减速被延迟了</li></ul><blockquote><p>多个动画</p></blockquote><p>要将多个动画连接在一起，请使用多个动画对象调用该方法。</p><p>如果提供一个函数作为<code>animate</code>方法的最后一个参数，它将在动画系列的末尾被调用。</p><p>如果动画系列独立完成，回调函数将被调用<code>true</code>;如果动画系列被取消，回调函数将被调用<code>false</code>。</p><h4 id="2）取消动画cancelAnimations"><a href="#2）取消动画cancelAnimations" class="headerlink" title="2）取消动画cancelAnimations()"></a>2）取消动画<code>cancelAnimations()</code></h4><p>取消任何正在进行的动画。</p><h4 id="3）getAnimating"><a href="#3）getAnimating" class="headerlink" title="3）getAnimating()"></a>3）<code>getAnimating()</code></h4><p>确定视图是否处于动画状态。返回布尔值。</p><h4 id="4）计算范围calculateExtent-opt-size"><a href="#4）计算范围calculateExtent-opt-size" class="headerlink" title="4）计算范围calculateExtent(opt_size)"></a>4）计算范围<code>calculateExtent(opt_size)</code></h4><p>计算当前视图状态的范围和传递的大小。<code>opt_size</code>指盒子像素尺寸，如未提供，将使用此视图的第一个映射的大小。</p><p>尺寸是盒子的像素尺寸，计算的范围应该与之匹配。</p><p>想要获取整个底图映射的范围，使用<code>map.getSize()</code></p><h4 id="5）centerOn-coordinate-size-position"><a href="#5）centerOn-coordinate-size-position" class="headerlink" title="5）centerOn(coordinate, size, position)"></a>5）<code>centerOn(coordinate, size, position)</code></h4><p>以坐标和视图位置为中心。</p><ul><li><code>coordinate</code>：坐标点</li><li><code>size</code>：盒子像素尺寸</li><li><code>position</code>：视图的居中位置</li></ul><h2 id="interaction-交互"><a href="#interaction-交互" class="headerlink" title="interaction(交互)"></a><code>interaction</code>(交互)</h2><p>通常只用于创建子类，而不在应用程序中实例化。</p><p>用于更改映射状态的用户操作。有些类似于控件，但不与<code>DOM</code>元素关联。</p><p>虽然交互没有<code>DOM</code>元素，但是它们中的一些会呈现向量，因此在屏幕上是可见的。</p><p>添加交互动作使用：<code>map.addInteraction(interaction);</code></p><p><code>OpenLayers </code>中可实例化的子类及其功能如下：</p><table><thead><tr><th>可实例化子类</th><th>功能</th></tr></thead><tbody><tr><td>doubleclickzoom interaction</td><td>双击放大交互功能</td></tr><tr><td>draganddrop</td><td>以“拖文件到地图中”的交互添加图层</td></tr><tr><td>dragbox</td><td>拉框，用于划定一个矩形范围，常用于放大地图</td></tr><tr><td>dragpan</td><td>拖拽平移地图</td></tr><tr><td>dragrotateandzoom</td><td>拖拽方式进行缩放和旋转地图</td></tr><tr><td>dragrotate</td><td>拖拽方式旋转地图</td></tr><tr><td>dragzoom</td><td>拖拽方式缩放地图</td></tr><tr><td>draw</td><td>绘制地理要素功能</td></tr><tr><td>interaction defaults</td><td>默认添加的交互功能</td></tr><tr><td>keyboardpan</td><td>键盘方式平移地图</td></tr><tr><td>keyboardzoom</td><td>键盘方式缩放地图</td></tr><tr><td>select</td><td>选择要素功能</td></tr><tr><td>modify</td><td>更改要素</td></tr><tr><td>mousewheelzoom</td><td>鼠标滚轮缩放功能</td></tr><tr><td>pinchrotate</td><td>手指旋转地图，针对触摸屏</td></tr><tr><td>pinchzoom</td><td>手指进行缩放，针对触摸屏</td></tr><tr><td>pointer</td><td>鼠标的用户自定义事件基类</td></tr><tr><td>snap</td><td>鼠标捕捉，当鼠标距离某个要素一定距离之内，自动吸附到要素</td></tr></tbody></table><h3 id="1）默认交互功能ol-interaction-defaylts"><a href="#1）默认交互功能ol-interaction-defaylts" class="headerlink" title="1）默认交互功能ol.interaction.defaylts()"></a>1）默认交互功能<code>ol.interaction.defaylts()</code></h3><p>主要是最为常用的功能，如缩放、平移和旋转地图等，具体功能有如下这些：</p><table><thead><tr><th>默认交互</th><th>功能</th></tr></thead><tbody><tr><td>ol.interaction.DragRotate</td><td>鼠标拖拽旋转，一般配合一个键盘按键辅助</td></tr><tr><td>ol.interaction.DragZoom</td><td>鼠标拖拽缩放，一般配合一个键盘按键辅助</td></tr><tr><td>ol.interaction.DoubleClickZoom</td><td>鼠标或手指双击缩放地图</td></tr><tr><td>ol.interaction.PinchRotate</td><td>两个手指旋转地图，针对触摸屏</td></tr><tr><td>ol.interaction.PinchZoom</td><td>两个手指缩放地图，针对触摸屏</td></tr><tr><td>ol.interaction.DragPan</td><td>鼠标或手指拖拽平移地图</td></tr><tr><td>ol.interaction.KeyboardZoom</td><td>使用键盘 <code>+</code> 和 <code>-</code> 按键进行缩放</td></tr><tr><td>ol.interaction.KeyboardPan</td><td>使用键盘方向键平移地图</td></tr><tr><td>ol.interaction.MouseWheelZoom</td><td>鼠标滚轮缩放地图</td></tr></tbody></table><h3 id="2）针对矢量图层元素的交互功能"><a href="#2）针对矢量图层元素的交互功能" class="headerlink" title="2）针对矢量图层元素的交互功能"></a>2）针对矢量图层元素的交互功能</h3><h4 id="1）选择ol-interaction-Select"><a href="#1）选择ol-interaction-Select" class="headerlink" title="1）选择ol.interaction.Select()"></a>1）选择<code>ol.interaction.Select()</code></h4><p>选择矢量元素的交互功能。</p><p>默认情况下，所选矢量元素的样式不相同，因此这种交互可以用于可视化高亮显示，以及为其他操作(如修改或输出)选择特性。</p><p>选定的矢量元素将被添加到内部非托管图层。</p><p>有三种方式控制矢量元素的选择：</p><ul><li>使用由<code>condition</code>定义的浏览器事件和<code>toggle</code>切换的<code>add</code>/<code>remove</code>以及<code>multi</code>选项</li><li>一个<code>layer</code>过滤器</li><li>一个使用<code>filter</code>选项的进一步矢量元素过滤器</li></ul><h4 id="2）绘制ol-interaction-Draw"><a href="#2）绘制ol-interaction-Draw" class="headerlink" title="2）绘制ol.interaction.Draw()"></a>2）绘制<code>ol.interaction.Draw()</code></h4><p>用于绘制特征几何图形的交互功能。</p><p>绘制交互允许绘制几何地理要素，可选一个参数为对象，可包含参数如下：</p><ul><li><code>features</code>：绘制的要素的目标集合；</li><li><code>source</code>：绘制的要素的目标图层源；</li><li><code>snapTolerance</code>：自动吸附完成点的像素距离，也就是说当鼠标位置距离闭合点小于该值设置的时候，会自动吸附到闭合点，默认值是 <code>12</code>；</li><li><code>type</code>：绘制的地理要素类型，<code>ol.geom.GeometryType</code>类型，包含 <code>Point</code>、 <code>LineString</code>、 <code>Polygon</code>、<code>MultiPoint</code>、<code>MultiLineString</code> 或者 <code>MultiPolygon</code>；</li><li><code>minPointsPerRing</code>：绘制一个多边形需要的点数最小值，数值类型，默认是 <code>3</code>；</li><li><code>style</code>：要素素描的样式；</li><li><code>geometryName</code>：绘制的地理要素的名称，<code>string</code>类型</li></ul><h4 id="3-修改ol-interaction-Modify"><a href="#3-修改ol-interaction-Modify" class="headerlink" title="3)修改ol.interaction.Modify()"></a>3)修改<code>ol.interaction.Modify()</code></h4><p>用于修改矢量元素几何图形的交互功能。</p><p>若想修改已添加到存在的矢量源中的矢量元素，需要使用<code>modify</code>选项构建修改交互动作。</p><p>如若想修改集合中的矢量元素（比如用选择交互的集合），需要使用<code>features</code>选项构建交互。该交互必须使用<code>source</code>或者<code>features</code>构建。</p><p>默认情况下，当按下<code>alt</code>键时，交互允许删除顶点。想要使用不同的删除条件配置交互，请使用<code>deleteCondition</code>选项。</p><h2 id="controler-控件"><a href="#controler-控件" class="headerlink" title="controler(控件)"></a>controler(控件)</h2><p>控件是一个可见的小部件，其DOM元素位于屏幕上的固定位置。它们可以包含用户输入(按钮)，或者只是提供信息;位置是使用CSS确定的。这是一个虚基类，不负责实例化特定的控件。</p><p>默认情况下，这些元素被放置在具有CSS类名称<code>ol-overlaycontainer-stopevent</code>的容器中，但是可以使用任何外部DOM元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myControl = <span class="keyword">new</span> ol.control.Control(&#123;<span class="comment">//定义一个控件</span></span><br><span class="line">    element:myElement</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//然后添加到地图上</span></span><br><span class="line">map.addControl(myControl);</span><br></pre></td></tr></table></figure><p>主要的属性选项有：</p><ul><li><code>element</code>：DOM元素，元素是控件的容器元素。只有在开发自定义控件时才需要指定这一点</li><li><code>render</code>：重新呈现控件时调用的函数。这在<code>requestAnimationFrame</code>回调中调用</li><li><code>target</code>：DOM元素，想要控件在映射的视图端口之外呈现，需要指定目标对象</li></ul><p>其中包含的控件有：</p><table><thead><tr><th>控件</th><th>功能</th></tr></thead><tbody><tr><td>controldefaults</td><td>地图默认包含的控件，包含缩放控件和旋转控件</td></tr><tr><td>fullscreencontrol</td><td>全屏控件，用于全屏幕查看地图</td></tr><tr><td>mousepositioncontrol</td><td>鼠标位置控件，显示鼠标所在地图位置的坐标，可以自定义投影</td></tr><tr><td>overviewmapcontrol</td><td>地图全局视图控件</td></tr><tr><td>rotatecontrol</td><td>地图旋转控件</td></tr><tr><td>scalelinecontrol</td><td>比例尺控件</td></tr><tr><td>zoomcontrol</td><td>缩放控件</td></tr><tr><td>zoomslidercontrol</td><td>缩放刻度控件</td></tr><tr><td>zoomtoextentcontrol</td><td>缩放到全局控件</td></tr></tbody></table><h2 id="overlay-叠加层"><a href="#overlay-叠加层" class="headerlink" title="overlay(叠加层)"></a>overlay(叠加层)</h2><p>要显示在地图上方并附加到单个地图位置的元素。与控件不同的是，它们不在屏幕上的固定位置，而是绑定到地理坐标上，因此平移地图将移动 <code>overlay</code> ，而不是控件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;popup&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> popup = <span class="keyword">new</span> ol.Overlay(&#123;</span><br><span class="line">    element:<span class="built_in">document</span>.getElementById(<span class="string">&#x27;popup&#x27;</span>),</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line">popup.setPosition(coordinate);</span><br><span class="line">map.addOverlay(popup);</span><br></pre></td></tr></table></figure><h3 id="Overlay选项"><a href="#Overlay选项" class="headerlink" title="Overlay选项"></a><strong>Overlay选项</strong></h3><h4 id="1-id"><a href="#1-id" class="headerlink" title="(1)id"></a>(1)<code>id</code></h4><p>设置 <code>overlay</code>的 <code>id</code>，字符串类型。</p><ul><li>获取<code>id</code>：<code>map.getOverlayById(id)</code>或者<code>overlay.getId()</code></li></ul><h4 id="2-element"><a href="#2-element" class="headerlink" title="(2)element"></a>(2)<code>element</code></h4><p><code>overlay</code> 元素，<code>DOM</code>元素</p><ul><li>获取：<code>overlay.getElement()</code></li><li>设置：<code>overlay.setElement(element)</code></li></ul><h4 id="3-offset"><a href="#3-offset" class="headerlink" title="(3)offset"></a>(3)<code>offset</code></h4><p>偏移量(以像素为单位)，用于定位 <code>overlay</code> ，数组类型，默认为[0, 0]：</p><ul><li>数组第一个元素为水平偏移，正右负左；</li><li>数组第二个元素为垂直，正下负上；</li><li>获取偏移值：<code>overlay.getOffset()</code></li><li>设置偏移值：<code>overlay.setOffset(offset)</code></li></ul><h4 id="4-position"><a href="#4-position" class="headerlink" title="(4)position"></a>(4)<code>position</code></h4><p>地图投影中的位置。</p><ul><li>获取：<code>overlay.getPosition()</code></li><li>设置：<code>overlay.setPosition(position)</code>，如果位置未定义<code>undefined</code>，则覆盖被隐藏。</li></ul><h4 id="5-positioning"><a href="#5-positioning" class="headerlink" title="(5)positioning"></a>(5)<code>positioning</code></h4><p>定义 <code>overlay</code> 相对于其位置属性的实际位置，默认为<code>top-left</code>，还有<code>&#39;bottom-left&#39;</code>, <code>&#39;bottom-center&#39;</code>, <code>&#39;bottom-right&#39;</code>, <code>&#39;center-left&#39;</code>, <code>&#39;center-center&#39;</code>, <code>&#39;center-right&#39;</code>, <code>&#39;top-left&#39;</code>,<code>&#39;top-center&#39;</code>, and <code>&#39;top-right&#39;</code>.</p><ul><li>获取：<code>overlay.getPositioning()</code></li><li>设置：<code>overlay.setPositioning(positioning)</code></li></ul><h4 id="6-autoPan"><a href="#6-autoPan" class="headerlink" title="(6)autoPan"></a>(6)<code>autoPan</code></h4><p>默认为<code>false</code>，如果设置为true，则在调用<code>setPosition</code>将平移映射，以便在当前视图中 <code>overlay</code> 完全可见。</p><h4 id="7-autoPanAnimation"><a href="#7-autoPanAnimation" class="headerlink" title="(7)autoPanAnimation"></a>(7)<code>autoPanAnimation</code></h4><p>动画选项用于平移 <code>overlay</code> 到视图中。此动画仅在启用<code>autoPan</code>时使用。可以提供一个持续时间和缓动来定制动画。</p><h4 id="8-stopEvent"><a href="#8-stopEvent" class="headerlink" title="(8)stopEvent"></a>(8)<code>stopEvent</code></h4><p>默认为<code>true</code>，是否应该停止到map视图端口的事件传播。</p><ul><li>如果为<code>true</code>，则将 <code>overlay</code> 放置在与控件相同的容器中（CSS class name<code>ol-overlaycontainer-stopevent</code>）</li><li>如果为<code>false</code>，它用<code>className</code>属性指定的<code>CSS</code>类名放置在容器中。</li></ul><h4 id="9-className"><a href="#9-className" class="headerlink" title="(9)className"></a>(9)<code>className</code></h4><p><code>CSS class name</code>.</p><h4 id="10-autoPanMargin"><a href="#10-autoPanMargin" class="headerlink" title="(10)autoPanMargin"></a>(10)<code>autoPanMargin</code></h4><p>地图自动平移时，地图边缘与 <code>overlay</code> 的留白（空隙），单位是像素，默认是 20像素</p><h2 id="Projections（投影）"><a href="#Projections（投影）" class="headerlink" title="Projections（投影）"></a>Projections（投影）</h2><p>需要给所有坐标和范围提供视图投影系（默认是<code>EPAG:3857</code>）。</p><p>转换投影系，使用<code>ol.proj.transform()</code>和<code>ol.proj.transformExtendt</code>进行转换</p><h3 id="1）、ol-proj"><a href="#1）、ol-proj" class="headerlink" title="(1）、ol.proj"></a>(1）、<code>ol.proj</code></h3><h4 id="1）ol-proj-addCoordinateTransforms-source-destination-forward-inverse"><a href="#1）ol-proj-addCoordinateTransforms-source-destination-forward-inverse" class="headerlink" title="1）ol.proj.addCoordinateTransforms(source, destination, forward, inverse)"></a>1）<code>ol.proj.addCoordinateTransforms(source, destination, forward, inverse)</code></h4><p>注册坐标转换函数来转换源投影和目标投影之间的坐标。正、反函数转换坐标对;此函数将这些转换为内部使用的处理区段和坐标数组的函数</p><ul><li><code>source</code>：源投影</li><li><code>destination</code>：目标投影</li><li><code>forward</code>：接受<code>ol</code>的正向变换函数(即从源投影到目标投影)。作为参数，并返回转换后的<code>ol.Coordinate</code></li><li><code>inverse</code>：接受<code>ol</code>的逆变换函数(即从目标投影到源投影)。作为参数，并返回转换后的<code>ol.Coordinate</code></li></ul><h4 id="2-ol-proj-addEquivalentProjections-projections"><a href="#2-ol-proj-addEquivalentProjections-projections" class="headerlink" title="2)ol.proj.addEquivalentProjections(projections)"></a>2)<code>ol.proj.addEquivalentProjections(projections)</code></h4><p>注册不改变坐标的转换函数。它们允许在具有相同含义的投影之间进行转换。</p><h4 id="3）ol-proj-addProjection-projection"><a href="#3）ol-proj-addProjection-projection" class="headerlink" title="3）ol.proj.addProjection(projection)"></a>3）<code>ol.proj.addProjection(projection)</code></h4><p>将投影对象添加到受支持的投影列表中，这些投影可以通过它们的<code>SRS</code>码进行查找。</p><h4 id="4-ol-proj-equivalent-projection1-projection2"><a href="#4-ol-proj-equivalent-projection1-projection2" class="headerlink" title="4)ol.proj.equivalent(projection1, projection2)"></a>4)<code>ol.proj.equivalent(projection1, projection2)</code></h4><p>检查两个投影是否相同，即一个投影中的每个坐标确实表示另一个投影中的相同地理点。</p><h4 id="5-ol-proj-fromLonLat-coordinate-opt-projection"><a href="#5-ol-proj-fromLonLat-coordinate-opt-projection" class="headerlink" title="5)ol.proj.fromLonLat(coordinate, opt_projection)"></a>5)<code>ol.proj.fromLonLat(coordinate, opt_projection)</code></h4><p>将经纬度坐标转换为不同的投影</p><ul><li><code>coordinate</code>：经纬度数组，经度在前，纬度在后</li><li><code>projection</code>：目标投影。默认是<code>Web Mercator</code>，即<code>“EPSG: 3857”</code></li></ul><h4 id="6-ol-proj-get-projectionLike"><a href="#6-ol-proj-get-projectionLike" class="headerlink" title="6)ol.proj.get(projectionLike)"></a>6)<code>ol.proj.get(projectionLike)</code></h4><p>获取指定代码的投影对象。</p><h4 id="7-ol-proj-getTransform-source-destination"><a href="#7-ol-proj-getTransform-source-destination" class="headerlink" title="7)ol.proj.getTransform(source, destination)"></a>7)<code>ol.proj.getTransform(source, destination)</code></h4><p>给定类似于投影的对象，搜索转换函数将坐标数组从源投影转换为目标投影。</p><h4 id="8-ol-proj-setProj4-proj4"><a href="#8-ol-proj-setProj4-proj4" class="headerlink" title="8)ol.proj.setProj4(proj4)"></a>8)<code>ol.proj.setProj4(proj4)</code></h4><p>proj4注册。如果没有显式注册，则假定proj4js将加载在全局名称空间中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.proj.setProj4(proj4);</span><br></pre></td></tr></table></figure><h4 id="9-ol-proj-toLonLat-coordinate-opt-projection"><a href="#9-ol-proj-toLonLat-coordinate-opt-projection" class="headerlink" title="9)ol.proj.toLonLat(coordinate, opt_projection)"></a>9)<code>ol.proj.toLonLat(coordinate, opt_projection)</code></h4><p>将坐标转换为经度/纬度</p><ul><li><code>coordinate</code>：投影坐标</li><li><code>projection</code>：坐标的投影，默认是<code>Web Mercator</code>，即<code>“EPSG: 3857”</code></li></ul><h4 id="10-ol-proj-transform-coordinate-source-destination"><a href="#10-ol-proj-transform-coordinate-source-destination" class="headerlink" title="10)ol.proj.transform(coordinate, source, destination)"></a>10)<code>ol.proj.transform(coordinate, source, destination)</code></h4><p>将坐标从源投影转换为目标投影，这将返回一个新的坐标(并且不修改原始坐标)。</p><ul><li><code>coordinate</code>：坐标</li><li><code>source</code>：源投影</li><li><code>destination</code>：目标投影</li></ul><h4 id="11-ol-proj-transformExtent"><a href="#11-ol-proj-transformExtent" class="headerlink" title="11)ol.proj.transformExtent"></a>11)<code>ol.proj.transformExtent</code></h4><p>将范围从源投影转换为目标投影，这将返回一个新范围(并且不修改原始范围)。</p><h4 id="12-ol-proj-Units-string"><a href="#12-ol-proj-Units-string" class="headerlink" title="12)ol.proj.Units{string}"></a>12)<code>ol.proj.Units&#123;string&#125;</code></h4><p>投影单位：<code>&#39;degrees&#39;</code>, <code>&#39;ft&#39;</code>, <code>&#39;m&#39;</code>, <code>&#39;pixels&#39;</code>, <code>&#39;tile-pixels&#39;</code> or <code>&#39;us-ft&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geoServer</title>
      <link href="2021/09/16/geoServer/"/>
      <url>2021/09/16/geoServer/</url>
      
        <content type="html"><![CDATA[<h1 id="geoServer"><a href="#geoServer" class="headerlink" title="geoServer"></a>geoServer</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Geoserver是一个功能齐全，遵循OGC开放标准的开源WFS-T和WMS服务器。利用Geoserver可以把数据作为maps/images来发布(利用WMS来实现)也可以直接发布实际的数据(利用WFS来实现)，同时也提供了修改，删除和新增的功能(利用WFS-T)。</p><p>GeoServer, 顾名思义,是一个Server. 它是开源的，允许用户查看和编辑地理数据。这是地理信息系统(GIS) 领域。GeoServer 是符合OGC 规范的一个全功能的WFS-T 和WMS server。</p><p>GeoServer能够发布的数据类型：</p><p>l 地图或影象——应用WMS，</p><p>l 实时数据——应用WFS，</p><p>l 用户更新、删除和编辑的数据——应用WFS-T。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="WMS-Web-Map-Service（Web地图服务）"><a href="#WMS-Web-Map-Service（Web地图服务）" class="headerlink" title="WMS: Web Map Service（Web地图服务）"></a>WMS: Web Map Service（Web地图服务）</h3><p>l利用具有地理空间位置信息的数据制作地图。其中将地图定义为地理数据可视的表现。这个规范定义了三个操作：</p><ul><li><p>GetCapabitities 返回服务级元数据，它是对服务信息内容和要求参数的一种描述；</p></li><li><p>GetMap 返回一个地图影像，其地理空间参考和大小参数是明确定义了的；</p></li><li><p>GetFeatureInfo（可选）返回显示在地图上的某些特殊要素的信息</p></li></ul><h3 id="WFS-Web-Feature-Service（Web要素服务）"><a href="#WFS-Web-Feature-Service（Web要素服务）" class="headerlink" title="WFS: Web Feature Service（Web要素服务）"></a>WFS: Web Feature Service（Web要素服务）</h3><ol><li><p>Web 地图服务返回的是图层级的地图影像，</p></li><li><p> Web要素服务（WFS）返回的是要素级的GML编码，并提供对要素的增加、修改、删除等事务操作，是对Web地图服务的进一步深入。OGC Web要素服务允许客户端从多个Web要素服务中取得使用地理标记语言（GML）编码的地理空间数据，定义了五个操作：</p></li></ol><ul><li><p>GetCapabilites 返回Web要素服务性能描述文档（用XML描述）；</p></li><li><p> DescribeFeatureType 返回描述可以提供服务的任何要素结构的XML文档；</p></li><li><p> GetFeature 一个获取要素实例的请求提供服务；</p></li><li><p> Transaction 为事务请求提供服务；</p></li><li><p>LockFeature 处理在一个事务期间对一个或多个要素类型实例上锁的请求。</p></li></ul><h3 id="WFS-T-Web-Map-Service-Transactional-允许用户以可传输的块编辑地理数据。"><a href="#WFS-T-Web-Map-Service-Transactional-允许用户以可传输的块编辑地理数据。" class="headerlink" title="WFS-T: Web Map Service-Transactional. 允许用户以可传输的块编辑地理数据。"></a>WFS-T: Web Map Service-Transactional. 允许用户以可传输的块编辑地理数据。</h3><h3 id="WCS：Web-Coverage-Service（Web覆盖服务）"><a href="#WCS：Web-Coverage-Service（Web覆盖服务）" class="headerlink" title="WCS：Web Coverage Service（Web覆盖服务）"></a>WCS：Web Coverage Service（Web覆盖服务）</h3><p>Web 覆盖服务（WCS）面向空间影像数据，它将包含地理位置值的地理空间数据作为“覆盖（Coverage）”在网上相互交换。</p><p>网络覆盖服务由三种操作组成：GetCapabilities，GetCoverage和DescribeCoverageType：</p><ul><li><p> GetCapabilities 操作返回描述服务和数据集的XML文档。</p></li><li><p> GetCoverage操作是在GetCapabilities确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的覆盖格式返回地理位置的值或属性。</p></li><li><p> DescribeCoverageType 操作允许客户端请求由具体的WCS服务器提供的任一覆盖层的完全描述。</p></li></ul><h3 id="GML-Geography-Markup-Language-一种用于描述地理数据的XML。"><a href="#GML-Geography-Markup-Language-一种用于描述地理数据的XML。" class="headerlink" title="GML: Geography Markup Language. 一种用于描述地理数据的XML。"></a>GML: Geography Markup Language. 一种用于描述地理数据的XML。</h3><h3 id="OGC——Open-Geospatial-Consortium——开放地理信息联盟"><a href="#OGC——Open-Geospatial-Consortium——开放地理信息联盟" class="headerlink" title="OGC——Open Geospatial Consortium——开放地理信息联盟"></a>OGC——Open Geospatial Consortium——开放地理信息联盟</h3><p>总之，GeoServer 是您需要显示地图在网页的那些工具的当中一个，用户可以缩放并且移动。可以与一些客户端联合使用，比如：MapBuilder (for web pages), UDig, GVSig,等等。对标准的使用允许信息从GeoServer 到其它地理信息可以很容易地被结合。</p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><h2 id="geoserver"><a href="#geoserver" class="headerlink" title="geoserver"></a>geoserver</h2><p><a href="http://geoserver.org/">官网地址</a></p><p>1、下载二进制压缩包</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161236.png" alt="image-20210916161130508"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161236.png" alt="image-20210916161227579"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161337.png" alt="image-20210916161335083"></p><p>2、解压压缩包</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161410.png" alt="image-20210916161409525"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161444.png" alt="image-20210916161442864"></p><p>3、运行geoServer,windows环境直接双击bin目录下的startup.bat，注意初始端口为8080，防止该端口被占用</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916161601.png" alt="image-20210916161559218"></p><p>启动成功</p><p><img src="../../../../typora/images/image-20210916161934001.png" alt="image-20210916161934001"></p><p>4、登录页面（<a href="http://localhost:8080/geoserver/web/%EF%BC%89">http://localhost:8080/geoserver/web/）</a></p><p><strong>账号：admin</strong></p><p><strong>密码：geoserver</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916162040.png" alt="image-20210916162038804"></p><h2 id="QGIS"><a href="#QGIS" class="headerlink" title="QGIS"></a>QGIS</h2><p><a href="https://www.qgis.org/en/site/">QGIS官网</a></p><blockquote><p>介绍</p></blockquote><p>QGIS (原称Quantum GIS)是一个方便使用的开源桌面GIS软件，根据 GNU 通用公共许可授权。QGIS 是地理空间开源基金会 (OSGeo) 的一个正式专案，是一个跨平台的GIS桌面软件，可运行在 Windows、Linux、Mac OS X 和BSD上（ Android即将推出），并支持众多矢量、栅格、和数据库格式及功能。</p><p>QGIS的最大特点在于界面很友好，熟悉ArcGIS的人都能很快的掌握QGIS的操作，支持WMS并无缝集成PostGIS（对象-关系型数据库管理系统），几乎完全照搬了GRASS的分析功能，因此其分析功能也很强大。相比于商业GIS软件，QGIS的文件体积更小，需要的内存和处理能力也更小，因此它可以在旧的硬件上或CPU运算能力被限制的环境下运行，是一款轻量化的桌面GIS软件。</p><p>目前，QGIS被志愿者开发团体持续维护，已被翻译为31种语言，广泛使用在全世界的学术和专业环境中。</p><blockquote><p>下载安装</p></blockquote><p>1、下载</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916163635.png" alt="image-20210916163633893"></p><p>我的是windows系统，所以我选择windows下的QGIS</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916163736.png" alt="image-20210916163733071"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916163755.png" alt="image-20210916163753219"></p><p>2、点击安装</p><p>3、进入QGIS,，可以设置语言</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916165258.png" alt="image-20210916165256857"></p><p>点击setting</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916165239.png" alt="image-20210916165237421"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210916165321.png" alt="image-20210916165320487"></p>]]></content>
      
      
      <categories>
          
          <category> 工具方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel数据转换成Sql</title>
      <link href="2021/07/10/excel%E6%95%B0%E6%8D%AE%E8%BD%ACsql/"/>
      <url>2021/07/10/excel%E6%95%B0%E6%8D%AE%E8%BD%ACsql/</url>
      
        <content type="html"><![CDATA[<p>我们在测试的时候，需要一些假数据，这些数据是从正式库经过特定条件查询出来的数据，一般情况下，可以直接导出sql语句，这个时候自然是万事大吉:smile:!但是运气不好的时候，遇到特别复杂的语句，比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">PARTITION</span> <span class="keyword">by</span> f.type <span class="keyword">order</span> <span class="keyword">by</span> f.op_time) rn,f.* </span><br><span class="line">                      <span class="keyword">from</span> pub.t_gisview_quality_detail_fs f  <span class="keyword">where</span> localnet_id = <span class="string">&#x27;104000&#x27;</span>) <span class="keyword">where</span> rn &lt;=<span class="number">3</span></span><br></pre></td></tr></table></figure><p>该条语句采用了子查询，由于数据库中没有子查询产生的表，所以无法导出sql语句，这个时候我们可以选择导出excel文件，在利用excel的函数，将这些数据转换成sql。</p><ol><li><p>将数据导出成excel文件</p></li><li><p>编写函数</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210710104053.png" alt="image-20210710104043838"></p><p>上边部分为写函数的地方，右边部分为sql生成的地方，sql生成后直接将鼠标放在边框上，当鼠标变成十字架时，往下拉到数据的最后一行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--excel的函数</span></span><br><span class="line">=CONCATENATE(&quot;<span class="keyword">insert</span> <span class="keyword">into</span> pub.T_GISVIEW_QUALITY_detail_his(<span class="keyword">ID</span>, LOCALNET_ID, LOCALNET_NAME, OP_TIME, <span class="keyword">TYPE</span>, TYPE_NAME, RES_ID, RES_TYPE)<span class="keyword">values</span> (sys_guid(),<span class="string">&#x27;&quot;,B2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,C2,&quot;&#x27;</span>,<span class="keyword">to_date</span>(<span class="string">&#x27;&quot;&amp;TEXT(D3,&quot;yyyy-mm-dd hh:mm:ss&quot;)&amp;&quot;&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>),<span class="string">&#x27;&quot;,E2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,F2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,G2,&quot;&#x27;</span>,<span class="string">&#x27;&quot;,J2,&quot;&#x27;</span>);&quot;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pub.T_GISVIEW_QUALITY_detail_his(<span class="keyword">ID</span>, LOCALNET_ID, LOCALNET_NAME, OP_TIME, <span class="keyword">TYPE</span>, TYPE_NAME, RES_ID, RES_TYPE)<span class="keyword">values</span> (sys_guid(),<span class="string">&#x27;104000&#x27;</span>,<span class="string">&#x27;泸州&#x27;</span>,<span class="keyword">to_date</span>(<span class="string">&#x27;2021-02-24 14:29:56&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>),<span class="string">&#x27;DEV-NCRPT#OUTPT&#x27;</span>,<span class="string">&#x27;支撑设施名称编码重复&#x27;</span>,<span class="string">&#x27;11418480D19D11DD8A1FA99D85251626&#x27;</span>,<span class="string">&#x27;局站&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>‘“,B2,”‘**相当于</strong>‘104000’<strong>，</strong>“,B2,”**就是在B2表格中的值，由于这是一个字符串数据，sql语句中要用’’包围，所以，我又加了一对单引号。</p><p>to_date(‘“&amp;TEXT(D3,”yyyy-mm-dd hh:mm:ss”)&amp;”‘,’YYYY-MM-DD HH24:MI:SS’)是将时间变成特定的格式，如果不加，它会变成时间戳，转换后为to_date(‘2021-02-24 14:29:56’,’YYYY-MM-DD HH24:MI:SS’)</p></blockquote></li><li><p>将sql复制进数据库中执行</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210710104410.png" alt="image-20210710104408801"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="2021/06/24/docker/"/>
      <url>2021/06/24/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4">Docker学习视频</a></p><p><a href="https://www.docker.com/">Docker官网</a></p><p><a href="https://docs.docker.com/">Docker文档</a></p><p><a href="https://hub.docker.com/signup">Docker仓库网站</a>类似gitHub，我们可以把自己的镜像上传上去，也可以下载其他人的镜像。</p><blockquote><p>学前准备</p></blockquote><ul><li>了解一些基础的Linux命令</li></ul><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docker为什么出现"><a href="#Docker为什么出现" class="headerlink" title="Docker为什么出现"></a>Docker为什么出现</h3><p>一款产品，会存在多个环境，比如开发、测试、生产。多个环境会产生多个配置，导致问题。</p><p>环境配置是十分的麻烦，一般的环境还好解决，但是如果遇到集群（Redis，Es，Hadoop…..）费时费力。其次，开发人员将项目打包，运维人员将包安装后运行，会发现，如果该项目依赖Es，Redis等环境，运维人员需要去自己在本地去配置环境。还有，不能够跨平台，将windows上的项目打包发布到Linux上，由于环境不同，会出现问题。</p><p>所以思考，发布一个项目，可不可以带上环境安装打包！！！</p><p>传统：开发jar，运维来做！</p><p>现在：开发打包部署上线，一套流程做完！</p><p>如果开发一款手机应用，需要经历一下流程：java—apk—发布（应用商店）—安装即可用</p><p>现在使用Docker开发：java—jar（环境）—打包带上环境（镜像）—（docker仓库，商店）—下载发布的镜像—直接运行即可！</p><p>Docker给以上的问题提出了解决方案。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624143308.png" alt="image-20210624143259531"></p><blockquote><p>Docker的核心思想：隔离</p><p>以多个应用程序为例，Docker将每个程序隔离，像集装箱装载货物一样，一个程序占据一个集装箱（环境），不会干扰到其他程序。</p><p>通过隔离机制，可以将服务器利用到极致</p></blockquote><h3 id="Docker能干什么"><a href="#Docker能干什么" class="headerlink" title="Docker能干什么"></a>Docker能干什么</h3><blockquote><p>之前的虚拟机技术</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624150256.png" alt="image-20210624150255079"></p><p><strong>缺点</strong>：</p><ul><li>资源占用多</li><li>冗余步骤多</li><li>启动很慢</li></ul><blockquote><p>容器化技术</p></blockquote><p><strong>容器化技术不是模拟一个完整的系统！！！</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624150538.png" alt="image-20210624150537464"></p><p>每个程序各自隔离，</p><p><strong>Docker与虚拟机的不同：</strong></p><ul><li>传统虚拟机：虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主的内核，容器是没有自己的内核。</li><li>每个容器间是相互隔离，每个容器内都有一个属于自己的文件系统，互不影响。</li></ul><blockquote><p>DevOps(开发，运维)</p></blockquote><p><strong>应用更快速的交付和部署</strong></p><p>传统：一大堆帮助文档，安装程序。</p><p>Docker：打包镜像发布测试，一键运行</p><p><strong>更便捷的升级和扩容</strong></p><p>使用Docker后，我们部署的应用就和搭积木一样！</p><p>扩展时只需要在新服务器上运行打包出来的镜像。</p><p><strong>更简单的系统运维</strong></p><p>在容器化之后，我们开发、运维、测试的环境高度一致</p><p><strong>更高效的计算机资源利用</strong>：Docker是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例！服务器的性能可以被压榨到极致。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><strong>Docker的架构图</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624153009.png" alt="image-20210624153007126"></p><ul><li><p><strong>镜像（images）</strong></p><p>docker镜像好比一个模板，可以通过这个模板来创建容器服务，例如tomcat镜像===&gt;run===&gt;tomcat容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或项目运行在容器中）</p></li><li><p><strong>容器（container）</strong></p><p>Docker利用容器技术，独立运行一个或一个组应用，通过镜像创建的</p><p>启动，停止，删除等基本命令。</p><p>目前就可以把这个容器理解为一个简易的Linux系统</p></li><li><p><strong>仓库（registry）</strong></p><p>仓库就是存放镜像的地方！仓库分为私有仓库和公有仓库！Docker Hub是国外的仓库，但是阿里、百度这些也有，需要我们配置镜像加速（类似maven，maven仓库默认是国外的，我们在导入依赖的时候下载速度特别慢，但是我们可以配置阿里镜像源，这样下载速度就很快）</p></li></ul><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote><p>环境准备</p></blockquote><ul><li>会Linux基础</li><li>Linux服务器，CentOS 7</li><li>XShell 7(有学生免费使用版)</li></ul><blockquote><p>环境查看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统内核是3.10以上</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z /]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.6.1.el7.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#系统版本</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z /]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><ul><li>进入文档</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624155009.png" alt="image-20210624155008082"></p><ul><li>选择服务器</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624155113.png" alt="image-20210624155111321"></p><ul><li>选择操作系统</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624155309.png" alt="image-20210624155307688"></p><ul><li>卸载原有的Docker</li></ul><p>卸载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.卸载Docker</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash">2.需要的安装包</span>                 </span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3.设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo #国外的地址 速度特别慢</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  #Docker的阿里云镜像地址 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4.更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5.安装docker相关的 docker-ce 社区版 ee企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6.启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">7.检查docker</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">8.运行hello-world</span></span><br><span class="line">docker run hello-word</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">9.查看下载下来的hello-world镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载docker</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker #docker默认工作路径</span><br><span class="line">rm -rf /var/lib/containerd</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>docker version 结果</p><p><img src="../../../../typora/images/image-20210624170200382.png" alt="image-20210624170200382"></p><p>docker run hello-word 结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624170502.png" alt="image-20210624170500830"></p><p>docker images 结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210624170620.png" alt="image-20210624170618701"></p><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><ul><li>登录阿里云，找到镜像服务加速</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625101551.png" alt="image-20210625101542761"></p><ul><li>找到镜像加速器，执行命令</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625101915.png" alt="image-20210625101912354"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;om9tizwe.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="docker-run-hello-world执行流程"><a href="#docker-run-hello-world执行流程" class="headerlink" title="docker run hello-world执行流程"></a>docker run hello-world执行流程</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625102343.png" alt="image-20210625102341883"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><strong>Docker是怎么工作的？</strong></p><p>Docker是一个client-server机构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问！</p><p>DockerService接收到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625104353.png" alt="image-20210625104352093"></p><p><strong>Docker为什么比VM快？</strong></p><ul><li>Docker有着比虚拟机更少的抽象层</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625104742.png" alt="image-20210625104741315"></p><ul><li><p>Docker利用的是宿主机的内核，VM需要的是Guest OS</p><p>所以说，新建一个容器的时候，docker不需要像虚拟机重新加载一个操作系统内核，避免引导，虚拟机是加载Guest OS，分钟级别的，而Docker是利用宿主机的操作系统，省略了这个复杂的过程， 秒级！</p></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210625105438.png" alt="image-20210625105437335"></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #显示Docker版本信息</span><br><span class="line">docker info  #显示docker的系统级别信息 包括容器镜像的数量</span><br><span class="line">docker 命令 --help #万能命令</span><br></pre></td></tr></table></figure><blockquote><p>帮助文档地址</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210630141322.png" alt="image-20210630141313880"></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li><strong>docker images</strong> 显示镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   3 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG        镜像的标签</span><br><span class="line">IMAGE ID   镜像的id</span><br><span class="line">CREATED    镜像的创建时间</span><br><span class="line">SIZE       镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             #列出所有镜像</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           #只显示id</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>docker search</strong> 搜索镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11068     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4193      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   822                  [OK]</span><br><span class="line">percona                           Percona Server is a fork of the MySQL relati…   545       [OK]       </span><br><span class="line">phpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   259       [OK]       </span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   88                   </span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   88                   </span><br><span class="line">centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]</span><br><span class="line">bitnami/mysql                     Bitnami MySQL Docker Image                      52                   [OK]</span><br><span class="line">databack/mysql-backup             Back up mysql databases to... anywhere!         44                   </span><br><span class="line">deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]</span><br><span class="line">prom/mysqld-exporter                                                              39                   [OK]</span><br><span class="line">tutum/mysql                       Base docker image to run a MySQL database se…   35                   </span><br><span class="line">linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   30                   </span><br><span class="line">schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   29                   [OK]</span><br><span class="line">mysql/mysql-router                MySQL Router provides transparent routing be…   21                   </span><br><span class="line">centos/mysql-56-centos7           MySQL 5.6 SQL database server                   20                   </span><br><span class="line">circleci/mysql                    MySQL is a widely used, open-source relation…   20                   </span><br><span class="line">arey/mysql-client                 Run a MySQL client from a docker container      17                   [OK]</span><br><span class="line">fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   14                   [OK]</span><br><span class="line">openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6                    </span><br><span class="line">devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3                    </span><br><span class="line">ansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                2                    [OK]</span><br><span class="line">jelastic/mysql                    An image of the MySQL database server mainta…   1                    </span><br><span class="line">widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK</span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">  --filter=Stars=3000 #搜索收藏数大于3000的镜像</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>docker pull</strong>  下载镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载镜像 docker pull 镜像名[:tag]</span> </span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker pull mysql</span><br><span class="line">Using default tag: latest #如果不写tag 默认最新版本</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">b4d181a07f80: Pull complete  #分层下载：docker image的核心 联合文件系统</span><br><span class="line">a462b60610f5: Pull complete </span><br><span class="line">578fafb77ab8: Pull complete </span><br><span class="line">524046006037: Pull complete </span><br><span class="line">d0cbe54c8855: Pull complete </span><br><span class="line">aa18e05cc46d: Pull complete </span><br><span class="line">32ca814c833f: Pull complete </span><br><span class="line">9ecc8abdb7f5: Pull complete </span><br><span class="line">ad042b682e0f: Pull complete </span><br><span class="line">71d327c6bb78: Pull complete </span><br><span class="line">165d1d10a3fa: Pull complete </span><br><span class="line">2f40c47d0626: Pull complete </span><br><span class="line">Digest: sha256:52b8406e4c32b8cf0557f1b74517e14c5393aff5cf0384eff62d9e81f4985d4b #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest #真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">以下两个命令等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker.io/library/mysql:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>docker rmi</strong> 删除镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker pull imageId</span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><blockquote><p><strong>我们有了镜像才能创建容器</strong>，为了测试，我下载了一个centOS镜像，虽然在Linux centOS下在下一个centOS有点套娃</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker pull centos</span><br></pre></td></tr></table></figure><ul><li><strong>docker run</strong> 启动镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">参数列表</span></span><br><span class="line">--name=&quot;name&quot; 容器名字，用来区分容器</span><br><span class="line">-d           后台方式运行</span><br><span class="line">-it          使用交互方式运行，进入容器查看内容</span><br><span class="line">-p           指定容器的端口</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 主机端口:容器端口(常用)</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P           随机指定端口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker run -it centos /bin/bash #启动并进入容器</span><br><span class="line">[root@672f5830aa22 /]#  #你会发现此时的root id已经变了，表示我们已经进入了centos容器</span><br><span class="line">[root@672f5830aa22 /]# ls</span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">退出容器</span></span><br><span class="line">[root@672f5830aa22 /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ul><li><strong>docker ps</strong> 查看正在运行的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z ~]# docker ps -a  #查看曾经运行过的容器</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS                          PORTS     NAMES</span><br><span class="line">672f5830aa22   centos        &quot;/bin/bash&quot;   8 minutes ago   Exited (0) About a minute ago             interesting_hugle</span><br><span class="line">764eec518885   hello-world   &quot;/hello&quot;      5 days ago      Exited (0) 5 days ago                     sharp_borg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">-a #列出当前正在运行的容器，包括历史运行过的容器</span><br><span class="line">-n=? #显示最近创建的？个容器</span><br><span class="line">-q #只显示容器的编号</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>退出容器</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #退出并停止运行</span><br><span class="line">ctrl+p+q #容器不停止退出</span><br></pre></td></tr></table></figure><ul><li><strong>docker rm</strong> 删除容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id #删除指定容器</span><br><span class="line">docker rm -f $&#123;docker ps -aq&#125; #删除所有容器</span><br></pre></td></tr></table></figure><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210630163727.png" alt="image-20210630163726030"></p><h4 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a><strong>后台启动容器</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过docker run -d启动容器</span></span><br><span class="line">docker run -d centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">问题：docker ps 发现容器停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 20 容器</span><br></pre></td></tr></table></figure><h4 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure><h4 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通常我们的容器都是使用后台方式运行，需要进入容器</span></span><br><span class="line"></span><br><span class="line">docker exec -it 容器id </span><br><span class="line"></span><br><span class="line">docker attach 容器id</span><br><span class="line"></span><br><span class="line">exec 进入容器后，相当于开启一个新的终端</span><br><span class="line">attach 进入当前的终端</span><br></pre></td></tr></table></figure><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器di:路径 主机路径</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx #搜索镜像</span><br><span class="line"></span><br><span class="line">docker pull nginx #下载镜像</span><br><span class="line"></span><br><span class="line">docker images #查看镜像</span><br><span class="line"></span><br><span class="line">docker run -d --name nginx -p 3344:80 nginx #启动nginx容器 -d 后台运行 --name nginx 给容器起名nginx -p 3344：80 设置映射端口主机端口为3344 nginx容器内使用的端口80（nginx的默认端口）</span><br><span class="line"></span><br><span class="line">docker ps #查看正在运行的容器</span><br><span class="line"></span><br><span class="line">yum update -y &amp;&amp; yum install curl -y #安装curl</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedHashMap</title>
      <link href="2021/05/25/LinkedHashMap/"/>
      <url>2021/05/25/LinkedHashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做一个展示数据的表格，发现没有按照顺序展示，查询数据的时候，发现数据是按顺序被查询出来的，哪到底是哪里出了问题喃:cry:?找了半天，最后发现在进行数据处理的时候，其他人采用了HashMap来存放数据，<strong>HashMap不能保证数据的顺序</strong>，这就是原因！！！最后，我将其类型由<strong>HashMap改成了LinkedHashMap</strong>就行了，LinkedHashMap是HashMap的子类，HashMap具有的方法LinkedHashMap也具有，而且也可以保证数据存放顺序，这样我就只需要修改一下类型，后面的处理就可以不用修改了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="2021/05/14/redis/"/>
      <url>2021/05/14/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.bilibili.com/video/BV1S54y1R7SB">Redis学习视频</a></p><p>在做毕设的时候，关于权限框架，我本来打算采用shiro+Redis+JWT来实现的，可以原本放在阿里云上的redis服务连接不上了，但是在xshell访问到服务器上，却是可以使用的，而且我当初也成功地在本地访问到服务器上的redis了:sob:，我人傻了。现在只有在本地安装一手Redis了，顺带记录一手Redis的学习笔记。</p><p>这是我第三次学习redis了，真的难受。第一次学习时，是因为疫情原因，在家学习，效率有点低下。第二次，是在实习时，在学习后，我才搭建了自己的个人博客，所以没有学习笔记。在实习的时候，一直没有接触redis，对redis的操作都遗忘了，而且也没有学习笔记:cry:!只有重新学习了。</p><h2 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h2><p>我们以前学习的<strong>MySQL</strong>是关系型数据库，Redis是<strong>NoSql</strong>(非关系型数据库)。</p><h3 id="为什么要用NoSql"><a href="#为什么要用NoSql" class="headerlink" title="为什么要用NoSql"></a>为什么要用NoSql</h3><p>2021年是大数据的时代，以前的关系型数据库在面对如此庞大的数据量已经力不从心了。</p><h4 id="单机MySql时代"><a href="#单机MySql时代" class="headerlink" title="单机MySql时代"></a>单机MySql时代</h4><p>在早些年代，一个数据库可以应付其数据需求。</p><p>那个时候，更多的是去写静态网页Html，服务器不存在太大的压力。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514145324.png" alt="在这里插入图片描述"></p><p>在这种情况下，它存在这一些问题：</p><p>1、数据量如果太大，一个机器是放不下的。</p><p>2、数据的索引（B+Tree）如果太大，一个机器的内存也放不下</p><p>3、访问量（读写混合），服务器顶不住</p><p>如果出现以上问题，就需要去升级</p><h4 id="Memcached-MySQL-垂直拆分（读写分离）"><a href="#Memcached-MySQL-垂直拆分（读写分离）" class="headerlink" title="Memcached + MySQL + 垂直拆分（读写分离）"></a>Memcached + MySQL + 垂直拆分（读写分离）</h4><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦!</p><p>读写分离<br>mysql2：负责写操作，写完后将数据同步到 mysql1、mysql3<br>mysql1、mysql3：负责读取数据</p><p>每次都要去查询数据库的话就十分的麻烦!<br>缓存：Cache：只要数据不变，就从cache中拿数据，如果数据改变，就重新从 mysql1、mysql3中同步到缓存</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514150307.png" alt="在这里插入图片描述"></p><h4 id="分库分表-水平拆分（MySQL集群）"><a href="#分库分表-水平拆分（MySQL集群）" class="headerlink" title="分库分表 + 水平拆分（MySQL集群）"></a>分库分表 + 水平拆分（MySQL集群）</h4><p>技术和业务发展的同时，对人的要求也越来越高了。</p><blockquote><p>本质：数据库（读，写）</p></blockquote><p><strong>读</strong></p><p>由MyISAM变成Innodb</p><p>MyISAM：表锁，十分影响效率</p><p>Innodb：行锁</p><p><strong>写</strong></p><p>慢慢的就开始使用分库分表来解决写的压力</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514151008.png" alt="在这里插入图片描述"></p><h4 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h4><p>技术发展特别快，世界已经发生了翻天覆地的变化，现在的数据量大，变化很快。关系型数据库已经有点不够用了。在大数据的情况下，MySQL的表结构几乎无法更改，如果给具有1亿条的数据添加一个字段，想想都觉得恐怖。</p><blockquote><p>目前一个项目</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514152311.png" alt="在这里插入图片描述"></p><blockquote><p>为什么要用NoSql</p></blockquote><p>用户个人信息、社交网络、地理位置、用户产生的数据、用户日志等数据爆发式增长</p><p>这个时候，我们就需要使用NoSql数据库</p><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h3><blockquote><p>NoSQL</p></blockquote><p>NoSQL = Not Only SQL(不仅仅是数据库)</p><p>泛指非关系数据库，随着web2.0互联网的诞生！传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区！暴露出来很多难以克服的问题, NoSQL在当今大数据环境下发展的十分迅速, Redis是发展最快的,而且是我们当下必须要掌握的一个技术!</p><p>很多的数据类型用户的个人信息,社交网络,地理位置。这些数据类型的存储不需要-个固定的格式!<br>不需要多余的操作就可以横向扩展的! Map&lt;String,Object&gt; 使用键值对来控制!</p><blockquote><p>NoSQL的特点</p></blockquote><p>1、方便扩展（数据之间没有关系，很好扩展）</p><p>2、大数据最高性能（redis 1s能读取11万次，写8万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能比较高）</p><p>3、数据类型是多样型的（不需要事先设计数据库！随取随用！）</p><p>4、传统RDBMS和NoSQL</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">传统的RDBMS</span><br><span class="line"></span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中row co1</span><br><span class="line">- 操作操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br><span class="line">- ......</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NoSQL</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CPA原理</span><br><span class="line">- 高新能、高可用、高可扩</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>了解：3V+3高</p></blockquote><p>大数据时代的3V：主要是描述问题的</p><ul><li>海量Volume</li><li>多样Variety</li><li>实时Veiocity</li></ul><p>大数据时代的3高：主要是对程序的要求</p><ul><li>高并发</li><li>高可用</li><li>高性能</li></ul><p>在实际开发中：MySQL+NoSQL</p><h3 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h3><p><strong>kv键值对</strong></p><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memecache</li></ul><p><strong>文档型数据库（bson）</strong></p><ul><li><p>MongoDB</p><p>​    MongoDB是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档</p><p>​    MongoDB是一个介于关系型数据库和非关系型数据库中中间的产品！MongoDB是非关系型数据库中最像关系型数据库的！</p></li><li><p>ConthDB</p></li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521095432.png" alt="在这里插入图片描述"></p><p>图关系数据库存放的是关系，例如：朋友圈社交网络</p><blockquote><p>四者对比</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521095612.png" alt="在这里插入图片描述"></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Redis是什么</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务 !</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521100913.png" alt="在这里插入图片描述"></p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p><blockquote><p>Redis能干什么？</p></blockquote><ul><li>内存存储、持久化，内存中是断电即失，所以说持久化很重要（rab、aof）</li><li>效率高、可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量！）</li></ul><blockquote><p>特性</p></blockquote><ul><li>开源</li><li>支持多种语言</li><li>持久化</li><li>支持集群</li><li>支持事务 </li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p><a href="https://github.com/dmajkic/redis/releases">下载地址</a></p><ul><li>下载安装包</li><li>下载完毕，得到压缩包</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102123.png" alt="image-20210521102122239"></p><ul><li>解压</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102349.png" alt="image-20210521102348212"></p><ul><li>开启Redis（点击redis-server.exe）</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102456.png" alt="image-20210521102455296"></p><ul><li>使用Redis客户端，连接服务端（点击redis-cli.exe）</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521102638.png" alt="image-20210521102636001"></p><blockquote><p>Windows下使用简单，但是Redis推荐Linux使用</p></blockquote><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>由于我在之前已经在我的linux安装了Redis，所以以下的操作，是我从其他地方找到的</p><ul><li><p>下载安装包！ redis-5.0.8.tar.gz</p></li><li><p>解压Redis的安装包！ 程序/opt</p></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103804.png" alt="在这里插入图片描述"></p><ul><li>进入解压后的文件，可以看到我们redis的配置文件</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103817.png" alt="在这里插入图片描述"></p><ul><li>基本的环境安装</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103834.png" alt="在这里插入图片描述"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103848.png" alt="在这里插入图片描述"></p><ul><li>redis的默认安装路径 /usr/local/bin</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103916.png" alt="在这里插入图片描述"></p><ul><li>将redis配置文件。复制到我们当前目录下</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521103950.png" alt="在这里插入图片描述"></p><ul><li>redis默认不是后台启动的，修改配置文件！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104001.png" alt="在这里插入图片描述"></p><ul><li>启动Redis服务！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104015.png" alt="在这里插入图片描述"></p><ul><li>使用redis-cli 进行连接测试！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104030.png" alt="在这里插入图片描述"></p><ul><li>查看redis的进程是否开启！</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104041.png" alt="在这里插入图片描述"></p><ul><li>如何关闭Redis服务呢？ shutdown</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104101.png" alt="在这里插入图片描述"></p><ul><li>再次查看进程是否存在</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104117.png" alt="在这里插入图片描述"></p><p>后面我们会使用单机多Redis启动集群测试！</p><blockquote><p>通过docker容器安装的redis，docker exec -it redis redis-cli</p></blockquote><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p>redis-benchmark 是一个压力测试工具！<br>官方自带的性能测试工具！<br>redis-benchmark 命令参数！<br>图片来自菜鸟教程</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521104850.png" alt="在这里插入图片描述"></p><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试：100个并发连接100000个请求</span></span><br><span class="line"> redis-benchmark -c 100 -n 100000</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521105154.png" alt="image-20210521105152436"></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>Redis有16个数据库，默认使用第0个数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试是否联通</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line"><span class="comment">#测试是否联通选择数据库</span></span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#查看当前数库内容大小</span></span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">#存放 (name-&gt;hl)(k-&gt;v)</span></span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name hl</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#查看当前数据库所有key</span></span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="comment">#清除当前数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="comment">#清除全部数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521110255.png" alt="image-20210521110253552"></p><blockquote><p>Redis是单线程的！</p></blockquote><p>Redis是基于内存操作的，CPU不是Redis的性能瓶颈，Redis的瓶颈是根据机器的内存和网卡带宽，既然可以使用单线程实现，就使用单线程。</p><p>Redis是C语言写的，官方提供的数据为100000+的QPS,完全不比同样使用key-value的memecache差。</p><p><strong>Redis 为什么单线程还这么快？</strong></p><ul><li>误区1：高性能的服务器一定是多线程的</li><li>误区2：多线程一定比单线程效率高，实际上由于是多线程会进行CPU上下文切换</li></ul><p>Redis是将所有的数据全部放在内存中的，所以说使用单线程去操作就是最高的。</p><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><blockquote><p>官网文档</p></blockquote><p>edis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<strong>数据库、缓存和消息中间件</strong>。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><h4 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h4><h5 id="keys"><a href="#keys" class="headerlink" title="keys *"></a>keys *</h5><p>查看当前数据库下的所有key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135555.png" alt="image-20210521135448319"></p><h5 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set key value"></a>set key value</h5><p>添加 key-value的键值对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135450.png" alt="image-20210521135448319"></p><h5 id="get-key"><a href="#get-key" class="headerlink" title="get key"></a>get key</h5><p>获取key对应的值</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135636.png" alt="image-20210521135634794"></p><h5 id="exists-key"><a href="#exists-key" class="headerlink" title="exists key"></a>exists key</h5><p>这个key是否存在</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521135816.png" alt="image-20210521135814689"></p><h5 id="move-key-db"><a href="#move-key-db" class="headerlink" title="move key db"></a>move key db</h5><p>将这个key移动到第db号数据库</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521140009.png" alt="image-20210521140007123"></p><h5 id="expire-key-time"><a href="#expire-key-time" class="headerlink" title="expire key time"></a>expire key time</h5><p>设置这个key的过期时间</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521140232.png" alt="image-20210521140229760"></p><blockquote><p>ttl key 可以查看剩余多少时间</p></blockquote><h5 id="type-key"><a href="#type-key" class="headerlink" title="type key"></a>type key</h5><p>查看key的类型</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210521140538.png" alt="image-20210521140531368"></p><h5 id="del-key"><a href="#del-key" class="headerlink" title="del key"></a>del key</h5><p>删除key</p><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists key1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; append key1 ﾡﾱhelloﾡﾰ <span class="comment">#追加字符串，如果不存在则创建key</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1\xa1\xb1hello\xa1\xb0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key1 <span class="comment">#获取字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr views <span class="comment">#自增1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr views <span class="comment">#自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby views 10 <span class="comment">#指定增量</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; decrby views 10 <span class="comment">#指定减量</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 hello,hl</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 3 <span class="comment">#截取字符串[0,3]</span></span><br><span class="line"><span class="string">&quot;hell&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 -1 <span class="comment">#截取字符串</span></span><br><span class="line"><span class="string">&quot;hello,hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setrange key1 6 zsy <span class="comment">#替换字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,zsy&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#setex 设置到期时间</span></span><br><span class="line"><span class="comment">#setnx 不存在才设置</span></span><br><span class="line"><span class="comment">#mset 批量设置值</span></span><br><span class="line"><span class="comment">#mget 批量获取值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="built_in">set</span> user:1 &#123;name:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:18&#125;</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">getst <span class="comment">#先get后set</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list hello1 hello2 hello3 hello4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one <span class="comment"># 将一个值或者多个值 从列表左侧插入  one</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two <span class="comment"># 将一个值或者多个值 从列表左侧插入  two one</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three <span class="comment"># 将一个值或者多个值 从列表左侧插入  three two one</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class="comment"># 从左侧 依次取出所有元素</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1  <span class="comment"># 从左侧 依次取出0，1下标的元素</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list four  <span class="comment"># 将一个值或者多个值 从列表右侧插入  three two one four</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">LPOP：从左侧移除左侧第一个元素，返回移除的值</span><br><span class="line">RPOP：从右侧移除右侧第一个元素，返回溢出的值</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; Lpop list <span class="comment"># 从左侧移除左侧第一个元素，返回移除的值</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list <span class="comment"># 从右侧移除右侧第一个元素，返回溢出的值</span></span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">Lindex(list index)：获取从左侧开始数的对应下标的值</span><br><span class="line">Lindex list -1 获取最后一个值</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lindex list 0  <span class="comment"># 获取从左侧开始数的对应下标为0的值</span></span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">Llen  获取list长度</span><br><span class="line">127.0.0.1:6379&gt; llen list  <span class="comment"># 获取list长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">移除指定的值</span><br><span class="line">例子：取关</span><br><span class="line"></span><br><span class="line">Lrem  </span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 three <span class="comment"># 移除 一个  值为three</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 two  <span class="comment"># 移除 2个  值为two</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">ltrim 修剪  截取list</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; clear</span><br><span class="line">127.0.0.1:6379&gt; rpush list hello1 hello2 hello3 hello4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2  <span class="comment"># 从左侧开始只保留下标为1到2的</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">下面的list1也可以换为list  构建循环队列</span><br><span class="line">rpoplpush list list1：将list从右侧弹出一个元素，从左侧添加到list1(list1没有就创建)</span><br><span class="line">lpoprpush list list1</span><br><span class="line">rpoprpush list list1</span><br><span class="line">lpoplpush list list1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list list1</span><br><span class="line"><span class="string">&quot;hello3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;hello3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">lset list index valeu  根据下标设值，首先list必须存在，不然就报错，去覆盖下标的值，并不能新增，不然会报错下标越界</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line">linsert key before|after value1 value2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpush list hello1 hello2 hello3 hello4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list before hello1 hello5 <span class="comment"># 在hello1的前面插入hello5</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello5&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">5) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list after hello1 hello6 <span class="comment"># 在hello1的后面插入hello5</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello5&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello6&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">5) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">6) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list after hello7 hello6  <span class="comment"># hello7不存在</span></span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>set中的值不能重复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello <span class="comment">#添加，如果没有则创建</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset a </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment">#展示所有元素</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset a <span class="comment">#判断该set集合中是否具有特定元素 1 具有 0不具有</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset c</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; scard myset <span class="comment">#获取集合中元素的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; srem myset hello <span class="comment">#移除特定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset <span class="comment">#随机抽选一个元素</span></span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2 <span class="comment">#随机抽选指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset <span class="comment">#随机移除一个元素</span></span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 c <span class="comment">#将指定元素从一个集合移动到另一个集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sdiff myset myset2  <span class="comment">#两个集合之间的差集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter myset myset2  <span class="comment">#两个集合之间的交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion myset myset2 <span class="comment">#两个集合之间并集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure><h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><p>Map集合，key-&gt;&lt;key,value&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash filed1 hl <span class="comment">#set一个具体的key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash filed1  <span class="comment">#get一个具体的key-value</span></span><br><span class="line"><span class="string">&quot;hl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash a a b b <span class="comment">#set多个具体的key-value</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash a b   <span class="comment">#get多个具体的key-value</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash  <span class="comment">#get所有的key-value</span></span><br><span class="line">1) <span class="string">&quot;filed1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hl&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br><span class="line">5) <span class="string">&quot;b&quot;</span></span><br><span class="line">6) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash a  <span class="comment">#删除指定的key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;filed1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hl&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment">#获取key-value键值对数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash b <span class="comment">#判断指定字段是或存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment">#获取所有的key</span></span><br><span class="line">1) <span class="string">&quot;filed1&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash <span class="comment">#获取所有的value</span></span><br><span class="line">1) <span class="string">&quot;hl&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt;  hincrby myhash c 1 <span class="comment">#给特定字段（必须是数字）增加指定值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash c 3  <span class="comment">#如果特定字段不存在则添加 反之不做操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h5><p>在Set的基础上增加了一个值，zset k1 score1 v1，多了一个 score1，用于排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one <span class="comment">#添加1个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class="comment">#添加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange myset 0 -1 <span class="comment">#获取值</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 xiaohong</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 kuangshen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf <span class="comment">#升序排序 -inf 负无穷 +inf 正无穷</span></span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 withscores <span class="comment">#排序打印 负无穷到2500 withscores打印分数</span></span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 withscores <span class="comment">#降序排序 此时已经移除了xiaohong</span></span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;5000&quot;</span></span><br><span class="line">3) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">4) <span class="string">&quot;500&quot;</span></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaohong <span class="comment">#移除xiaohong</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary <span class="comment">#获取集合中的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;kuangshen&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2600&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">6) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcount salary 2500 3000 <span class="comment">#获取2500-3000区间之间的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote><p>简单介绍</p></blockquote><p>MySQL具有原子性，一致性、隔离性、持久性（acid），但是Redis的事务没有原子性。</p><p><strong>redis的单条命令可以保证原子性，但是事务不保证原子性！！！</strong></p><p><strong>redis的事务没有隔离级别概念</strong></p><p>所有的命令在事务中，并没有直接执行！只有发起执行命令（Exec）的时候才会执行！</p><p>Redis事务的本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行的过程中，会按照顺序执行！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多条命令按顺序执行，具有一次性、顺序性、排他性</span><br><span class="line"></span><br><span class="line">------ 队列 set set set 执行------</span><br></pre></td></tr></table></figure><blockquote><p>redis的事务分成3个阶段</p></blockquote><ul><li>开启事务（multi）</li><li>命令入队(….)</li><li>执行事务(exec)</li></ul><blockquote><p>正常执行事务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>   <span class="comment">#执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><blockquote><p>放弃事务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard <span class="comment">#取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4 </span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><blockquote><p>编译型异常（命令有错）！事务中的所有事务都不会执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 <span class="comment">#错误命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行事务</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k5</span><br><span class="line">(nil)                   <span class="comment">#set k5 v5没有执行</span></span><br></pre></td></tr></table></figure><blockquote><p>运行时异常，如果事务队列中存在语法性错误，那么执行命令的时候，其他命令可以正常执行的，错误的命令抛出异常</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; incr k1  <span class="comment">#错误语法 k1的值是字符串 不能+1</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行事务</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range  <span class="comment">#第一条命令错误</span></span><br><span class="line">2) OK                                                   <span class="comment">#第二条命令成功</span></span><br><span class="line">127.0.0.1:6379&gt; get k5</span><br><span class="line"><span class="string">&quot;v5&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Redis实现乐观锁"><a href="#Redis实现乐观锁" class="headerlink" title="Redis实现乐观锁"></a>Redis实现乐观锁</h4><p>watch：加锁 </p><p>unwatch：解锁</p><blockquote><p>监控</p></blockquote><p><strong>悲观锁：</strong></p><ul><li>很悲观，什么时候都会出问题，无论做什么都要加锁！</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li></ul><blockquote><p>Redis监测测试</p></blockquote><p>有100块的money，0块的out</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><blockquote><p>测试多线程修改值，使用watch可以当作redis的乐观锁</p></blockquote><p>此时money有80，out有20。</p><p>开启一个事务，消费10块</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210525154615.png" alt="image-20210525154606833"></p><p>在当前事务还没有执行的时候，另一个人直接修改了money</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210525154725.png" alt="image-20210525154723272"></p><p>在money被修改后，执行第一个事务</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210525154829.png" alt="image-20210525154827215"></p><p>此时返回nil，表示事务执行失败</p><h2 id="SpringBoot集合Redis"><a href="#SpringBoot集合Redis" class="headerlink" title="SpringBoot集合Redis"></a>SpringBoot集合Redis</h2><ol><li><p>创建项目</p></li><li><p>导入依赖</p><p>在SpringBoot2.x之后，原来使用的jedis被替换为了lettuce</p><p>因为jedis采用的直连，多个线程操作的话，是不安全的，如果想要避免，就要使用jedis pool连接池！BIO</p><p>lettuce采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据。NIO</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host&#x3D;localhost</span><br><span class="line">spring.redis.port&#x3D;6379</span><br></pre></td></tr></table></figure></li><li><p>redis配置类，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span><br><span class="line">    <span class="comment">// 自己定义了一个 RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认的序列化方式是JDK，我们可能会用JSON</span></span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>RedisUtil</strong>，对RedisTemplate的进一步封装，方便自己使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">      User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">      ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">      String jsonUser = om.writeValueAsString(user);</span><br><span class="line">      redisUtil.set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">      System.out.println(redisUtil.get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(redisUtil.get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210621093154.png" alt="image-20210621093145821"></p><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><blockquote><p>单位</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210621095422.png" alt="image-20210621095420638"></p><blockquote><p>包含</p></blockquote><p>可以将多个配置文件包含进来</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210621095521.png" alt="image-20210621095520268"></p><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#绑定的ip，目前只能本机访问，* 通配表示任意id都可以访问</span></span><br><span class="line">protected-mode yes <span class="comment">#是否开启保护模式</span></span><br><span class="line">port 6379 <span class="comment">#端口号</span></span><br></pre></td></tr></table></figure><blockquote><p>通用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes <span class="comment">#以守护进程的方式运行，默认是no，需要我们自己修改</span></span><br><span class="line">pidfile /var/run/redis.pid <span class="comment">#如果以后台的方式运行，我们需要指定一个pid文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志级别</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志文件名</span></span><br><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"><span class="comment"># Redis to log on the standard output. Note that if you use standard</span></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">databases 16 <span class="comment">#数据库个数，默认16个</span></span><br></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内执行了多少次操作则会持久化到.rdb和.aof文件中</p><p>redis是内存数据库，如果没有持久化，那么断电即失！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 <span class="comment">#900秒内 执行一次操作及以上 进行持久化</span></span><br><span class="line">save 300 10 <span class="comment">#300秒内 执行10次及以上的操作 进行持久化</span></span><br><span class="line">save 60 10000 <span class="comment">#60秒内 执行10000次及以上的操作 进行持久化</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#持久化如果出错，是否需要继续工作</span></span><br><span class="line"></span><br><span class="line">rdbcompression yes <span class="comment">#是否压缩rdb文件，需要消耗cpu资源</span></span><br><span class="line"></span><br><span class="line">rdbchecksum yes <span class="comment">#保存rdb文件时，是否进行检查</span></span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb <span class="comment">#rdb文件名</span></span><br><span class="line"></span><br><span class="line">dir ./ <span class="comment">#rdb保存目录</span></span><br></pre></td></tr></table></figure><blockquote><p>安全</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass foobared <span class="comment">#设置密码 默认被注释了</span></span><br></pre></td></tr></table></figure><blockquote><p>客户端</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 <span class="comment">#最大连接数</span></span><br><span class="line">maxmemory &lt;bytes&gt; <span class="comment">#最大内容容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment">#内存满后的处理策略 </span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; remove any key according to the LRU algorithm</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; remove a random key with an expire set</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; don&#x27;t expire at all, just return an error on write operations</span></span><br></pre></td></tr></table></figure><blockquote><p>APPEND ONLY MODE  aof</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment">#默认不开启aof模式，默认使用rdb方式持久化，在大部分情况下，rdb完全够用</span></span><br><span class="line"></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment">#持久化文件名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always 每次操作都要同步 速度慢</span></span><br><span class="line">appendfsync everysec <span class="comment">#每秒执行一次，可能会丢失这一秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no 不执行，操作系统自己执行同步</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>在指定的时间间隔内将内存中的数据及快照写入磁盘，也就是Snapshort快照，它恢复时是将快照文件直接读到内存里。Redis会单独创建一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化进程都结束了，再用这个文件替换上次持久化好的文件。整个过程中，主进程不进行任何IO操作。如果需要进行大规模的数据的恢复且对于数据恢复的完整性不是非常敏感，那么RDB方式要比AOF方式更加高效，RDB方式的缺点是最后一次持久化的数据可能会丢失。Redis默认的持久化就是RDB，一般情况下不需要修改这个配置。</p><blockquote><p>触发机制</p></blockquote><p>save的规则满足的情况下，会自动触发rdb规则</p><ul><li>执行flushall命令</li><li>退出redise</li><li>save</li></ul><blockquote><p>如何恢复rdb文件</p></blockquote><ul><li><p>将rdb文件放在指定目录下，redis启动的时候会自动检查dump.rdb 恢复其中的数据</p></li><li><p>查看存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;E:\\JavaUtil\\redis\\Redis-x64-3.2.100&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>将我们的所有命令都记录下来，恢复的时候将我们的所有命令都执行一遍。</p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次来完成数恢复工作。</p><blockquote><p>重写规则</p></blockquote><p>当aof文件大小超过64mb时，就会触发重写规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><blockquote><p>优点与缺点</p></blockquote><p><strong>优点</strong>：</p><ul><li><p>每一次修改都同步，文件完整性更好</p></li><li><p>每一秒同步一次，可能会丢失1秒数据</p></li><li><p>从不同步，效率最高</p></li></ul><p><strong>缺点</strong>：</p><ul><li>相对于数据文件来说，aof远大于rdb，修复的速度也比rdb慢</li><li>aof运行效率比rdb慢，所以redis默认是rdb持久化</li></ul><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息</p><p>redis客户端可以订阅任意数量的频道。</p><p>订阅/发布消息图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622092134.png" alt="image-20210622092125683"></p><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622092517.png" alt="img"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622092522.png" alt="img"></p><blockquote><p>命令</p></blockquote><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[PSUBSCRIBE pattern <a href="https://www.runoob.com/redis/pub-sub-psubscribe.html">pattern …]</a> 订阅一个或多个符合给定模式的频道。</td></tr><tr><td align="left">2</td><td align="left">[PUBSUB subcommand <a href="https://www.runoob.com/redis/pub-sub-pubsub.html">argument [argument …]]</a> 查看订阅与发布系统状态。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/pub-sub-publish.html">PUBLISH channel message</a> 将信息发送到指定的频道。</td></tr><tr><td align="left">4</td><td align="left">[PUNSUBSCRIBE <a href="https://www.runoob.com/redis/pub-sub-punsubscribe.html">pattern [pattern …]]</a> 退订所有给定模式的频道。</td></tr><tr><td align="left">5</td><td align="left">[SUBSCRIBE channel <a href="https://www.runoob.com/redis/pub-sub-subscribe.html">channel …]</a> 订阅给定的一个或多个频道的信息。</td></tr><tr><td align="left">6</td><td align="left">[UNSUBSCRIBE <a href="https://www.runoob.com/redis/pub-sub-unsubscribe.html">channel [channel …]]</a> 指退订给定的频道。</td></tr></tbody></table><blockquote><p>实例</p></blockquote><p>以下实例演示了发布订阅是如何工作的，需要开启两个 redis-cli 客户端。</p><p>在我们实例中我们创建了订阅频道名为 <strong>runoobChat</strong>:</p><p><strong>第一个 redis-cli 客户端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;SUBSCRIBE runoobChat</span><br><span class="line"></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1)<span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2)<span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3)(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 runoobChat 发布两次消息，订阅者就能接收到消息。</p><p><strong>第二个 redis-cli 客户端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;Redis PUBLISH test&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;Learn redis by runoob.com&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 订阅者的客户端会显示如下消息</span></span><br><span class="line"> 1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;runoobChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Redis PUBLISH test&quot;</span></span><br><span class="line"> 1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;runoobChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Learn redis by runoob.com&quot;</span></span><br></pre></td></tr></table></figure><p>gif 演示如下：</p><ul><li>开启本地 Redis 服务，开启两个 redis-cli 客户端。</li><li>在<strong>第一个 redis-cli 客户端</strong>输入 <strong>SUBSCRIBE runoobChat</strong>，意思是订阅 <code>runoobChat</code> 频道。</li><li>在<strong>第二个 redis-cli 客户端</strong>输入 <strong>PUBLISH runoobChat “Redis PUBLISH test”</strong> 往 runoobChat 频道发送消息，这个时候在第一个 redis-cli 客户端就会看到由第二个 redis-cli 客户端发送的测试消息。</li></ul><p><img src="../../../../typora/images/redis-pub-sub.gif" alt="img"></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><blockquote><p>集群环境配置</p></blockquote><p>由于我没有多服务器，只能进行伪集群搭建。</p><p>只需要配置从机，不需要配置主机。6379端口为主机，6380、6381端口为从机</p><ul><li>开启redis服务和客户端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z bin]<span class="comment"># redis-server /usr/myRedis/redis.conf</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z bin]<span class="comment"># redis-cli</span></span><br></pre></td></tr></table></figure><ul><li>查看主从信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication <span class="comment">#查看主从信息</span></span><br><span class="line"><span class="comment"># Replication </span></span><br><span class="line">role:master  <span class="comment">#master表示该redis为主机</span></span><br><span class="line">connected_slaves:0 <span class="comment">#从机数量为0</span></span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><ul><li>复制redis的配置文件，此时仅仅是复制了文件，还需要区修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp10gaiewd2vyuegenj7z myRedis]<span class="comment"># cp redis.conf redis80.conf</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z myRedis]<span class="comment"># cp redis.conf redis81.conf</span></span><br><span class="line">[root@izbp10gaiewd2vyuegenj7z myRedis]<span class="comment"># ll -ls</span></span><br><span class="line">total 140</span><br><span class="line">44 -rw-r--r-- 1 root root 41431 Jun 22 11:26 redis80.conf</span><br><span class="line">44 -rw-r--r-- 1 root root 41431 Jun 22 11:27 redis81.conf</span><br><span class="line">44 -rw-r--r-- 1 root root 41431 Jun 22 11:06 redis.conf</span><br><span class="line"> 8 -rw-r--r-- 1 root root  4661 Jun 22 11:18 redis-log.log</span><br></pre></td></tr></table></figure><ul><li>修改从机的配置文件，即80和81。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">port 6380</span><br><span class="line">logfile <span class="string">&quot;/usr/myRedis/redis80-log.log&quot;</span></span><br><span class="line">dbfilename dump80.rdb</span><br></pre></td></tr></table></figure><p>81同上</p><ul><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep redis <span class="comment">#查看进程</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622114311.png" alt="image-20210622114309875"></p><ul><li><p>配置主从复制</p><p>现在三个redis都是主机，需要针对从机进行配置</p><blockquote><p>命令配置（暂时）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379 <span class="comment">#SLAVEOF ip地址 端口号</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; SLAVEOF no one <span class="comment">#使自己变成主机</span></span><br></pre></td></tr></table></figure><blockquote><p>配置文件（永远）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>此时，80和81都变成了从机。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622141005.png" alt="image-20210622141003606"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622141010.png" alt="image-20210622140945171"></p><p>主机的信息中也显示了从机的信息</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622141155.png" alt="image-20210622141152627"></p></li></ul><blockquote><p>主从复制</p></blockquote><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622104104.png" alt="image-20210622104103172"></p><p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><p>一般情况下，最少为一主二从，主机负责写操作，从机负责读操作。在实际环境中，一般是读操作数量远大于写操作。</p><blockquote><p>作用</p></blockquote><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>哨兵模式需要配置集群环境</p><blockquote><p>概述</p></blockquote><p><strong>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong>这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622151625.png" alt="img"></p><p>Redis哨兵</p><p>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p>用文字描述一下<strong>故障切换（failover）</strong>的过程。假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。这样对于客户端而言，一切都是透明的。</p><blockquote><p>使用</p></blockquote><ul><li>配置文件</li></ul><p>创建sentinel.conf文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>ip地址 端口号 1(数字1代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机)</p><ul><li>启动哨兵</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /usr/myRedis/sentinel.conf</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622153044.png" alt="image-20210622153043431"></p><blockquote><p>作用</p></blockquote><p>1、不时地监控redis是否按照预期良好地运行;<br>2、如果发现某个redis节点运行出现状况，能够通知另外一个进程(例如它的客户端);<br>3、能够进行自动切换。当一个master节点不可用时，能够选举出master的多个slave(如果有超过一个slave的话)中的一个来作为新的master,其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。<br>4、哨兵为客户端提供服务发现，客户端链接哨兵，哨兵提供当前master的地址然后提供服务，如果出现切换，也就是master挂了，哨兵会提供客户端一个新地址</p><blockquote><p>优缺点</p></blockquote><p>优点：</p><ol><li>哨兵集群，基于主从复制模式，主从复制的优点，他都有</li><li>主从可以切换，故障可以转移，系统的可用性更好</li><li>哨兵模式就是主从复制的升级，更加健壮</li></ol><p>缺点：</p><ol><li>redis不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦。</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多的选择。</li></ol><h2 id="缓存穿透和雪崩"><a href="#缓存穿透和雪崩" class="headerlink" title="缓存穿透和雪崩"></a>缓存穿透和雪崩</h2><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面，但同时，它带来了一些问题。其中，最重要的问题是数据一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性比较高，就不能使用缓存。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><blockquote><p>概念</p></blockquote><p>用户想要查询一个数据，发现redis内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库，这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622155546.png" alt="image-20210622155544824"></p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><blockquote><p>概述</p></blockquote><p>这里需要注意和缓存穿透的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p><blockquote><p>解决方案</p></blockquote><p><strong>设置热点数据永不过期</strong></p><p>从缓存层面上看，热点key永不过期，不会存在key过期导致的问题</p><p><strong>加互斥锁</strong></p><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去后端查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将压力转移到了分布式锁上，因此对分布式锁的考验很大。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概念</p></blockquote><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。</p><p>产生雪崩的原因之一，比如在双十一时，要到12点了，很快迎来一波抢购，这波商品时间比较集中的放入缓存。假设过期时间为1小时，那么到了凌晨一点的时候，这批商品的缓存都过期了，而对这批商品的访问查询，都落到数据库上，对于数据库而言，就会产生周期性的压力波峰，于是所有的请求都会到达存储层，造成存储层也挂掉的情况。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210622164157.png" alt="image-20210622164156245"></p><blockquote><p>解决方案</p></blockquote><p><strong>redis高可用</strong></p><p>搭建集群（异地多活）</p><p><strong>限流降级</strong></p><p>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong></p><p>在正式部署之前，先把可能访问的数据预先访问一遍，这部分可能会被大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson</title>
      <link href="2021/05/13/jackson/"/>
      <url>2021/05/13/jackson/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Boot 内置了jackson来完成JSON的序列化和反序列化操作。Jackson使用<strong>ObjectMapper</strong>类将POJO对象序列化成JSON字符串，也能将JSON字符串反序列化成POJO对象。</p><blockquote><p>JackSon支持三种层次的序列化和反序列化方式：</p></blockquote><p>1、采用JsonParser来解析JSON，解析结果是一串Tokens，采用JsonGenerator来生成JSON，这是最底层的方式。<br>2、采用树遍历方式，JSON被读入到JsonNode对象中，可以像操作XML DOM那样读取JSON。<br>3、采用DataBind方式，将POJO序列化成JSON，或者反序列化到POJO，这是最直接和最简单的一种方式，不过有时候需要辅助Jackson的注解或者上述序列化实现类来个性化序列化和反序列化操作。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="对象绑定"><a href="#对象绑定" class="headerlink" title="对象绑定"></a>对象绑定</h2><p>应用程序更常见的是使用Java对象来与JSON数据互相绑定，仅仅调用<strong>ObjectMapper</strong>的readValue来实现，我们现在举个例子，可以创建一个POJO对象来与JSON相对应，<strong>User</strong>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（1）使用readValue方法来反序列化上面的JSON字符串，即json转换为对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadValue</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;id\&quot;:10,\&quot;sex\&quot;:\&quot;男\&quot;,\&quot;role\&quot;:\&quot;admin\&quot;&#125;&quot;</span>;</span><br><span class="line">    User user = objectMapper.readValue(str,User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&quot;&#123;&#39;name&#39;:&#39;张三&#39;,&#39;id&#39;:10,&#39;sex&#39;:&#39;男&#39;,&#39;role&#39;:&#39;admin&#39;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可能有人好奇为什么不按照上面的格式来写json格式字符串，因为json中如果使用单引号会出现问题，只能使用双引号</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513164036.png" alt="image-20210513164035071"></p><blockquote><p>json字符串已经被转换成User对象了</p></blockquote><p><strong>（2）将POJO序列化成JSON，使用mapper的writeValueAsString方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPojoToJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        String jsonStr = objectMapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513164534.png" alt="image-20210513164533098"></p><blockquote><p>pojo对象转换成了json格式字符串</p></blockquote><p><strong>（3）json转集合</strong></p><p> json转集合比较麻烦，因为你无法同时把集合的class和元素的class同时传递到一个参数。因此Jackson做了一个类型工厂，用来解决这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJsonToCollection</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>,<span class="number">13</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//生成一个集合的json字符串</span></span><br><span class="line">        String jsonStr = objectMapper.writeValueAsString(Arrays.asList(user,user1));</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将json字符串转集合  objectMapper.getTypeFactory().constructCollectionType(List.class,User.class) 第一个参数为集合的class，第二个为&lt;&gt;中的class</span></span><br><span class="line">        List&lt;User&gt; userList = objectMapper.readValue(jsonStr,objectMapper.getTypeFactory().constructCollectionType(List.class,User.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(userList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514092202.png" alt="image-20210514092153327"></p><p><strong>json转任意复杂类型</strong></p><p>当对象泛型关系复杂时，类型工厂也不好使了。这个时候Jackson提供了<strong>TypeReference</strong>来接收类型泛型，然后底层通过反射来获取泛型上的具体类型。实现数据转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJsonTypeReference</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    User user1 = <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>,<span class="number">13</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    <span class="comment">//生成一个集合的json字符串</span></span><br><span class="line">    String jsonStr = objectMapper.writeValueAsString(Arrays.asList(user,user1));</span><br><span class="line">    System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将json字符串转集合  objectMapper.getTypeFactory().constructCollectionType(List.class,User.class) 第一个参数为集合的class，第二个为&lt;&gt;中的class</span></span><br><span class="line">    List&lt;User&gt; userList = objectMapper.readValue(jsonStr,<span class="keyword">new</span> TypeReference&lt;List&lt;User&gt;&gt;()&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(userList);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514092530.png" alt="image-20210514092529280"></p><h2 id="Jackson注解"><a href="#Jackson注解" class="headerlink" title="Jackson注解"></a>Jackson注解</h2><p>Jackson包含了很多注解，用来个性化序列化和反序列化操作，主要有如下注解。</p><p><strong>（1）@JsonProperty</strong>，作用在属性上，用来为JSON Key指定一个别名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(&quot;userName&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p> <strong>（2）@JsonIgnore</strong>，作用在属性上，用来忽略此属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure><p><strong>（3）@JsonIgnoreProperties</strong>，忽略一组属性，作用于类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;id&quot;,&quot;photo&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>（4）@JsonFormat</strong>，用于日期格式化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH-mm-ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date d;</span><br></pre></td></tr></table></figure><p><strong>（5）@JsonView</strong>，作用在类或者属性上，用来定义一个序列化组。Spring MVC的Controller方法可以使用同样的@JsonView来序列化属于这一组的配置。比如对于User对象，某些情况下只返回id属性就行，而某些情况下需要返回id和名称。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdView</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdNameView</span> <span class="keyword">extends</span> <span class="title">IdView</span></span>&#123;&#125;;</span><br><span class="line"><span class="meta">@JsonView(IdView.class)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="meta">@JsonView(IdNameView.class)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.id = id;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">controller</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@JsonView(User.IdView.class)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/id.json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">queryIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setName(<span class="string">&quot;scg&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>（6）@JsonSerialize</strong>，指定一个实现类来自定义序列化。类必须实现JsonSerializer接口。</p><h2 id="jackson-Stream"><a href="#jackson-Stream" class="headerlink" title="jackson Stream"></a>jackson Stream</h2><p>Jackson提供了一种对于<strong>性能要求</strong>应用程序操作json更加高效的方式——<strong>流式API</strong>，这种方式<strong>开销小，性能高</strong>，因此，如果应用程序或者程序逻辑对于性能有一定要求，可以使用这种方式来进行json文件的读写操作，而对于一般的读写，使用普通的databind api即可。</p><blockquote><p>注意</p></blockquote><p>1、与Java8的“流式”概念不同，这种Jackson的这种流式是属于IO流，在写出与读入的最后都要进行流的关闭 —— close()。</p><p>2、这种流式API（Streaming APIs），是一种高性能（high-performance）读写JSON的方式，同时也是一种增量模式（incremental mode）。</p><p>3、Token概念：使用流式API的时候，每一个JSON 字符串都是一个独立的 token ，每一个token都会被增量处理（可以理解为一个一个地往上增加，类似于垒砖），这就是“增量模式”的含义。比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Morty&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Token 1 = “{“</p><p>Token 2 = “name”</p><p>Token 3 = “Morty”</p><p>Token 4 = “}”</p><p>4、流式API的缺点：虽然流式API在性能上有所特长，但是通过第三点，也可以知道，每一个token都是增量处理的，也就是说，我们必须要小心翼翼地处理每个token，这可能会因为粗心导致丢掉必要的token （如 “}”、”]” 等），而且代码可能并不简洁，可读性也不一定好，因此，不到需要考虑性能的时候，一定不要使用这种方式。</p><blockquote><p>测试</p></blockquote><p>在使用的时候我们要关注两个类：<strong>JsonGenerator</strong>和<strong>JsonParser</strong></p><p><strong>JsonGenerator</strong>：是用来生成Json的</p><p><strong>JsonParser</strong>：是用来解析json的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJsonGenerator</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        JsonFactory factory = <span class="keyword">new</span> JsonFactory();</span><br><span class="line">        <span class="comment">// -----------------JsonGenerator --------------------</span></span><br><span class="line">        JsonGenerator gentor = factory.createGenerator(<span class="keyword">new</span> File(<span class="string">&quot;user.json&quot;</span>), JsonEncoding.UTF8);</span><br><span class="line">        gentor.writeStartObject(); <span class="comment">// &#123;</span></span><br><span class="line">        gentor.writeStringField(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tomson&quot;</span>);</span><br><span class="line">        gentor.writeNumberField(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        gentor.writeFieldName(<span class="string">&quot;messages&quot;</span>);</span><br><span class="line">        gentor.writeStartArray(); <span class="comment">// [</span></span><br><span class="line">        gentor.writeString(<span class="string">&quot;msg1&quot;</span>);</span><br><span class="line">        gentor.writeString(<span class="string">&quot;msg2&quot;</span>);</span><br><span class="line">        gentor.writeString(<span class="string">&quot;msg3&quot;</span>);</span><br><span class="line">        gentor.writeEndArray(); <span class="comment">// ]</span></span><br><span class="line">        gentor.writeEndObject(); <span class="comment">// &#125;</span></span><br><span class="line">        gentor.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ------------------JsonParser --------------------</span></span><br><span class="line">        JsonParser parser = factory.createParser(<span class="keyword">new</span> File(<span class="string">&quot;user.json&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (parser.nextToken() != JsonToken.END_OBJECT) &#123;</span><br><span class="line">            String fieldName = parser.getCurrentName();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;name&quot;</span>.equals(fieldName)) &#123;</span><br><span class="line">                <span class="comment">// current token is &quot;name&quot;,move to next which is &quot;name&quot;&#x27;s value.</span></span><br><span class="line">                parser.nextToken();</span><br><span class="line">                System.out.println(parser.getText());<span class="comment">// display &quot;Tomson&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;age&quot;</span>.equals(fieldName)) &#123;</span><br><span class="line">                parser.nextToken();</span><br><span class="line">                System.out.println(parser.getIntValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;messages&quot;</span>.equals(fieldName)) &#123;</span><br><span class="line">                parser.nextToken();</span><br><span class="line">                <span class="comment">// messages is array, loop until equals &quot;]&quot;</span></span><br><span class="line">                <span class="keyword">while</span>(parser.nextToken() != JsonToken.END_ARRAY) &#123;</span><br><span class="line">                    System.out.println(parser.getText());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        parser.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>由于{}，[]，()等都被算成独立token，所以我们在拼写或解析的时候，一定要注意不要丢三落四。</p><p><strong>生成的user.json文件</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514100510.png" alt="image-20210514100509418"></p><p><strong>从json文件当中读取的数据</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210514100652.png" alt="image-20210514100650624"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8 Lambda</title>
      <link href="2021/05/13/Java8-Lanbda/"/>
      <url>2021/05/13/Java8-Lanbda/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从java8出现以来lambda是最重要的特性之一，它可以让我们用简洁流畅的代码完成一个功能。 很长一段时间java被吐槽是冗余和缺乏函数式编程能力的语言，随着函数式编程的流行java8种也引入了 这种编程风格。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513145847.png" alt="img"></p><blockquote><p>lambda是什么</p></blockquote><p>lambda表达式是一段可以传递的代码，它的核心思想是将面向对象中的传递数据变成传递行为。 我们回顾一下在使用java8之前要做的事，之前我们编写一个线程时是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;do something.&quot;</span>);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也有人会写一个类去实现Runnable接口，这样做没有问题，我们注意这个接口中只有一个run方法， 当把Runnable对象给Thread对象作为构造参数时创建一个线程，运行后将输出do something.。 我们使用匿名内部类的方式实现了该方法。</p><p>这实际上是一个代码即数据的例子，在run方法中是线程要执行的一个任务，但上面的代码中任务内容已经被规定死了。 当我们有多个不同的任务时，需要重复编写如上代码。</p><p>设计匿名内部类的目的，就是为了方便 Java 程序员将代码作为数据传递。不过，匿名内部 类还是不够简便。 为了执行一个简单的任务逻辑，不得不加上 6 行冗繁的样板代码。那如果是lambda该怎么做?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = () -&gt; System.out.println(<span class="string">&quot;do something.&quot;</span>);</span><br></pre></td></tr></table></figure><p>嗯，这代码看起来很酷，你可以看到我们用()和-&gt;的方式完成了这件事，这是一个没有名字的函数，也没有人和参数，再简单不过了。 使用-&gt;将参数和实现逻辑分离，当运行这个线程的时候执行的是-&gt;之后的代码片段，且编译器帮助我们做了类型推导； 这个代码片段可以是用{}包含的一段逻辑。下面一起来学习一下lambda的语法。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression &#x3D; (variable) -&gt; action</span><br></pre></td></tr></table></figure><ul><li><p>variable: 这是一个变量,一个占位符。像x,y,z,可以是多个变量；</p></li><li><p>action: 这里我称它为action, 这是我们实现的代码逻辑部分,它可以是一行代码也可以是一个代码片段。</p></li></ul><p>可以看到Java中lambda表达式的格式：参数、箭头、以及动作实现，当一个动作实现无法用一行代码完成，可以编写 一段代码用{}包裹起来。</p><p>lambda表达式可以包含多个参数,例如：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int sum &#x3D; (x, y) -&gt; x + y;</span><br></pre></td></tr></table></figure><p>这时候我们应该思考这段代码不是之前的x和y数字相加，而是创建了一个函数，用来计算两个操作数的和。 后面用int类型进行接收，在lambda中为我们省略去了return。</p><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>函数式接口是只有一个方法的接口，用作lambda表达式的类型。前面写的例子就是一个函数式接口，来看看jdk中的Runnable源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只有一个抽象方法run，实际上你不写public abstract也是可以的，在接口中定义的方法都是public abstract的。 同时也使用注解@FunctionalInterface告诉编译器这是一个函数式接口，当然你不这么写也可以，标识后明确了这个函数中 只有一个抽象方法，当你尝试在接口中编写多个方法的时候编译器将不允许这么干。</p><p>我们来编写一个函数式接口，输入一个年龄，判断这个人是否是成人。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionInterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行Predicate判断</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age       年龄</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> predicate Predicate函数式接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>          返回布尔类型结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doPredicate</span><span class="params">(<span class="keyword">int</span> age, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> predicate.test(age);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isAdult = doPredicate(<span class="number">20</span>, x -&gt; x &gt;= <span class="number">18</span>);</span><br><span class="line">        System.out.println(isAdult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个例子我们很轻松的完成 是否是成人 的动作，其次判断是否是成人，在此之前我们的做法一般是编写一个 判断是否是成人的方法，是无法将 判断 共用的。而在本例只，你要做的是将 行为 (判断是否是成人，或者是判断是否大于30岁) 传递进去，函数式接口告诉你结果是什么。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Java8新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity+JWT+SpringBoot</title>
      <link href="2021/05/10/springSecuity+JWT/"/>
      <url>2021/05/10/springSecuity+JWT/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如今，互联网项目对于安全的要求越来越严格，这就是对后端开发提出了更多的要求，目前比较成熟的几种大家比较熟悉的模式，像RBAC 基于角色权限的验证，shiro框架专门用于处理权限方面的，另一个比较流行的后端框架是Spring-Security，该框架提供了一整套比较成熟，也很完整的机制用于处理各类场景下的可以基于权限，资源路径，以及授权方面的解决方案，部分模块支持定制化，而且在和oauth2.0进行了很好的无缝连接，在移动互联网的授权认证方面有很强的优势，具体的使用大家可以结合自己的业务场景进行选取和使用</p><p>下面来说说关于单点登录中目前比较流行的一种使用方式，就是springsecurity+jwt实现无状态下用户登录；</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p>1、创建数据库及表</p><p>用户表创建sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><h2 id="项目工程准备"><a href="#项目工程准备" class="headerlink" title="项目工程准备"></a>项目工程准备</h2><p>1、创建项目工程</p><p>用spring init创建一个springboot项目。</p><p>2、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- security --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- mybatisPlus --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jwt --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springsecurity</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springsecurity?useUnicode=true&amp;characterEncoding=UTF-8&amp;useTimezone=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mappers/*Mapper.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="编程阶段"><a href="#编程阶段" class="headerlink" title="编程阶段"></a>编程阶段</h1><h2 id="开发必知"><a href="#开发必知" class="headerlink" title="开发必知"></a>开发必知</h2><h3 id="SpringSecurity相关"><a href="#SpringSecurity相关" class="headerlink" title="SpringSecurity相关"></a>SpringSecurity相关</h3><p>使用SpringSecurity进行权限控制，要实现UserDetailsService和UserDetails</p><blockquote><p>UserDetailsService在身份认证中的作用</p></blockquote><p> Spring Security中进行身份验证的是AuthenticationManager接口，ProviderManager是它的一个默认实现，但它并不用来处理身份认证，而是委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证。检查后或者返回Authentication对象或者抛出异常。</p><p>验证身份就是加载响应的UserDetails，看看是否和用户输入的账号、密码、权限等信息匹配。此步骤由实现AuthenticationProvider的DaoAuthenticationProvider（它利用UserDetailsService验证用户名、密码和授权）处理。包含 GrantedAuthority 的 UserDetails对象在构建 Authentication对象时填入数据。</p><blockquote><p>校验流程</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512101507.jpg" alt="img"></p><h3 id="类相关"><a href="#类相关" class="headerlink" title="类相关"></a>类相关</h3><p>在本次学习中我们将要完成以下类的开发</p><ol><li><p>基础类</p><p><strong>User</strong>(用户的实体类)</p><p><strong>UserMapper</strong>(用户DAO层接口，由于我们引入的是MybatisPlus,，所以这次开发中我们不需要xml文件)</p><p><strong>LoginUser</strong>(用于控制层接收登录时传递过来的数据)</p></li><li><p>Security相关</p><p><strong>SerurityCpnfig</strong>(Security的配置类)</p><p><strong>JwtAccessDeniedHandler</strong>（无权限时处理类）</p><p><strong>JwtAuthenticationEntryPoint</strong>(没有凭证时处理类)</p><p><strong>JWTAuthenticationFilter</strong>(认证拦截器类)</p><p><strong>JWTAuthorizationFilter</strong>(授权拦截器类)</p><p><strong>UserDetailsServiceImpl</strong>(实现了<strong>UserDetailsService</strong>接口，里面具有登陆时根据条件查询用户的方法)</p></li><li><p>JWT</p><p><strong>JWTUtils</strong>(JWT的方法封装，以及基础配置)</p><p><strong>JWTUser</strong>(实现了<strong>UserDetails</strong>接口)</p></li><li><p>测试</p><p><strong>LoginController</strong>(里面具有注册方法)</p><p><strong>UserController</strong>(里面有添加、修改、删除三个方法，添加要求必须登录，修改要求权限角色是ROLE_USER，删除要求权限角色是ROLE_ADMIN)</p></li></ol><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512095115.png" alt="image-20210512095106359"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;role&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h3><p>由于我们使用的是MyBatisPlus，所以一些基础的sql，我们可以不用写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoginUser"><a href="#LoginUser" class="headerlink" title="LoginUser"></a>LoginUser</h3><p>创建LoginUser，springsecurity有个自己的登录接口(POST)，用这个来接收对应的登录信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer rememberMe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTUser"><a href="#JWTUser" class="headerlink" title="JWTUser"></a>JWTUser</h3><p>JWTUser需要实现<strong>UserDetails</strong>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写一个能直接使用user创建jwtUser的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        id = user.getId();</span><br><span class="line">        username = user.getUsername();</span><br><span class="line">        password = user.getPassword();</span><br><span class="line">        authorities = Collections.singleton(<span class="keyword">new</span> SimpleGrantedAuthority(user.getRole()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWTUtils"><a href="#JWTUtils" class="headerlink" title="JWTUtils"></a>JWTUtils</h3><p>JWT的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_HEADER = <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_PREFIX = <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">&quot;jwtsecret&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISS = <span class="string">&quot;zsy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 角色的key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROLE_CLAIMS = <span class="string">&quot;role&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过期时间是3600秒，既是1个小时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRATION = <span class="number">3600L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择了记住我之后的过期时间为7天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRATION_REMEMBER = <span class="number">604800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建token</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(Integer id, String username,String role, <span class="keyword">boolean</span> isRememberMe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> expiration = isRememberMe ? EXPIRATION_REMEMBER : EXPIRATION;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(ROLE_CLAIMS, role);</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, SECRET)</span><br><span class="line">                .setClaims(map)</span><br><span class="line">                .setIssuer(ISS)</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + expiration * <span class="number">1000</span>))</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从token中获取用户名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUsername</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getTokenBody(token).getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUserRole</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) getTokenBody(token).get(ROLE_CLAIMS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getUserId</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer) getTokenBody(token).get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否已过期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExpiration</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getTokenBody(token).getExpiration().before(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Claims <span class="title">getTokenBody</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(SECRET)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoginServiceImpl"><a href="#LoginServiceImpl" class="headerlink" title="LoginServiceImpl"></a>LoginServiceImpl</h3><p>由于使用的是SpringSecurity权限框架，所以需要实现<strong>UserDetailsService</strong>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据用户名去获取用户</span></span><br><span class="line">        User user = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery()</span><br><span class="line">                .eq(User::getUsername, s));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JWTUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>可以说到目前为止这是最复杂的一个步骤，其实搞清楚了还是挺简单的，网上挺多人都更倾向于使用shiro，但是偶尔也要尝试一下新东西的嘛，但是当时我在摸索的时候遇到挺多坑，当时也已经到了思考人生的地步了 框架不是为了简化开发吗！为什么！明明jwt加上权限框架是双倍的快乐！为什么会这样！(╯°口°)╯(┴—┴</p><p>回到正题，到底要怎么配置呢？使用过shiro的人会知道，鉴权的话需要自己实现一个realm，重写两个方法，第一是用户验证，第二是鉴权。在spring-security中也不例外，这边需要实现两个过滤器。使用JWTAuthenticationFilter去进行用户账号的验证，使用JWTAuthorizationFilter去进行用户权限的验证。</p><h4 id="JWTAuthenticationFilter"><a href="#JWTAuthenticationFilter" class="headerlink" title="JWTAuthenticationFilter"></a>JWTAuthenticationFilter</h4><p>JWTAuthenticationFilter继承于UsernamePasswordAuthenticationFilter<br>该拦截器用于获取用户登录的信息，只需创建一个token并调用authenticationManager.authenticate()让spring-security去进行验证就可以了，不用自己查数据库再对比密码了，这一步交给spring去操作。<br>这个操作有点像是shiro的subject.login(new UsernamePasswordToken())，验证的事情交给框架。</p><blockquote><p>由于我们定义了/pub/login登录访问路径，我们不需要去写controller层的login方法，只需要直接访问/pub/login路径，就会被认证拦截器拦截进入验证方法attemptAuthentication</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; rememberMe = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="comment">// 重新定义登录访问路径</span></span><br><span class="line">        <span class="keyword">super</span>.setFilterProcessesUrl(<span class="string">&quot;/pub/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中获取到登录的信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LoginUser loginUser = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), LoginUser.class);</span><br><span class="line">            rememberMe.set(loginUser.getRememberMe() == <span class="keyword">null</span> ? <span class="number">0</span> : loginUser.getRememberMe());</span><br><span class="line">            <span class="keyword">return</span> authenticationManager.authenticate(</span><br><span class="line">                    <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser.getUsername(), loginUser.getPassword(), <span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功验证后调用的方法</span></span><br><span class="line">    <span class="comment">// 如果验证成功，就生成token并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            FilterChain chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JWTUser jwtUser = (JWTUser) authResult.getPrincipal();</span><br><span class="line">        <span class="keyword">boolean</span> isRemember = rememberMe.get() == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        String role = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = jwtUser.getAuthorities();</span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : authorities)&#123;</span><br><span class="line">            role = authority.getAuthority();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = JWTUtils.createToken(jwtUser.getId(), jwtUser.getUsername(), role, isRemember);</span><br><span class="line"><span class="comment">//        String token = JwtTokenUtils.createToken(jwtUser.getUsername(), false);</span></span><br><span class="line">        <span class="comment">// 返回创建成功的token</span></span><br><span class="line">        <span class="comment">// 但是这里创建的token只是单纯的token</span></span><br><span class="line">        <span class="comment">// 按照jwt的规定，最后请求的时候应该是 `Bearer token`</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;token&quot;</span>, JWTUtils.TOKEN_PREFIX + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;authentication failed, reason: &quot;</span> + failed.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JWTAuthorizationFilter（进行用户权限的验证）"><a href="#JWTAuthorizationFilter（进行用户权限的验证）" class="headerlink" title="JWTAuthorizationFilter（进行用户权限的验证）"></a>JWTAuthorizationFilter（进行用户权限的验证）</h4><p>验证成功当然就是进行鉴权了，每一次需要权限的请求都需要检查该用户是否有该权限去操作该资源，当然这也是框架帮我们做的，那么我们需要做什么呢？很简单，只要告诉spring-security该用户是否已登录，是什么角色，拥有什么权限就可以了。<br>JWTAuthenticationFilter继承于BasicAuthenticationFilter，至于为什么要继承这个我也不太清楚了，这个我也是网上看到的其中一种实现，实在springSecurity苦手，不过我觉得不继承这个也没事呢（实现以下filter接口或者继承其他filter实现子类也可以吧）只要确保过滤器的顺序，JWTAuthorizationFilter在JWTAuthenticationFilter后面就没问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTAuthorizationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="comment">//JWTUtils.TOKEN_HEADER = Authorization，所以请求头中必须带有Authorization</span></span><br><span class="line">        String tokenHeader = request.getHeader(JWTUtils.TOKEN_HEADER);</span><br><span class="line">        <span class="comment">// 如果请求头中没有Authorization信息则直接放行了</span></span><br><span class="line">        <span class="keyword">if</span> (tokenHeader == <span class="keyword">null</span> || !tokenHeader.startsWith(JWTUtils.TOKEN_PREFIX)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果请求头中有token，则进行解析，并且设置认证信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(getAuthentication(tokenHeader));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//返回json形式的错误信息</span></span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">            String reason = <span class="string">&quot;统一处理，原因：&quot;</span> + e.getMessage();</span><br><span class="line">            response.getWriter().write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(reason));</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.doFilterInternal(request, response, chain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里从token中获取用户信息并新建一个token</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title">getAuthentication</span><span class="params">(String tokenHeader)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = tokenHeader.replace(JWTUtils.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> expiration = JWTUtils.isExpiration(token);</span><br><span class="line">        <span class="keyword">if</span> (expiration) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;token超时了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String username = JWTUtils.getUsername(token);</span><br><span class="line">            String role = JWTUtils.getUserRole(token);</span><br><span class="line">            Integer id = JWTUtils.getUserId(token);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, <span class="keyword">null</span>,</span><br><span class="line">                        Collections.singleton(<span class="keyword">new</span> SimpleGrantedAuthority(role))</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JwtAccessDeniedHandler无权限时处理方法"><a href="#JwtAccessDeniedHandler无权限时处理方法" class="headerlink" title="JwtAccessDeniedHandler无权限时处理方法"></a>JwtAccessDeniedHandler无权限时处理方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.sendError(HttpServletResponse.SC_FORBIDDEN, accessDeniedException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JwtAuthenticationEntryPoint无凭证时处理方法"><a href="#JwtAuthenticationEntryPoint无凭证时处理方法" class="headerlink" title="JwtAuthenticationEntryPoint无凭证时处理方法"></a>JwtAuthenticationEntryPoint无凭证时处理方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         AuthenticationException authException)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JwtAuthenticationEntryPoint:&quot;</span>+authException.getMessage());</span><br><span class="line">        response.sendError(HttpServletResponse.SC_UNAUTHORIZED,<span class="string">&quot;没有凭证&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SpringSecurity"><a href="#配置SpringSecurity" class="headerlink" title="配置SpringSecurity"></a>配置SpringSecurity</h3><p>到这里基本操作都写好啦，现在就需要我们将这些辛苦写好的“组件”组合到一起发挥作用了，那就需要配置了。需要开启一下注解@EnableWebSecurity然后再继承一下WebSecurityConfigurerAdapter就可以啦，springboot就是可以为所欲为~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerurityCpnfig</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDetailsServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密类，它可以进行配置，这里直接采用默认的密码加密规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsServiceImpl).passwordEncoder(bCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.cors().and().csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 拦截路径配置 配置方式与shiro有点相似 antMatchers(请求方式，请求路径) hasRole是否具有该角色权限 还有其他的方法</span></span><br><span class="line">                .antMatchers(HttpMethod.GET,<span class="string">&quot;/user/input&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>,<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">&quot;/user/update&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">&quot;/user/delete&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                <span class="comment">// 测试用资源，需要验证了的用户才能访问 authenticated必须登录</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).authenticated()</span><br><span class="line">                <span class="comment">// 静态资源等等</span></span><br><span class="line">                .antMatchers(</span><br><span class="line">                        HttpMethod.GET,</span><br><span class="line">                        <span class="string">&quot;/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.js&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/webSocket/**&quot;</span></span><br><span class="line">                ).permitAll()</span><br><span class="line">                <span class="comment">// swagger 文档 permitAll放行</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-resources/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/webjars/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/*/api-docs&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 文件</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/avatar/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/file/**&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 阿里巴巴 druid</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/druid/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/actuator/**&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 其他都放行了</span></span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .addFilter(<span class="keyword">new</span> JWTAuthenticationFilter(authenticationManager()))</span><br><span class="line">                .addFilter(<span class="keyword">new</span> JWTAuthorizationFilter(authenticationManager()))</span><br><span class="line">                <span class="comment">// 不需要session</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(<span class="keyword">new</span> JwtAuthenticationEntryPoint())</span><br><span class="line">                .accessDeniedHandler(<span class="keyword">new</span> JwtAccessDeniedHandler());      <span class="comment">//添加无权限时的处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, <span class="keyword">new</span> CorsConfiguration().applyPermitDefaultValues());</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h3><p><strong>LoginController</strong>类中只有注册的方法，因为登录已经交给SpringSecurity了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//密码验证类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">registerUser</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; registerUser)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(registerUser.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        <span class="comment">// 记得注册的时候把密码加密一下</span></span><br><span class="line">        user.setPassword(bCryptPasswordEncoder.encode(registerUser.get(<span class="string">&quot;password&quot;</span>)));</span><br><span class="line">        user.setRole(<span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        User user1 = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername, user.getUsername()));</span><br><span class="line">        <span class="keyword">return</span> user1.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h3><p><strong>UserController</strong>中具有三个测试方法，**@PreAuthorize(“hasAuthority(‘ROLE_ADMIN’)”)<strong>表示该请求必须具有权限</strong>ROLE_ADMIN**</p><blockquote><p>虽然我此时写了<strong>ROLE_ADMIN</strong>，但是hasAuthority()是针对权限的，针对角色的控制在SpringSecurity配置时完成了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">input</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;ROLE_USER&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;ROLE_ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="未登录时访问"><a href="#未登录时访问" class="headerlink" title="未登录时访问"></a>未登录时访问</h2><p><strong>input</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110509.png" alt="image-20210512110505343"></p><p><strong>update</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110546.png" alt="image-20210512110544327"></p><p><strong>delete</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110620.png" alt="image-20210512110618549"></p><h2 id="登录后访问"><a href="#登录后访问" class="headerlink" title="登录后访问"></a>登录后访问</h2><p>1、注册</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512110718.png" alt="image-20210512110716899"></p><p>2、登录</p><p>登录后生成token被放入返回头中的token属性</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111022.png" alt="image-20210512111020692"></p><p>3、测试</p><p>在测试的时候我们必须带上生成的token，告诉服务端，我们已成功登录，由于进行权限验证时从请求头中获取token是读取的属性是Authorization，所以我们访问时是用Authorization携带token信息</p><p><strong>input</strong></p><p>由于input接口只要求认证，所以成功访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111208.png" alt="image-20210512111158744"></p><p><strong>update</strong></p><p>由于update要求的权限角色为ROLE_USER，而zsy账号的角色为ROLE_ADMIN，所以禁止访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111414.png" alt="image-20210512111413453"></p><p><strong>delete</strong></p><p>delete接口要求的权限角色为ROLE_ADMIN，所以可以正常访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512111617.png" alt="image-20210512111615892"></p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="SpringSecurity的四种权限控制"><a href="#SpringSecurity的四种权限控制" class="headerlink" title="SpringSecurity的四种权限控制"></a>SpringSecurity的四种权限控制</h2><h3 id="表达式控制URL路径权限"><a href="#表达式控制URL路径权限" class="headerlink" title="表达式控制URL路径权限"></a>表达式控制URL路径权限</h3><p>Spring Security 支持在 URL 和方法权限控制时使用 SpEL 表达式，如果表达式返回值为 true 则表示需要对应的权限，否则表示不需要对应的权限。提供表达式的类是 SecurityExpressionRoot：</p><p><img src="../../../../typora/images/aHR0cDovL2ltZy5pdGJveWh1Yi5jb20vMjAyMC8wNi9TZWN1cml0eUV4cHJlc3Npb25Sb290LnBuZw" alt="img"></p><p>可以看到，SecurityExpressionRoot 有两个实现类，表示在应对 URL 权限控制和应对方法权限控制时，分别对 SpEL 所做的拓展，例如在基于 URL 路径做权限控制时，增加了 hasIpAddress 选项。</p><p>我们来看下 SecurityExpressionRoot 类中定义的最基本的 SpEL 有哪些：<br><img src="../../../../typora/images/aHR0cDovL2ltZy5pdGJveWh1Yi5jb20vMjAyMC8wNi8yMDIwMDYwODE2MDgxMS5wbmc" alt="img"></p><p>可以看到，这些都是该类对应的表达式，这些表达式我来给大家稍微解释下：</p><table><thead><tr><th>表达</th><th>备注</th></tr></thead><tbody><tr><td>hasRole</td><td>用户具备某个角色即可访问资源</td></tr><tr><td>hasAnyRole</td><td>备多个角色中的任意一个即可访问资源</td></tr><tr><td>hasAuthority</td><td>类似于 hasRole</td></tr><tr><td>hasAnyAuthority</td><td>类似于 hasAnyRole</td></tr><tr><td>permitAll</td><td>统统允许访问</td></tr><tr><td>denyAll</td><td>统统拒绝访问</td></tr><tr><td>isAnonymous</td><td>判断是否匿名用户</td></tr><tr><td>isAuthenticated</td><td>判断是否认证成功</td></tr><tr><td>isRememberMe</td><td>判断是否通过记住我登录的</td></tr><tr><td>isFullyAuthenticated</td><td>判断是否用户名/密码登录的</td></tr><tr><td>principle</td><td>当前用户</td></tr><tr><td>authentication</td><td>从 SecurityContext 中提取出来的用户对象</td></tr></tbody></table><p>这是最基本的，在它的继承类中，还有做一些拓展，我这个我就不重复介绍了。</p><p>如果是通过 URL 进行权限控制，那么我们只需要按照如下方式配置即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式控制方法权限"><a href="#表达式控制方法权限" class="headerlink" title="表达式控制方法权限"></a>表达式控制方法权限</h3><p>当然，我们也可以通过在方法上添加注解来控制权限。</p><p>在方法上添加注解控制权限，需要我们首先开启注解的使用，在 Spring Security 配置类上添加如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true,securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置开启了三个注解，分别是：</p><ul><li>@PreAuthorize：方法执行前进行权限检查</li><li>@PostAuthorize：方法执行后进行权限检查</li><li>@Secured：类似于 @PreAuthorize</li></ul><p>这三个结合 SpEL 之后，用法非常灵活，这里和大家稍微分享几个 Demo。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;principal.username.equals(&#x27;javaboy&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured(&#123;&quot;ROLE_user&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;#age&gt;98&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个 hello 方法，注解的约束是，只有当前登录用户名为 javaboy 的用户才可以访问该方法。<br>第二个 admin 方法，表示访问该方法的用户必须具备 admin 角色。<br>第三个 user 方法，表示方法该方法的用户必须具备 user 角色，但是注意 user 角色需要加上 ROLE_ 前缀。<br>第四个 getAge 方法，表示访问该方法的 age 参数必须大于 98，否则请求不予通过。<br>可以看到，这里的表达式还是非常丰富，如果想引用方法的参数，前面加上一个 # 即可，既可以引用基本类型的参数，也可以引用对象参数。</p><p>缺省对象除了 principal ，还有 authentication（参考第一小节）。</p><h3 id="使用过滤注解"><a href="#使用过滤注解" class="headerlink" title="使用过滤注解"></a>使用过滤注解</h3><p>Spring Security 中还有两个过滤函数 @PreFilter 和 @PostFilter，可以根据给出的条件，自动移除集合中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostFilter(&quot;filterObject.lastIndexOf(&#x27;2&#x27;)!=-1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        users.add(<span class="string">&quot;javaboy:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreFilter(filterTarget = &quot;ages&quot;,value = &quot;filterObject%2==0&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllAge</span><span class="params">(List&lt;Integer&gt; ages,List&lt;String&gt; users)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ages = &quot;</span> + ages);</span><br><span class="line">    System.out.println(<span class="string">&quot;users = &quot;</span> + users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 getAllUser 方法中，对集合进行过滤，只返回后缀为 2 的元素，filterObject 表示要过滤的元素对象。</li><li>在 getAllAge 方法中，由于有两个集合，因此使用 filterTarget 指定过滤对象。</li></ul><h3 id="动态权限"><a href="#动态权限" class="headerlink" title="动态权限"></a>动态权限</h3><p>动态权限主要通过重写拦截器和决策器来实现</p><h2 id="使用权限字符串进行权限控制"><a href="#使用权限字符串进行权限控制" class="headerlink" title="使用权限字符串进行权限控制"></a>使用权限字符串进行权限控制</h2><p>在前面的例子，我们采用的hasRole来进行权限控制，但是如果没有动态权限，这样就显的很被动，当想对某个角色权限进行修改的时候，就必须进入代码里面对代码进行修改。但是，在我使用shiro的时候，我只需要在接口前加上权限字符串，并将权限与角色的关联关系保存进数据库中，当我想要修改角色的权限时，只需要修改角色与权限的关联关系就可以了，到时候我们可以专门写一个接口来实现对角色权限的设置，而不用去修改代码。</p><p>在SpringSecurity中也可以基于权限字符串进行权限控制。我们将以insert接口为例讲解。</p><h3 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h3><p>1、首先SpringSecurity的配置类进行修改</p><blockquote><p>将/user/insert的权限控制设为登录</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512151931.png" alt="image-20210512151930421"></p><p>2、修改UserController</p><blockquote><p>给/user/insert设置权限其实可以直接在SpringSecurity中设置，但是为了方便对路径接口的权限控制，我一般写在controller层</p><p>有一个值得注意的点，在前面时update和delete方法上，我们使用的<strong>hasAuthority</strong>()，这是权限的注解写法，现在我们针对角色采用<strong>hasRole</strong>()，此时我们会发现要求的字符串由<strong>ROLE_USER</strong>变成了<strong>USER</strong>，这为什么喃？</p><p>很简单在SpringSecurity设置权限的时候可以将角色与权限一起设置进去，这个时候咋区分<strong>权限</strong>与角色？如何决定采用的是<strong>hasRole</strong>()还是<strong>hasAuthority</strong>()？这个时候对于角色则表示为“ROLE_”+角色名，在<strong>hasRole</strong>()进行判断的时候只需要填上<strong>角色名</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据权限字符串</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user_insert&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">input</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据角色</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;USER&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//根据角色</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除了id为&quot;</span>+id+<span class="string">&quot;的数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、对<strong>UserDetailsServiceImpl</strong>修改</p><p>在前面中，我们没有考虑多权限，所以我们需要在这里查询该用户的角色以及权限，一般是根据用户查角色，根据角色查权限，我们在这里只是简单模拟以下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">       <span class="comment">// 根据用户名去获取用户</span></span><br><span class="line">       User user = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery()</span><br><span class="line">               .eq(User::getUsername, s));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;=========================进入数据库查询账户=======================================&quot;</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//权限集合</span></span><br><span class="line">       List&lt;String &gt; authoritiy = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="comment">//有些接口需要角色</span></span><br><span class="line">       authoritiy.add(user.getRole());</span><br><span class="line">       authoritiy.add(<span class="string">&quot;user_insert&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> JWTUser(user,authoritiy);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4、修改JWTUser的构造方法</p><p>由于前面只考虑了单个权限，而没有考虑多权限，所以现在需要对它进修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写一个能直接使用user创建jwtUser的构造器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">JWTUser</span><span class="params">(User user, List&lt;String&gt; authoritiy)</span> </span>&#123;</span><br><span class="line">       id = user.getId();</span><br><span class="line">       username = user.getUsername();</span><br><span class="line">       password = user.getPassword();</span><br><span class="line">       String authoritiyStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">//将查询出来的权限字符串拼成一个字符串</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;authoritiy.size();i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">              authoritiyStr+=authoritiy.get(i);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              authoritiyStr+=<span class="string">&quot;,&quot;</span>+authoritiy.get(i);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(authoritiyStr);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>5、修改JWTAuthenticationFilter</p><p>由于前面只考虑了单权限，多权限和角色时不适用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功验证后调用的方法</span></span><br><span class="line">    <span class="comment">// 如果验证成功，就生成token并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            FilterChain chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JWTUser jwtUser = (JWTUser) authResult.getPrincipal();</span><br><span class="line">        <span class="keyword">boolean</span> isRemember = rememberMe.get() == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        String role = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = jwtUser.getAuthorities();</span><br><span class="line">        <span class="keyword">int</span> i= <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//获取多权限字符串</span></span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : authorities)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                role += authority.getAuthority();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                role +=<span class="string">&quot;,&quot;</span>+authority.getAuthority();</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============================认证成功======================&quot;</span>);</span><br><span class="line">        System.out.println(role);</span><br><span class="line">        String token = JWTUtils.createToken(jwtUser.getId(), jwtUser.getUsername(), role, isRemember);</span><br><span class="line"><span class="comment">//        String token = JwtTokenUtils.createToken(jwtUser.getUsername(), false);</span></span><br><span class="line">        <span class="comment">// 返回创建成功的token</span></span><br><span class="line">        <span class="comment">// 但是这里创建的token只是单纯的token</span></span><br><span class="line">        <span class="comment">// 按照jwt的规定，最后请求的时候应该是 `Bearer token`</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;token&quot;</span>, JWTUtils.TOKEN_PREFIX + token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6、修改JWTAuthorizationFilter</p><p>由于前面只考虑了单权限，多权限和角色时不适用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里从token中获取用户信息并新建一个token</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title">getAuthentication</span><span class="params">(String tokenHeader)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String token = tokenHeader.replace(JWTUtils.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">       <span class="keyword">boolean</span> expiration = JWTUtils.isExpiration(token);</span><br><span class="line">       <span class="keyword">if</span> (expiration) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;token超时了&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           String username = JWTUtils.getUsername(token);</span><br><span class="line">           String role = JWTUtils.getUserRole(token);</span><br><span class="line">           Integer id = JWTUtils.getUserId(token);</span><br><span class="line">           <span class="keyword">if</span> (username != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, <span class="keyword">null</span>,</span><br><span class="line">                       AuthorityUtils.commaSeparatedStringToAuthorityList(role)</span><br><span class="line">               );</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><h4 id="具有ADMIN角色和user-insert权限"><a href="#具有ADMIN角色和user-insert权限" class="headerlink" title="具有ADMIN角色和user_insert权限"></a>具有ADMIN角色和user_insert权限</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162055.png" alt="image-20210512162054063"></p><p><strong>insert</strong></p><p>要求<strong>user_insert</strong>权限</p><p><img src="../../../../typora/images/image-20210512161754180.png" alt="image-20210512161754180"></p><p><strong>update</strong></p><p>要求<strong>USER</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512161926.png" alt="image-20210512161925021"></p><p><strong>delete</strong></p><p>要求<strong>ADMIN</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162657.png" alt="image-20210512162656169"></p><h4 id="只具有USER角色"><a href="#只具有USER角色" class="headerlink" title="只具有USER角色"></a>只具有USER角色</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162300.png" alt="image-20210512162258559"></p><p><strong>insert</strong></p><p>要求<strong>user_insert</strong>权限</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162457.png" alt="image-20210512162455583"></p><p><strong>update</strong></p><p>要求<strong>USER</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162531.png" alt="image-20210512162529212"></p><p><strong>delete</strong></p><p>要求<strong>ADMIN</strong>角色</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210512162512.png" alt="image-20210512162510660"></p><blockquote><p>通过这种方式，可以实现一个用户可以关联多个多个角色，亦或者修改角色的权限并不需要动代码，只需要修改角色与权限的关联关系。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 权限 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8 Stream流</title>
      <link href="2021/04/30/JavaStream%E6%B5%81/"/>
      <url>2021/04/30/JavaStream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java8给我们提供了一个新功能：Stream流。单从“Stream”这个单词上来看，它似乎和 java.io 包下的InputStream 和 OutputStream 有些关系。实际上呢，没毛关系。它是为了解放程序员操作<strong>集合</strong>时的生产力，之所以能解放，很大一部分可以归功于同事出现的<strong>lambda表达式</strong>–极大的提高了变成效率和程序可读性。</p><blockquote><p>Stream是什么</p></blockquote><p>Stream就好像一个高级的迭代器，但只能遍历一次，就好像一江春水向东流；<strong>在流的过程中，对流中的元素执行一些操作，比如“过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等</strong>。要想操作流，首先需要有一个数据源，可以是数组或者集合。每次操作都会返回一个新的流对象，方便进行链式操作，但原有的流对象会保持不变。</p><blockquote><p>为什么要用Stream？</p></blockquote><p>Stream作为Java8的一大亮点，它与java.io包里的InputStream和OutputStream是完全不同的概念。它也不同于StAX对XML解析的Stream，也不是Amazon Kinesis对大数据实时处理的Stream。Java8中的Stream是对容器对象功能的增强，它专注于对容器对象进行各种非常便利、高效的 <strong>聚合操作（aggregate operation）</strong>，或者大批量数据操作 (bulk data operation)。Stream API借助于同样新出现的Lambda表达式，极大的提高编程效率和程序可读性。同时，它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用fork/join并行方式来拆分任务和加速处理过程。通常，编写并行代码很难而且容易出错, 但使用Stream API无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java8中首次出现的 <strong>java.util.stream是一个函数式语言+多核时代综合影响的产物。</strong></p><blockquote><p>什么是聚合操作</p></blockquote><p>在传统的J2EE应用中，Java代码经常不得不依赖于关系型数据库的聚合操作来完成诸如：</p><ul><li>客户每月平均消费金额</li><li>最昂贵的在售商品</li><li>本周完成的有效订单（排除了无效的）</li><li>取十个数据样本作为首页推荐</li></ul><p>这类的操作。但在当今这个数据大爆炸的时代，在数据来源多样化、数据海量化的今天，很多时候不得不脱离 RDBMS，或者以底层返回的数据为基础进行更上层的数据统计。而Java的集合API中，仅仅有极少量的辅助型方法，更多的时候是程序员需要用Iterator来遍历集合，完成相关的聚合应用逻辑，这是一种远不够高效、笨拙的方法。在Java7中，如果要发现type为grocery的所有交易，然后返回以交易值降序排序好的交易ID集合，我们需要这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Transaction&gt; groceryTransactions = <span class="keyword">new</span> Arraylist&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Transaction t: transactions)&#123;</span><br><span class="line"> <span class="keyword">if</span>(t.getType() == Transaction.GROCERY)&#123;</span><br><span class="line"> groceryTransactions.add(t);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Collections.sort(groceryTransactions, <span class="keyword">new</span> Comparator()&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Transaction t1, Transaction t2)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> t2.getValue().compareTo(t1.getValue());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; transactionIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Transaction t: groceryTransactions)&#123;</span><br><span class="line"> transactionsIds.add(t.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 Java 8 使用 Stream，代码更加简洁易读；而且使用并发模式，程序执行速度更快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = transactions.parallelStream()</span><br><span class="line">.filter(t -&gt; t.getType() == Transaction.GROCERY)</span><br><span class="line">.sorted(comparing(Transaction::getValue).reversed())</span><br><span class="line">.map(Transaction::getId).collect(toList());</span><br></pre></td></tr></table></figure><blockquote><p>操作类型</p></blockquote><p>1）中间操作，可以有多个，每次返回一个新的流，可进行链式操作。</p><p>2）终端操作，只能有一个，每次执行完，这个流也就用光光了，无法执行下一个操作，因此只能放在最后。</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><h2 id="流的构成"><a href="#流的构成" class="headerlink" title="流的构成"></a>流的构成</h2><p>当我们使用一个流的时候，通常包括三个基本步骤：获取一个数据源（source）→ 数据转换 → 执行操作获取想要的结果。<strong>每次转换原有Stream对象不改变，返回一个新的Stream对象（可以有多次转换）</strong>，这就允许对其操作可以像链条一样排列，变成一个管道，如下图所示:</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513101937.jpg" alt="20180315024847206"></p><h2 id="流的生成方式"><a href="#流的生成方式" class="headerlink" title="流的生成方式"></a>流的生成方式</h2><h3 id="从Collection和数组中获得"><a href="#从Collection和数组中获得" class="headerlink" title="从Collection和数组中获得"></a>从Collection和数组中获得</h3><ul><li>Collection.stream()</li><li>Collection.parallelStream()</li><li>Arrays.stream(T array) or Stream.of()</li></ul><h3 id="从BufferedReader获得"><a href="#从BufferedReader获得" class="headerlink" title="从BufferedReader获得"></a>从BufferedReader获得</h3><ul><li>java.io.BufferedReader.lines()</li></ul><h3 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h3><ul><li>java.util.stream.IntStream.range()</li><li>java.nio.file.Files.walk()</li></ul><h3 id="自己构建"><a href="#自己构建" class="headerlink" title="自己构建"></a>自己构建</h3><ul><li>java.util.Spliterator</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul><h2 id="流的操作类型"><a href="#流的操作类型" class="headerlink" title="流的操作类型"></a>流的操作类型</h2><p>流的操作类型分为两种：</p><ul><li><p>Intermediate：一个流可以后面跟随零个或多个intermediate操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</p></li><li><p>Terminal：一个流只能有一个terminal操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以,这必定是流的最后一个操作。Terminal操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个side effect。</p><p>　　在对一个Stream进行多次转换操作(Intermediate 操作)，每次都对Stream的每个元素进行转换，而且是执行多次，这样时间复杂度就是N（转换次数）个for循环里把所有操作都做掉的总和吗？其实不是这样的，<strong>转换操作都是lazy的，多个转换操作只会在Terminal操作的时候融合起来，一次循环完成。我们可以这样简单的理解，Stream里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，在Terminal 操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。</strong></p><p>  　　还有一种操作被称为<strong>short-circuiting</strong>。用以指：对于一个intermediate操作，如果它接受的是一个无限大（infinite/unbounded）的Stream，但返回一个有限的新Stream；对于一个terminal操作，如果它接受的是一个无限大的Stream，但能在有限的时间计算出结果。<br>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个short-circuiting操作是必要非充分条件。</p></li></ul><h2 id="流的使用详解"><a href="#流的使用详解" class="headerlink" title="流的使用详解"></a>流的使用详解</h2><h3 id="流的构造与转换"><a href="#流的构造与转换" class="headerlink" title="流的构造与转换"></a>流的构造与转换</h3><p>下面提供最常见的几种构造Stream的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Individual values</span></span><br><span class="line">Stream stream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Arrays</span></span><br><span class="line">String [] strArray = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">stream = Stream.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Collections</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">stream = list.stream();</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，对于基本数值型，目前有三种对应的包装类型Stream：IntStream、LongStream、DoubleStream。当然我们也可以用 Stream<Integer>、Stream<Long>和Stream<Double>，但是boxing/unboxing会很耗时，所以特别为这三种基本数值型提供了对应的Stream。</p></blockquote><p>　　Java8中还没有提供其它数值型Stream，因为这将导致扩增的内容较多。而常规的数值型聚合运算可以通过上面三种Stream进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).forEach(System.out::println);</span><br><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>流也可以转换为其它数据结构，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Array</span></span><br><span class="line">String[] strArray1 = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 2. Collection</span></span><br><span class="line">List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class="line">List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">Set set1 = stream.collect(Collectors.toSet());</span><br><span class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">// 3. String</span></span><br><span class="line">String str = stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></table></figure><h3 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h3><p>为了测试流的操作我们需要完成一些准备工作:①实体类User。②List生成类，用来生成User集合。</p><p><strong>User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 赏金</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GetUserList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetUserList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;李星云&quot;</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="string">&quot;渝州&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">1000</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;陆林轩&quot;</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="string">&quot;渝州&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">500</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;姬如雪&quot;</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="string">&quot;幻音坊&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">800</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;袁天罡&quot;</span>, <span class="number">99</span>, <span class="number">0</span>, <span class="string">&quot;藏兵谷&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">100000</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;张子凡&quot;</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="string">&quot;天师府&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">900</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;陆佑劫&quot;</span>, <span class="number">45</span>, <span class="number">0</span>, <span class="string">&quot;不良人&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">600</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;张天师&quot;</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="string">&quot;天师府&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">1100</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;蚩梦&quot;</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="string">&quot;万毒窟&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">800</span>)),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;李星云&quot;</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="string">&quot;渝州&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="number">1000</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Intermediate-操作"><a href="#Intermediate-操作" class="headerlink" title="Intermediate 操作"></a>Intermediate 操作</h4><p>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 limit、 skip、 parallel等 </p><blockquote><p>由于执行Intermediate操作，必须最后为终端操作，所以在以下的代码演示中都带有collect()和forEach()</p><p>collect()的作用是<strong>将结果收集到一起</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//收集到List</span></span><br><span class="line">&gt;collect(Collectors.toList());</span><br><span class="line">&gt;<span class="comment">//收集到Set</span></span><br><span class="line">&gt;collect(Collectors.toSet());</span><br><span class="line">&gt;<span class="comment">//总和、平均值，最大值，最小值</span></span><br><span class="line">&gt;<span class="keyword">int</span> sum = hereList.stream().collect(Collectors.summingInt(Integer::intValue));</span><br><span class="line">&gt;Double ave = hereList.stream().collect(Collectors.averagingInt(Integer::intValue));</span><br><span class="line">&gt;Integer max = hereList.stream().collect(Collectors.maxBy(Integer::compare)).get();</span><br><span class="line">&gt;Integer min = hereList.stream().collect(Collectors.minBy(Integer::compare)).get();</span><br><span class="line">&gt;<span class="comment">//一次性收集流中的结果，聚合为一个总和，平均值，最大值或最小值的对象。</span></span><br><span class="line">&gt;IntSummaryStatistics summaryStatistics = hereList.stream()</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　　　　.collect(Collectors.summarizingInt(Integer::intValue));</span><br><span class="line">&gt;<span class="comment">//收集到Map过于复杂，故不在这里写，在讲collect的时候详讲</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p> map方法指对一个流中的值进行某种形式的转换。需要传递给它一个转换的函数作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 将List&lt;User&gt; 变成 List&lt;Map&lt;String,String&gt;&gt; 且Map中只包含username和age</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .map(user -&gt; &#123;</span><br><span class="line">                    HashMap&lt;String ,String &gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;username&quot;</span>,user.getName());</span><br><span class="line">                    map.put(<span class="string">&quot;age&quot;</span>,user.getAge().toString());</span><br><span class="line">                    <span class="keyword">return</span> map;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.get(<span class="string">&quot;username&quot;</span>) + <span class="string">&quot; --&gt; &quot;</span> + item.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513111958.png" alt="image-20210513111957109"></p><blockquote><p>进行转换后，在forEach中，item获取值的时候，已经是map的key-value形式了</p></blockquote><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>从名字上就能看出来，这是一个Stream的过滤转换，此方法会生成一个新的流，其中包含符合某个特定条件的所有元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 只输出年龄大于20的</span></span><br><span class="line">       list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">               .collect(Collectors.toList())</span><br><span class="line">               .forEach(item -&gt; &#123;</span><br><span class="line">                   System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513110345.png" alt="image-20210513110344127"></p><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p><strong>distinct方法</strong>会根据原始流中的元素返回一个具有相同顺序、去除了重复元素的流，这个操作显然是需要记住之前读取的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDistinct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 将List&lt;User&gt; 变成 List&lt;Map&lt;String,String&gt;&gt; 且Map中只包含username和age</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513112437.png" alt="image-20210513112435322"></p><blockquote><p>我们去除了重复数据李星云，并且数据的顺序并没有发生改变 </p></blockquote><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a><strong>sorted</strong></h5><p><strong>sorted方法</strong>是需要遍历整个流的，并在产生任何元素之前对它进行排序。因为有可能排序后集合的第一个元素会在未排序集合的最后一位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSorted</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 按age升序排序</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .sorted(Comparator.comparing(User::getAge))</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513135042.png" alt="image-20210513135040878"></p><blockquote><p>sorted方法中需要传入比较规则</p></blockquote><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>limit(n)方法会返回一个包含n个元素的新的流（若总长小于n则返回原始流）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void testLimit()&#123;</span><br><span class="line">        List&lt;User&gt; list &#x3D; GetUserList.getUserList();</span><br><span class="line">        &#x2F;&#x2F; 获取前2个数据</span><br><span class="line">        list.stream()</span><br><span class="line">                .limit(2)</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + &quot; --&gt; &quot; + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p>skip(n)会丢弃掉前面的n个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testSkip</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 丢弃前2个数据</span></span><br><span class="line">       list.stream()</span><br><span class="line">               .skip(<span class="number">2</span>)</span><br><span class="line">               .collect(Collectors.toList())</span><br><span class="line">               .forEach(item -&gt; &#123;</span><br><span class="line">                   System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513135836.png" alt="image-20210513135834475"></p><h5 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h5><p>parallel方法可以将任意的串行流转换为一个并行流。</p><p>其次要确保传递给并行流操作的函数是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testParallel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 转换成并行流</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .parallel()</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(item -&gt; &#123;</span><br><span class="line">                    System.out.println(item.getName() + <span class="string">&quot; --&gt; &quot;</span> + item.getAge());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513140318.png" alt="image-20210513140317237"></p><blockquote><p>我们可以发现数据被多次重复打印，因为此时已经是并行流了</p></blockquote><h4 id="Terminal-操作"><a href="#Terminal-操作" class="headerlink" title="Terminal 操作"></a>Terminal 操作</h4><p>forEach、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny等</p><blockquote><p>其中forEach、collect在前面已经使用了</p><p>toArray是将流变成数组</p></blockquote><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p>reduce是将流中的元素进行进一步计算的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Integer&gt; hearList = Lists.newArrayList();</span><br><span class="line">       hearList.add(<span class="number">15</span>);</span><br><span class="line">       hearList.add(<span class="number">32</span>);</span><br><span class="line">       hearList.add(<span class="number">5</span>);</span><br><span class="line">       hearList.add(<span class="number">232</span>);</span><br><span class="line">       hearList.add(<span class="number">56</span>);</span><br><span class="line">       hearList.add(<span class="number">29</span>);</span><br><span class="line">       hearList.add(<span class="number">104</span>);</span><br><span class="line">       <span class="comment">//求和</span></span><br><span class="line">       Integer sum = hearList.stream().reduce((x,y)-&gt;x+y).get();</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//简化一下，求和</span></span><br><span class="line">       sum = hearList.stream().reduce(Integer::sum).get();</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//含有初始标识的，求和</span></span><br><span class="line">       sum = hearList.stream().reduce(<span class="number">0</span>,(x,y)-&gt;x+y);</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//对元素的长度进行求和( (total,y)-&gt;total+y.toString().length()，类似于一个累加器，会被重复调用)</span></span><br><span class="line">       sum = hearList.stream().reduce(<span class="number">0</span>,(total,y)-&gt;total+y.toString().length(),(total1,total2)-&gt;total1+total2);</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">       <span class="comment">//简化一下，对元素长度进行求和。</span></span><br><span class="line">       sum = hearList.stream().map(Objects::toString).mapToInt(String::length).sum();</span><br><span class="line">       System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513141354.png" alt="image-20210513141353485"></p><h5 id="min"><a href="#min" class="headerlink" title="min"></a>min</h5><p>获取条件最小的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">    <span class="comment">// 获取age最小的数据</span></span><br><span class="line">    Optional minAge = list.stream().min(Comparator.comparing(User::getAge));</span><br><span class="line">    System.out.println(<span class="string">&quot;minAge :&quot;</span>+minAge);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513141729.png" alt="image-20210513141728138"></p><h5 id="max"><a href="#max" class="headerlink" title="max"></a>max</h5><p>获取条件最大的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 获取年龄最大</span></span><br><span class="line">       Optional maxAge = list.stream().max(Comparator.comparing(User::getAge));</span><br><span class="line">       System.out.println(<span class="string">&quot;maxAge :&quot;</span>+maxAge);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142226.png" alt="image-20210513142225297"></p><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>计数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">        <span class="comment">// 获取记录数</span></span><br><span class="line">        Long count = list.stream().count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count :&quot;</span>+count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142254.png" alt="image-20210513142253161"></p><h5 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h5><p>可以判定集合中是否还有匹配的元素。返回结果是一个boolean类型值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAnyMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">    <span class="comment">// 数据中是否有age&gt;100的数据</span></span><br><span class="line">    Boolean flag = list.stream().anyMatch(user -&gt; user.getAge()&gt;<span class="number">100</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;flag :&quot;</span>+flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142610.png" alt="image-20210513142609240"></p><h5 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h5><p>可以判定集合中是否所有元素都匹配。返回结果是一个boolean类型值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void testAllMatch()&#123;</span><br><span class="line">    List&lt;User&gt; list &#x3D; GetUserList.getUserList();</span><br><span class="line">    &#x2F;&#x2F; 数据中是否有age&gt;100的数据</span><br><span class="line">    Boolean flag &#x3D; list.stream().allMatch(user -&gt; user.getAge()&gt;10);</span><br><span class="line">    System.out.println(&quot;flag :&quot;+flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142903.png" alt="image-20210513142902197"></p><h5 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h5><p>可以判定集合中是否所有元素都不匹配。返回结果是一个boolean类型值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void testNoneMatch()&#123;</span><br><span class="line">    List&lt;User&gt; list &#x3D; GetUserList.getUserList();</span><br><span class="line">    &#x2F;&#x2F; 数据中是否有age&gt;100的数据</span><br><span class="line">    Boolean flag &#x3D; list.stream().noneMatch(user -&gt; user.getAge()&gt;100);</span><br><span class="line">    System.out.println(&quot;flag :&quot;+flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513142922.png" alt="image-20210513142921801"></p><h5 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h5><p>findFirst方法返回非空集合中的第一个值，它通常与filter方法结合起来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFindFrist</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">       <span class="comment">// 只输出年龄大于20的的第一个数据</span></span><br><span class="line">       User user1 = list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">               .findFirst()</span><br><span class="line">               .get();</span><br><span class="line">       System.out.println(user1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513143210.png" alt="image-20210513143209156"></p><h5 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h5><p>findAny方法可以在集合中只要找到任何一个所匹配的元素，就返回，此方法在对流并行执行时十分有效（任何片段中发现第一个匹配元素都会结束计算，串行流中和findFirst返回一样)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFindAny</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = GetUserList.getUserList();</span><br><span class="line">    <span class="comment">// 只输出年龄大于20的的第一个数据</span></span><br><span class="line">    User user1 = list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">            .findAny()</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210513143413.png" alt="image-20210513143209156"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Java8新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="2021/04/16/MyBatis-Plus/"/>
      <url>2021/04/16/MyBatis-Plus/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="为什么要学习MyBtis-Plus"><a href="#为什么要学习MyBtis-Plus" class="headerlink" title="为什么要学习MyBtis-Plus?"></a>为什么要学习MyBtis-Plus?</h2><p>Hibernate是一种全自动化的ORM框架，但是MyBatis不是，人们认为MyBatis属于半自动化的ORM框架，因为需要手写SQL语句。针对复杂的SQL进行手写倒也还好，但是一些简单的SQL还要手写就变得十分麻烦（我知道有注解，闭嘴！），同时还会让XML映射文件变得十分臃肿，那么有没有方法可以省略简单SQL的书写呢？</p><p>这时候，一个“天降猛男”登场了——MyBatis-Plus。💪</p><p>MyBatis-Plus可以很好地帮我们简化操作，对于一些简单的CRUD操作，不再需要我们编写。当然，除了这个最“肤浅”的作用外，MyBatis-Plus还有很多其他的特性，总之就是一句话：为了简化操作，为了偷懒。😂</p><p>MyBatis-Plus由国人开发，文档很详细，编码符合国人习惯，荣获【2019年度开源中国最受欢迎软件，开发工具类 TOP1】，还能简化开发，所以…不学一个？</p><p><a href="https://mp.baomidou.com/guide/">官方文档</a></p><h2 id="MyBtis-Plus概述"><a href="#MyBtis-Plus概述" class="headerlink" title="MyBtis-Plus概述"></a>MyBtis-Plus概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416111211.png" alt="img"></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="支持数据库"><a href="#支持数据库" class="headerlink" title="支持数据库"></a>支持数据库</h3><blockquote><p>任何能使用 <code>mybatis</code> 进行 crud, 并且支持标准 sql 的数据库</p></blockquote><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416111412.png" alt="image-20210416111410738"></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>我们将通过一个简单的 Demo 来阐述 MyBatis-Plus 的强大功能，在此之前，我们假设您已经：</p><ul><li>拥有 Java 开发环境以及相应 IDEA</li><li>熟悉 Spring Boot</li><li>熟悉 Maven</li></ul><hr><p>现有一张 <code>User</code> 表，其表结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>Jone</td><td>18</td><td><a href="mailto:&#x74;&#101;&#x73;&#x74;&#x31;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#x75;&#x2e;&#x63;&#111;&#109;">&#x74;&#101;&#x73;&#x74;&#x31;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#x75;&#x2e;&#x63;&#111;&#109;</a></td></tr><tr><td>2</td><td>Jack</td><td>20</td><td><a href="mailto:&#x74;&#101;&#x73;&#116;&#50;&#x40;&#98;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#x6f;&#117;&#46;&#99;&#x6f;&#x6d;">&#x74;&#101;&#x73;&#116;&#50;&#x40;&#98;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#x6f;&#117;&#46;&#99;&#x6f;&#x6d;</a></td></tr><tr><td>3</td><td>Tom</td><td>28</td><td><a href="mailto:&#116;&#101;&#115;&#116;&#x33;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#x64;&#111;&#x75;&#46;&#x63;&#x6f;&#x6d;">&#116;&#101;&#115;&#116;&#x33;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#x64;&#111;&#x75;&#46;&#x63;&#x6f;&#x6d;</a></td></tr><tr><td>4</td><td>Sandy</td><td>21</td><td><a href="mailto:&#116;&#x65;&#115;&#x74;&#x34;&#64;&#98;&#x61;&#111;&#109;&#105;&#100;&#111;&#117;&#46;&#99;&#111;&#109;">&#116;&#x65;&#115;&#x74;&#x34;&#64;&#98;&#x61;&#111;&#109;&#105;&#100;&#111;&#117;&#46;&#99;&#111;&#109;</a></td></tr><tr><td>5</td><td>Billie</td><td>24</td><td><a href="mailto:&#116;&#x65;&#115;&#116;&#x35;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#x64;&#111;&#x75;&#46;&#99;&#x6f;&#x6d;">&#116;&#x65;&#115;&#116;&#x35;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#x64;&#111;&#x75;&#46;&#99;&#x6f;&#x6d;</a></td></tr></tbody></table><p>其对应的数据库 Schema 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其对应的数据库 Data 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416112349.png" alt="image-20210416112347849"></p><h3 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h3><p>创建一个空的 Spring Boot 工程（工程将以MySql 作为默认数据库进行演示）</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis-Plus依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lombok依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 <code>application.yml</code> 配置文件中添加 MySql数据库的相关配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatisplus</span></span><br><span class="line">  <span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment">#数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">defaultDataSource</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.hl.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisplusApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisplusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>编写实体类 <code>User.java</code>（此处使用了 <a href="https://www.projectlombok.org/">Lombok (opens new window)</a>简化代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper类 <code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>添加测试类，进行功能测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserMapper 中的 <code>selectList()</code> 方法的参数为 MP 内置的条件封装器 <code>Wrapper</code>，所以不填写就是无任何条件</p></blockquote><p>控制台输出：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416140717.png" alt="image-20210416140715702"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！</p><p>从以上步骤中，我们可以看到集成<code>MyBatis-Plus</code>非常的简单，只需要引入 starter 工程，并配置 mapper 扫描路径即可。</p><p>但 MyBatis-Plus 的强大远不止这些功能，想要详细了解 MyBatis-Plus 的强大功能？那就继续往下看吧！</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><p>介绍 <code>MybatisPlus</code> 注解包相关类详解(更多详细描述可点击查看源码注释)</p></blockquote><p>注解类包：</p><p>👉 <a href="https://gitee.com/baomidou/mybatis-plus/tree/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation">mybatis-plus-annotation(opens new window)</a></p><h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableName.java">@TableName</a></h3><ul><li>描述：表名注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th>描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>表名</td></tr><tr><td align="center">schema</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>schema</td></tr><tr><td align="center">keepGlobalPrefix</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td></tr><tr><td align="center">resultMap</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>xml 中 resultMap 的 id</td></tr><tr><td align="center">autoResultMap</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td></tr><tr><td align="center">excludeProperty</td><td align="center">String[]</td><td align="center">否</td><td align="center">{}</td><td>需要排除的属性名(@since 3.3.1)</td></tr></tbody></table><blockquote><p>关于<code>autoResultMap</code>的说明:</p><p>mp会自动构建一个<code>ResultMap</code>并注入到mybatis里(一般用不上).下面讲两句: 因为mp底层是mybatis,所以一些mybatis的常识你要知道,mp只是帮你注入了常用crud到mybatis里 注入之前可以说是动态的(根据你entity的字段以及注解变化而变化),但是注入之后是静态的(等于你写在xml的东西) 而对于直接指定<code>typeHandler</code>,mybatis只支持你写在2个地方:</p><ol><li>定义在resultMap里,只作用于select查询的返回结果封装</li><li>定义在<code>insert</code>和<code>update</code>sql的<code>#&#123;property&#125;</code>里的<code>property</code>后面(例:<code>#&#123;property,typehandler=xxx.xxx.xxx&#125;</code>),只作用于<code>设置值</code> 而除了这两种直接指定<code>typeHandler</code>,mybatis有一个全局的扫描你自己的<code>typeHandler</code>包的配置,这是根据你的<code>property</code>的类型去找<code>typeHandler</code>并使用.</li></ol></blockquote><h3 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableId.java">@TableId</a></h3><ul><li>描述：主键注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center">主键类型</td></tr></tbody></table><h4 id="IdType"><a href="#IdType" class="headerlink" title="IdType"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java">IdType</a></h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center">数据库ID自增</td></tr><tr><td align="center">NONE</td><td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr><tr><td align="center">ID_WORKER</td><td align="center">分布式全局唯一ID 长整型类型(please use <code>ASSIGN_ID</code>)</td></tr><tr><td align="center">UUID</td><td align="center">32位UUID字符串(please use <code>ASSIGN_UUID</code>)</td></tr><tr><td align="center">ID_WORKER_STR</td><td align="center">分布式全局唯一ID 字符串类型(please use <code>ASSIGN_ID</code>)</td></tr></tbody></table><h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableField.java">@TableField</a></h3><ul><li>描述：字段注解(非主键)</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">数据库字段名</td></tr><tr><td align="center">el</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">映射为原生 <code>#&#123; ... &#125;</code> 逻辑,相当于写在 xml 里的 <code>#&#123; ... &#125;</code> 部分</td></tr><tr><td align="center">exist</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否为数据库表字段</td></tr><tr><td align="center">condition</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#&#123;%s&#125;</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考(opens new window)</a></td></tr><tr><td align="center">update</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td></tr><tr><td align="center">insertStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_NULL: <code>insert into table_a(&lt;if test=&quot;columnProperty != null&quot;&gt;column&lt;/if&gt;) values (&lt;if test=&quot;columnProperty != null&quot;&gt;#&#123;columnProperty&#125;&lt;/if&gt;)</code></td></tr><tr><td align="center">updateStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：IGNORED: <code>update table_a set column=#&#123;columnProperty&#125;</code></td></tr><tr><td align="center">whereStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_EMPTY: <code>where &lt;if test=&quot;columnProperty != null and columnProperty!=&#39;&#39;&quot;&gt;column=#&#123;columnProperty&#125;&lt;/if&gt;</code></td></tr><tr><td align="center">fill</td><td align="center">Enum</td><td align="center">否</td><td align="center">FieldFill.DEFAULT</td><td align="center">字段自动填充策略</td></tr><tr><td align="center">select</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否进行 select 查询</td></tr><tr><td align="center">keepGlobalFormat</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td align="center">是否保持使用全局的 format 进行处理</td></tr><tr><td align="center">jdbcType</td><td align="center">JdbcType</td><td align="center">否</td><td align="center">JdbcType.UNDEFINED</td><td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">typeHandler</td><td align="center">Class&lt;? extends TypeHandler&gt;</td><td align="center">否</td><td align="center">UnknownTypeHandler.class</td><td align="center">类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">numericScale</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">指定小数点后保留的位数</td></tr></tbody></table><blockquote><p>关于<code>jdbcType</code>和<code>typeHandler</code>以及<code>numericScale</code>的说明:</p><p><code>numericScale</code>只生效于 update 的sql. <code>jdbcType</code>和<code>typeHandler</code>如果不配合<code>@TableName#autoResultMap = true</code>一起使用,也只生效于 update 的sql. 对于<code>typeHandler</code>如果你的字段类型和set进去的类型为<code>equals</code>关系,则只需要让你的<code>typeHandler</code>让Mybatis加载到即可,不需要使用注解</p></blockquote><h4 id="FieldStrategy"><a href="#FieldStrategy" class="headerlink" title="FieldStrategy"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/FieldStrategy.java">FieldStrategy</a></h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IGNORED</td><td align="center">忽略判断</td></tr><tr><td align="center">NOT_NULL</td><td align="center">非NULL判断</td></tr><tr><td align="center">NOT_EMPTY</td><td align="center">非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断)</td></tr><tr><td align="center">DEFAULT</td><td align="center">追随全局配置</td></tr></tbody></table><h4 id="FieldFill"><a href="#FieldFill" class="headerlink" title="FieldFill"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/FieldFill.java">FieldFill</a></h4><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DEFAULT</td><td align="center">默认不处理</td></tr><tr><td align="center">INSERT</td><td align="center">插入时填充字段</td></tr><tr><td align="center">UPDATE</td><td align="center">更新时填充字段</td></tr><tr><td align="center">INSERT_UPDATE</td><td align="center">插入和更新时填充字段</td></tr></tbody></table><h3 id="Version"><a href="#Version" class="headerlink" title="@Version"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/Version.java">@Version</a></h3><ul><li>描述：乐观锁注解、标记 <code>@Verison</code> 在字段上</li></ul><h3 id="EnumValue"><a href="#EnumValue" class="headerlink" title="@EnumValue"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/EnumValue.java">@EnumValue</a></h3><ul><li>描述：通枚举类注解(注解在枚举字段上)</li></ul><h3 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableLogic.java">@TableLogic</a></h3><ul><li>描述：表字段逻辑处理注解（逻辑删除）</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">逻辑未删除值</td></tr><tr><td align="center">delval</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">逻辑删除值</td></tr></tbody></table><h3 id="SqlParser"><a href="#SqlParser" class="headerlink" title="@SqlParser"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlParser.java">@SqlParser</a></h3><blockquote><p>see @InterceptorIgnore</p></blockquote><h3 id="KeySequence"><a href="#KeySequence" class="headerlink" title="@KeySequence"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/KeySequence.java">@KeySequence</a></h3><ul><li>描述：序列主键策略 <code>oracle</code></li><li>属性：value、resultMap</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">序列名</td></tr><tr><td align="center">clazz</td><td align="center">Class</td><td align="center">否</td><td align="center">Long.class</td><td align="center">id的类型, 可以指定String.class，这样返回的Sequence值是字符串”1”</td></tr></tbody></table><h3 id="InterceptorIgnore"><a href="#InterceptorIgnore" class="headerlink" title="@InterceptorIgnore"></a><a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/InterceptorIgnore.java">@InterceptorIgnore</a></h3><blockquote><p>see <a href="https://mp.baomidou.com/guide/interceptor.html">插件主体</a></p></blockquote><h1 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h1><p>由于MyBatisPlus将一些常用的crud操作已经实现了，但是这些sql是不可见的，我们希望能看见这些sql</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日志配置    </span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416145946.png" alt="image-20210416145945073"></p><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//测试数据</span></span><br><span class="line">     User user = <span class="keyword">new</span> User();</span><br><span class="line">     user.setName(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">     user.setAge(<span class="number">18</span>);</span><br><span class="line">     user.setEmail(<span class="string">&quot;测试邮箱&quot;</span>);</span><br><span class="line">     <span class="comment">//插入数据</span></span><br><span class="line">     <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416150339.png" alt="image-20210416150337711"></p><p>你会发现id已经有值了，这是mybatisplus的主键自动生成策略生成并自动回填的，采用雪花算法生成</p><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><p>MyBatis-Plus默认采用的使用推特的<strong>雪花算法</strong></p><blockquote><p>默认ID_WORKER 全局唯一id</p></blockquote><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">分布式系统唯一ID生成方案汇总</a></p><blockquote><p>雪花算法</p></blockquote><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><h3 id="设置主键生成策略"><a href="#设置主键生成策略" class="headerlink" title="设置主键生成策略"></a>设置主键生成策略</h3><p>在主键对应的字段上加上注解@TableId(type = IdType.AUTO)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IdType</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span> </span>&#123;</span><br><span class="line">    AUTO(<span class="number">0</span>), <span class="comment">//主键自增，数据库主键字段一定是自增的</span></span><br><span class="line">    NONE(<span class="number">1</span>), <span class="comment">//未设置主键</span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//手动输入</span></span><br><span class="line">    ASSIGN_ID(<span class="number">3</span>),</span><br><span class="line">    ASSIGN_UUID(<span class="number">4</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER_STR(<span class="number">3</span>),<span class="comment">//ID_WORKER的字符串表示</span></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    UUID(<span class="number">4</span>);<span class="comment">//uuid 全局唯一id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IdType</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><p><strong>全部更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//测试数据</span></span><br><span class="line">     User user = <span class="keyword">new</span> User();</span><br><span class="line">     user.setId(<span class="number">1382952686951546882L</span>);</span><br><span class="line">     user.setName(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">     user.setAge(<span class="number">181</span>);</span><br><span class="line">     user.setEmail(<span class="string">&quot;测试邮箱1&quot;</span>);</span><br><span class="line">     <span class="comment">//更新数据</span></span><br><span class="line">     <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416152208.png" alt="image-20210416152206889"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;? WHERE id&#x3D;?</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 测试1(String), 181(Integer), 测试邮箱1(String), 1382952686951546882(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1</span><br></pre></td></tr></table></figure><p><strong>只更新某些字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//测试数据</span></span><br><span class="line">     User user = <span class="keyword">new</span> User();</span><br><span class="line">     user.setId(<span class="number">1382952686951546882L</span>);</span><br><span class="line">     user.setName(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line">     <span class="comment">//插入数据</span></span><br><span class="line">     <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">     System.out.println(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210416152523.png" alt="image-20210416152522426"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;? WHERE id&#x3D;?</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 测试2(String), 1382952686951546882(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1</span><br></pre></td></tr></table></figure><blockquote><p>对比两个更新操作生成Sql，你会发现MybatisPlus会根据你的条件，动态的生成sql</p></blockquote><h2 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h2><p>创建时间、更新时间！这些操作一般都是自动化完成的，我们不希望手动更新!</p><p>阿里巴巴开发手册中说过：<strong>所有的表都应该具有这两个字段L: gmt_create(创建时间)、gmt_modified(更新时间)。这样方便对数据进行追踪，而且需要自动化！</strong></p><blockquote><p>方式一：数据库级别</p></blockquote><p>1.在表中新增两个字段，create_time、update_time</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210419203741.png" alt="image-20210419203740111"></p><p>2.更新实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>方式二：代码方式</p></blockquote><p>1.删除数据库的默认值，更新操作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210419204148.png" alt="image-20210419204146977"></p><p>2.实体类字段属性上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写注解处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">handler</span>  <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始更新填充&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420091605.png" alt="image-20210420091554725"></p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><blockquote><p><strong>乐观锁</strong>：总是认为不会出现问题，无论干什么不去上锁！如果出了问题，再次更新值测试</p><p><strong>悲观锁</strong>：总是认为会出现问题，无论干什么都会上锁！再去操作！</p></blockquote><p>乐观锁实现方式：</p><ul><li>取出记录时获取当前version</li><li>更新时，带上这个version</li><li>执行更新时，set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">乐观锁：1.先查询，获取版本号 version = 1</span><br><span class="line"><span class="comment">--线程A</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">&quot;测试1&quot;</span> ,<span class="keyword">version</span> = <span class="keyword">version</span>+<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--线程B B抢先完成，version变成2 A再来修改的时候version不对 修改失败</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">&quot;测试1&quot;</span> ,<span class="keyword">version</span> = <span class="keyword">version</span>+<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试一下MP</p></blockquote><p>1.修改表的结构</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420093117.png" alt="image-20210420093116046"></p><p>2.修改实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.注册组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hl.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="comment">//开启事务管理 默认开启的</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 旧版</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新版</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>新版本中直接使用@Version注解</p></blockquote><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptomisticLocker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先查询数据</span></span><br><span class="line">        User user = userMapper.selectById(<span class="number">1382952686951546882L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;测试12&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;测试邮箱12&quot;</span>);</span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line">        <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420095545.png" alt="image-20210420095543380"></p><p>version自动变成version+1了</p><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id查询</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//查询</span></span><br><span class="line">       User user = userMapper.selectById(<span class="number">1382952686951546882L</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//测试批量查询</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//查询</span></span><br><span class="line">       List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//测试条件查询</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       HashMap&lt;String ,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">//查询</span></span><br><span class="line">       map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">       List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>1.配置插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试分页查询</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//当前ue，每页大小</span></span><br><span class="line">     Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">     <span class="comment">//查询</span></span><br><span class="line">     userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">     page.getRecords().forEach(System.out::println);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420101650.png" alt="image-20210420101648522"></p><p>查询出了目标数据及总数</p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p><strong>基本的删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//条件与前面的查询相似</span></span><br><span class="line"><span class="comment">//        userMapper.delete();</span></span><br><span class="line"><span class="comment">//        userMapper.deleteBatchIds(); 通过id集合删除</span></span><br><span class="line"><span class="comment">//        userMapper.deleteByMap(); 通过条件删除</span></span><br><span class="line"></span><br><span class="line">        userMapper.deleteById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>逻辑删除</strong></p><p>通过一个字段来表示该条数据的删除状态</p><p>1.修改表的字段</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420102440.png" alt="image-20210420102438813"></p><p>2.实体类中增加属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><p>3.配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span>  <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><blockquote><p>高版本直接使用 @TableLogic注解，不需要进行配置</p></blockquote><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//条件与前面的查询相似</span></span><br><span class="line"><span class="comment">//        userMapper.delete();</span></span><br><span class="line"><span class="comment">//        userMapper.deleteBatchIds(); 通过id集合删除</span></span><br><span class="line"><span class="comment">//        userMapper.deleteByMap(); 通过条件删除</span></span><br><span class="line"></span><br><span class="line">        userMapper.deleteById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420103419.png" alt="image-20210420103416617"></p><p>实际上是更新操作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420103457.png" alt="image-20210420103455365"></p><p>此时去查询</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420103543.png" alt="image-20210420103542189"></p><p>MP会自动的加上deleted = 0 这个条件</p><h1 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h1><p>我们在平时的开发中，会遇到一些慢Sql，我们需要去找到这些慢Sql</p><blockquote><p>MP3.x已经移除了这个方法</p></blockquote><p>MP给我们提供了一个插件，用于输出每条Sql语句及其执行时间</p><p>1.导入插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * SQL执行效率插件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span><span class="comment">// 设置 dev test 环境开启</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       PerformanceInterceptor performanceInterceptor =  <span class="keyword">new</span> PerformanceInterceptor() </span><br><span class="line">       performanceInterceptor.setMaxTime(<span class="number">100</span>);<span class="comment">//ms，超过此处设置的ms则sql不执行</span></span><br><span class="line">  performanceInterceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">       <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2.设置环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>3.测试使用</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420105036.png" alt="image-20210420105035450"></p><h1 id="条件构造器Wrapper"><a href="#条件构造器Wrapper" class="headerlink" title="条件构造器Wrapper"></a>条件构造器Wrapper</h1><p>我们写一些十分复杂的sql，就可以使用Wrapper</p><h2 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h2><p><strong>1、name、email不为空，age大于12</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper</span><br><span class="line">                .isNotNull(<span class="string">&quot;name&quot;</span>)<span class="comment">//name不为空</span></span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>)<span class="comment">//email不为空</span></span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>);<span class="comment">//年龄大于12</span></span><br><span class="line">        userMapper.selectList(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420105920.png" alt="image-20210420105919349"></p><p><strong>2、name=’xxx’</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper</span><br><span class="line">                .eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;测试&quot;</span>);<span class="comment">//name为测试</span></span><br><span class="line">        userMapper.selectList(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420110245.png" alt="image-20210420110244532"></p><p><strong>3、age在12到20之间的记录总数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">       wrapper</span><br><span class="line">               .between(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>,<span class="number">20</span>);<span class="comment">//name为测试</span></span><br><span class="line">       userMapper.selectCount(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420110701.png" alt="image-20210420110659754"></p><p><strong>4、name中不包含e，且email like ”测试%“</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">       wrapper</span><br><span class="line">               .notLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;t&quot;</span>)<span class="comment">//name中不包含e</span></span><br><span class="line">               .likeRight(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;测试&quot;</span>);<span class="comment">//like %测试</span></span><br><span class="line">       List&lt;Map&lt;String ,Object&gt;&gt; users =  userMapper.selectMaps(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../typora/images/image-20210420111331510.png" alt="image-20210420111331510"></p><p><strong>5、子查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id&lt;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; users =  userMapper.selectObjs(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420111654.png" alt="image-20210420111653224"></p><p><strong>6、通过id降序排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       QueryWrapper&lt;User&gt; wrapper =<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">       wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id&lt;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">       List&lt;Object&gt; users =  userMapper.selectObjs(wrapper);<span class="comment">//查询总数</span></span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210420112019.png" alt="image-20210420112018041"></p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h3 id="allEq"><a href="#allEq" class="headerlink" title="allEq"></a>allEq</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="keyword">boolean</span> condition, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure><ul><li>全部<a href="https://mp.baomidou.com/guide/wrapper.html#eq">eq</a>(或个别<a href="https://mp.baomidou.com/guide/wrapper.html#isnull">isNull</a>)</li></ul><blockquote><p>个别参数说明:</p><p><code>params</code> : <code>key</code>为数据库字段名,<code>value</code>为字段值<br><code>null2IsNull</code> : 为<code>true</code>则在<code>map</code>的<code>value</code>为<code>null</code>时调用 <a href="https://mp.baomidou.com/guide/wrapper.html#isnull">isNull</a> 方法,为<code>false</code>时则忽略<code>value</code>为<code>null</code>的</p></blockquote><ul><li>例1: <code>allEq(&#123;id:1,name:&quot;老王&quot;,age:null&#125;)</code>—&gt;<code>id = 1 and name = &#39;老王&#39; and age is null</code></li><li>例2: <code>allEq(&#123;id:1,name:&quot;老王&quot;,age:null&#125;, false)</code>—&gt;<code>id = 1 and name = &#39;老王&#39;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="keyword">boolean</span> condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull) </span><br></pre></td></tr></table></figure><blockquote><p>个别参数说明:</p><p><code>filter</code> : 过滤函数,是否允许字段传入比对条件中<br><code>params</code> 与 <code>null2IsNull</code> : 同上</p><ul><li>例1: <code>allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt;= 0, &#123;id:1,name:&quot;老王&quot;,age:null&#125;)</code>—&gt;<code>name = &#39;老王&#39; and age is null</code></li><li>例2: <code>allEq((k,v) -&gt; k.indexOf(&quot;a&quot;) &gt;= 0, &#123;id:1,name:&quot;老王&quot;,age:null&#125;, false)</code>—&gt;<code>name = &#39;老王&#39;</code></li></ul></blockquote><h3 id="eq"><a href="#eq" class="headerlink" title="eq"></a>eq</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eq(R column, Object val)</span><br><span class="line">eq(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>等于 =</li><li>例: <code>eq(&quot;name&quot;, &quot;老王&quot;)</code>—&gt;<code>name = &#39;老王&#39;</code></li></ul><h3 id="ne"><a href="#ne" class="headerlink" title="ne"></a>ne</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ne(R column, Object val)</span><br><span class="line">ne(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>不等于 &lt;&gt;</li><li>例: <code>ne(&quot;name&quot;, &quot;老王&quot;)</code>—&gt;<code>name &lt;&gt; &#39;老王&#39;</code></li></ul><h3 id="gt"><a href="#gt" class="headerlink" title="gt"></a>gt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gt(R column, Object val)</span><br><span class="line">gt(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>大于 &gt;</li><li>例: <code>gt(&quot;age&quot;, 18)</code>—&gt;<code>age &gt; 18</code></li></ul><h3 id="ge"><a href="#ge" class="headerlink" title="ge"></a>ge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ge(R column, Object val)</span><br><span class="line">ge(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>大于等于 &gt;=</li><li>例: <code>ge(&quot;age&quot;, 18)</code>—&gt;<code>age &gt;= 18</code></li></ul><h3 id="lt"><a href="#lt" class="headerlink" title="lt"></a>lt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lt(R column, Object val)</span><br><span class="line">lt(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>小于 &lt;</li><li>例: <code>lt(&quot;age&quot;, 18)</code>—&gt;<code>age &lt; 18</code></li></ul><h3 id="le"><a href="#le" class="headerlink" title="le"></a>le</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">le(R column, Object val)</span><br><span class="line">le(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>小于等于 &lt;=</li><li>例: <code>le(&quot;age&quot;, 18)</code>—&gt;<code>age &lt;= 18</code></li></ul><h3 id="between"><a href="#between" class="headerlink" title="between"></a>between</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">between(R column, Object val1, Object val2)</span><br><span class="line">between(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><ul><li>BETWEEN 值1 AND 值2</li><li>例: <code>between(&quot;age&quot;, 18, 30)</code>—&gt;<code>age between 18 and 30</code></li></ul><h3 id="notBetween"><a href="#notBetween" class="headerlink" title="notBetween"></a>notBetween</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notBetween(R column, Object val1, Object val2)</span><br><span class="line">notBetween(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><ul><li>NOT BETWEEN 值1 AND 值2</li><li>例: <code>notBetween(&quot;age&quot;, 18, 30)</code>—&gt;<code>age not between 18 and 30</code></li></ul><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">like(R column, Object val)</span><br><span class="line">like(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘%值%’</li><li>例: <code>like(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name like &#39;%王%&#39;</code></li></ul><h3 id="notLike"><a href="#notLike" class="headerlink" title="notLike"></a>notLike</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notLike(R column, Object val)</span><br><span class="line">notLike(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>NOT LIKE ‘%值%’</li><li>例: <code>notLike(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name not like &#39;%王%&#39;</code></li></ul><h3 id="likeLeft"><a href="#likeLeft" class="headerlink" title="likeLeft"></a>likeLeft</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeLeft(R column, Object val)</span><br><span class="line">likeLeft(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘%值’</li><li>例: <code>likeLeft(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name like &#39;%王&#39;</code></li></ul><h3 id="likeRight"><a href="#likeRight" class="headerlink" title="likeRight"></a>likeRight</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeRight(R column, Object val)</span><br><span class="line">likeRight(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘值%’</li><li>例: <code>likeRight(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name like &#39;王%&#39;</code></li></ul><h3 id="isNull"><a href="#isNull" class="headerlink" title="isNull"></a>isNull</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNull(R column)</span><br><span class="line">isNull(<span class="keyword">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><ul><li>字段 IS NULL</li><li>例: <code>isNull(&quot;name&quot;)</code>—&gt;<code>name is null</code></li></ul><h3 id="isNotNull"><a href="#isNotNull" class="headerlink" title="isNotNull"></a>isNotNull</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNotNull(R column)</span><br><span class="line">isNotNull(<span class="keyword">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><ul><li>字段 IS NOT NULL</li><li>例: <code>isNotNull(&quot;name&quot;)</code>—&gt;<code>name is not null</code></li></ul><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Collection&lt;?&gt; value)</span><br><span class="line">in(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><ul><li>字段 IN (value.get(0), value.get(1), …)</li><li>例: <code>in(&quot;age&quot;,&#123;1,2,3&#125;)</code>—&gt;<code>age in (1,2,3)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Object... values)</span><br><span class="line">in(<span class="keyword">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><ul><li>字段 IN (v0, v1, …)</li><li>例: <code>in(&quot;age&quot;, 1, 2, 3)</code>—&gt;<code>age in (1,2,3)</code></li></ul><h3 id="notIn"><a href="#notIn" class="headerlink" title="notIn"></a>notIn</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Collection&lt;?&gt; value)</span><br><span class="line">notIn(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN (value.get(0), value.get(1), …)</li><li>例: <code>notIn(&quot;age&quot;,&#123;1,2,3&#125;)</code>—&gt;<code>age not in (1,2,3)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Object... values)</span><br><span class="line">notIn(<span class="keyword">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN (v0, v1, …)</li><li>例: <code>notIn(&quot;age&quot;, 1, 2, 3)</code>—&gt;<code>age not in (1,2,3)</code></li></ul><h3 id="inSql"><a href="#inSql" class="headerlink" title="inSql"></a>inSql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inSql(R column, String inValue)</span><br><span class="line">inSql(<span class="keyword">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><ul><li>字段 IN ( sql语句 )</li><li>例: <code>inSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>—&gt;<code>age in (1,2,3,4,5,6)</code></li><li>例: <code>inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>—&gt;<code>id in (select id from table where id &lt; 3)</code></li></ul><h3 id="notInSql"><a href="#notInSql" class="headerlink" title="notInSql"></a>notInSql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notInSql(R column, String inValue)</span><br><span class="line">notInSql(<span class="keyword">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN ( sql语句 )</li><li>例: <code>notInSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>—&gt;<code>age not in (1,2,3,4,5,6)</code></li><li>例: <code>notInSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>—&gt;<code>id not in (select id from table where id &lt; 3)</code></li></ul><h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupBy(R... columns)</span><br><span class="line">groupBy(<span class="keyword">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>分组：GROUP BY 字段, …</li><li>例: <code>groupBy(&quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>group by id,name</code></li></ul><h3 id="orderByAsc"><a href="#orderByAsc" class="headerlink" title="orderByAsc"></a>orderByAsc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByAsc(R... columns)</span><br><span class="line">orderByAsc(<span class="keyword">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, … ASC</li><li>例: <code>orderByAsc(&quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>order by id ASC,name ASC</code></li></ul><h3 id="orderByDesc"><a href="#orderByDesc" class="headerlink" title="orderByDesc"></a>orderByDesc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByDesc(R... columns)</span><br><span class="line">orderByDesc(<span class="keyword">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, … DESC</li><li>例: <code>orderByDesc(&quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>order by id DESC,name DESC</code></li></ul><h3 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy"></a>orderBy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderBy(<span class="keyword">boolean</span> condition, <span class="keyword">boolean</span> isAsc, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, …</li><li>例: <code>orderBy(true, true, &quot;id&quot;, &quot;name&quot;)</code>—&gt;<code>order by id ASC,name ASC</code></li></ul><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">having(String sqlHaving, Object... params)</span><br><span class="line">having(<span class="keyword">boolean</span> condition, String sqlHaving, Object... params)</span><br></pre></td></tr></table></figure><ul><li>HAVING ( sql语句 )</li><li>例: <code>having(&quot;sum(age) &gt; 10&quot;)</code>—&gt;<code>having sum(age) &gt; 10</code></li><li>例: <code>having(&quot;sum(age) &gt; &#123;0&#125;&quot;, 11)</code>—&gt;<code>having sum(age) &gt; 11</code></li></ul><h3 id="func"><a href="#func" class="headerlink" title="func"></a>func</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func(Consumer&lt;Children&gt; consumer)</span><br><span class="line">func(<span class="keyword">boolean</span> condition, Consumer&lt;Children&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>func 方法(主要方便在出现if…else下调用不同方法能不断链)</li><li>例: <code>func(i -&gt; if(true) &#123;i.eq(&quot;id&quot;, 1)&#125; else &#123;i.ne(&quot;id&quot;, 1)&#125;)</code></li></ul><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or()</span><br><span class="line">or(<span class="keyword">boolean</span> condition)</span><br></pre></td></tr></table></figure><ul><li>拼接 OR</li></ul><p>注意事项:</p><p>主动调用<code>or</code>表示紧接着下一个<strong>方法</strong>不是用<code>and</code>连接!(不调用<code>or</code>则默认为使用<code>and</code>连接)</p><ul><li>例: <code>eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;老王&quot;)</code>—&gt;<code>id = 1 or name = &#39;老王&#39;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or(Consumer&lt;Param&gt; consumer)</span><br><span class="line">or(<span class="keyword">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>OR 嵌套</li><li>例: <code>or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>—&gt;<code>or (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and(Consumer&lt;Param&gt; consumer)</span><br><span class="line">and(<span class="keyword">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>AND 嵌套</li><li>例: <code>and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>—&gt;<code>and (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul><h3 id="nested"><a href="#nested" class="headerlink" title="nested"></a>nested</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nested(Consumer&lt;Param&gt; consumer)</span><br><span class="line">nested(<span class="keyword">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>正常嵌套 不带 AND 或者 OR</li><li>例: <code>nested(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>—&gt;<code>(name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply(String applySql, Object... params)</span><br><span class="line">apply(<span class="keyword">boolean</span> condition, String applySql, Object... params)</span><br></pre></td></tr></table></figure><ul><li>拼接 sql</li></ul><blockquote><p>注意事项:</p><p>该方法可用于数据库<strong>函数</strong> 动态入参的<code>params</code>对应前面<code>applySql</code>内部的<code>&#123;index&#125;</code>部分.这样是不会有sql注入风险的,反之会有!</p></blockquote><ul><li>例: <code>apply(&quot;id = 1&quot;)</code>—&gt;<code>id = 1</code></li><li>例: <code>apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code>—&gt;<code>date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></li><li>例: <code>apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#123;0&#125;&quot;, &quot;2008-08-08&quot;)</code>—&gt;<code>date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></li></ul><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">last(String lastSql)</span><br><span class="line">last(<span class="keyword">boolean</span> condition, String lastSql)</span><br></pre></td></tr></table></figure><ul><li>无视优化规则直接拼接到 sql 的最后</li></ul><blockquote><p>注意事项:</p><p>只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</p></blockquote><ul><li>例: <code>last(&quot;limit 1&quot;)</code></li></ul><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exists(String existsSql)</span><br><span class="line">exists(<span class="keyword">boolean</span> condition, String existsSql)</span><br></pre></td></tr></table></figure><ul><li>拼接 EXISTS ( sql语句 )</li><li>例: <code>exists(&quot;select id from table where age = 1&quot;)</code>—&gt;<code>exists (select id from table where age = 1)</code></li></ul><h3 id="notExists"><a href="#notExists" class="headerlink" title="notExists"></a>notExists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notExists(String notExistsSql)</span><br><span class="line">notExists(<span class="keyword">boolean</span> condition, String notExistsSql)</span><br></pre></td></tr></table></figure><ul><li>拼接 NOT EXISTS ( sql语句 )</li><li>例: <code>notExists(&quot;select id from table where age = 1&quot;)</code>—&gt;<code>not exists (select id from table where age = 1)</code></li></ul><h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;jobob&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">&quot;模块名&quot;</span>));</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.baomidou.ant&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setSuperEntityClass(<span class="string">&quot;你自己的父类实体,没有就不用设置!&quot;</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">&quot;你自己的父类控制器,没有就不用设置!&quot;</span>);</span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行main方法，输入对应的表名  </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式(不定时更新)</title>
      <link href="2021/04/06/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/04/06/java%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式相关内容介绍"><a href="#设计模式相关内容介绍" class="headerlink" title="设计模式相关内容介绍"></a>设计模式相关内容介绍</h1><h2 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h2><h3 id="软件设计模式产生的背景"><a href="#软件设计模式产生的背景" class="headerlink" title="软件设计模式产生的背景"></a>软件设计模式产生的背景</h3><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。 </p><h3 id="软件设计模式的概念"><a href="#软件设计模式的概念" class="headerlink" title="软件设计模式的概念"></a>软件设计模式的概念</h3><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h3 id="学习设计模式的必要性"><a href="#学习设计模式的必要性" class="headerlink" title="学习设计模式的必要性"></a>学习设计模式的必要性</h3><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><ul><li><p><strong>创建型模式</strong>（5种）</p><p><strong>用于描述“怎样创建对象”</strong>，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong>（7种）</p><p><strong>用于描述如何将类或对象按某种布局组成更大的结构</strong>，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong>（11种）</p><p><strong>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务</strong>，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图</p><h3 id="类图概述"><a href="#类图概述" class="headerlink" title="类图概述"></a>类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h3 id="类图的作用"><a href="#类图的作用" class="headerlink" title="类图的作用"></a>类图的作用</h3><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h3 id="类图表示法"><a href="#类图表示法" class="headerlink" title="类图表示法"></a>类图表示法</h3><h4 id="类的表示方式"><a href="#类的表示方式" class="headerlink" title="类的表示方式"></a>类的表示方式</h4><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095403.jpg" alt="Employee"></p><p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected</li></ul><p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong>  </p><p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><p>​    1，中括号中的内容表示是可选的</p><p>​    2，也有将类型放在变量名前面，返回值类型放在方法名前面</p></blockquote><p>举个栗子</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095524.png" alt="demo"></p><p>上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul><h4 id="类与类之间的关系表示方式"><a href="#类与类之间的关系表示方式" class="headerlink" title="类与类之间的关系表示方式"></a>类与类之间的关系表示方式</h4><h5 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h5><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联又可以分为单向关联，双向关联，自关联。</p><p>1、单向关联</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095912.png" alt="image-20210406095910934"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p>2、双向关联</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095926.png" alt="image-20210406095924257"></p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p>3、自关联</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406095944.png" alt="image-20210406095942616"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h5 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h5><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100033.png" alt="image-20210406100031868"></p><h5 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h5><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100119.png" alt="image-20210406100118036"></p><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100141.png" alt="image-20210406100139365"></p><h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100217.png" alt="image-20210406100216017"></p><h5 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h5><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100248.png" alt="image-20210406100246805"></p><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><p>下面以 <code>搜狗输入法</code> 的皮肤为例介绍开闭原则的应用。</p><p>【例】<code>搜狗输入法</code> 的皮肤设计。</p><p>分析：<code>搜狗输入法</code> 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin和HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100346.png" alt="image-20210406100344849"></p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>里氏代换原则是面向对象设计的基本原则之一。</p><p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</strong></p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>下面看一个里氏替换原则中经典的一个例子</p><p>【例】正方形不是长方形。</p><p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100428.png" alt="image-20210406100427380"></p><p>代码如下：</p><p><strong>长方形类（Rectangle）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正方形（Square）：</strong></p><p>由于正方形的长和宽相同，所以在方法setLength和setWidth中，对长度和宽度都需要赋相同值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setLength(width);</span><br><span class="line">        <span class="keyword">super</span>.setWidth(width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setLength(length);</span><br><span class="line">        <span class="keyword">super</span>.setWidth(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类RectangleDemo是我们的软件系统中的一个组件，它有一个resize方法依赖基类Rectangle，resize方法是RectandleDemo类中的一个方法，用来实现宽度逐渐增长的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(Rectangle rectangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (rectangle.getWidth() &lt;= rectangle.getLength()) &#123;</span><br><span class="line">            rectangle.setWidth(rectangle.getWidth() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印长方形的长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLengthAndWidth</span><span class="params">(Rectangle rectangle)</span> </span>&#123;</span><br><span class="line">        System.out.println(rectangle.getLength());</span><br><span class="line">        System.out.println(rectangle.getWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        rectangle.setLength(<span class="number">20</span>);</span><br><span class="line">        rectangle.setWidth(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle);</span><br><span class="line">        printLengthAndWidth(rectangle);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Rectangle rectangle1 = <span class="keyword">new</span> Square();</span><br><span class="line">        rectangle1.setLength(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle1);</span><br><span class="line">        printLengthAndWidth(rectangle1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们运行一下这段代码就会发现，假如我们把一个普通长方形作为参数传入resize方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度,代码就会停止，这种行为的结果符合我们的预期；假如我们再把一个正方形作为参数传入resize方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。所以，普通的长方形是适合这段代码的，正方形不适合。<br>我们得出结论：在resize方法中，Rectangle类型的参数是不能被Square类型的参数所代替，如果进行了替换就得不到预期结果。因此，Square类和Rectangle类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。</p><p>如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口(Quadrilateral)，让Rectangle类和Square类实现Quadrilateral接口</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100456.png" alt="image-20210406100455005"></p><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求<strong>对抽象进行编程，不要对实现进行编程</strong>，这样就降低了客户与实现模块间的耦合。</p><p>下面看一个例子来理解依赖倒转原则</p><p>【例】组装电脑</p><p>现要组装一台电脑，需要配件cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择cpu有很多选择，如Intel，AMD等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p><p><strong>类图如下：</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100528.png" alt="image-20210406100526640"></p><p>代码如下：</p><p><strong>希捷硬盘类（XiJieHardDisk）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiJieHardDisk</span> <span class="keyword">implements</span> <span class="title">HardDisk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Intel处理器（IntelCpu）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntelCpu</span> <span class="keyword">implements</span> <span class="title">Cpu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Intel处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>金士顿内存条（KingstonMemory）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KingstonMemory</span> <span class="keyword">implements</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿作为内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XiJieHardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> IntelCpu cpu;</span><br><span class="line">    <span class="keyword">private</span> KingstonMemory memory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IntelCpu <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(IntelCpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KingstonMemory <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(KingstonMemory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XiJieHardDisk <span class="title">getHardDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHardDisk</span><span class="params">(XiJieHardDisk hardDisk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">        cpu.run();</span><br><span class="line">        memory.save();</span><br><span class="line">        String data = hardDisk.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘中获取的数据为：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类（TestComputer）：</strong></p><p>测试类用来组装电脑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.setHardDisk(<span class="keyword">new</span> XiJieHardDisk());</span><br><span class="line">        computer.setCpu(<span class="keyword">new</span> IntelCpu());</span><br><span class="line">        computer.setMemory(<span class="keyword">new</span> KingstonMemory());</span><br><span class="line"></span><br><span class="line">        computer.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的cpu只能是Intel的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p><p>根据依赖倒转原则进行改进：</p><p>代码我们只需要修改Computer类，让Computer类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p><p><strong>类图如下：</strong></p><p><img src="../../../../typora/images/image-20210406100601988.png" alt="image-20210406100601988"></p><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HardDisk <span class="title">getHardDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHardDisk</span><span class="params">(HardDisk hardDisk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cpu <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(Cpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memory <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(Memory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>现有两个类：A类（方法1、方法2），B类需要A类中的方法1，但是如果B类实现A类，就会拥有方法2，这样B类就拥有一个它不需要的方法。</p><p>下面看一个例子来理解接口隔离原则</p><p>【例】安全门案例</p><p>我们需要创建一个<code>黑马</code>品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100647.png" alt="image-20210406100645056"></p><p>上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现SafetyDoor接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100707.png" alt="image-20210406100706202"></p><p>代码如下：</p><p><strong>AntiTheft（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AntiTheft</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fireproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fireproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Waterproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">waterproof</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HeiMaSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeiMaSafetyDoor</span> <span class="keyword">implements</span> <span class="title">AntiTheft</span>,<span class="title">Fireproof</span>,<span class="title">Waterproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waterproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ItcastSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItcastSafetyDoor</span> <span class="keyword">implements</span> <span class="title">AntiTheft</span>,<span class="title">Fireproof</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">antiTheft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireproof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则又叫最少知识原则。</p><p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><p>下面看一个例子来理解迪米特法则</p><p>【例】明星与经纪人的关系实例</p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100747.png" alt="image-20210406100746609"></p><p>代码如下：</p><p><strong>明星类（Star）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Star</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>粉丝类（Fans）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fans</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fans</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>媒体公司类（Company）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经纪人类（Agent）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line">    <span class="keyword">private</span> Fans fans;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStar</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFans</span><span class="params">(Fans fans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fans = fans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">meeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(fans.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(company.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>合成复用原则是指：尽量先使用<strong>组合</strong>或者<strong>聚合</strong>等<strong>关联关系</strong>来实现，其次才考虑使用<strong>继承关系</strong>来实现。</p><p>通常类的复用分为<strong>继承复用</strong>和<strong>合成复用</strong>两种。</p><p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ol><li><strong>继承复用破坏了类的封装性</strong>。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li><strong>子类与父类的耦合度高</strong>。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li><strong>它限制了复用的灵活性</strong>。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p><ol><li><strong>它维持了类的封装性</strong>。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li><strong>对象间的耦合度低</strong>。可以在类的成员位置声明抽象。</li><li><strong>复用的灵活性高</strong>。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li></ol><p>下面看一个例子来理解合成复用原则</p><p>【例】汽车分类管理程序</p><p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下： </p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100843.png" alt="image-20210406100833817"></p><p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406100853.png" alt="image-20210406100851809"></p><h1 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h1><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“<strong>将对象的创建与使用分离</strong>”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>原型模式</li><li>建造者模式</li></ul><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h3 id="单例模式的结构"><a href="#单例模式的结构" class="headerlink" title="单例模式的结构"></a>单例模式的结构</h3><p>单例模式的主要有以下角色：</p><ul><li>单例类。只能创建一个实例的类</li><li>访问类。使用单例类</li></ul><h3 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h3><blockquote><p>单例设计模式分类两种：</p><p>​    饿汉式：类加载就会导致该单实例对象被创建    </p><p>​    懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><h5 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.在本类中创建本类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.在静态代码块中赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p><h5 id="枚举方式"><a href="#枚举方式" class="headerlink" title="枚举方式"></a>枚举方式</h5><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    枚举方式属于饿汉方式。</p><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><h5 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p><h5 id="双重检查锁"><a href="#双重检查锁" class="headerlink" title="双重检查锁"></a>双重检查锁</h5><p>再来讨论一下懒汉模式中加锁的问题，对于 <code>getInstance()</code> 方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//只有当进行写操作的时候才会上锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="comment">//3.提供外界访问方式，让外界获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null，如果为null，说明还没有创建Singleton对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//只有当进行写操作的时候才会上锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">小结：</font></p><p>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性/方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 <code>static</code> 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​    第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder</p><p>并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p><font color="red">小结：</font></p><p>​    静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="问题演示"><a href="#问题演示" class="headerlink" title="问题演示"></a>问题演示</h4><p>破坏单例模式：</p><p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p><ul><li><p>序列化反序列化</p><p>将<strong>Singleton类</strong>序列化写入文件，在从文件反序列化读取对象</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//往文件中写对象</span></span><br><span class="line">        <span class="comment">//writeObject2File();</span></span><br><span class="line">        <span class="comment">//从文件中读取对象</span></span><br><span class="line">        Singleton s1 = readObjectFromFile();</span><br><span class="line">        Singleton s2 = readObjectFromFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两个反序列化后的对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">readObjectFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象输入流对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//第一个读取Singleton对象</span></span><br><span class="line">        Singleton instance = (Singleton) ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObject2File</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的对象</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//创建对象输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将instance对象写出到文件中</span></span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式。</p></blockquote></li><li><p>反射</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的字节码对象</span></span><br><span class="line">        Class clazz = Singleton.class;</span><br><span class="line">        <span class="comment">//获取Singleton类的私有无参构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Singleton类的对象s1</span></span><br><span class="line">        Singleton s1 = (Singleton) constructor.newInstance();</span><br><span class="line">        <span class="comment">//创建Singleton类的对象s2</span></span><br><span class="line">        Singleton s2 = (Singleton) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断通过反射创建的两个Singleton对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式</p></blockquote></li></ul><blockquote><p><font color="red">注意：</font>枚举方式不会出现这两个问题。</p></blockquote><h4 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h4><ul><li><p>序列化、反序列方式破坏单例模式的解决方法</p><p>在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是为了解决序列化反序列化破解单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码解析：</strong></p><p>ObjectInputStream类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">    <span class="keyword">int</span> outerHandle = passHandle;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object obj = readObject0(<span class="keyword">false</span>);<span class="comment">//重点查看readObject0方法</span></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readObject0</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> TC_OBJECT:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));<span class="comment">//重点查看readOrdinaryObject方法</span></span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bin.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span></span><br><span class="line">    obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>; </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span></span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp; desc.hasReadResolveMethod()) &#123;</span><br><span class="line">    <span class="comment">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span></span><br><span class="line">    <span class="comment">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span></span><br><span class="line">    Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">     ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反射方式破解单例的解决方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           反射破解单例模式需要添加的代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">说明:</font></p><p>​    这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此种操作。</p><h4 id="JDK源码解析-Runtime类"><a href="#JDK源码解析-Runtime类" class="headerlink" title="JDK源码解析-Runtime类"></a>JDK源码解析-Runtime类</h4><p>Runtime类就是使用的单例设计模式。</p><ol><li><p>通过源代码查看使用的是哪儿种单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面源代码中可以看出Runtime类使用的是饿汉式（静态属性）方式来实现单例模式的。</p></li></ol></li></ul><ol start="2"><li><p>使用Runtime类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Runtime类对象</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 Java 虚拟机中的内存总量。</span></span><br><span class="line">        System.out.println(runtime.totalMemory());</span><br><span class="line">        <span class="comment">//返回 Java 虚拟机试图使用的最大内存量。</span></span><br><span class="line">        System.out.println(runtime.maxMemory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span></span><br><span class="line">        Process process = runtime.exec(<span class="string">&quot;ipconfig&quot;</span>);</span><br><span class="line">        <span class="comment">//获取命令执行后的结果，通过输入流获取</span></span><br><span class="line">        InputStream inputStream = process.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>* <span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> b = inputStream.read(arr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,b,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>需求：设计一个咖啡店点餐系统。  </p><p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p><p>具体类的设计如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406144553.png" alt="image-20210406144551509"></p><ul><li><p>Coffee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加奶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加糖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSugar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>AmericanCoffee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;美式咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LatteCoffee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffee</span>  <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CoffeeStroe</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">orderCoffee</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;american&quot;</span>.equals(type))&#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">            coffee.addMike();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type))&#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">            coffee.addSugar();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;对不起，没有你要的咖啡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p><p>在本教程中会介绍三种工厂的使用</p><ul><li>简单工厂模式（不属于GOF的23种经典设计模式）</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>简单工厂包含如下角色：</p><ul><li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品 ：实现或者继承抽象产品的子类</li><li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>现在使用简单工厂对上面案例进行改进，类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406150845.png" alt="image-20210406150840911"></p><p>工厂类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanoCoffee();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就解除了和Coffee实现类的耦合，同时又产生了新的耦合，<strong>CoffeeStore对象和SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合</strong>。</p><p>后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><p>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</p><p><strong>缺点：</strong></p><p>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><strong>静态工厂</strong></p><p>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是23种设计模式中的。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title">createCoffee</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> AmericanoCoffee();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不用创建对象，直接调用方法</p><h3 id="工厂方法模式-1"><a href="#工厂方法模式-1" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</p><h4 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h4><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>使用工厂方法模式对上例进行改进，类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406152122.png" alt="image-20210406152120502"></p><ul><li><p><strong>抽象工厂——CoffeeFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Coffee <span class="title">createCoffee</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>具体工厂</strong></p><p>AmericanCoffeeFactory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCoffeeFactory</span> <span class="keyword">implements</span> <span class="title">CoffeeFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LatteCoffeeFactory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffeeFactory</span> <span class="keyword">implements</span> <span class="title">CoffeeFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>抽象产品——Coffee</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加奶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加糖</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSugar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>具体产品</strong></p><p>AmericonCoffee:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericonCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;美式咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LatteCoffee:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffee</span>  <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><p>CoffeeStore:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CoffeeFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(CoffeeFactory factory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">orderCoffee</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Coffee coffee = factory.createCoffee();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建咖啡店对象</span></span><br><span class="line">        CoffeeStore coffeeStore = <span class="keyword">new</span> CoffeeStore();</span><br><span class="line">        <span class="comment">//创建工厂对象</span></span><br><span class="line">        CoffeeFactory coffeeFactory = <span class="keyword">new</span> AmericanCoffeeFactory();</span><br><span class="line">        coffeeStore.setFactory(coffeeFactory);</span><br><span class="line">        Coffee coffee = coffeeStore.orderCoffee();</span><br><span class="line">        System.out.println(coffee.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>看起来变得比以前的繁琐，但是通过工厂方法模式，我们实现了开闭原则，对扩展开放，对修改关闭，当我们要添加新的咖啡的时候，只需要扩展对应的具体咖啡工厂和对应的咖啡类，而不需要去修改代码。</p></blockquote><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p><strong>缺点：</strong></p><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、传智播客只培养计算机软件专业的学生等。</p><p>这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p><p>本节要介绍的抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406154646.png" alt="image-20210406154644156"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406154700.png" alt="image-20210406154658784"></p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>抽象工厂模式的主要角色如下：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个<strong>不同等级</strong>的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210406155004.png" alt="image-20210406155003037"></p><p>代码如下：</p><p>抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Coffee <span class="title">createCoffee</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dessert <span class="title">createDessert</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//美式甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanDessertFactory</span> <span class="keyword">implements</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericanCoffee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dessert <span class="title">createDessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MatchaMousse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//意大利风味甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItalyDessertFactory</span> <span class="keyword">implements</span> <span class="title">DessertFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">createCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LatteCoffee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dessert <span class="title">createDessert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tiramisu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong></p><p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p></li><li><p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p></li><li><p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p></li></ul><p>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</p><h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><p><strong>简单工厂+配置文件解除耦合</strong></p><p>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p><p>第一步：定义配置文件</p><p>为了演示方便，我们使用properties文件作为配置文件，名称为bean.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">american</span>=<span class="string">com.itheima.pattern.factory.config_factory.AmericanCoffee</span></span><br><span class="line"><span class="attr">latte</span>=<span class="string">com.itheima.pattern.factory.config_factory.LatteCoffee</span></span><br></pre></td></tr></table></figure><p>第二步：改进工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Coffee&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.load(is);</span><br><span class="line">            <span class="comment">//遍历Properties集合对象</span></span><br><span class="line">            Set&lt;Object&gt; keys = p.keySet();</span><br><span class="line">            <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">                <span class="comment">//根据键获取值（全类名）</span></span><br><span class="line">                String className = p.getProperty((String) key);</span><br><span class="line">                <span class="comment">//获取字节码对象</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                Coffee obj = (Coffee) clazz.newInstance();</span><br><span class="line">                map.put((String)key,obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title">createCoffee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。</p><h3 id="JDK源码解析-Collection-iterator方法"><a href="#JDK源码解析-Collection-iterator方法" class="headerlink" title="JDK源码解析-Collection.iterator方法"></a>JDK源码解析-Collection.iterator方法</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;令狐冲&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;风清扬&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;任我行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="comment">//使用迭代器遍历</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            String ele = it.next();</span><br><span class="line">            System.out.println(ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的代码大家应该很熟，使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407152922.png" alt="image-20210407152914504"></p><p>Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类，ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品类的对象。</p><blockquote><p>另：</p><p>​    1,DateForamt类中的getInstance()方法使用的是工厂模式；</p><p>​    2,Calendar类中的getInstance()方法使用的是工厂模式；</p></blockquote><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><p>原型模式包含如下角色：</p><ul><li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li></ul><p>接口类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407154119.png" alt="image-20210407154118556"></p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>原型模式的克隆分为浅克隆和深克隆。</p><blockquote><p>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p><p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p>Java中的Object类中提供了 <code>clone()</code> 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了Cloneable接口的子实现类就是具体的原型类。代码如下：</p><p><strong>Realizetype类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Realizetype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Realizetype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体原型对象已被克隆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realizetype <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始克隆&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (Realizetype)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>PrototypeTest类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个原型类对象</span></span><br><span class="line">        Realizetype realizetype = <span class="keyword">new</span> Realizetype();</span><br><span class="line">        Realizetype clone = realizetype.clone();</span><br><span class="line">        System.out.println(realizetype==clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407155414.png" alt="image-20210407155412821"></p><blockquote><p>构造方法只是在new的时候被执行了，在克隆的时候，执行的是克隆方法，而没有执行构造方法，克隆出来的新对象与原对象不是同一个对象。</p></blockquote><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>用原型模式生成“三好学生”奖状</strong></p><p>同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。</p><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407155703.png" alt="image-20210407155702578"></p><p><strong>Citation类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Citation</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="comment">//三好学生姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Citation <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Citation)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CitationTest类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CitationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建原型对象</span></span><br><span class="line">        Citation citation = <span class="keyword">new</span> Citation();</span><br><span class="line">        <span class="comment">//克隆原型对象</span></span><br><span class="line">        Citation citation1 = citation.clone();</span><br><span class="line"></span><br><span class="line">        citation.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        citation1.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        citation.show();</span><br><span class="line">        citation1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li><li>性能和安全要求比较高。</li></ul><h3 id="扩展（深克隆）"><a href="#扩展（深克隆）" class="headerlink" title="扩展（深克隆）"></a>扩展（深克隆）</h3><p>将上面的“三好学生”奖状的案例中Citation类的name属性修改为Student类型的属性。代码如下：</p><p><strong>Citation类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Citation</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="comment">//三好学生姓名</span></span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStu</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stu = stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(stu.getName() + <span class="string">&quot;同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Citation <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Citation)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CitationTest类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CitationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建原型对象</span></span><br><span class="line">        Citation citation = <span class="keyword">new</span> Citation();</span><br><span class="line"></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        citation.setStu(stu);</span><br><span class="line">        <span class="comment">//克隆原型对象</span></span><br><span class="line">        Citation citation1 = citation.clone();</span><br><span class="line"></span><br><span class="line">        citation1.getStu().setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        citation.show();</span><br><span class="line">        citation1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407161048.png" alt="image-20210407161047208"></p><blockquote><p><font color="red">说明：</font></p><p>​    stu对象和stu1对象是同一个对象，就会产生将stu1对象中name属性值改为“李四”，两个Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的引用类型的属性进行引用的复制。</p></blockquote><p>这种情况需要使用深克隆，而进行深克隆需要使用对象流。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CitationTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Citation c1 = <span class="keyword">new</span> Citation();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        c1.setStu(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象输出流对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\b.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将c1对象写出到文件中</span></span><br><span class="line">        oos.writeObject(c1);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象出入流对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\Think\\Desktop\\b.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//读取对象</span></span><br><span class="line">        Citation c2 = (Citation) ois.readObject();</span><br><span class="line">        <span class="comment">//获取c2奖状所属学生对象</span></span><br><span class="line">        Student stu1 = c2.getStu();</span><br><span class="line">        stu1.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断stu对象和stu1对象是否是同一个对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;stu和stu1是同一个对象？&quot;</span> + (stu == stu1));</span><br><span class="line"></span><br><span class="line">        c1.show();</span><br><span class="line">        c2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407161537.png" alt="image-20210407161536007"></p><blockquote><p>注意：Citation类和Student类必须实现Serializable接口，否则会抛NotSerializableException异常</p></blockquote><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407162245.png" alt="image-20210407162243645"></p><ul><li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li><li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li><li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li></ul><h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><p>建造者（Builder）模式包含如下角色：</p><ul><li><p>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。 </p></li><li><p>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。 </p></li><li><p>产品类（Product）：要创建的复杂对象。</p></li><li><p>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。 </p></li></ul><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407165541.png" alt="image-20210407165539519"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>创建共享单车</strong></p><p>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。</p><p>这里Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder和OfoBuilder是具体的建造者；Director是指挥者。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407165855.png" alt="image-20210407165854112"></p><p>具体的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自行车类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line">    <span class="keyword">private</span> String seat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrame</span><span class="params">(String frame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.frame = frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeat</span><span class="params">(String seat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seat = seat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象 builder 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Bike mBike = <span class="keyword">new</span> Bike();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Bike <span class="title">createBike</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//摩拜单车Builder类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobikeBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;铝合金车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;真皮车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">createBike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ofo单车Builder类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfoBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;碳纤维车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;橡胶车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">createBike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指挥者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder mBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        mBuilder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBuilder.buildFrame();</span><br><span class="line">        mBuilder.buildSeat();</span><br><span class="line">        <span class="keyword">return</span> mBuilder.createBike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        showBike(<span class="keyword">new</span> OfoBuilder());</span><br><span class="line">        showBike(<span class="keyword">new</span> MobikeBuilder());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showBike</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        Bike bike = director.construct();</span><br><span class="line">        System.out.println(bike.getFrame());</span><br><span class="line">        System.out.println(bike.getSeat());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>上面示例是 Builder模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把指挥者类和抽象建造者进行结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象 builder 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Bike mBike = <span class="keyword">new</span> Bike();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Bike <span class="title">createBike</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bike <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildFrame();</span><br><span class="line">        <span class="keyword">this</span>.BuildSeat();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createBike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果construct() 过于复杂，建议还是封装到 Director 中。</p><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性。</li><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li>建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。</li></ul><p><strong>缺点：</strong></p><p>造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><p>建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。</p><ul><li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li><li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。</li></ul><h3 id="模式扩展-1"><a href="#模式扩展-1" class="headerlink" title="模式扩展"></a>模式扩展</h3><p>建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。</p><p>重构前代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String cpu, String screen, String memory, String mainboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">        <span class="keyword">this</span>.mainboard = mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScreen</span><span class="params">(String screen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(String memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMainboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMainboard</span><span class="params">(String mainboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mainboard = mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建Phone对象</span></span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone(<span class="string">&quot;intel&quot;</span>,<span class="string">&quot;三星屏幕&quot;</span>,<span class="string">&quot;金士顿&quot;</span>,<span class="string">&quot;华硕&quot;</span>);</span><br><span class="line">        System.out.println(phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面在客户端代码中构建Phone对象，传递了四个参数，如果参数更多呢？代码的可读性及使用的成本就是比较高。</p><p>重构后代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Phone</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        cpu = builder.cpu;</span><br><span class="line">        screen = builder.screen;</span><br><span class="line">        memory = builder.memory;</span><br><span class="line">        mainboard = builder.mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String screen;</span><br><span class="line">        <span class="keyword">private</span> String memory;</span><br><span class="line">        <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">cpu</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            cpu = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">screen</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            screen = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">memory</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            memory = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">mainboard</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            mainboard = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Phone <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Phone(<span class="keyword">this</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone.Builder()</span><br><span class="line">                .cpu(<span class="string">&quot;intel&quot;</span>)</span><br><span class="line">                .mainboard(<span class="string">&quot;华硕&quot;</span>)</span><br><span class="line">                .memory(<span class="string">&quot;金士顿&quot;</span>)</span><br><span class="line">                .screen(<span class="string">&quot;三星&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构后的代码在使用起来更方便，某种程度上也可以提高开发效率。从软件设计上，对程序员的要求比较高。</p><h2 id="创建者模式对比"><a href="#创建者模式对比" class="headerlink" title="创建者模式对比"></a>创建者模式对比</h2><h3 id="工厂方法模式VS建造者模式"><a href="#工厂方法模式VS建造者模式" class="headerlink" title="工厂方法模式VS建造者模式"></a>工厂方法模式VS建造者模式</h3><p>工厂方法模式注重的是<strong>整体对象的创建方式</strong>；而建造者模式注重的是<strong>部件构建的过程</strong>，意在通过一步一步地精确构造创建出一个复杂的对象。</p><p>我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。</p><h3 id="抽象工厂模式VS建造者模式"><a href="#抽象工厂模式VS建造者模式" class="headerlink" title="抽象工厂模式VS建造者模式"></a>抽象工厂模式VS建造者模式</h3><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p><p>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p><p>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</p><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。</p><p>由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。</p><p>结构型模式分为以下 7 种：</p><ul><li>代理模式</li><li>适配器模式</li><li>装饰者模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>享元模式</li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>Java中的代理按照代理类生成时机不同又分为<strong>静态代理</strong>和<strong>动态代理</strong>。<strong>静态代理代理类在编译期就生成</strong>，而动<strong>态代理代理类则是在Java运行时动态生成</strong>。动态代理又有JDK代理和CGLib代理两种。</p><h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><p>代理（Proxy）模式分为三种角色：</p><ul><li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>我们通过案例来感受一下静态代理。</p><p>【例】火车站卖票</p><p>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火车站是目标对象，代售点是代理对象。类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210407193651.png" alt="image-20210407193650385"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代售点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPoint</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用&quot;</span>);</span><br><span class="line">        station.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyPoint pp = <span class="keyword">new</span> ProxyPoint();</span><br><span class="line">        pp.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象和目标对象的中介。同时也对sell方法进行了增强（代理点收取一些服务费用）。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>接下来我们使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂，用来创建代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SellTickets <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Proxy获取代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            newProxyInstance()方法参数说明：</span></span><br><span class="line"><span class="comment">                ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口</span></span><br><span class="line"><span class="comment">                InvocationHandler h ： 代理对象的调用处理程序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        InvocationHandler中invoke方法参数说明：</span></span><br><span class="line"><span class="comment">                            proxy ： 代理对象</span></span><br><span class="line"><span class="comment">                            method ： 对应于在代理对象上调用的接口方法的 Method 实例</span></span><br><span class="line"><span class="comment">                            args ： 代理对象调用接口方法时传递的实际参数</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        <span class="comment">//执行真实对象</span></span><br><span class="line">                        Object result = method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        </span><br><span class="line">        SellTickets proxyObject = factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">使用了动态代理，我们思考下面问题：</font></p><ul><li><p>ProxyFactory是代理类吗？</p><p>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.proxy.dynamic.jdk.SellTickets;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m2, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m0, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的类中，我们可以看到以下几个信息：</p><ul><li>代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。</li><li>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</li></ul></li><li><p>动态代理的执行流程是什么样？</p><p>下面是摘取的重点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序运行过程中动态生成的代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">SellTickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java提供的动态代理相关类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Proxy</span><span class="params">(InvocationHandler h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation station = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SellTickets <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        Object result = method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试访问类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        SellTickets proxyObject = factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行流程如下：</p><pre><code>1. 在测试类中通过代理对象调用sell()方法2. 根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法3. 代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法4. invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</code></pre><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>同样是上面的案例，我们再次使用CGLIB代理实现。</p><p>如果没有定义SellTickets接口，只定义了TrainStation(火车站类)。很显然JDK代理是无法使用了，因为JDK动态代理要求必须定义接口，对接口进行代理。</p><p>CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。</p><p>CGLIB是第三方提供的包，所以需要引入jar包的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//火车站</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrainStation target = <span class="keyword">new</span> TrainStation();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrainStation <span class="title">getProxyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class="line">        Enhancer enhancer =<span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类的字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        TrainStation obj = (TrainStation) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        intercept方法参数说明：</span></span><br><span class="line"><span class="comment">            o ： 代理对象</span></span><br><span class="line"><span class="comment">            method ： 真实对象中的方法的Method实例</span></span><br><span class="line"><span class="comment">            args ： 实际参数</span></span><br><span class="line"><span class="comment">            methodProxy ：代理对象中的方法的method实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrainStation <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用(CGLIB动态代理方式)&quot;</span>);</span><br><span class="line">        TrainStation result = (TrainStation) methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建代理工厂对象</span></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        TrainStation proxyObject = factory.getProxyObject();</span><br><span class="line"></span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种代理对比"><a href="#三种代理对比" class="headerlink" title="三种代理对比"></a>三种代理对比</h3><ul><li><p>jdk代理和CGLIB代理</p><p>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p><p>在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果<strong>有接口使用JDK动态代理，如果没有接口使用CGLIB代理</strong>。</p></li><li><p>动态代理和静态代理                                                                                                                </p><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p><p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p></li></ul><h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><p><strong>缺点：</strong></p><ul><li>增加了系统的复杂度；</li></ul><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>远程（Remote）代理</p><p>本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。</p></li><li><p>防火墙（Firewall）代理</p><p>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。</p></li><li><p>保护（Protect or Access）代理</p><p>控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p></li></ul><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>如果去欧洲国家去旅游的话，他们的插座如下图最左边，是欧洲标准。而我们使用的插头如下图最右边的。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第1面插入当地的插座，第2面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210408145143.png" alt="image-20210408145135245"></p><p><strong>定义：</strong></p><p>​    将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p><p>​    适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><h3 id="结构-6"><a href="#结构-6" class="headerlink" title="结构"></a>结构</h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p><p>【例】读卡器</p><p>现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将TF卡中的内容读取出来。</p><p>类图如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210408145221.png" alt="image-20210408145219793"></p><h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h3 id="JDK源码解析"><a href="#JDK源码解析" class="headerlink" title="JDK源码解析"></a>JDK源码解析</h3><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch7.6.x</title>
      <link href="2021/04/01/ElasticSearch/"/>
      <url>2021/04/01/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="搜索技术简介"><a href="#搜索技术简介" class="headerlink" title="搜索技术简介"></a>搜索技术简介</h2><blockquote><p>ElasticSearch</p></blockquote><p>Elasticsearch是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。<br>它用于<strong>全文搜索</strong>、<strong>结构化搜索</strong>、<strong>分析</strong>以及将这三者混合使用：<br>维基百科使用Elasticsearch提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。<br>英国卫报使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。<br>StackOverflow结合全文搜索与地理位置查询，以及more-like-this功能来找到相关的问题和答案。<br>Github使用Elasticsearch检索1300亿行的代码。<br>但是Elasticsearch不仅用于大型企业，它还让像DataDog以及Klout这样的创业公司将最初的想法变成可扩展的解决方案。Elasticsearch可以在你的笔记本上运行，也可以在数以百计的服务器上处理PB级别的数据 。</p><p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。<br>但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。<br>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API 来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><blockquote><p>solr简介</p></blockquote><p>Solr 是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p><p>Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><p>solr是基于lucene开发企业级搜索服务器，实际上就是封装了lucene。</p><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果。</p><blockquote><p>Lucene简介</p></blockquote><p>Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费Java信息检索程序库。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p><p>Lucene是一个全文检索引擎的架构。那什么是全文搜索引擎？</p><p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p><p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的7家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如Lycos引擎。</p><h2 id="ElasticSearch与Solr区别"><a href="#ElasticSearch与Solr区别" class="headerlink" title="ElasticSearch与Solr区别"></a>ElasticSearch与Solr区别</h2><blockquote><p>对已有数据搜索</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153826.png" alt="image-20210401153825103"></p><blockquote><p>当实时建立索引时</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153843.png" alt="image-20210401153841250"></p><blockquote><p>数据量增加</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153856.png" alt="image-20210401153854558"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401153909.png" alt="image-20210401153907424"></p><blockquote><p>ElasticSearch vs Solr 总结</p></blockquote><p>　　（1）es基本是开箱即用，非常简单。Solr安装略微复杂一丢丢，可关注（<a href="http://www.cnblogs.com/blueskyli/p/7100443.html#3763227">solr6.6教程-基础环境搭建(一)</a>）</p><p>　　（2）Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</p><p>　　（3）Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。</p><p>　　（4）Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑</p><p>　　（5）Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；</p><p>　　　　 ES建立索引快（即查询慢），<strong>即实时性查询快</strong>，用于facebook新浪等搜索。</p><p>　　   Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p><p>　　（6）Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而 Elasticsearch相对开发维护者较少，更新太快，学习使用成本较高。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="elasticSearch"><a href="#elasticSearch" class="headerlink" title="elasticSearch"></a>elasticSearch</h2><p>要求：JDK1.8、node.js</p><blockquote><p>下载</p></blockquote><p><a href="https://www.elastic.co/cn/">官网</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401161302.png" alt="image-20210401161204395"></p><p>下载解压即可使用</p><blockquote><p>Elasticsearch 7.6.1 目录</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin：启动文件</span><br><span class="line">config：配置文件</span><br><span class="line">log4j2 日志文件</span><br><span class="line">jvm.options java 虚拟机相关配置</span><br><span class="line">elasticsearch.yml 配置文件  比如默认9200端口! 跨域问题！ </span><br><span class="line">lib：相关jar包</span><br><span class="line"></span><br><span class="line">modules：功能模块</span><br><span class="line">plugins：插件：比如ik插件</span><br></pre></td></tr></table></figure><blockquote><p>启动</p></blockquote><p>点击bin目录下的elasticsearch.bat文件，访问localhost:9200</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401162230.png" alt="image-20210401162227644"></p><h2 id="可视化界面elasticSearch-head"><a href="#可视化界面elasticSearch-head" class="headerlink" title="可视化界面elasticSearch-head"></a>可视化界面elasticSearch-head</h2><p>该可视化界面依赖node.js</p><blockquote><p>下载</p></blockquote><p><a href="https://github.com/mobz/elasticsearch-head">下载地址</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401162701.png" alt="image-20210401162658084"></p><blockquote><p>安装</p></blockquote><p>解压后，在目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401162959.png" alt="image-20210401162958033"></p><blockquote><p>启动</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401163142.png" alt="image-20210401163136112"></p><p>访问localhost:9100</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401163228.png" alt="image-20210401163226040"></p><p>你会发现，它报了许多错误，都是与跨域有关，所以我们需要去elasticSearch的elasticsearch.yml文件配置跨域处理</p><blockquote><p>跨域处理</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401163515.png" alt="image-20210401163513716"></p><p>在elasticSearch的elasticsearch.yml的末尾加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>在重启elasticSearch</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401164000.png" alt="image-20210401163959011"></p><blockquote><p>这个head我们就把它当作数据展示工具！我们后面所有的查询通过Kibana</p></blockquote><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><p>Kibana 是一个针对ElasticSearch的开源分析及可视化平台，用来搜索、查看交互存储在ElasticSearch索引中的数据。使用Kibana,可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示ElasticSearch查询动态，设置Kibana非常简单，无需编码或者格外的基础架构，几分钟内就可以完成Kibana安装并启动ElasticSearch索引检测。</p><blockquote><p>下载</p></blockquote><p><a href="https://www.elastic.co/cn/kibana">官网</a></p><p>Kibana版本要和ElasticSearch一致</p><blockquote><p>安装</p></blockquote><p>解压时间有点久，不要以为出问题关了！！！！！！！！！！！！！！！！！</p><blockquote><p>启动</p></blockquote><p>点击bin目录下的kibana.bat</p><p><img src="../../../../typora/images/image-20210402091114408.png" alt="image-20210402091114408"></p><p>访问localhost:5601<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402091159.png" alt="image-20210402091150793"></p><p>以后代码都在这里面写</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402091514.png" alt="image-20210402091510562"></p><blockquote><p>汉化</p></blockquote><p>检查kibana-7.6.1-windows-x86_64\x-pack\plugins\translations\translations目录是否有zh-CN这个文件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402091935.png" alt="image-20210402091932545"></p><p>kibana-7.6.1-windows-x86_64\config\kibaba.yml最后一行加上设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure><p>重启kibana</p><p>已经变成中文了</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402092124.png" alt="image-20210402092122028"></p><h1 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h1><p>1、索引</p><p>2、类型（mapping）</p><p>3、文档</p><p>4.倒排索引</p><blockquote><p>ElasticSearch是面向文档，一切都是json</p></blockquote><blockquote><p>关系型数据库和ElasticSearch的对比</p></blockquote><table><thead><tr><th>关系型数据库</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库database</td><td>索引 indices（数据库）</td></tr><tr><td>表tables</td><td>ypes （以后会被启用）</td></tr><tr><td>行rows</td><td>documents （文档）</td></tr><tr><td>字段columns</td><td>fields</td></tr></tbody></table><blockquote><p>物理设计</p></blockquote><p>ElasticSearch在后台把每个索引分成多个分片，每份分片可以在集群中的不同服务器间迁移</p><blockquote><p>逻辑设计</p></blockquote><ol><li><p>文档：索引和搜索数据的最小单位是文档（就是一条条数据）</p><ol><li>自我包含：一篇文档同时包含字段和对应的值，也就是同时包含key：value！</li><li>层次型：可以实层次型，一个文档中包含自文档，复杂的逻辑实体就是这么来的！（就是json对象）</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能用，在ElasticSearch中，对于字段是非常灵活的，有时候，我们可以忽略这个字段，或者动态的添加一个字段</li></ol></li><li><p>类型</p><ol><li>类型是文档的逻辑容器,就像关系型数据库一样,表格是行的容器。类型中对于字段的定义称为映射,比如name映射为字符串类型。我们说文档是无模式的 ,它们不需要拥有映射中所定义的所有字段,比如新增一个字段,那么elasticsearch是怎么做的呢?elasticsearch会自动的将新字段加入映射,但是这个字段的不确定它是什么类型, elasticsearch就开始猜,如果这个值是18 ,那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对 ，所以最安全的方式就是提前定义好所需要的映射,这点跟关系型数据库殊途同归了,先定义好字段,然后再使用,别整什么幺蛾子。</li></ol></li><li><p>索引</p><ol><li><p>就是数据库!</p><p>索引是映射类型的容器, elasticsearch中的索引是一个非常大的文档集合。索|存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p></li><li><p>物理设计：节点和分片如何工作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402095216.png" alt="image-20210402095215406"></p><p>一个集群至少有一 个节点,而一个节点就是一个elasricsearch进程 ,节点可以有多个索引默认的,如果你创建索引,那么索引将会有个5个分片( primary shard ,又称主分片)构成的,每一个主分片会有-一个副本( replica shard ,又称复制分片）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402095246.png" alt="image-20210402095245423"></p><p>主分片和对应的复制分片都不会在同一个节点内,这样有利于某个节点挂掉了,数据也不至于丢失。实际上, 一个分片是一个Lucene索引, 一个包含<strong>倒排索引</strong>的文件目录,倒排索引的结构使得elasticsearch在不扫描全部文档的情况下,就能告诉你哪些文档包含特定的关键字。</p></li></ol></li><li><p>倒排索引</p></li></ol><p>elasticsearch使用的是一种称为倒排索引的结构,采用Lucene倒排索作为底层。这种结构适用于快速的全文搜索，一个索引由文档中所有不重复的列表构成,对于每一个词,都有一个包含它的文档列表。 例如,现在有两个文档，每个文档包含如下内容:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Study every day， good good up to forever  # 文档1包含的内容</span><br><span class="line">To forever, study every day，good good up  # 文档2包含的内容</span><br></pre></td></tr></table></figure><p>为创建倒排索引,我们首先要将每个文档拆分成独立的词(或称为词条或者tokens) ,然后创建一一个包含所有不重 复的词条的排序列表,然后列出每个词条出现在哪个文档:</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>Study</td><td>√</td><td>x</td></tr><tr><td>To</td><td>x</td><td>x</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>day</td><td>√</td><td>√</td></tr><tr><td>study</td><td>x</td><td>√</td></tr><tr><td>good</td><td>√</td><td>√</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>to</td><td>√</td><td>x</td></tr><tr><td>up</td><td>√</td><td>√</td></tr></tbody></table><p>现在，我们试图搜索 to  forever,只需要查看包含每个词条的文档</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>to</td><td>√</td><td>x</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr></tbody></table><p>两个文档都匹配,但是第一个文档比第二个匹配程度更高。如果没有别的条件,现在,这两个包含关键字的文档都将返回。</p><p>再来看一个示例,比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构:</p><table><thead><tr><th>博客文章(原始数据)</th><th>博客文章(原始数据)</th><th>索引列表(倒排索引)</th><th>索引列表(倒排索引)</th></tr></thead><tbody><tr><td>博客文章ID</td><td>标签</td><td>标签</td><td>博客文章ID</td></tr><tr><td>1</td><td>python</td><td>python</td><td>1，2，3</td></tr><tr><td>2</td><td>python</td><td>linux</td><td>3，4</td></tr><tr><td>3</td><td>python，</td><td></td><td></td></tr><tr><td>4</td><td>linux</td><td></td><td></td></tr></tbody></table><p>如果要搜索含有python标签的文章,那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要查看标签这一栏,然后获取相关的文章ID即可。完全过滤掉无关的所有数据,提高效率!</p><p>elasticsearch的索引和Lucene的索引对比</p><p>在elasticsearch中，索引(库)这个词被频繁使用,这就是术语的使用。在elasticsearch中 ,索引被分为多个分片,每份分片是-个Lucene的索引。所以一个elasticsearch索引是由多 个Lucene索引组成的。别问为什么,谁让elasticsearch使用Lucene作为底层呢!如无特指，说起索引都是指elasticsearch的索引。</p><p>接下来的一切操作都在kibana中Dev Tools下的Console里完成。基础操作!</p><h1 id="ik分词器"><a href="#ik分词器" class="headerlink" title="ik分词器"></a>ik分词器</h1><blockquote><p>什么是ik分词器？</p></blockquote><p>分词:即把一-段中文或者别的划分成一个个的关键字,我们在搜索时候会把自己的信息进行分词,会把数据库中或者索引库中的数据进行分词,然后进行一个匹配操作,默认的中文分词是将每个字看成一个词,比如“我爱狂神”会被分为”我”,“爱”,“狂”,“神” ,这显然是不符合要求的,所以我们需要安装中文分词器ik来解决这个问题。</p><p>如果要使用中文,建议使用ik分词器!</p><p>IK提供了两个分词算法: ik_ smart和ik_ max_ word ,其中ik_ smart为最少切分, ik_ max_ _word为最细粒度划分!一会我们测试!</p><p>什么是IK分词器：</p><ul><li>把一句话分词</li><li>如果使用中文：推荐IK分词器</li><li>两个分词算法：ik_smart（最少切分），ik_max_word（最细粒度划分）</li></ul><blockquote><p>下载</p></blockquote><p><a href="https://github.com/medcl/elasticsearch-analysis-ik">下载地址</a></p><p>注意版本</p><blockquote><p>安装</p></blockquote><p>在elasticsearch下的plugins文件夹下新建ik空文件夹，将ik的压缩包解压到该文件夹下，删除压缩包</p><blockquote><p>重启elasticSearch</p></blockquote><p>在es的bin目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elastic<span class="built_in">search-plugin</span> list</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402103056.png" alt="image-20210402103054868"></p><blockquote><p>使用</p></blockquote><p>1、使用ik_smart(最少切分)算法，在kibana的控制台中编写代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华人民共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402103823.png" alt="image-20210402103820058"></p><p>2、使用ik_max_word（最细粒度）算法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华人民共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华人民&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;中华&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;华人&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;人民共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;人民&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;共和国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;共和&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">7</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;国&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402104000.png" alt="image-20210402103959165"></p><blockquote><p>问题</p></blockquote><p>我想对<strong>超级无敌力霸王</strong>进行分词，想要将<strong>力霸王</strong>放在一起，但是发现被分开了，原因是ik自带的字典中没有<strong>力霸王</strong>这个词</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402104738.png" alt="image-20210402104736484"></p><p>所以需要的词，要加到我们的分词器的字典中！</p><p>1、编写自己的字典 hl.dic</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402105126.png" alt="image-20210402105124737"></p><p>里面只有<strong>力霸王</strong></p><p>2、在E:\JavaUtil\elasticSearch\elasticsearch-7.6.1\plugins\ik\config目录下IKAnalyzer.cfg.xml文件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402105236.png" alt="image-20210402105234540"></p><p>3、重启es</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402105433.png" alt="image-20210402105432051"></p><p>你会发现已经有<strong>力霸王</strong>了</p><p>以后如果要配置我们自己的分词，就在自己定义的dic文件中配置就行了</p><h1 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h1><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更加简洁，更易于实现缓存等机制。</p><p>基本Rest命令说明</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9100/索引名称/类型名称/文档id</td><td>创建文档（指定id）</td></tr><tr><td>POST</td><td>localhost:9100/索引名称/类型名称</td><td>创建文档（随机id）</td></tr><tr><td>POST</td><td>localhost:9100/索引名称/文档类型/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9100/索引名称/文档类型/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9100/索引名称/文档类型/文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost:9100/索引名称/文档类型/_search</td><td>查询所有文档</td></tr></tbody></table><h1 id="关于索引的基本操作"><a href="#关于索引的基本操作" class="headerlink" title="关于索引的基本操作"></a>关于索引的基本操作</h1><h2 id="创建一个索引"><a href="#创建一个索引" class="headerlink" title="创建一个索引"></a>创建一个索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;索引名&#x2F;类型(以后没有了)&#x2F;文档id</span><br><span class="line">&#123;</span><br><span class="line">请求体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT &#x2F;hl&#x2F;type1&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;hl&quot;,</span><br><span class="line">  &quot;age&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402110539.png" alt="image-20210402110538178"></p><p>结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402110746.png" alt="image-20210402110744510"></p><p>hl索引里面已经有1文档，且已经有数据了</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402110913.png" alt="image-20210402110912145"></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li>字符串类型</li></ul><p>text、keyword</p><ul><li>数值类型</li></ul><p>long、integer、short、byte、double、float、half float、scaled float</p><ul><li>日期类型</li></ul><p>date</p><ul><li>布尔值类型</li></ul><p>boolean</p><ul><li>二进制类型</li></ul><p>binary</p><p>等等……</p><h2 id="指定字段的类型"><a href="#指定字段的类型" class="headerlink" title="指定字段的类型"></a>指定字段的类型</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402111746.png" alt="image-20210402111743468"></p><h2 id="获取索引的信息，通过get信息"><a href="#获取索引的信息，通过get信息" class="headerlink" title="获取索引的信息，通过get信息"></a>获取索引的信息，通过get信息</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test1</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402111928.png" alt="image-20210402111927344"></p><h2 id="取消类型设置采用默认"><a href="#取消类型设置采用默认" class="headerlink" title="取消类型设置采用默认"></a>取消类型设置采用默认</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /test2/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;hl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;brithday&quot;</span>:<span class="string">&quot;1998-09-05&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112234.png" alt="image-20210402112233410"></p><h2 id="查看数据类型"><a href="#查看数据类型" class="headerlink" title="查看数据类型"></a>查看数据类型</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112414.png" alt="image-20210402112412821"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>通过命令查看ElasticSearch索引情况,通过get _cat命令可以获取es当前许多信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/health </span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112930.png" alt="image-20210402112929550"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看版本信息</span></span><br><span class="line">GET _cat/indices?v</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402112916.png" alt="image-20210402112914577"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul><li>采用put</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402134023.png" alt="image-20210402134020609"></p><p>但是如果数据漏掉了，索引里面只会有传过去的数据</p><ul><li><p>采用post</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test2/_doc/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>:&#123;</span><br><span class="line">     <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;hl113&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402134355.png" alt="image-20210402134354341"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除索引</span></span><br><span class="line">DELETE test1</span><br><span class="line"><span class="comment">//删除文档</span></span><br><span class="line">DELETE /test2/_doc/1</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402134453.png" alt="image-20210402134451811"></p><h1 id="关于文档的基本操作"><a href="#关于文档的基本操作" class="headerlink" title="关于文档的基本操作"></a>关于文档的基本操作</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">向hl索引下user文档添加id为1的数据</span><br><span class="line">PUT /hl/user/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;hl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">&quot;desc&quot;</span>:<span class="string">&quot;一个码农&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>:[<span class="string">&quot;技术&quot;</span>,<span class="string">&quot;it&quot;</span>,<span class="string">&quot;直男&quot;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402135616.png" alt="image-20210402135614936"></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li><p>put 覆盖</p></li><li><p>post 更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;hl&#x2F;user&#x2F;3&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;age&quot;:99</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /h1/user/1</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402140357.png" alt="image-20210402140356291"></p><h3 id="条件搜索"><a href="#条件搜索" class="headerlink" title="条件搜索"></a>条件搜索</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...../_search?q=条件</span></span><br><span class="line">GET hl/user/_search?q=name:hl</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402140718.png" alt="image-20210402140715030"></p><h3 id="复杂查询（排序、分页、高亮、模糊）"><a href="#复杂查询（排序、分页、高亮、模糊）" class="headerlink" title="复杂查询（排序、分页、高亮、模糊）"></a>复杂查询（排序、分页、高亮、模糊）</h3><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要name属性中带有 张三 的数据，都能查询出来，但是 单个英文字符未生效</span></span><br><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个hist中value表示查询出的记录数，relation表示查询规则，hits则是查询出的数据集合</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402142145.png" alt="image-20210402142143654"></p><p>在查询出的3个数据中，存在一个score属性，即为权重，权重越高，搜索出来的位置越靠前，在本次搜索中，我们搜索了<strong>张三</strong>，所以张三的权重为最高</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402142323.png" alt="image-20210402142319169"></p><h4 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h4><p>指定查询字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;desc&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402143005.png" alt="image-20210402143003620"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>排序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//排序字段</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//desc 降序 asc 升序</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402143303.png" alt="image-20210402143302188"></p><h4 id="from-和-size"><a href="#from-和-size" class="headerlink" title="from 和 size"></a>from 和 size</h4><p>分页 from：从哪开始，size：每页大小</p><p>类似 limit 0,2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//分页</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402143604.png" alt="image-20210402143603228"></p><h4 id="布尔值查询"><a href="#布尔值查询" class="headerlink" title="布尔值查询"></a>布尔值查询</h4><blockquote><p>must</p></blockquote><p>must（add）,所有条件都要符合</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402144214.png" alt="image-20210402144212358"></p><blockquote><p>should(or)</p></blockquote><p>只需要满足一个条件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;13&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402144347.png" alt="image-20210402144346078"></p><blockquote><p>must_not(not)</p></blockquote><p>不满足条件的才能被查询出来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402144546.png" alt="image-20210402144545452"></p><blockquote><p>过滤器</p></blockquote><p>进行数据过滤</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//范围  </span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">//gt &gt; gte &gt;= lt &lt; lte &lt;=</span></span><br><span class="line">              <span class="attr">&quot;gt&quot;</span>: <span class="number">14</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402145007.png" alt="image-20210402145006104"></p><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p>只要满足一个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET hl&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;男 it&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;tags&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402145614.png" alt="image-20210402145612817"></p><p>匹配条件为“男 it“ ，hl两个条件都符合，所以他的score(权重)比李四高</p><h4 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h4><p>term是直接通过倒排索引进行精确查询</p><h4 id="关于分词"><a href="#关于分词" class="headerlink" title="关于分词"></a>关于分词</h4><p>term:直接查询精确</p><p>match:会使用分词器解析（先分析文档，然后通过分析的文档进行查询）</p><blockquote><p>如果类型为keyword，不会被分词器拆分</p></blockquote><h4 id="多个值精确查询"><a href="#多个值精确查询" class="headerlink" title="多个值精确查询"></a>多个值精确查询</h4><p>bool+term</p><h4 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tags&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402152443.png" alt="image-20210402152442314"></p><blockquote><p>自定义高亮显示</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET hl/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tags&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/p&gt;&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210402152812.png" alt="image-20210402152811428"></p><h1 id="集成Springboot"><a href="#集成Springboot" class="headerlink" title="集成Springboot"></a>集成Springboot</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>1、创建项目</p><p>2、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意检查版本是否对应</p><p>3、配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 索引的创建</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndexRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1.创建索引请求</span></span><br><span class="line">       CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="comment">//2.执行索引请求,请求后获得相应</span></span><br><span class="line">       CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取索引,判断是否存在</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testGetIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(exists);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       AcknowledgedResponse delete = restHighLevelClient.indices().delete(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(delete);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加文档</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       <span class="comment">//创建对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">&quot;hl&quot;</span>,<span class="number">18</span>);</span><br><span class="line">       <span class="comment">//创建请求</span></span><br><span class="line">       IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="comment">//设置规则</span></span><br><span class="line">       request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">       request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将数据放入请求,由于要求json数据，所以需要将数据转成json格式</span></span><br><span class="line">       request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">       <span class="comment">//发送请求,获取响应</span></span><br><span class="line">       IndexResponse response = restHighLevelClient.index(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(response.toString());</span><br><span class="line">       System.out.println(response.status());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取文档,判断是否存在</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       <span class="keyword">boolean</span> exists = restHighLevelClient.exists(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(exists);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取文档,判断是否存在</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testGetDocumentInfo</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       GetResponse response = restHighLevelClient.get(request,RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">//打印文档的信息</span></span><br><span class="line">       System.out.println(response.getSourceAsString());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新文档</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">       <span class="comment">//更新文档</span></span><br><span class="line">       request.doc(JSON.toJSONString(<span class="keyword">new</span> User(<span class="string">&quot;hl1&quot;</span>,<span class="number">18</span>)),XContentType.JSON);</span><br><span class="line">       <span class="comment">//发送请求</span></span><br><span class="line">       UpdateResponse response = restHighLevelClient.update(request,RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">//打印文档的信息</span></span><br><span class="line">       System.out.println(response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除文档</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;test3&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">       <span class="comment">//发送请求</span></span><br><span class="line">       DeleteResponse response = restHighLevelClient.delete(request,RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">//打印文档的信息</span></span><br><span class="line">       System.out.println(response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量插入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       <span class="comment">//创建请求</span></span><br><span class="line">       BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">       <span class="comment">//设置规则</span></span><br><span class="line">       request.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">       <span class="comment">//创建对象</span></span><br><span class="line">       ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl&quot;</span>,<span class="number">18</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl1&quot;</span>,<span class="number">18</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl2&quot;</span>,<span class="number">18</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> User(<span class="string">&quot;hl3&quot;</span>,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;users.size();i++) &#123;</span><br><span class="line">           request.add(</span><br><span class="line">                   <span class="keyword">new</span> IndexRequest(<span class="string">&quot;test3&quot;</span>)</span><br><span class="line">                   .id(<span class="string">&quot;&quot;</span>+i)</span><br><span class="line">                   .source(JSON.toJSONString(users.get(i)),XContentType.JSON)</span><br><span class="line">           );</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//发送请求,获取响应</span></span><br><span class="line">       BulkResponse response = restHighLevelClient.bulk(request,RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(response.toString());</span><br><span class="line">       System.out.println(response.status());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">testSearchDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">       <span class="comment">//构建搜索条件</span></span><br><span class="line">       SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       <span class="comment">//设置了高亮</span></span><br><span class="line">       sourceBuilder.highlighter();</span><br><span class="line">       <span class="comment">//term name为cyx1的</span></span><br><span class="line">       TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hl&quot;</span>);</span><br><span class="line">       sourceBuilder.query(termQueryBuilder);</span><br><span class="line">       sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">       request.source(sourceBuilder);</span><br><span class="line">       SearchResponse response = restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;测试查询文档-----&quot;</span>+JSON.toJSONString(response.getHits()));</span><br><span class="line">       System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (SearchHit documentFields : response.getHits().getHits()) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;测试查询文档--遍历参数--&quot;</span>+documentFields.getSourceAsMap());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用Navicat将Mysql的表结构导出成表格？</title>
      <link href="2021/04/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Navicat%E5%B0%86Mysql%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84%E5%AF%BC%E5%87%BA%E6%88%90%E8%A1%A8%E6%A0%BC%EF%BC%9F/"/>
      <url>2021/04/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Navicat%E5%B0%86Mysql%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84%E5%AF%BC%E5%87%BA%E6%88%90%E8%A1%A8%E6%A0%BC%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="如何利用Navicat将Mysql的表结构导出成表格？"><a href="#如何利用Navicat将Mysql的表结构导出成表格？" class="headerlink" title="如何利用Navicat将Mysql的表结构导出成表格？"></a>如何利用Navicat将Mysql的表结构导出成表格？</h1><p>在某些时候，我们需要表格形式的表结构，但是在建表的时候，我们并没有采用设计工具（1.表格形式的表结构2.导出成sql语句3.执行sql语句），而是直接创建了表。</p><p>我们可以执行以下sql语句，执行的时候将‘–数据库名’和‘–数据表名’去掉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COLUMN_NAME 列名,</span><br><span class="line">COLUMN_TYPE 数据类型,</span><br><span class="line">DATA_TYPE 字段类型,</span><br><span class="line">CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">IS_NULLABLE 是否为空,</span><br><span class="line">COLUMN_DEFAULT 默认值,</span><br><span class="line">COLUMN_COMMENT 备注</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">INFORMATION_SCHEMA. <span class="keyword">COLUMNS</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="comment">--数据库名</span></span><br><span class="line">table_schema = <span class="string">&#x27;schoolbar&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line"><span class="comment">--数据表名</span></span><br><span class="line">table_name = <span class="string">&#x27;tb_user&#x27;</span> </span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401112358.png" alt="image-20210401112347806"></p><p>在复制出来，在复制的时候是全选，由于截图不是全选，只是选中了‘用户id’，所以到时候只有‘用户id’</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401112732.png" alt="image-20210401112730047"></p><p>在excel种ctrl+v，结果如下</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401112923.png" alt="image-20210401112914925"></p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在静态工具类里使用Mapper或Service</title>
      <link href="2021/04/01/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%87%8C%E4%BD%BF%E7%94%A8Mapper%E6%88%96Service/"/>
      <url>2021/04/01/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%85%B7%E7%B1%BB%E9%87%8C%E4%BD%BF%E7%94%A8Mapper%E6%88%96Service/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在静态工具类里使用Mapper或Service"><a href="#如何在静态工具类里使用Mapper或Service" class="headerlink" title="如何在静态工具类里使用Mapper或Service?"></a>如何在静态工具类里使用Mapper或Service?</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BanWordUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BanWordMapper banWordMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BanWordUtils banWordUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBanWordUtils</span><span class="params">(BanWordUtils  banWordUtils)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.banWordUtils = banWordUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span>     <span class="comment">//关键二   通过@PostConstruct 和 @PreDestroy 方法 实现初始化和销毁bean之前进行的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        banWordUtils = <span class="keyword">this</span>;</span><br><span class="line">        banWordUtils.banWordUtils = <span class="keyword">this</span>.banWordUtils;   <span class="comment">// 初使化时将已静态化的testService实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ...工具方法...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中常见的对象类型简述（DO、BO、DTO、VO、AO、PO）</title>
      <link href="2021/03/17/java%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%AE%80%E8%BF%B0%EF%BC%88DO%E3%80%81BO%E3%80%81DTO%E3%80%81VO%E3%80%81AO%E3%80%81PO%EF%BC%89/"/>
      <url>2021/03/17/java%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%AE%80%E8%BF%B0%EF%BC%88DO%E3%80%81BO%E3%80%81DTO%E3%80%81VO%E3%80%81AO%E3%80%81PO%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>转载自这篇<a href="https://blog.csdn.net/uestcyms/article/details/80244407">博客</a></p><h1 id="概念及理解"><a href="#概念及理解" class="headerlink" title="概念及理解"></a>概念及理解</h1><p>这些概念用于描述对象的类型；由于java是面向对象的语言；程序的世界就是各个对象之间的“交互”；在交互的工程中会存在多个层次，每个层次中所拥有（关注）的内容都是不一样的；</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210317140315.jpg" alt="preview"></p><h2 id="PO-Persistant-Object-持久对象"><a href="#PO-Persistant-Object-持久对象" class="headerlink" title="PO(Persistant Object) 持久对象"></a>PO(Persistant Object) 持久对象</h2><p>用于表示数据库中的一条记录映射成的 java 对象。PO 仅仅用于表示数据，没有任何数据操作。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</p><p>可以理解是一个PO就是数据库中的一条记录；可以理解某个事务依赖的原始数据；好处是可以将一条记录最为一个对象处理，可以方便转化为其他对象</p><h2 id="BO-Business-Object-业务对象"><a href="#BO-Business-Object-业务对象" class="headerlink" title="BO(Business Object) 业务对象"></a>BO(Business Object) 业务对象</h2><p>封装对象、复杂对象，里面可能包含多个类<br>主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。</p><p>用于表示一个业务对象。BO 包括了业务逻辑，常常封装了对 DAO、RPC 等的调用，可以进行 PO 与 VO/DTO 之间的转换。BO 通常位于业务层，要区别于直接对外提供服务的服务层：BO 提供了基本业务单元的基本业务操作，在设计上属于被服务层业务流程调用的对象，一个业务流程可能需要调用多个 BO 来完成。</p><p>比如一个简历，有教育经历、工作经历、社会关系等等。<br>我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。<br>建立一个对应简历的BO对象处理简历，每个BO包含这些PO。<br>这样处理业务逻辑时，我们就可以针对BO去处理。</p><h2 id="VO-Value-Object-表现对象"><a href="#VO-Value-Object-表现对象" class="headerlink" title="VO(Value Object) 表现对象"></a>VO(Value Object) 表现对象</h2><p>前端界面展示；value object值对象；ViewObject表现层对象；主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值；对于Android而言即是activity或view中的数据元素。</p><p>用于表示一个与前端进行交互的 java 对象。有的朋友也许有疑问，这里可不可以使用 PO 传递数据？实际上，这里的 VO 只包含前端需要展示的数据即可，对于前端不需要的数据，比如数据创建和修改的时间等字段，出于减少传输数据量大小和保护数据库结构不外泄的目的，不应该在 VO 中体现出来。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</p><h2 id="DTO-Data-Transfer-Object-数据传输对象"><a href="#DTO-Data-Transfer-Object-数据传输对象" class="headerlink" title="DTO(Data Transfer Object) 数据传输对象"></a>DTO(Data Transfer Object) 数据传输对象</h2><p>前端调用时传输；也可理解成“上层”调用时传输;<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。但是我们界面上只要显示10个字段，客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO.</p><p>用于表示一个数据传输对象。DTO 通常用于不同服务或服务不同分层之间的数据传输。DTO 与 VO 概念相似，并且通常情况下字段也基本一致。但 DTO 与 VO 又有一些不同，这个不同主要是设计理念上的，比如 API 服务需要使用的 DTO 就可能与 VO 存在差异。通常遵守 Java Bean 的规范，拥有 getter/setter 方法</p><h2 id="DAO-Data-access-object-数据访问对象"><a href="#DAO-Data-access-object-数据访问对象" class="headerlink" title="DAO(Data access object) 数据访问对象"></a>DAO(Data access object) 数据访问对象</h2><p>这个大家最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要.，主要用来封装对数据库的访问。通过它可以把POJO持久化为PO，用PO组装出来VO、DTO；</p><p>用于表示一个数据访问对象。使用 DAO 访问数据库，包括插入、更新、删除、查询等操作，与 PO 一起使用。DAO 一般在持久层，完全封装数据库操作，对外暴露的方法使得上层应用不需要关注数据库相关的任何信息。</p><h2 id="POJO-Plain-ordinary-java-object-简单java对象"><a href="#POJO-Plain-ordinary-java-object-简单java对象" class="headerlink" title="POJO(Plain ordinary java object) 简单java对象"></a>POJO(Plain ordinary java object) 简单java对象</h2><p>一个POJO持久化以后就是PO；直接用它传递、传递过程中就是DTO；直接用来对应表示层就是VO。</p><p>举个例子：<br>事情：统计研发部门中的季度绩效（暂定以工程师填写的为准，当然实际上大部分不是）<br>过程：CTO发布统计绩效请求（附带要求：每个人对应的绩效等级）-&gt;各个组（也可以是子部门）负责人发布统计绩效请求（每个对应的绩效等级，并将绩效分为了3个方面）-&gt;每位开发工程师统计自己绩效（自身各个方面）；<br>可以从例子中看到：每个责任人要求都不同；<br>对于CTO，他需要知道的是该季度所用员工的绩效等级；这里可以认为VO：员工姓名、绩效等级；<br>开发工程师：需将本人这个季度的各个方面的表现都列出来：员工姓名、绩效等级、Ａ方面表现内容及等级、B方面表现内容及等级、C方面表现内容及等级、D方面表现内容及等级、E方面表现内容及等级、F方面表现内容及等级、E方面表现内容及等级；此处可认为是PO：员工姓名、绩效等级、A方面表现内容、A方面等级….E方面表现内容、E方面等级；<br>然后开发工程师将员工姓名、绩效等级、Ａ方面表现内容及等级、B方面表现内容及等级、C方面表现内容及等级内容传递给小组负责人；此处传递的对象就是DTO<br>小组负责人：从开发工程师中获取到数据后，经过评定，然后得出员工姓名、绩效等级、原因；此处的评定，可以理解为ＢＯ；</p><p>例子是根据当前正在进行的绩效评估事件总结，简单的例子可以参照上述知乎上面大神的回答。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的图表展示Echarts</title>
      <link href="2021/03/12/echarts/"/>
      <url>2021/03/12/echarts/</url>
      
        <content type="html"><![CDATA[<p>在前端的开发中，有些时候我们需要展示数据图表，如折线图、柱状图、饼状图之类的，一般情况下可以自己手画，但是有第三方库，为什么不使用喃？所以这篇博客是关于echarts开源可视化图表库。前端框架为Vue。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h2><p><a href="https://echarts.apache.org/zh/index.html">官方文档</a></p><blockquote><p>echarts是什么？</p></blockquote><p>一个基于 JavaScript 的开源可视化图表库</p><blockquote><p>特性</p></blockquote><p><img src="https://i.loli.net/2021/03/12/xfFIVU9wGjhylOr.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>本篇echarts的使用都是在vue框架</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install echarts -S</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在main.js中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"><span class="comment">//将echart放入Vue的原型中，方便使用</span></span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure><h2 id="小demo"><a href="#小demo" class="headerlink" title="小demo"></a>小demo</h2><p>以下代码构建了一个折线图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;myChart&quot; :style&#x3D;&quot;&#123;width: &#39;300px&#39;, height: &#39;300px&#39;&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;hello&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;Welcome to Your Vue.js App&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.drawLine();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    drawLine()&#123;</span><br><span class="line">        &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">        let myChart &#x3D; this.$echarts.init(document.getElementById(&#39;myChart&#39;))</span><br><span class="line">        &#x2F;&#x2F; 绘制图表</span><br><span class="line">        myChart.setOption(&#123;</span><br><span class="line">            &#x2F;&#x2F;x轴</span><br><span class="line">            xAxis: &#123;</span><br><span class="line">              type: &#39;category&#39;,</span><br><span class="line">              data: [&#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F;y轴</span><br><span class="line">            yAxis: &#123;</span><br><span class="line">              type: &#39;value&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            series: [&#123;</span><br><span class="line">                &#x2F;&#x2F;数据</span><br><span class="line">              data: [150, 230, 224, 218, 135, 147, 260],</span><br><span class="line">                &#x2F;&#x2F;类型</span><br><span class="line">              type: &#39;line&#39;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://i.loli.net/2021/03/12/3LeDYamyzWfBRJl.png" alt="image-20210312145130108"></p><h1 id="丰富的示例"><a href="#丰富的示例" class="headerlink" title="丰富的示例"></a>丰富的示例</h1><p>echarts为我们提供了非常多的示例</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210312150017561.png" alt="image-20210312150017561"></p><p>使用时，只需要将Option替换下面的内容。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210312151040183.png" alt="image-20210312151040183"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> echarts </tag>
            
            <tag> 图表展示 </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageHelper的排序</title>
      <link href="2021/03/11/PageHelper%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F/"/>
      <url>2021/03/11/PageHelper%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在分页查询数据的时候，我们可以通过sql的limit来进行分页，也可以使用Mybatis的PageHelper来实现分页，关于如何使用PageHelper,我前面的博客已经说了。</p><p>有些时候我们会遇到要求排序，PageHelper为我们提供了排序的方法.</p><blockquote><p>使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(pageNum , pageSize);</span><br><span class="line">PageHelper.orderBy(<span class="string">&quot;A B&quot;</span>);</span><br></pre></td></tr></table></figure><p>其中A为排序依据的字段名，B为排序规律，desc为降序，asc为升序</p><p>或者一步到位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String orderBy=<span class="string">&quot;字段名 排序规律&quot;</span>；</span><br><span class="line">PageHelper.startPage(pageNum, pageSize, orderBy)；</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>我在第一次使用中，遇到些小问题，我<strong>不清楚排序的字段的取值范围</strong>，是只能是被PageHelper管理查询结果，还是后续添加进查询结果的字段都可以，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">selPagePost</span><span class="params">(PageBuilder pageBuilder)</span> </span>&#123;</span><br><span class="line">        String orderBy = <span class="string">&quot;createDate desc&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(pageBuilder.getPostQueryConditions().getType()==<span class="number">1</span>)&#123;</span><br><span class="line">            orderBy = <span class="string">&quot;createDate desc&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pageBuilder.getPostQueryConditions().getType()==<span class="number">0</span>)&#123;</span><br><span class="line">            orderBy = <span class="string">&quot;lastCommentDate desc&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">PageHelper.startPage(pageBuilder.getPageNum(),pageBuilder.getPageSize(),orderBy);</span><br><span class="line">        List&lt;HashMap&lt;String ,Object&gt;&gt; postList = postMapper.selPagePost(pageBuilder.getPostQueryConditions());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;postList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> postId = Integer.parseInt(postList.get(i).get(<span class="string">&quot;postId&quot;</span>).toString());</span><br><span class="line">            System.out.println(postList.get(i));</span><br><span class="line">            <span class="keyword">int</span> commentNum = postMapper.selCommentNum(postId);</span><br><span class="line">            postList.get(i).put(<span class="string">&quot;commentNum&quot;</span>,commentNum);</span><br><span class="line">            <span class="keyword">int</span> praiseNum = postMapper.selPostPraiseNum(postId);</span><br><span class="line">            postList.get(i).put(<span class="string">&quot;praiseNum&quot;</span>,praiseNum);</span><br><span class="line">            <span class="keyword">int</span> setpOnNum = postMapper.selPostStepOnNum(postId);</span><br><span class="line">            postList.get(i).put(<span class="string">&quot;setpOnNum&quot;</span>,setpOnNum);</span><br><span class="line">            <span class="keyword">int</span> collectNum = collectMapper.selCollectNum(postId,<span class="number">1</span>);</span><br><span class="line">            postList.get(i).put(<span class="string">&quot;collectNum&quot;</span>,collectNum);</span><br><span class="line">            Long lastCommentDate = postMapper.selLastCommentDate(postId);</span><br><span class="line">            postList.get(i).put(<span class="string">&quot;lastCommentDate&quot;</span>,lastCommentDate);</span><br><span class="line">        &#125;</span><br><span class="line">        PageInfo&lt;HashMap&lt;String ,Object&gt;&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(postList);</span><br><span class="line">        <span class="keyword">return</span> Result.ok().put(<span class="string">&quot;pageInfo&quot;</span>,pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我想通过createDate和lastCommentDate根据type来实现不同的排序，在这部分代码里面，lastCommentDate为我后面通过其他查询语句查询出来并添加进postd的字段，当我访问的时候，报错了</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column &#x27;lastCommentDate&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure><p>它说”<strong>Unknown column ‘lastCommentDate’ in ‘order clause</strong>‘“未知字段lastCommentDate，我明明有啊，再看后面发现此时的sql语句已经变了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.post_id postId, a.title title, a.description description, b.username username, b.avatar avatar, c.school_name schoolName, a.create_date createDate <span class="keyword">FROM</span> tb_post a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_user b <span class="keyword">ON</span> a.user_id = b.user_id <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_school c <span class="keyword">ON</span> a.school_id = c.school_id <span class="keyword">WHERE</span> a.is_delete = <span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> lastCommentDate <span class="keyword">desc</span> <span class="keyword">LIMIT</span> ?</span><br></pre></td></tr></table></figure><p>你会发现这样一句”<strong>order by lastCommentDate</strong>“,原来PageHelper的排序，并不是再通过代码进行排序，而是通过修改sql语句进行排序，分页也是通过sql来实现的</p><p>而我mybatis里的sql语句是这样的，里面确实没有<strong>lastCommentDate</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页查询贴子--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selPagePost&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hl.schoolbar.utils.PostQueryConditions&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.HashMap&quot;</span>&gt;</span></span><br><span class="line">        select a.post_id postId,</span><br><span class="line">        a.title title,</span><br><span class="line">        a.description description,</span><br><span class="line">        b.username username,</span><br><span class="line">        b.avatar avatar,</span><br><span class="line">        c.school_name schoolName,</span><br><span class="line">        a.create_date createDate</span><br><span class="line">        from tb_post a</span><br><span class="line">        left join tb_user b on a.user_id = b.user_id</span><br><span class="line">        left join tb_school  c on a.school_id = c.school_id</span><br><span class="line">        where a.is_delete = 0</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.userId!=null and postQueryConditions.userId!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.user_id = #&#123;postQueryConditions.userId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.schoolId!=null and postQueryConditions.schoolId!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.school_id = #&#123;postQueryConditions.schoolId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.title!=null and postQueryConditions.title!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.title like &quot;%&quot;#&#123;postQueryConditions.title&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.content!=null and postQueryConditions.content!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.content like &quot;%&quot;#&#123;postQueryConditions.content&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以为了让PageHelper能够实现对<strong>lastCommentDate</strong>的排序，我需要对我的sql语句进行修改</p><p>结果如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页查询贴子--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selPagePost&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hl.schoolbar.utils.PostQueryConditions&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.HashMap&quot;</span>&gt;</span></span><br><span class="line">        select a.post_id postId,</span><br><span class="line">        a.title title,</span><br><span class="line">        a.description description,</span><br><span class="line">        b.username username,</span><br><span class="line">        b.avatar avatar,</span><br><span class="line">        c.school_name schoolName,</span><br><span class="line">        a.create_date createDate</span><br><span class="line">        (select MAX(d.create_date) from tb_comment d where d.post_id =a.post_id) lastCommentDate</span><br><span class="line">        from tb_post a</span><br><span class="line">        left join tb_user b on a.user_id = b.user_id</span><br><span class="line">        left join tb_school  c on a.school_id = c.school_id</span><br><span class="line">        where a.is_delete = 0</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.userId!=null and postQueryConditions.userId!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.user_id = #&#123;postQueryConditions.userId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.schoolId!=null and postQueryConditions.schoolId!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.school_id = #&#123;postQueryConditions.schoolId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.title!=null and postQueryConditions.title!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.title like &quot;%&quot;#&#123;postQueryConditions.title&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;postQueryConditions.content!=null and postQueryConditions.content!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and a.content like &quot;%&quot;#&#123;postQueryConditions.content&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>(select MAX(d.create_date) from tb_comment d where d.post_id =a.post_id) lastCommentDate</strong></p><p>我通过子查询来查询数据，并起了别名<strong>lastCommentDate</strong></p><p>并将service里的多余代码去掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Result <span class="title">selPagePost</span><span class="params">(PageBuilder pageBuilder)</span> </span>&#123;</span><br><span class="line">       String orderBy = <span class="string">&quot;createDate desc&quot;</span>;</span><br><span class="line">       <span class="keyword">if</span>(pageBuilder.getPostQueryConditions().getType()==<span class="number">1</span>)&#123;</span><br><span class="line">           orderBy = <span class="string">&quot;createDate desc&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(pageBuilder.getPostQueryConditions().getType()==<span class="number">0</span>)&#123;</span><br><span class="line">           orderBy = <span class="string">&quot;lastCommentDate desc&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       PageHelper.startPage(pageBuilder.getPageNum(),pageBuilder.getPageSize(),orderBy);</span><br><span class="line">       List&lt;HashMap&lt;String ,Object&gt;&gt; postList = postMapper.selPagePost(pageBuilder.getPostQueryConditions());</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;postList.size();i++)&#123;</span><br><span class="line">           <span class="keyword">int</span> postId = Integer.parseInt(postList.get(i).get(<span class="string">&quot;postId&quot;</span>).toString());</span><br><span class="line">           System.out.println(postList.get(i));</span><br><span class="line">           <span class="keyword">int</span> commentNum = postMapper.selCommentNum(postId);</span><br><span class="line">           postList.get(i).put(<span class="string">&quot;commentNum&quot;</span>,commentNum);</span><br><span class="line">           <span class="keyword">int</span> praiseNum = postMapper.selPostPraiseNum(postId);</span><br><span class="line">           postList.get(i).put(<span class="string">&quot;praiseNum&quot;</span>,praiseNum);</span><br><span class="line">           <span class="keyword">int</span> setpOnNum = postMapper.selPostStepOnNum(postId);</span><br><span class="line">           postList.get(i).put(<span class="string">&quot;setpOnNum&quot;</span>,setpOnNum);</span><br><span class="line">           <span class="keyword">int</span> collectNum = collectMapper.selCollectNum(postId,<span class="number">1</span>);</span><br><span class="line">           postList.get(i).put(<span class="string">&quot;collectNum&quot;</span>,collectNum);</span><br><span class="line">       &#125;</span><br><span class="line">       PageInfo&lt;HashMap&lt;String ,Object&gt;&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(postList);</span><br><span class="line">       <span class="keyword">return</span> Result.ok().put(<span class="string">&quot;pageInfo&quot;</span>,pageInfo);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>:smile:</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> pageHelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewUi Switch组件不显示</title>
      <link href="2021/03/05/iview%20Switch%E7%BB%84%E4%BB%B6%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94iview-loader%E9%85%8D%E7%BD%AE/"/>
      <url>2021/03/05/iview%20Switch%E7%BB%84%E4%BB%B6%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94iview-loader%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="iview-Switch组件不显示问题——iview-loader配置"><a href="#iview-Switch组件不显示问题——iview-loader配置" class="headerlink" title="iview Switch组件不显示问题——iview-loader配置"></a>iview Switch组件不显示问题——iview-loader配置</h1><p><a href="https://blog.csdn.net/qq846294282/article/details/106115688">参考文章</a></p><p>对于使用iview的项目，如果在&lt;template&gt;中直接使用&lt;Switch&gt;组件，会发现它显示不出来。</p><p>原因是没有使用iview-loader的话，&lt;Switch&gt;和&lt;Circle&gt;组件受Vue限制，只能使用&lt;i-switch&gt;和&lt;i-circle&gt;代替。</p><p>iview官方对此提供了webpack的配置，但是没有提供vue-cli（vue.config.json）配置，所以我来分享一下如何在vue-cli项目中配置iview-loader。</p><ol><li>安装iview-loader</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install iview-loader --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>修改vue.config.js，使用chainWebpack加载插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line">      .use(<span class="string">&#x27;iview&#x27;</span>)</span><br><span class="line">      .loader(<span class="string">&#x27;iview-loader&#x27;</span>)</span><br><span class="line">      .options(&#123; <span class="attr">prefix</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 下面可以写其他配置</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
            <tag> Vue </tag>
            
            <tag> ViewUi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA代码生成插件MyBatisCodeHelper-Pro</title>
      <link href="2021/03/04/IDEA%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E6%8F%92%E4%BB%B6MyBatisCodeHelper-Pro/"/>
      <url>2021/03/04/IDEA%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E6%8F%92%E4%BB%B6MyBatisCodeHelper-Pro/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在开发中编写生成bean，mapper，mapper.xml即费时也费力，可以通过MyBatisCodeHelper-Pro自动生成bean，dao，mapper.xml等文件，然后根据自己的需要进行修改。</p><p>MyBatisCodeHelper-Pro是IDEA下的一个插件，类似于mybatis plugin，但是是收费的，但可以进行破解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转载出处：https:&#x2F;&#x2F;zhile.io&#x2F;2019&#x2F;04&#x2F;23&#x2F;mybatis-code-helper-pro-crack.html</span><br></pre></td></tr></table></figure><h3 id="二、安装插件MyBatisCodeHelper-Pro插件"><a href="#二、安装插件MyBatisCodeHelper-Pro插件" class="headerlink" title="二、安装插件MyBatisCodeHelper-Pro插件"></a>二、安装插件MyBatisCodeHelper-Pro插件</h3><ul><li>idea版本：ideaIU-2019.2.1.exe　</li><li>下载MyBatisCodeHelper-Pro插件包到本地，在IDEA中安装此插件</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317090541580-696039416.png" alt="img"></p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317090640418-1650616018.png" alt="img"></p><ul><li> 重启IDEA即可，另外可以设置MyBatisCodeHelper-Pro插件属性</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317090850247-895126536.png" alt="img"></p><p>老版本激活方式：Tools -&gt; MybatisCodeHelper -&gt; offlineActivation，输入任意字符串</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20201203184904482-659396745.png" alt="img"></p><h3 id="三、使用插件MyBatisCodeHelper-Pro插件"><a href="#三、使用插件MyBatisCodeHelper-Pro插件" class="headerlink" title="三、使用插件MyBatisCodeHelper-Pro插件"></a>三、使用插件MyBatisCodeHelper-Pro插件</h3><h3 id="1-实体类自动生成建表语句"><a href="#1-实体类自动生成建表语句" class="headerlink" title="1.实体类自动生成建表语句"></a>1.实体类自动生成建表语句</h3><ul><li>创建实体类Person</li></ul><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.coody.mtdemo.entity;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Classname Person</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @Author lw</span><br><span class="line"> * @Date 2020-03-16 10:56</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">public class Person &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 主键ID</span><br><span class="line">    *&#x2F;</span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 角色账户</span><br><span class="line">    *&#x2F;</span><br><span class="line">    private String roleAcc;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 角色代码</span><br><span class="line">    *&#x2F;</span><br><span class="line">    private String roleCode;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 角色名称</span><br><span class="line">    *&#x2F;</span><br><span class="line">    private String roleName;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 创建时间</span><br><span class="line">    *&#x2F;</span><br><span class="line">    private Date dateCreated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>在实体累对象中，点击鼠标右键，选择Generate，再点击generate mybatis files</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317091412421-690271322.png" alt="img"></p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317091427819-93029448.png" alt="img"></p><p>unique：唯一索引，不可重复；</p><p>index：普通索引，可重复；</p><p>根据需要进行编辑，然后点击OK</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317085245061-1214377228.png" alt="img"></p><p> 根据需要调整建表语句后，然后在数据库中执行即可。</p><h3 id="2-表创建后，生成bean、mapper、mapper-xml"><a href="#2-表创建后，生成bean、mapper、mapper-xml" class="headerlink" title="2.表创建后，生成bean、mapper、mapper.xml"></a>2.表创建后，生成bean、mapper、mapper.xml</h3><ul><li>打开IDEA，Database窗口</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317085506073-1050820042.png" alt="img"></p><ul><li> 选择要生成代码对应的表（如Person），点击右键</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317085555545-1809723491.png" alt="img"></p><ul><li>点击MyBatis generator，弹出生成代码窗口</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317085733387-43601079.png" alt="img"></p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317085807691-254635865.png" alt="img"></p><ul><li> 点击OK，代码即生成，根据需要做对应的修改即可</li></ul><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1645656-20200317085934581-404489857.png" alt="img"></p><hr><p> 更多的功能，请参考<a href="https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/">MyBatisCodeHelper-Pro文档：https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/</a> </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 代码生成 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中markdown</title>
      <link href="2021/03/01/mavon-editor/"/>
      <url>2021/03/01/mavon-editor/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有些时候，我们前端在做一些需要输入大量文本的时候，我们会选择使用富文本编辑器。今天我给大家推荐一个富文本编辑器mavon-editor。</p><p><a href="https://www.npmjs.com/package/mavon-editor">参考文章</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.npm安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mavon-editor --save</span><br></pre></td></tr></table></figure><p>2.use 在main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 全局注册</span><br><span class="line">    &#x2F;&#x2F; import with ES6</span><br><span class="line">    import Vue from &#39;vue&#39;</span><br><span class="line">    import mavonEditor from &#39;mavon-editor&#39;</span><br><span class="line">    import &#39;mavon-editor&#x2F;dist&#x2F;css&#x2F;index.css&#39;</span><br><span class="line">    &#x2F;&#x2F; use</span><br><span class="line">    Vue.use(mavonEditor)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        &#39;el&#39;: &#39;#main&#39;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123; value: &#39;&#39; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>3.使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;main&quot;&gt;</span><br><span class="line">    &lt;mavon-editor v-model&#x3D;&quot;value&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><table><thead><tr><th>name 名称</th><th>type 类型</th><th>default 默认值</th><th>describe 描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td>初始值</td></tr><tr><td>language</td><td>String</td><td>zh-CN</td><td>语言选择，暂支持 zh-CN: 简体中文, zh-TW: 正体中文 ， en: 英文 ， fr: 法语， pt-BR: 葡萄牙语， ru: 俄语， de: 德语， ja: 日语</td></tr><tr><td>fontSize</td><td>String</td><td>14px</td><td>编辑区域文字大小</td></tr><tr><td>scrollStyle</td><td>Boolean</td><td>true</td><td>开启滚动条样式(暂时仅支持chrome)</td></tr><tr><td>boxShadow</td><td>Boolean</td><td>true</td><td>开启边框阴影</td></tr><tr><td>boxShadowStyle</td><td>String</td><td>0 2px 12px 0 rgba(0, 0, 0, 0.1)</td><td>边框阴影样式</td></tr><tr><td>transition</td><td>Boolean</td><td>true</td><td>是否开启过渡动画</td></tr><tr><td>toolbarsBackground</td><td>String</td><td>#ffffff</td><td>工具栏背景颜色</td></tr><tr><td>previewBackground</td><td>String</td><td>#fbfbfb</td><td>预览框背景颜色</td></tr><tr><td>subfield</td><td>Boolean</td><td>true</td><td>true： 双栏(编辑预览同屏)， false： 单栏(编辑预览分屏)</td></tr><tr><td>defaultOpen</td><td>String</td><td></td><td>edit： 默认展示编辑区域 ， preview： 默认展示预览区域 , 其他 = edit</td></tr><tr><td>placeholder</td><td>String</td><td>开始编辑…</td><td>输入框为空时默认提示文本</td></tr><tr><td>editable</td><td>Boolean</td><td>true</td><td>是否允许编辑</td></tr><tr><td>codeStyle</td><td>String</td><td>code-github</td><td>markdown样式： 默认github, <a href="https://github.com/hinesboy/mavonEditor/blob/HEAD/src/lib/core/hljs/lang.hljs.css.js">可选配色方案</a></td></tr><tr><td>toolbarsFlag</td><td>Boolean</td><td>true</td><td>工具栏是否显示</td></tr><tr><td>navigation</td><td>Boolean</td><td>false</td><td>默认展示目录</td></tr><tr><td>shortCut</td><td>Boolean</td><td>true</td><td>是否启用快捷键</td></tr><tr><td>autofocus</td><td>Boolean</td><td>true</td><td>自动聚焦到文本框</td></tr><tr><td>ishljs</td><td>Boolean</td><td>true</td><td>代码高亮</td></tr><tr><td>imageFilter</td><td>function</td><td>null</td><td>图片过滤函数，参数为一个<code>File Object</code>，要求返回一个<code>Boolean</code>, <code>true</code>表示文件合法，<code>false</code>表示文件不合法</td></tr><tr><td>imageClick</td><td>function</td><td>null</td><td>图片点击事件，默认为预览，可覆盖</td></tr><tr><td>tabSize</td><td>Number</td><td>\t</td><td>tab转化为几个空格，默认为\t</td></tr><tr><td>xssOptions</td><td>Object</td><td>null</td><td>xss规则配置，参考 <a href="https://github.com/leizongmin/js-xss">https://github.com/leizongmin/js-xss</a></td></tr><tr><td>toolbars</td><td>Object</td><td>如下例</td><td>工具栏</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;*</span><br><span class="line">    默认工具栏按钮全部开启, 传入自定义对象</span><br><span class="line">    例如: &#123;</span><br><span class="line">         bold: true, &#x2F;&#x2F; 粗体</span><br><span class="line">         italic: true,&#x2F;&#x2F; 斜体</span><br><span class="line">         header: true,&#x2F;&#x2F; 标题</span><br><span class="line">    &#125;</span><br><span class="line">    此时, 仅仅显示此三个功能键</span><br><span class="line"> *&#x2F;</span><br><span class="line">toolbars: &#123;</span><br><span class="line">      bold: true, &#x2F;&#x2F; 粗体</span><br><span class="line">      italic: true, &#x2F;&#x2F; 斜体</span><br><span class="line">      header: true, &#x2F;&#x2F; 标题</span><br><span class="line">      underline: true, &#x2F;&#x2F; 下划线</span><br><span class="line">      strikethrough: true, &#x2F;&#x2F; 中划线</span><br><span class="line">      mark: true, &#x2F;&#x2F; 标记</span><br><span class="line">      superscript: true, &#x2F;&#x2F; 上角标</span><br><span class="line">      subscript: true, &#x2F;&#x2F; 下角标</span><br><span class="line">      quote: true, &#x2F;&#x2F; 引用</span><br><span class="line">      ol: true, &#x2F;&#x2F; 有序列表</span><br><span class="line">      ul: true, &#x2F;&#x2F; 无序列表</span><br><span class="line">      link: true, &#x2F;&#x2F; 链接</span><br><span class="line">      imagelink: true, &#x2F;&#x2F; 图片链接</span><br><span class="line">      code: true, &#x2F;&#x2F; code</span><br><span class="line">      table: true, &#x2F;&#x2F; 表格</span><br><span class="line">      fullscreen: true, &#x2F;&#x2F; 全屏编辑</span><br><span class="line">      readmodel: true, &#x2F;&#x2F; 沉浸式阅读</span><br><span class="line">      htmlcode: true, &#x2F;&#x2F; 展示html源码</span><br><span class="line">      help: true, &#x2F;&#x2F; 帮助</span><br><span class="line">      &#x2F;* 1.3.5 *&#x2F;</span><br><span class="line">      undo: true, &#x2F;&#x2F; 上一步</span><br><span class="line">      redo: true, &#x2F;&#x2F; 下一步</span><br><span class="line">      trash: true, &#x2F;&#x2F; 清空</span><br><span class="line">      save: true, &#x2F;&#x2F; 保存（触发events中的save事件）</span><br><span class="line">      &#x2F;* 1.4.2 *&#x2F;</span><br><span class="line">      navigation: true, &#x2F;&#x2F; 导航目录</span><br><span class="line">      &#x2F;* 2.1.8 *&#x2F;</span><br><span class="line">      alignleft: true, &#x2F;&#x2F; 左对齐</span><br><span class="line">      aligncenter: true, &#x2F;&#x2F; 居中</span><br><span class="line">      alignright: true, &#x2F;&#x2F; 右对齐</span><br><span class="line">      &#x2F;* 2.2.1 *&#x2F;</span><br><span class="line">      subfield: true, &#x2F;&#x2F; 单双栏模式</span><br><span class="line">      preview: true, &#x2F;&#x2F; 预览</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="events-事件绑定"><a href="#events-事件绑定" class="headerlink" title="events 事件绑定"></a>events 事件绑定</h3><table><thead><tr><th>name 方法名</th><th>params 参数</th><th>describe 描述</th></tr></thead><tbody><tr><td>change</td><td>String: value , String: render</td><td>编辑区发生变化的回调事件(render: value 经过markdown解析后的结果)</td></tr><tr><td>save</td><td>String: value , String: render</td><td>ctrl + s 的回调事件(保存按键,同样触发该回调)</td></tr><tr><td>fullScreen</td><td>Boolean: status , String: value</td><td>切换全屏编辑的回调事件(boolean: 全屏开启状态)</td></tr><tr><td>readModel</td><td>Boolean: status , String: value</td><td>切换沉浸式阅读的回调事件(boolean: 阅读开启状态)</td></tr><tr><td>htmlCode</td><td>Boolean: status , String: value</td><td>查看html源码的回调事件(boolean: 源码开启状态)</td></tr><tr><td>subfieldToggle</td><td>Boolean: status , String: value</td><td>切换单双栏编辑的回调事件(boolean: 双栏开启状态)</td></tr><tr><td>previewToggle</td><td>Boolean: status , String: value</td><td>切换预览编辑的回调事件(boolean: 预览开启状态)</td></tr><tr><td>helpToggle</td><td>Boolean: status , String: value</td><td>查看帮助的回调事件(boolean: 帮助开启状态)</td></tr><tr><td>navigationToggle</td><td>Boolean: status , String: value</td><td>切换导航目录的回调事件(boolean: 导航开启状态)</td></tr><tr><td>imgAdd</td><td>String: filename, File: imgfile</td><td>图片文件添加回调事件(filename: 写在md中的文件名, File: File Object)</td></tr><tr><td>imgDel</td><td>String: filename</td><td>图片文件删除回调事件(filename: 写在md中的文件名)</td></tr></tbody></table><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><blockquote><p>如不需要hightlight代码高亮显示，你应该设置ishljs为false</p></blockquote><p>开启代码高亮props</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ishljs默认为true</span><br><span class="line">&lt;mavon-editor :ishljs &#x3D; &quot;true&quot;&gt;&lt;&#x2F;mavon-editor&gt;</span><br></pre></td></tr></table></figure><p>为优化插件体积，从<strong>v2.4.2</strong>起以下文件将默认使用<code>cdnjs</code>外链:</p><ul><li><code>highlight.js</code></li><li><code>github-markdown-css</code></li><li><code>katex</code>(<strong>v2.4.7</strong>)</li></ul><p>代码高亮<code>highlight.js</code>中的语言解析文件和代码高亮样式将在使用时按需加载. <code>github-markdown-css</code>和<code>katex</code>仅会在<code>mounted</code>时加载</p><p><strong>Notice</strong>: <a href="https://github.com/hinesboy/mavonEditor/blob/HEAD/src/lib/core/hljs/lang.hljs.css.js">可选配色方案</a> 和 <a href="https://github.com/hinesboy/mavonEditor/blob/HEAD/src/lib/core/hljs/lang.hljs.js">支持的语言</a> 是从 <a href="https://github.com/isagalaev/highlight.js/tree/master/src">highlight.js/9.12.0</a> 导出的</p><blockquote><p><a href="https://github.com/hinesboy/mavonEditor/blob/HEAD/doc/cn/no-cnd.md">不使用cdn，本地按需加载点击这里…</a></p></blockquote><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;mavon-editor ref&#x3D;md @imgAdd&#x3D;&quot;$imgAdd&quot; @imgDel&#x3D;&quot;$imgDel&quot;&gt;&lt;&#x2F;mavon-editor&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">exports default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 绑定@imgAdd event</span><br><span class="line">        $imgAdd(pos, $file)&#123;</span><br><span class="line">            &#x2F;&#x2F; 第一步.将图片上传到服务器.</span><br><span class="line">           var formdata &#x3D; new FormData();</span><br><span class="line">           formdata.append(&#39;image&#39;, $file);</span><br><span class="line">           axios(&#123;</span><br><span class="line">               url: &#39;server url&#39;,</span><br><span class="line">               method: &#39;post&#39;,</span><br><span class="line">               data: formdata,</span><br><span class="line">               headers: &#123; &#39;Content-Type&#39;: &#39;multipart&#x2F;form-data&#39; &#125;,</span><br><span class="line">           &#125;).then((url) &#x3D;&gt; &#123;</span><br><span class="line">               &#x2F;&#x2F; 第二步.将返回的url替换到文本原位置![...](0) -&gt; ![...](url)</span><br><span class="line">               &#x2F;**</span><br><span class="line">               * $vm 指为mavonEditor实例，可以通过如下两种方式获取</span><br><span class="line">               * 1. 通过引入对象获取: &#96;import &#123;mavonEditor&#125; from ...&#96; 等方式引入后，&#96;$vm&#96;为&#96;mavonEditor&#96;</span><br><span class="line">               * 2. 通过$refs获取: html声明ref : &#96;&lt;mavon-editor ref&#x3D;md &gt;&lt;&#x2F;mavon-editor&gt;，&#96;$vm&#96;为 &#96;this.$refs.md&#96;</span><br><span class="line">               *&#x2F;</span><br><span class="line">               $vm.$img2Url(pos, url);</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/hinesboy/mavonEditor/blob/HEAD/doc/cn/upload-images.md">图片上传详情点击这里…</a></p></blockquote><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><ul><li><strong>默认大小样式为 min-height: 300px , min-width: 300px 可自行覆盖</strong></li><li><strong>基础z-index: 1500</strong></li><li><strong>仅用作展示可以设置props: toolbarsFlag: false , subfield: false, defaultOpen: “preview”</strong></li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>key</th><th>keycode</th><th>功能</th></tr></thead><tbody><tr><td>F8</td><td>119</td><td>开启/关闭导航</td></tr><tr><td>F9</td><td>120</td><td>预览/编辑切换</td></tr><tr><td>F10</td><td>121</td><td>开启/关闭全屏</td></tr><tr><td>F11</td><td>122</td><td>开启/关闭阅读模式</td></tr><tr><td>F12</td><td>123</td><td>单栏/双栏切换</td></tr><tr><td>TAB</td><td>9</td><td>缩进</td></tr><tr><td>CTRL + S</td><td>17 + 83</td><td>触发保存</td></tr><tr><td>CTRL + D</td><td>17 + 68</td><td>删除选中行</td></tr><tr><td>CTRL + Z</td><td>17 + 90</td><td>上一步</td></tr><tr><td>CTRL + Y</td><td>17 + 89</td><td>下一步</td></tr><tr><td>CTRL + BreakSpace</td><td>17 + 8</td><td>清空编辑</td></tr><tr><td>CTRL + B</td><td>17 + 66</td><td><strong>加粗</strong></td></tr><tr><td>CTRL + I</td><td>17 + 73</td><td><em>斜体</em></td></tr><tr><td>CTRL + H</td><td>17 + 72</td><td># 标题</td></tr><tr><td>CTRL + 1</td><td>17 + 97 or 49</td><td># 标题</td></tr><tr><td>CTRL + 2</td><td>17 + 98 or 50</td><td>## 标题</td></tr><tr><td>CTRL + 3</td><td>17 + 99 or 51</td><td>### 标题</td></tr><tr><td>CTRL + 4</td><td>17 + 100 or 52</td><td>#### 标题</td></tr><tr><td>CTRL + 5</td><td>17 + 101 or 53</td><td>##### 标题</td></tr><tr><td>CTRL + 6</td><td>17 + 102 or 54</td><td>###### 标题</td></tr><tr><td>CTRL + U</td><td>17 + 85</td><td>++下划线++</td></tr><tr><td>CTRL + M</td><td>17 + 77</td><td>==标记==</td></tr><tr><td>CTRL + Q</td><td>17 + 81</td><td>&gt; 引用</td></tr><tr><td>CTRL + O</td><td>17 + 79</td><td>1. 有序列表</td></tr><tr><td>CTRL + L</td><td>17 + 76</td><td><a href="https://www.npmjs.com/package/mavon-editor">链接</a></td></tr><tr><td>CTRL + ALT + S</td><td>17 + 18 + 83</td><td>^上角标^</td></tr><tr><td>CTRL + ALT + U</td><td>17 + 18 + 85</td><td>- 无序列表</td></tr><tr><td>CTRL + ALT + C</td><td>17 + 18 + 67</td><td>``` 代码块</td></tr><tr><td>CTRL + ALT + L</td><td>17 + 18 + 76</td><td><a href="https://www.npmjs.com/package/mavon-editor"><img src="https://www.npmjs.com/package/mavon-editor" alt="图片链接"></a></td></tr><tr><td>CTRL + ALT + T</td><td>17 + 18 + 84</td><td>表格</td></tr><tr><td>CTRL + SHIFT + S</td><td>17 + 16 + 83</td><td><del>下角标</del></td></tr><tr><td>CTRL + SHIFT + D</td><td>17 + 16 + 68</td><td><del>中划线</del></td></tr><tr><td>CTRL + SHIFT + C</td><td>17 + 16 + 67</td><td>居中</td></tr><tr><td>CTRL + SHIFT + L</td><td>17 + 16 + 76</td><td>居左</td></tr><tr><td>CTRL + SHIFT + R</td><td>17 + 16 + 82</td><td>居右</td></tr><tr><td>SHIFT + TAB</td><td>16 + 9</td><td>取消缩进</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA实现文件上传(aliyunOss)</title>
      <link href="2021/02/26/java+%E9%98%BF%E9%87%8C%E4%BA%91oss/"/>
      <url>2021/02/26/java+%E9%98%BF%E9%87%8C%E4%BA%91oss/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.cnblogs.com/pxblog/p/13402120.html">参考博客</a></p><p>阿里云Oss对象存储是一个很好的对象服务存储服务器，很方便我们存储一些图片或者文件，而且基本上免费。在进行开发时，图片一般保存在服务器上，方便访问。在上传图片之前，需要对阿里云oss先进行一些基本设置。</p><h2 id="阿里云设置"><a href="#阿里云设置" class="headerlink" title="阿里云设置"></a>阿里云设置</h2><p>1.新建bucket</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210226150350589.png" alt="image-20210226150350589"></p><p>2.创建目录</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210226150504734.png" alt="image-20210226150504734"></p><p>3.权限设置</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210226150544766.png" alt="image-20210226150544766"></p><p>只有设置为公共读，才能在外网访问到。</p><blockquote><p>注意</p></blockquote><p>1.外网访问地址</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210226150754674.png" alt="image-20210226150754674"></p><p>2.阿里云Oss访问需要accessKeyId和accessKeySecret，可以百度如何设置accessKey，设置完成之后一定要把accessKeyId和accessKeySecret保存下来。</p><h1 id="JAVA实现文件上传-aliyunOss"><a href="#JAVA实现文件上传-aliyunOss" class="headerlink" title="JAVA实现文件上传(aliyunOss)"></a>JAVA实现文件上传(aliyunOss)</h1><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--阿里云oss--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.编写工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hl.schoolbar.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: huangLong</span></span><br><span class="line"><span class="comment"> * date:2021/2/26 9:27</span></span><br><span class="line"><span class="comment"> * describe:阿里云对象存储服务器工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliYunOssUtils</span> </span>&#123;</span><br><span class="line">    Log log = LogFactory.getLog(AliYunOssUtils.class);</span><br><span class="line">    <span class="comment">//外网访问地址</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint = <span class="string">&quot;oss-cn-chengdu.aliyuncs.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阿里云的accessKeyId</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId = <span class="string">&quot;我就不展示了&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阿里云的accessKeySecret</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret = <span class="string">&quot;我就不展示了&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//bucketName 你的bucket是什么就写什么</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName = <span class="string">&quot;我就不展示了&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件存储目录</span></span><br><span class="line">    <span class="keyword">private</span> String filedir = <span class="string">&quot;img/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSSClient ossClient;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AliYunOssUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ossClient = <span class="keyword">new</span> OSSClient(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFiledir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filedir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义上传文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AliYunOssUtils</span><span class="params">(String filedir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filedir = filedir;</span><br><span class="line">        ossClient = <span class="keyword">new</span> OSSClient(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ossClient = <span class="keyword">new</span> OSSClient(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传到OSS服务器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称 包括后缀名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 出错返回&quot;&quot; ,唯一MD5数字签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile2OSS</span><span class="params">(InputStream instream, String fileName)</span> </span>&#123;</span><br><span class="line">        String ret = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 判断bucket是否已经存在,不存在进行创建</span></span><br><span class="line">        <span class="keyword">if</span> (!doesBucketExist()) &#123;</span><br><span class="line">            createBucket();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建上传Object的Metadata</span></span><br><span class="line">            ObjectMetadata objectMetadata = <span class="keyword">new</span> ObjectMetadata();</span><br><span class="line">            objectMetadata.setContentLength(instream.available());</span><br><span class="line">            objectMetadata.setCacheControl(<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">            objectMetadata.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">            objectMetadata.setContentType(getcontentType(fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>))));</span><br><span class="line">            objectMetadata.setContentDisposition(<span class="string">&quot;inline;filename=&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定上传文件操作时是否覆盖同名Object。</span></span><br><span class="line">            <span class="comment">// 不指定x-oss-forbid-overwrite时，默认覆盖同名Object。</span></span><br><span class="line">            <span class="comment">// 指定x-oss-forbid-overwrite为false时，表示允许覆盖同名Object。</span></span><br><span class="line">            <span class="comment">// 指定x-oss-forbid-overwrite为true时，表示禁止覆盖同名Object，如果同名Object已存在，程序将报错。</span></span><br><span class="line">            objectMetadata.setHeader(<span class="string">&quot;x-oss-forbid-overwrite&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String objectName = filedir + fileName;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传文件</span></span><br><span class="line">            ossClient.putObject(bucketName, objectName, instream, objectMetadata);</span><br><span class="line">            <span class="comment">// 封装  url 路径</span></span><br><span class="line">            String url = <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span> + objectName;</span><br><span class="line">            System.out.println(objectName);</span><br><span class="line">            ret = url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (instream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件是否存在。doesObjectExist还有一个参数isOnlyInOSS，</span></span><br><span class="line"><span class="comment">     * 如果为true则忽略302重定向或镜像；如果为false，则考虑302重定向或镜像。</span></span><br><span class="line"><span class="comment">     * yourObjectName 表示上传文件到OSS时需要指定包含文件后缀在内的完整路径，例如abc/efg/123.jpg。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doesObjectExist</span><span class="params">(String objectName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exists = ossClient.doesObjectExist(bucketName, filedir + objectName);</span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Bucket是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doesBucketExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exists = ossClient.doesBucketExist(bucketName);</span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Bucket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBucket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CreateBucketRequest createBucketRequest = <span class="keyword">new</span> CreateBucketRequest(bucketName);</span><br><span class="line">        <span class="comment">// 设置bucket权限为公共读，默认是私有读写</span></span><br><span class="line">        createBucketRequest.setCannedACL(CannedAccessControlList.PublicRead);</span><br><span class="line">        <span class="comment">// 设置bucket存储类型为低频访问类型，默认是标准类型</span></span><br><span class="line">        createBucketRequest.setStorageClass(StorageClass.IA);</span><br><span class="line">        <span class="keyword">boolean</span> exists = ossClient.doesBucketExist(bucketName);</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ossClient.createBucket(createBucketRequest);</span><br><span class="line">                <span class="comment">// 关闭client</span></span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 判断OSS服务文件上传时文件的contentType</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> FilenameExtension 文件后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getcontentType</span><span class="params">(String FilenameExtension)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bmp&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;image/bmp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;gif&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;image/gif&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;jpeg&quot;</span>.equalsIgnoreCase(FilenameExtension) ||</span><br><span class="line">                <span class="string">&quot;jpg&quot;</span>.equalsIgnoreCase(FilenameExtension) ||</span><br><span class="line">                <span class="string">&quot;png&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;html&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;text/html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;txt&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;text/plain&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;vsd&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;application/vnd.visio&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;pptx&quot;</span>.equalsIgnoreCase(FilenameExtension) ||</span><br><span class="line">                <span class="string">&quot;ppt&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;application/vnd.ms-powerpoint&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;docx&quot;</span>.equalsIgnoreCase(FilenameExtension) ||</span><br><span class="line">                <span class="string">&quot;doc&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;application/msword&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;xml&quot;</span>.equalsIgnoreCase(FilenameExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;text/xml&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: getInputStreamByFileUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据文件路径获取InputStream流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: InputStream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStreamByFileUrl</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ossObject包含文件所在的存储空间名称、文件名称、文件元信息以及一个输入流。</span></span><br><span class="line">        OSSObject ossObject = ossClient.getObject(bucketName, fileName);</span><br><span class="line">        <span class="keyword">return</span> ossObject.getObjectContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">        String filename = file.getResource().getFilename();</span><br><span class="line">        <span class="comment">//这里文件名用了uuid 防止重复，可以根据自己的需要来写</span></span><br><span class="line">        String name = UUID.randomUUID() + filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>), filename.length());</span><br><span class="line">        name = name.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        AliYunOssUtils util = <span class="keyword">new</span> AliYunOssUtils();</span><br><span class="line">        <span class="comment">//上传成功返回完整路径的url</span></span><br><span class="line">        String url = util.uploadFile2OSS(inputStream, name);</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.servieImpl</p><p>Result是对返回数据的封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonUtilServiceImpl</span>  <span class="keyword">implements</span> <span class="title">CommonUtilService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CommonUtilMapper commonUtilMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">uploadFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        AliYunOssUtils util = <span class="keyword">new</span> AliYunOssUtils();</span><br><span class="line">        <span class="comment">//上传成功返回完整路径的url</span></span><br><span class="line">        String url = util.uploadFile(file);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>+url);</span><br><span class="line">        Img img = <span class="keyword">new</span> Img();</span><br><span class="line">        img.setImageUrl(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径保存进数据库</span></span><br><span class="line">        <span class="keyword">int</span> i = commonUtilMapper.uploadFile(img);</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok().put(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;上传图片失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;公共工具&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/utils&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonUtilController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CommonUtilService commonUtilServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=&quot;上传文件&quot;, notes=&quot;post请求&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(paramType=&quot;query&quot;, name = &quot;file&quot;, value = &quot;文件&quot;, required = true, dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/uploadFile&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">uploadFile</span><span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commonUtilServiceImpl.uploadFile(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript工具jutils</title>
      <link href="2021/02/23/javaScript%E5%B7%A5%E5%85%B7jutils/"/>
      <url>2021/02/23/javaScript%E5%B7%A5%E5%85%B7jutils/</url>
      
        <content type="html"><![CDATA[<p>JavaScript常用函数库</p><p>在日常工作生活中，会经常用到一些<code>日期格式化</code>，<code>url相关操作</code>，<code>浏览器类型判断</code>，<code>常用验证格式</code>等等函数，虽然大部分只需谷歌/百度一下就能找到，但是大多数都存在着一些问题，于是整理了网上和自己平常用到的工具类，方便大家以后的使用，提升开发效率。</p><blockquote><p>Git地址：<a href="https://github.com/dong-sir/jutils">https://github.com/dong-sir/jutils</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="直接用-lt-script-gt-引入"><a href="#直接用-lt-script-gt-引入" class="headerlink" title="直接用 &lt;script&gt; 引入"></a>直接用 <code>&lt;script&gt;</code> 引入</h3><p>直接下载并用 <code>&lt;script&gt;</code> 标签引入，<code>jutils</code> 会被注册为一个全局变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jutils.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> browser = jutils.getBrowserInfo()</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">1234</span><br></pre></td></tr></table></figure><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>你也可以这样使用最新版本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jutils-src&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>在 jutils 应用于大型项目时推荐使用 NPM 安装。NPM 能很好地和 webpack 模块打包器配合使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新稳定版</span></span><br><span class="line">$ npm install jutils-src</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="交流群（QQ）"><a href="#交流群（QQ）" class="headerlink" title="交流群（QQ）"></a>交流群（QQ）</h2><ul><li>709060365</li></ul><h2 id="API-目录"><a href="#API-目录" class="headerlink" title="API 目录"></a>API 目录</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li><a href="https://blog.csdn.net/qq6759/article/details/101520733#getBrowserInfo">getBrowserInfo</a> 获取浏览器信息</li><li><a href="https://blog.csdn.net/qq6759/article/details/101520733#isCss3Support">isCss3Support</a> 判断浏览器是否支持css3</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><a href="https://blog.csdn.net/qq6759/article/details/101520733#arrayUnique">arrayUnique</a> 数组去重</li><li><a href="https://blog.csdn.net/qq6759/article/details/101520733#arrayEqual">arrayEqual</a> 判断两个数组是否相等</li></ul><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><ul><li><a href="https://blog.csdn.net/qq6759/article/details/101520733#formatDate">formatDate</a> 时间戳的转换（自定义格式）</li><li><a href="https://blog.csdn.net/qq6759/article/details/101520733#getTimeInterval">getTimeInterval</a> 获取两个时间的间隔的天、小时、分钟和秒</li></ul><h2 id="API-说明"><a href="#API-说明" class="headerlink" title="API 说明"></a>API 说明</h2><h3 id="getBrowserInfo"><a href="#getBrowserInfo" class="headerlink" title="getBrowserInfo"></a>getBrowserInfo</h3><p>获取浏览器信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jutils.getBrowserInfo();</span><br><span class="line"><span class="comment">//&#123;name: &quot;Chrome&quot;, version: &quot;76.0.3809.100&quot;&#125;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="isCss3Support"><a href="#isCss3Support" class="headerlink" title="isCss3Support"></a>isCss3Support</h3><p>判断是否支持css3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jutils.isCss3Support() ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="arrayUnique"><a href="#arrayUnique" class="headerlink" title="arrayUnique"></a>arrayUnique</h3><p>数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jutils.arrayUnique([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// =&gt; [2, 1]</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="arrayEqual"><a href="#arrayEqual" class="headerlink" title="arrayEqual"></a>arrayEqual</h3><p>判断两个数组是否相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jutils.arrayEqual([<span class="number">0</span>, <span class="number">1</span>],[<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="formatDate"><a href="#formatDate" class="headerlink" title="formatDate"></a>formatDate</h3><p>时间戳的转换（自定义格式）</p><blockquote><p>年、月、日、时、分、秒</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = jutils.formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1533686888</span>*<span class="number">1000</span>),<span class="string">&quot;YYYY-MM-DD HH:ii:ss&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// 2019-07-09 19:44:01</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="getTimeInterval"><a href="#getTimeInterval" class="headerlink" title="getTimeInterval"></a>getTimeInterval</h3><p>获取两个时间的间隔，返回间隔的天、小时、分钟和秒。 注意：<em>结束时间要大于开始时间否则返回空</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jutils.getTimeInterval(<span class="string">&quot;开始时间&quot;</span>, <span class="string">&quot;结束时间&quot;</span>);</span><br><span class="line"><span class="comment">//例：</span></span><br><span class="line">jutils.getTimeInterval(<span class="number">1567562605000</span>, <span class="number">1567649014000</span>)</span><br><span class="line"><span class="comment">//1天0小时0分钟9秒</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink</title>
      <link href="2021/02/09/Flink/"/>
      <url>2021/02/09/Flink/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://flink.apache.org/zh/community.html">官方文档</a></p><blockquote><p>流处理与批处理</p></blockquote><p>批处理：当数据量达到一定值的，才对这些数据进行处理。</p><p>流处理：每当一个数据到达时，对该数据进行处理。</p><blockquote><p>Flink是什么</p></blockquote><p>Apache Flink 是一个<strong>框架</strong>和分布式处理引擎，用于对<strong>无界和有界数据流</strong>进行<strong>状态</strong>计算。</p><blockquote><p>为什么选择Flink</p></blockquote><p>流数据更真实地反映了我们的生活方式 </p><p>• 传统的数据架构是基于有限数据集（批处理）的 </p><p>• 我们的目标 </p><p>➢ 低延迟 </p><p>➢ 高吞吐</p><p> ➢ 结果的准确性和良好的容错性</p><blockquote><p>哪些行业需要处理流数据</p></blockquote><p>• 电商和市场营销</p><p> ➢ 数据报表、广告投放、业务流程需要 </p><p>• 物联网（IOT） </p><p>➢ 传感器实时数据采集和显示、实时报警，交通运输业 </p><p>• 电信业</p><p> ➢ 基站流量调配 </p><p>• 银行和金融业 </p><p>➢ 实时结算和通知推送，实时检测异常行为</p><blockquote><p>处理架构</p></blockquote><p>1.传统数据处理架构</p><p>①.事务处理</p><p>上层为计算层，数据处理在该层。</p><p>下层为存储层，数据存储在该层。</p><p>实时性很好，来一个event，处理一个event，但是同时处理数据有限。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209123715297.png" alt="image-20210209123715297"></p><p>②.分析处理</p><p>将数据从业务数据库复制到数仓，再进行分析和查询</p><p>高延迟，实时性不好。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209123754754.png" alt="image-20210209123754754"></p><p>2.有状态的流式处理</p><p>当前数据处理中需要的数据存放在本地内存的本地状态里，为了防止节点挂了导致状态丢失，所以对这些状态做一个定期的检查，存放进持久化的数据库中，但是数据顺序无法保证</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209123851747.png" alt="image-20210209123851747"></p><p>3.lambda 架构</p><p> 用两套系统，同时保证低延迟和结果准确</p><p>batch layer:批处理层</p><p>speed layer：流处理层，快速处理</p><p>先快速处理，得到一个近似结果，过一段时间，得到批处理的正确结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209130238966.png" alt="image-20210209130238966"></p><p>4.Flink</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209130608691.png" alt="image-20210209130608691"></p><blockquote><p>Flink的特点</p></blockquote><p>1.事件驱动</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209130753834.png" alt="image-20210209130753834"></p><p>2.基于流的世界观</p><p>在 Flink 的世界观中，一切都是由流组成的，离线数据是有界的 流；实时数据是一个没有界限的流：这就是所谓的有界流和无界 流。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209130918432.png" alt="image-20210209130918432"></p><p>3.分成API</p><p>越顶层越抽象，表达含义越简明，使用越方便 </p><p>越底层越具体，表达能力越丰富，使用越灵活</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209130950688.png" alt="image-20210209130950688"></p><p>4.其他特点</p><p>• 支持事件时间（event-time）和处理时间（processing-time） 语义 </p><p>• 精确一次（exactly-once）的状态一致性保证 </p><p>• 低延迟，每秒处理数百万个事件，毫秒级延迟 </p><p>• 与众多常用存储系统的连接 </p><p>• 高可用，动态扩展，实现7*24小时全天候运行</p><blockquote><p>Flink vs Spark Streaming</p></blockquote><p>1.流（stream）和微批（micro-batching）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209141444460.png" alt="image-20210209141444460"></p><p>2.数据模型</p><p>– spark 采用 RDD 模型，spark streaming 的 DStream 实际上也就是一组 组小批 数据 RDD 的集合</p><p>– flink 基本数据模型是数据流，以及事件（Event）序列</p><p>3.运行时架构</p><p>– spark 是批计算，将 DAG 划分为不同的 stage，一个完成后才可以计算下一个</p><p> – flink 是标准的流执行模式，一个事件在一个节点处理完后可以直接发往下一个节点进行处理</p><h1 id="简单上手"><a href="#简单上手" class="headerlink" title="简单上手"></a>简单上手</h1><h2 id="批处理wordCount"><a href="#批处理wordCount" class="headerlink" title="批处理wordCount"></a>批处理wordCount</h2><p>1.新建项目</p><p>2.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试数据</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hello word</span><br><span class="line">hello flink</span><br><span class="line">hello java</span><br><span class="line">hello mysql</span><br><span class="line">hello vue</span><br><span class="line">hello javascript</span><br></pre></td></tr></table></figure><p>4.业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hl.wc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.DataSet;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.ExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: huangLong</span></span><br><span class="line"><span class="comment"> * date:2021/2/9 14:29</span></span><br><span class="line"><span class="comment"> * describe: 批处理wordCount</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//批处理wordCount</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建执行环境</span></span><br><span class="line">        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从文件中读取数据</span></span><br><span class="line">        String inputPath = <span class="string">&quot;E:\\ideaProgram\\flinkTest\\src\\main\\resources\\hello.txt&quot;</span>;</span><br><span class="line">        DataSet&lt;String&gt; inputDataSet = env.readTextFile(inputPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对数据集进行处理,按空格分词展开,转换成(word, 1)二元组进行统计</span></span><br><span class="line">        DataSet&lt;Tuple2&lt;String, Integer&gt;&gt; resultSet = inputDataSet.flatMap(<span class="keyword">new</span> MyFlatMapper())</span><br><span class="line">                .groupBy(<span class="number">0</span>)    <span class="comment">// 按照第一个位置的word分组</span></span><br><span class="line">                .sum(<span class="number">1</span>);    <span class="comment">// 将第二个位置上的数据求和</span></span><br><span class="line">          resultSet.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义类，实现FlatMapFunction接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMapper</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 按空格分词</span></span><br><span class="line">            String[] words = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 遍历所有word，包成二元组输出</span></span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                out.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(word, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209144857277.png" alt="image-20210209144857277"></p><h2 id="流处理WordCount"><a href="#流处理WordCount" class="headerlink" title="流处理WordCount"></a>流处理WordCount</h2><p>1.业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hl.wc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.ExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: huangLong</span></span><br><span class="line"><span class="comment"> * date:2021/2/9 14:49</span></span><br><span class="line"><span class="comment"> * describe: 流处理WordCont</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"><span class="comment">//设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从文件中读取数据</span></span><br><span class="line">        String inputPath = <span class="string">&quot;E:\\ideaProgram\\flinkTest\\src\\main\\resources\\hello.txt&quot;</span>;</span><br><span class="line">        DataStream&lt;String&gt; inputDataStream = env.readTextFile(inputPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基于数据流进行转换计算</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String,Integer&gt;&gt; resultMap =  inputDataStream.flatMap(<span class="keyword">new</span> WordCount.MyFlatMapper())</span><br><span class="line">                .keyBy(<span class="number">0</span>)<span class="comment">//按照当前key的hashcode进行重分区</span></span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        resultMap.print().setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209150125071.png" alt="image-20210209150125071"></p><h2 id="流式数据源"><a href="#流式数据源" class="headerlink" title="流式数据源"></a>流式数据源</h2><p>我们使用linux下的netcat工具模仿 数据源</p><blockquote><p>netcat</p></blockquote><p>netcat是一个通过TCP/UDP在网络中进行读写数据工具（命令），被称为“瑞士军刀”，<strong>主要用于调试领域、传输领域甚至黑客攻击领域</strong>。利用该工具，可以将网络中一端的数据完整的发送至另一台主机终端显示或存储，<strong>常见的应用为文件传输、与好友即时通信、传输流媒体或者作为用来验证服务器的独立的客户端。</strong>当然，也可以在脚本中使用该工具。</p><p>安装命令：yum install -y nc</p><p>使用命令：nc -lk 9999 </p><p>1.业务代码</p><p>以带参数的形式启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hl.wc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.ExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.ParameterTool;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: huangLong</span></span><br><span class="line"><span class="comment"> * date:2021/2/9 14:49</span></span><br><span class="line"><span class="comment"> * describe: 流处理WordCont</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置并行度</span></span><br><span class="line">        env.setParallelism(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从文件中读取数据</span></span><br><span class="line"><span class="comment">//        String inputPath = &quot;E:\\ideaProgram\\flinkTest\\src\\main\\resources\\hello.txt&quot;;</span></span><br><span class="line"><span class="comment">//        DataStream&lt;String&gt; inputDataStream = env.readTextFile(inputPath);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用parameter tool工具从程序启动参数中提取配置项</span></span><br><span class="line">        ParameterTool parameterTool = ParameterTool.fromArgs(args);</span><br><span class="line">        String host = parameterTool.get(<span class="string">&quot;host&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> port = parameterTool.getInt(<span class="string">&quot;port&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从socket文本流读取数据,参数为 ip地址和 端口号</span></span><br><span class="line">        DataStream&lt;String&gt; inputDataStream = env.socketTextStream(host,port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基于数据流进行转换计算</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String,Integer&gt;&gt; resultMap =  inputDataStream.flatMap(<span class="keyword">new</span> WordCount.MyFlatMapper())</span><br><span class="line">                .keyBy(<span class="number">0</span>)<span class="comment">//按照当前key的hashcode进行重分区</span></span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        resultMap.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.linux开启netcat，再启动程序</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209151616182.png" alt="image-20210209151616182"></p><p>3.netcat输入数据</p><p>①输入hello word</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209151759532.png" alt="image-20210209151759532"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209151811492.png" alt="image-20210209151811492"></p><p>②输入hello vue</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209151844596.png" alt="image-20210209151844596"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209151856451.png" alt="image-20210209151856451"></p><p>③输入how are you </p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209151943699.png" alt="image-20210209151943699"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209151937772.png" alt="image-20210209151937772"></p><p>你会发现每当你输入一条数据，flink就会处理一条数据，这样就是流数据处理，只要你一直输入，flink正常运行下就会一直处理下去，每来一条数据，就处理一条数据，实现了低延迟，实时性。</p><h1 id="Flink部署"><a href="#Flink部署" class="headerlink" title="Flink部署"></a>Flink部署</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将flink部署到linux服务器上</p><p>1.在官网下载压缩包</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209153428033.png" alt="image-20210209153428033"></p><p>2.上传到linux服务器上</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209153506575.png" alt="image-20210209153506575"></p><p>3.解压</p><p>tar zxvf flink-1.10.1-bin-scala_2.12.tgz</p><p>4.启动 在bin目录下</p><p>./start-cluster.sh</p><p>5.访问ip地址:8081</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209170109980.png" alt="image-20210209170109980"></p><h2 id="job的提交方式"><a href="#job的提交方式" class="headerlink" title="job的提交方式"></a>job的提交方式</h2><p>1.打包</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209170846589.png" alt="image-20210209170846589"></p><p>2.提交</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209171014685.png" alt="image-20210209171014685"></p><p>3.配置</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209171250338.png" alt="image-20210209171250338"></p><p>4.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209173007726.png" alt="image-20210209173007726"></p><h1 id="运行时架构"><a href="#运行时架构" class="headerlink" title="运行时架构"></a>运行时架构</h1><h2 id="运行时组件"><a href="#运行时组件" class="headerlink" title="运行时组件"></a>运行时组件</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209174820961.png" alt="image-20210209174820961"></p><h3 id="作业管理器（jobManager）"><a href="#作业管理器（jobManager）" class="headerlink" title="作业管理器（jobManager）"></a>作业管理器（jobManager）</h3><p>• 控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的 JobManager 所控制执行。 </p><p>• JobManager 会先接收到要执行的应用程序，这个应用程序会包括：作业图 （JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、 库和其它资源的JAR包。</p><p> • JobManager 会把JobGraph转换成一个物理层面的数据流图，这个图被叫做 “执行图”（ExecutionGraph），包含了所有可以并发执行的任务。 </p><p>• JobManager 会向资源管理器（ResourceManager）请求执行任务必要的资源， 也就是任务管理器（TaskManager）上的插槽（slot）。一旦它获取到了足够的 资源，就会将执行图分发到真正运行它们的TaskManager上。而在运行过程中， JobManager会负责所有需要中央协调的操作，比如说检查点（checkpoints） 的协调。</p><h3 id="任务管理器（TaskManager）"><a href="#任务管理器（TaskManager）" class="headerlink" title="任务管理器（TaskManager）"></a>任务管理器（TaskManager）</h3><p>• Flink中的工作进程。通常在Flink中会有多个TaskManager运行，每一 个TaskManager都包含了一定数量的插槽（slots）。插槽的数量限制 了TaskManager能够执行的任务数量。</p><p> • 启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理 器的指令后，TaskManager就会将一个或者多个插槽提供给 JobManager调用。JobManager就可以向插槽分配任务（tasks）来 执行了。</p><p> • 在执行过程中，一个TaskManager可以跟其它运行同一应用程序的 TaskManager交换数据。</p><h3 id="资源管理器（ResourceManager）"><a href="#资源管理器（ResourceManager）" class="headerlink" title="资源管理器（ResourceManager）"></a>资源管理器（ResourceManager）</h3><p>• 主要负责管理任务管理器（TaskManager）的插槽（slot）， TaskManger 插槽是Flink中定义的处理资源单元。</p><p> • Flink为不同的环境和资源管理工具提供了不同资源管理器，比如YARN、 Mesos、K8s，以及standalone部署。</p><p> • 当JobManager申请插槽资源时，ResourceManager会将有空闲插槽 的TaskManager分配给JobManager。如果ResourceManager没有足 够的插槽来满足JobManager的请求，它还可以向资源提供平台发起会 话，以提供启动TaskManager进程的容器。</p><h3 id="分发器（Dispatcher）"><a href="#分发器（Dispatcher）" class="headerlink" title="分发器（Dispatcher）"></a>分发器（Dispatcher）</h3><p>• 可以跨作业运行，它为应用提交提供了REST接口。</p><p> • 当一个应用被提交执行时，分发器就会启动并将应用移交给一个 JobManager。</p><p> • Dispatcher也会启动一个Web UI，用来方便地展示和监控作业 执行的信息。</p><p> • Dispatcher在架构中可能并不是必需的，这取决于应用提交运行 的方式。</p><h2 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209175704646.png" alt="image-20210209175704646"></p><h2 id="任务调度原理"><a href="#任务调度原理" class="headerlink" title="任务调度原理"></a>任务调度原理</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209180519296.png" alt="image-20210209180519296"></p><h2 id="并行度"><a href="#并行度" class="headerlink" title="并行度"></a>并行度</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181239808.png" alt="image-20210209181239808"></p><p>一个特定算子的 子任务（subtask）的个数被称之为其并行度（parallelism）。 一般情况下，一个 stream 的并行度，可以认为就是其所有算子中最大的并行度。</p><h2 id="TaskManager-和-Slots"><a href="#TaskManager-和-Slots" class="headerlink" title="TaskManager 和 Slots"></a>TaskManager 和 Slots</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181519368.png" alt="image-20210209181519368"></p><p>• Flink 中每一个 TaskManager 都是一个JVM进程，它可能会在独立的线程上执 行一个或多个子任务 </p><p>• 为了控制一个 TaskManager 能接收多少个 task， TaskManager 通过 task slot 来进行控制（一个 TaskManager 至少有一个 slot）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181537143.png" alt="image-20210209181537143"></p><p>• 默认情况下，Flink 允许子任务共享 slot，即使它们是不同任务的子任务。 这样 的结果是，一个 slot 可以保存作业的整个管道。</p><p> • Task Slot 是静态的概念，是指 TaskManager 具有的并发执行能力</p><h2 id="并行子任务的分配"><a href="#并行子任务的分配" class="headerlink" title="并行子任务的分配"></a>并行子任务的分配</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181615176.png" alt="image-20210209181615176"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181637649.png" alt="image-20210209181637649"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181649704.png" alt="image-20210209181649704"></p><h2 id="程序与数据流（DataFlow）"><a href="#程序与数据流（DataFlow）" class="headerlink" title="程序与数据流（DataFlow）"></a>程序与数据流（DataFlow）</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181711447.png" alt="image-20210209181711447"></p><p>• 所有的Flink程序都是由三部分组成的： Source 、Transformation 和 Sink。</p><p> • Source 负责读取数据源，Transformation 利用各种算子进行处理加工，Sink 负责输出</p><p>• 在运行时，Flink上运行的程序会被映射成“逻辑数据流”（dataflows），它包 含了这三部分 </p><p>• 每一个dataflow以一个或多个sources开始以一个或多个sinks结束。dataflow 类似于任意的有向无环图（DAG） </p><p>• 在大部分情况下，程序中的转换运算（transformations）跟dataflow中的算子 （operator）是一一对应的关系</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209184826111.png" alt="image-20210209184826111"></p><h2 id="执行图（ExecutionGraph）"><a href="#执行图（ExecutionGraph）" class="headerlink" title="执行图（ExecutionGraph）"></a>执行图（ExecutionGraph）</h2><p>• Flink 中的执行图可以分成四层：StreamGraph -&gt; JobGraph -&gt; ExecutionGraph -&gt; 物理执行图 </p><p>➢ StreamGraph：是根据用户通过 Stream API 编写的代码生成的最初的图。用来 表示程序的拓扑结构。 </p><p>➢ JobGraph：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点 </p><p>➢ ExecutionGraph：JobManager 根据 JobGraph 生成ExecutionGraph。 ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。 </p><p>➢ 物理执行图：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个 TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181825800.png" alt="image-20210209181825800"></p><h2 id="数据传输形式"><a href="#数据传输形式" class="headerlink" title="数据传输形式"></a>数据传输形式</h2><p>• 一个程序中，不同的算子可能具有不同的并行度</p><p> • 算子之间传输数据的形式可以是 one-to-one (forwarding) 的模式也可以是 redistributing 的模式，具体是哪一种形式，取决于算子的种类 </p><p>➢ One-to-one：stream维护着分区以及元素的顺序（比如source和map之间）。 这意味着map 算子的子任务看到的元素的个数以及顺序跟 source 算子的子任务 生产的元素的个数、顺序相同。map、fliter、flatMap等算子都是one-to-one 的对应关系。</p><p> ➢ Redistributing：stream的分区会发生改变。每一个算子的子任务依据所选择的 transformation发送数据到不同的目标任务。例如，keyBy 基于 hashCode 重 分区、而 broadcast 和 rebalance 会随机重新分区，这些算子都会引起 redistribute过程，而 redistribute 过程就类似于 Spark 中的 shuffle 过程。</p><h2 id="任务链（Operator-Chains）"><a href="#任务链（Operator-Chains）" class="headerlink" title="任务链（Operator Chains）"></a>任务链（Operator Chains）</h2><p>• Flink 采用了一种称为任务链的优化技术，可以在特定条件下减少本地 通信的开销。为了满足任务链的要求，必须将两个或多个算子设为相同 的并行度，并通过本地转发（local forward）的方式进行连接</p><p> • 相同并行度的 one-to-one 操作，Flink 这样相连的算子链接在一起形 成一个 task，原来的算子成为里面的 subtask </p><p>• 并行度相同、并且是 one-to-one 操作，两个条件缺一不可</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210209181940656.png" alt="image-20210209181940656"></p><h1 id="流处理API"><a href="#流处理API" class="headerlink" title="流处理API"></a>流处理API</h1><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>1.Flink中你可以使用StreamExecutionEnvironment.getExecutionEnvironment创建l流式程序的运行环境。<br>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br></pre></td></tr></table></figure><p>2.如果没有设置并行度，会以Flink-conf.yaml文件的配置为准，默认为1。<br>3.createLocalEnvironment，返回本地执行环境，需要在调用时指定并行度。<br>4.createRemoteEnvirometn，返回集群的运行环境，将Jar提交到远程服务器。需要在调用时指定JobManager的IP和端口号，并制定在集群中运行的Jar包。</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><h3 id="fromCollection"><a href="#fromCollection" class="headerlink" title="fromCollection"></a>fromCollection</h3><p>从集合中读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传感器温度读数的数据类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性：id，时间戳，温度值</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> Long timestamp;</span><br><span class="line">    <span class="keyword">private</span> Double temperature;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SensorReading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SensorReading</span><span class="params">(String id, Long timestamp, Double temperature)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp</span><span class="params">(Long timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemperature</span><span class="params">(Double temperature)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SensorReading&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line">                <span class="string">&quot;, temperature=&quot;</span> + temperature +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从集合中读取数据</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = env.fromCollection(Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_1&quot;</span>, <span class="number">1547718199L</span>, <span class="number">35.8</span>),</span><br><span class="line">                <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_6&quot;</span>, <span class="number">1547718201L</span>, <span class="number">15.4</span>),</span><br><span class="line">                <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_7&quot;</span>, <span class="number">1547718202L</span>, <span class="number">6.7</span>),</span><br><span class="line">                <span class="keyword">new</span> SensorReading(<span class="string">&quot;sensor_10&quot;</span>, <span class="number">1547718205L</span>, <span class="number">38.1</span>)</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Integer&gt; integerDataStream = env.fromElements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">189</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        dataStream.print(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        integerDataStream.print(<span class="string">&quot;int&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"><span class="keyword">int</span>&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">int</span>&gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">int</span>&gt; <span class="number">4</span></span><br><span class="line"><span class="keyword">int</span>&gt; <span class="number">67</span></span><br><span class="line"><span class="keyword">int</span>&gt; <span class="number">189</span></span><br><span class="line">data&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">data&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">data&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">data&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="readTextFile"><a href="#readTextFile" class="headerlink" title="readTextFile"></a>readTextFile</h3><p>从文件中读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; dataStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        dataStream.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">sensor_1,<span class="number">1547718199</span>,<span class="number">35.8</span></span><br><span class="line">sensor_6,<span class="number">1547718201</span>,<span class="number">15.4</span></span><br><span class="line">sensor_7,<span class="number">1547718202</span>,<span class="number">6.7</span></span><br><span class="line">sensor_10,<span class="number">1547718205</span>,<span class="number">38.1</span></span><br><span class="line">sensor_1,<span class="number">1547718207</span>,<span class="number">36.3</span></span><br><span class="line">sensor_1,<span class="number">1547718209</span>,<span class="number">32.8</span></span><br><span class="line">sensor_1,<span class="number">1547718212</span>,<span class="number">37.1</span></span><br></pre></td></tr></table></figure><h3 id="FlinkKafkaConsumer"><a href="#FlinkKafkaConsumer" class="headerlink" title="FlinkKafkaConsumer"></a>FlinkKafkaConsumer</h3><p>从kafka中读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.110.110:9092&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据  管道名称  连接方法  配置信息</span></span><br><span class="line">        DataStream&lt;String&gt; dataStream = env.addSource( <span class="keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(<span class="string">&quot;sensor&quot;</span>, <span class="keyword">new</span> SimpleStringSchema(), properties));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        dataStream.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1ec7322ad2ae90e6dd85ba759435bc50.png" alt="image-20201231112444563"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/1ec7322ad2ae90e6dd85ba759435bc50.png" alt="image-20201231112501759"></p><h3 id="SourceFunction"><a href="#SourceFunction" class="headerlink" title="SourceFunction"></a>SourceFunction</h3><p>自定义数据来源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.SourceFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建执行环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = env.addSource( <span class="keyword">new</span> MySensorSource() );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        dataStream.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的SourceFunction</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySensorSource</span> <span class="keyword">implements</span> <span class="title">SourceFunction</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个标识位，用来控制数据的产生</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;SensorReading&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 定义一个随机数发生器</span></span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置10个传感器的初始温度</span></span><br><span class="line">            HashMap&lt;String, Double&gt; sensorTempMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )&#123;</span><br><span class="line">                sensorTempMap.put(<span class="string">&quot;sensor_&quot;</span> + (i+<span class="number">1</span>), <span class="number">60</span> + random.nextGaussian() * <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (running)&#123;</span><br><span class="line">                <span class="keyword">for</span>( String sensorId: sensorTempMap.keySet() )&#123;</span><br><span class="line">                    <span class="comment">// 在当前温度基础上随机波动</span></span><br><span class="line">                    Double newtemp = sensorTempMap.get(sensorId) + random.nextGaussian();</span><br><span class="line">                    sensorTempMap.put(sensorId, newtemp);</span><br><span class="line">                    ctx.collect(<span class="keyword">new</span> SensorReading(sensorId, System.currentTimeMillis(), newtemp));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 控制输出频率</span></span><br><span class="line">                Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            running = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">61.48794806847098</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_4&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">41.17315799659017</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">60.646840931571724</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_2&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">76.26340337275492</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">71.9787630892099</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_8&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">57.1961185158635</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_5&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">49.45034930571155</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">90.86870265386753</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_9&#x27;</span>, timestamp=<span class="number">1609393775349</span>, temperature=<span class="number">56.67807942587405</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Transform转换算子"><a href="#Transform转换算子" class="headerlink" title="Transform转换算子"></a>Transform转换算子</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>1对1转换。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/935c7bdc2aa815e8144a679e1f1633a2.png" alt="image-20201231135930774"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// map，把String转换成长度输出</span></span><br><span class="line">        DataStream&lt;Integer&gt; mapStream = inputStream.map(<span class="keyword">new</span> MapFunction&lt;String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        mapStream.print(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">map&gt; <span class="number">24</span></span><br><span class="line">map&gt; <span class="number">24</span></span><br><span class="line">map&gt; <span class="number">23</span></span><br><span class="line">map&gt; <span class="number">25</span></span><br><span class="line">map&gt; <span class="number">24</span></span><br><span class="line">map&gt; <span class="number">24</span></span><br><span class="line">map&gt; <span class="number">24</span></span><br></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>1对多转换。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/c471a1c1a8dc2927a11b6f77ba853e32.png" alt="E6iVM8KHzYrDTy2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flatmap，按逗号分字段</span></span><br><span class="line">        DataStream&lt;String&gt; flatMapStream = inputStream.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String value, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] fields = value.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>( String field: fields )</span><br><span class="line">                    out.collect(field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        flatMapStream.print(<span class="string">&quot;flatMap&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">flatMap&gt; sensor_1</span><br><span class="line">flatMap&gt; <span class="number">1547718199</span></span><br><span class="line">flatMap&gt; <span class="number">35.8</span></span><br><span class="line">flatMap&gt; sensor_6</span><br><span class="line">flatMap&gt; <span class="number">1547718201</span></span><br><span class="line">flatMap&gt; <span class="number">15.4</span></span><br><span class="line">flatMap&gt; sensor_7</span><br><span class="line">flatMap&gt; <span class="number">1547718202</span></span><br><span class="line">flatMap&gt; <span class="number">6.7</span></span><br><span class="line">flatMap&gt; sensor_10</span><br><span class="line">flatMap&gt; <span class="number">1547718205</span></span><br><span class="line">flatMap&gt; <span class="number">38.1</span></span><br><span class="line">flatMap&gt; sensor_1</span><br><span class="line">flatMap&gt; <span class="number">1547718207</span></span><br><span class="line">flatMap&gt; <span class="number">36.3</span></span><br><span class="line">flatMap&gt; sensor_1</span><br><span class="line">flatMap&gt; <span class="number">1547718209</span></span><br><span class="line">flatMap&gt; <span class="number">32.8</span></span><br><span class="line">flatMap&gt; sensor_1</span><br><span class="line">flatMap&gt; <span class="number">1547718212</span></span><br><span class="line">flatMap&gt; <span class="number">37.1</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>过滤转换。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/363ccd8cba633a84616449e876258aab.png" alt="image-20201231140031077"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FilterFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// filter, 筛选sensor_1开头的id对应的数据</span></span><br><span class="line">        DataStream&lt;String&gt; filterStream = inputStream.filter(<span class="keyword">new</span> FilterFunction&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value.startsWith(<span class="string">&quot;sensor_1,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出</span></span><br><span class="line">        filterStream.print(<span class="string">&quot;filter&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">filter&gt; sensor_1,<span class="number">1547718199</span>,<span class="number">35.8</span></span><br><span class="line">filter&gt; sensor_1,<span class="number">1547718207</span>,<span class="number">36.3</span></span><br><span class="line">filter&gt; sensor_1,<span class="number">1547718209</span>,<span class="number">32.8</span></span><br><span class="line">filter&gt; sensor_1,<span class="number">1547718212</span>,<span class="number">37.1</span></span><br></pre></td></tr></table></figure><h3 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h3><p>分组转换。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/063f2254b608759b973f780b89b3346e.png" alt="image-20201231140440813"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.KeyedStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map( line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;SensorReading, String&gt; keyedStream = dataStream.keyBy(data -&gt; data.getId());</span><br><span class="line"></span><br><span class="line">        keyedStream.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718212</span>, temperature=<span class="number">37.1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Rolling-Aggregation"><a href="#Rolling-Aggregation" class="headerlink" title="Rolling Aggregation"></a>Rolling Aggregation</h3><p>sum,max,min,maxby,minby。</p><p>都是常用的聚合操作，需要和KeyBy合用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.KeyedStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map( line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;SensorReading, String&gt; keyedStream = dataStream.keyBy(data -&gt; data.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sum</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; sumStream = keyedStream.sum(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line">        sumStream.print(<span class="string">&quot;sum&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// max</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; maxStream = keyedStream.max(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line">        maxStream.print(<span class="string">&quot;max&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// min</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; minStream = keyedStream.min(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line">        minStream.print(<span class="string">&quot;min&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// maxBy</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; maxByStream = keyedStream.maxBy(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line">        maxByStream.print(<span class="string">&quot;maxBy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// minBy</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; minByStream = keyedStream.minBy(<span class="string">&quot;temperature&quot;</span>);</span><br><span class="line">        minByStream.print(<span class="string">&quot;minBy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">sum&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">sum&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">sum&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">sum&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">sum&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">72.1</span>&#125;</span><br><span class="line">sum&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">104.9</span>&#125;</span><br><span class="line">sum&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">142.0</span>&#125;</span><br><span class="line"></span><br><span class="line">max&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">max&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">max&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">max&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">max&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">max&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">max&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">37.1</span>&#125;</span><br><span class="line"></span><br><span class="line">min&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">min&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">min&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">min&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">min&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">min&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">min&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line"></span><br><span class="line">maxBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">maxBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">maxBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">maxBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">maxBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">maxBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">maxBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718212</span>, temperature=<span class="number">37.1</span>&#125;</span><br><span class="line"></span><br><span class="line">minBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">minBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">minBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">minBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">minBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">minBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">minBy&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.ReduceFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.KeyedStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map( line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;SensorReading, String&gt; keyedStream = dataStream.keyBy(data -&gt; data.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reduce 聚合，取最小的温度值，并输出当前的时间戳</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; reduceStream = keyedStream.reduce(<span class="keyword">new</span></span><br><span class="line">            ReduceFunction&lt;SensorReading&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> SensorReading <span class="title">reduce</span><span class="params">(SensorReading value1, SensorReading value2)</span></span></span><br><span class="line"><span class="function">                        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(</span><br><span class="line">                            value1.getId(),</span><br><span class="line">                            value2.getTimestamp(),</span><br><span class="line">                            Math.min(value1.getTemperature(), value2.getTemperature()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        reduceStream.print(<span class="string">&quot;reduce&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">reduce&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">reduce&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">reduce&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">reduce&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">reduce&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">reduce&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">reduce&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718212</span>, temperature=<span class="number">32.8</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Split-on-select"><a href="#Split-on-select" class="headerlink" title="Split on select"></a>Split on select</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.collector.selector.OutputSelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SplitStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分流，按照温度值30度为界分为两条流</span></span><br><span class="line">        SplitStream&lt;SensorReading&gt; splitStream = dataStream.split(<span class="keyword">new</span> OutputSelector&lt;SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(SensorReading value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (value.getTemperature() &gt; <span class="number">30</span>) ? Collections.singletonList(<span class="string">&quot;high&quot;</span>) : Collections.singletonList(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 查询，查询不同的流</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; highTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; lowTempStream = splitStream.select(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; allTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line"></span><br><span class="line">        highTempStream.print(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">        lowTempStream.print(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">        allTempStream.print(<span class="string">&quot;all&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">    </span><br><span class="line">high&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">all&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">all&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">low&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">all&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">low&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">high&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">all&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">high&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">all&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">high&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">all&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">high&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718212</span>, temperature=<span class="number">37.1</span>&#125;</span><br><span class="line">all&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718212</span>, temperature=<span class="number">37.1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Connect-on-CoMap"><a href="#Connect-on-CoMap" class="headerlink" title="Connect on CoMap"></a><strong>Connect</strong> on CoMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.collector.selector.OutputSelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SplitStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分流，按照温度值30度为界分为两条流</span></span><br><span class="line">        SplitStream&lt;SensorReading&gt; splitStream = dataStream.split(<span class="keyword">new</span> OutputSelector&lt;SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(SensorReading value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (value.getTemperature() &gt; <span class="number">30</span>) ? Collections.singletonList(<span class="string">&quot;high&quot;</span>) : Collections.singletonList(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; highTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; lowTempStream = splitStream.select(<span class="string">&quot;low&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合流 connect，将高温流转换成二元组类型，与低温流连接合并之后，输出状态信息</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Double&gt;&gt; warningStream = highTempStream.map(<span class="keyword">new</span> MapFunction&lt;SensorReading, Tuple2&lt;String, Double&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Double&gt; <span class="title">map</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getId(), value.getTemperature());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ConnectedStreams&lt;Tuple2&lt;String, Double&gt;, SensorReading&gt; connectedStreams = warningStream.connect(lowTempStream);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Object&gt; resultStream = connectedStreams.map(<span class="keyword">new</span> CoMapFunction&lt;Tuple2&lt;String, Double&gt;, SensorReading, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">map1</span><span class="params">(Tuple2&lt;String, Double&gt; value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple3&lt;&gt;(value.f0, value.f1, <span class="string">&quot;high temp warning&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">map2</span><span class="params">(SensorReading value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(value.getId(), <span class="string">&quot;normal&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        warningStream.print(<span class="string">&quot;Connect&quot;</span>);</span><br><span class="line">        resultStream.print(<span class="string">&quot;CoMap&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">    </span><br><span class="line">Connect&gt; (sensor_1,<span class="number">35.8</span>)</span><br><span class="line">Connect&gt; (sensor_10,<span class="number">38.1</span>)</span><br><span class="line">Connect&gt; (sensor_1,<span class="number">36.3</span>)</span><br><span class="line">Connect&gt; (sensor_1,<span class="number">32.8</span>)</span><br><span class="line">Connect&gt; (sensor_1,<span class="number">37.1</span>)</span><br><span class="line">CoMap&gt; (sensor_1,<span class="number">35.8</span>,high temp warning)</span><br><span class="line">CoMap&gt; (sensor_6,normal)</span><br><span class="line">CoMap&gt; (sensor_10,<span class="number">38.1</span>,high temp warning)</span><br><span class="line">CoMap&gt; (sensor_7,normal)</span><br><span class="line">CoMap&gt; (sensor_1,<span class="number">36.3</span>,high temp warning)</span><br><span class="line">CoMap&gt; (sensor_1,<span class="number">32.8</span>,high temp warning)</span><br><span class="line">CoMap&gt; (sensor_1,<span class="number">37.1</span>,high temp warning)</span><br></pre></td></tr></table></figure><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple3;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.collector.selector.OutputSelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.ConnectedStreams;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SplitStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.CoMapFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分流，按照温度值30度为界分为两条流</span></span><br><span class="line">        SplitStream&lt;SensorReading&gt; splitStream = dataStream.split(<span class="keyword">new</span> OutputSelector&lt;SensorReading&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(SensorReading value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (value.getTemperature() &gt; <span class="number">30</span>) ? Collections.singletonList(<span class="string">&quot;high&quot;</span>) : Collections.singletonList(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; highTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; lowTempStream = splitStream.select(<span class="string">&quot;low&quot;</span>);</span><br><span class="line">        DataStream&lt;SensorReading&gt; allTempStream = splitStream.select(<span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. union联合多条流</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; unionStream = highTempStream.union(lowTempStream, allTempStream);</span><br><span class="line">        unionStream.print(<span class="string">&quot;union&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718212</span>, temperature=<span class="number">37.1</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718199</span>, temperature=<span class="number">35.8</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_6&#x27;</span>, timestamp=<span class="number">1547718201</span>, temperature=<span class="number">15.4</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_7&#x27;</span>, timestamp=<span class="number">1547718202</span>, temperature=<span class="number">6.7</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_10&#x27;</span>, timestamp=<span class="number">1547718205</span>, temperature=<span class="number">38.1</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718207</span>, temperature=<span class="number">36.3</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718209</span>, temperature=<span class="number">32.8</span>&#125;</span><br><span class="line">union&gt; SensorReading&#123;id=<span class="string">&#x27;sensor_1&#x27;</span>, timestamp=<span class="number">1547718212</span>, temperature=<span class="number">37.1</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h2><p>Flink 没有类似于 spark 中 foreach 方法，让用户进行迭代的操作。虽有对外的输出操作都要利用 Sink 完成。最后通过类似如下方式完成整个任务最终输出操作。</p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConnector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.110.110:9092&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从kafka接受数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.addSource( <span class="keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(<span class="string">&quot;sensor&quot;</span>, <span class="keyword">new</span> SimpleStringSchema(), properties));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;String&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>])).toString();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出到kafka</span></span><br><span class="line">        dataStream.addSink( <span class="keyword">new</span> FlinkKafkaProducer&lt;String&gt;(<span class="string">&quot;192.168.110.110:9092&quot;</span>, <span class="string">&quot;sinktest&quot;</span>, <span class="keyword">new</span> SimpleStringSchema()));</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/a6d221abebc786de137857fae977eb13.png" alt="image-20210104155850424"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/42f607691af16502f616aa4125cf3122.png" alt="image-20210104160059014"></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>导入jar包：flink-connector-redis_2.10-1.1.5.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.RedisSink;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.config.FlinkJedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommand;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommandDescription;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConnector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义jedis连接配置</span></span><br><span class="line">        org.apache.flink.streaming.connectors.redis.common.config.FlinkJedisPoolConfig config = <span class="keyword">new</span> FlinkJedisPoolConfig.Builder()</span><br><span class="line">                .setHost(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">                .setPort(<span class="number">6379</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        dataStream.addSink( <span class="keyword">new</span> RedisSink&lt;&gt;(config, <span class="keyword">new</span> MyRedisMapper()));</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义RedisMapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisMapper</span> <span class="keyword">implements</span> <span class="title">RedisMapper</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 定义保存数据到redis的命令，存成Hash表，hset表类型 sensor_temp表名 id字段名 temperature字段名</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RedisCommandDescription <span class="title">getCommandDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RedisCommandDescription(RedisCommand.HSET, <span class="string">&quot;sensor_temp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getKeyFromData</span><span class="params">(SensorReading data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data.getId();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getValueFromData</span><span class="params">(SensorReading data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data.getTemperature().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.RuntimeContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Requests;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsConnector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件读取数据</span></span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;..\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义es的连接配置</span></span><br><span class="line">        ArrayList&lt;HttpHost&gt; httpHosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        httpHosts.add(<span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>));</span><br><span class="line"></span><br><span class="line">        dataStream.addSink(<span class="keyword">new</span> ElasticsearchSink.Builder&lt;SensorReading&gt;(httpHosts, <span class="keyword">new</span> MyEsSinkFunction()).build());</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的ES写入操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEsSinkFunction</span> <span class="keyword">implements</span> <span class="title">ElasticsearchSinkFunction</span>&lt;<span class="title">SensorReading</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(SensorReading element, RuntimeContext ctx, RequestIndexer indexer)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 定义写入的数据source</span></span><br><span class="line">            HashMap&lt;String, String&gt; dataSource = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            dataSource.put(<span class="string">&quot;id&quot;</span>, element.getId());</span><br><span class="line">            dataSource.put(<span class="string">&quot;temp&quot;</span>, element.getTemperature().toString());</span><br><span class="line">            dataSource.put(<span class="string">&quot;ts&quot;</span>, element.getTimestamp().toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建请求，作为向es发起的写入命令</span></span><br><span class="line">            IndexRequest indexRequest = Requests.indexRequest()</span><br><span class="line">                    .index(<span class="string">&quot;sensor&quot;</span>)</span><br><span class="line">                    .type(<span class="string">&quot;readingdata&quot;</span>)</span><br><span class="line">                    .source(dataSource);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用index发送请求</span></span><br><span class="line">            indexer.add(indexRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ts.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.sink.RichSinkFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConnector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = env.addSource(<span class="keyword">new</span> SourceTest.MySensorSource());</span><br><span class="line"></span><br><span class="line">        dataStream.addSink(<span class="keyword">new</span> MyJdbcSink());</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的SinkFunction</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJdbcSink</span> <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>&lt;<span class="title">SensorReading</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 声明连接和预编译语句</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement insertStmt = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement updateStmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            insertStmt = connection.prepareStatement(<span class="string">&quot;insert into sensor_temp (id, temp) values (?, ?)&quot;</span>);</span><br><span class="line">            updateStmt = connection.prepareStatement(<span class="string">&quot;update sensor_temp set temp = ? where id = ?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每来一条数据，调用连接，执行sql</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(SensorReading value, Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 直接执行更新语句，如果没有更新那么就插入</span></span><br><span class="line">            updateStmt.setDouble(<span class="number">1</span>, value.getTemperature());</span><br><span class="line">            updateStmt.setString(<span class="number">2</span>, value.getId());</span><br><span class="line">            updateStmt.execute();</span><br><span class="line">            <span class="keyword">if</span>( updateStmt.getUpdateCount() == <span class="number">0</span> )&#123;</span><br><span class="line">                insertStmt.setString(<span class="number">1</span>, value.getId());</span><br><span class="line">                insertStmt.setDouble(<span class="number">2</span>, value.getTemperature());</span><br><span class="line">                insertStmt.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            insertStmt.close();</span><br><span class="line">            updateStmt.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="window-API"><a href="#window-API" class="headerlink" title="window API"></a>window API</h1><h2 id="window概念"><a href="#window概念" class="headerlink" title="window概念"></a>window概念</h2><h3 id="窗口（window）"><a href="#窗口（window）" class="headerlink" title="窗口（window）"></a>窗口（window）</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105120180.png" alt="image-20210211105120180"></p><p>• 一般真实的流都是无界的，怎样处理无界的数据？ </p><p>• 可以把无限的数据流进行切分，得到有限的数据集进行处理 —— 也 就是得到有界流 </p><p>• 窗口（window）就是将无限流切割为有限流的一种方式，它会将流 数据分发到有限大小的桶（bucket）中进行分析</p><h2 id="window类型"><a href="#window类型" class="headerlink" title="window类型"></a>window类型</h2><p>• 时间窗口（Time Window）</p><p> ➢ 滚动时间窗口 </p><p>➢ 滑动时间窗口 </p><p>➢ 会话窗口 </p><p>• 计数窗口（Count Window） </p><p>➢ 滚动计数窗口 </p><p>➢ 滑动计数窗口</p><h3 id="滚动窗口（Tumbling-Windows）"><a href="#滚动窗口（Tumbling-Windows）" class="headerlink" title="滚动窗口（Tumbling Windows）"></a>滚动窗口（Tumbling Windows）</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105308382.png" alt="image-20210211105308382"></p><p>• 将数据依据固定的窗口长度对数据进行切分 </p><p>• 时间对齐，窗口长度固定，没有重叠</p><h3 id="滑动窗口（Sliding-Windows）"><a href="#滑动窗口（Sliding-Windows）" class="headerlink" title="滑动窗口（Sliding Windows）"></a>滑动窗口（Sliding Windows）</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105346374.png" alt="image-20210211105346374"></p><p>• 滑动窗口是固定窗口的更广义的一种形式，滑动窗口由固定的窗口 长度和滑动间隔组成</p><p> • 窗口长度固定，可以有重叠</p><h3 id="会话窗口（Session-Windows）"><a href="#会话窗口（Session-Windows）" class="headerlink" title="会话窗口（Session Windows）"></a>会话窗口（Session Windows）</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105422109.png" alt="image-20210211105422109"></p><p>• 由一系列事件组合一个指定时间长度的 timeout 间隙组成，也就 是一段时间没有接收到新数据就会生成新的窗口 </p><p>• 特点：时间无对齐</p><h2 id="window-API-1"><a href="#window-API-1" class="headerlink" title="window API"></a>window API</h2><p>• 窗口分配器 —— window() 方法 </p><p>➢ 我们可以用 .window() 来定义一个窗口，然后基于这个 window 去做一些聚 合或者其它处理操作。注意 window () 方法必须在 keyBy 之后才能用。 </p><p>➢ Flink 提供了更加简单的 .timeWindow 和 .countWindow 方法，用于定义 时间窗口和计数窗口。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105520629.png" alt="image-20210211105520629"></p><h2 id="窗口分配器（window-assigner）"><a href="#窗口分配器（window-assigner）" class="headerlink" title="窗口分配器（window assigner）"></a>窗口分配器（window assigner）</h2><p>• window() 方法接收的输入参数是一个 WindowAssigner </p><p>• WindowAssigner 负责将每条输入的数据分发到正确的 window 中</p><p> • Flink 提供了通用的 WindowAssigner</p><p> ➢ 滚动窗口（tumbling window）</p><p> ➢ 滑动窗口（sliding window）</p><p> ➢ 会话窗口（session window）</p><p> ➢ 全局窗口（global window）</p><h2 id="创建不同类型的窗口"><a href="#创建不同类型的窗口" class="headerlink" title="创建不同类型的窗口"></a>创建不同类型的窗口</h2><p>• 滚动时间窗口（tumbling time window）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105639638.png" alt="image-20210211105639638"></p><p> • 滑动时间窗口（sliding time window）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105648981.png" alt="image-20210211105648981"></p><p> • 会话窗口（session window）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105700468.png" alt="image-20210211105700468"></p><p>• 滚动计数窗口（tumbling count window） </p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105803908.png" alt="image-20210211105803908"></p><p>• 滑动计数窗口（sliding count window）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211105812517.png" alt="image-20210211105812517"></p><h2 id="窗口函数（window-function）"><a href="#窗口函数（window-function）" class="headerlink" title="窗口函数（window function）"></a>窗口函数（window function）</h2><p>• window function 定义了要对窗口中收集的数据做的计算操作</p><p> • 可以分为两类 </p><p>➢ 增量聚合函数（incremental aggregation functions） </p><p>• 每条数据到来就进行计算，保持一个简单的状态 </p><p>• ReduceFunction, AggregateFunction</p><p> ➢ 全窗口函数（full window functions）</p><p> • 先把窗口所有数据收集起来，等到计算的时候会遍历所有数据</p><p> • ProcessWindowFunction，WindowFunction</p><h2 id="其它可选-API"><a href="#其它可选-API" class="headerlink" title="其它可选 API"></a>其它可选 API</h2><p>• .trigger() —— 触发器 </p><p>➢ 定义 window 什么时候关闭，触发计算并输出结果 </p><p>• .evictor() —— 移除器 </p><p>➢ 定义移除某些数据的逻辑</p><p> • .allowedLateness() —— 允许处理迟到的数据 </p><p>• .sideOutputLateData() —— 将迟到的数据放入侧输出流</p><p> • .getSideOutput() —— 获取侧输出流</p><h1 id="Flink-中的-时间语义和-watermark"><a href="#Flink-中的-时间语义和-watermark" class="headerlink" title="Flink 中的 时间语义和 watermark"></a>Flink 中的 时间语义和 watermark</h1><h2 id="Flink-中的时间语义"><a href="#Flink-中的时间语义" class="headerlink" title="Flink 中的时间语义"></a>Flink 中的时间语义</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211125329491.png" alt="image-20210211125329491"></p><p>• Event Time：事件创建的时间 </p><p>• Ingestion Time：数据进入Flink的时间 </p><p>• Processing Time：执行操作算子的本地系统时间，与机器相关</p><blockquote><p>哪种时间语义更重要</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135151112.png" alt="image-20210211135151112"></p><p>• 不同的时间语义有不同的应用场合 </p><p>• 我们往往更关心事件时间（Event Time）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135225595.png" alt="image-20210211135225595"></p><p>• 某些应用场合，不应该使用 Processing Time </p><p>• Event Time 可以从日志数据的时间戳（timestamp）中提取 ➢ 2017-11-02 18:37:15.624 INFO Fail over to rm</p><h2 id="在代码中设置-Event-Time"><a href="#在代码中设置-Event-Time" class="headerlink" title="在代码中设置 Event Time"></a>在代码中设置 Event Time</h2><p> • 我们可以直接在代码中，对执行环境调用 setStreamTimeCharacteristic 方法，设置流的时间特性</p><p> • 具体的时间，还需要从数据中提取时间戳（timestamp）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135316379.png" alt="image-20210211135316379"></p><h2 id="乱序数据的影响"><a href="#乱序数据的影响" class="headerlink" title="乱序数据的影响"></a>乱序数据的影响</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135333148.png" alt="image-20210211135333148"></p><p>• 当 Flink 以 Event Time 模式处理数据流时，它会根据数据里的时间戳来 处理基于时间的算子</p><p>• 由于网络、分布式等原因，会导致乱序数据的产生</p><p>• 乱序数据会让窗口计算不准确</p><h2 id="水位线（Watermark）"><a href="#水位线（Watermark）" class="headerlink" title="水位线（Watermark）"></a>水位线（Watermark）</h2><p>➢ 怎样避免乱序数据带来计算不正确？</p><p> ➢ 遇到一个时间戳达到了窗口关闭时间，不应该立刻触发窗口计算，而是等 待一段时间，等迟到的数据来了再关闭窗口 • Watermark 是一种衡量 Event Time 进展的机制，可以设定延迟触发</p><p> • Watermark 是用于处理乱序事件的，而正确的处理乱序事件，通常用 Watermark 机制结合 window 来实现； </p><p>• 数据流中的 Watermark 用于表示 timestamp 小于 Watermark 的数据， 都已经到达了，因此，window 的执行也是由 Watermark 触发的。</p><p> • watermark 用来让程序自己平衡延迟和结果正确性</p><blockquote><p>watermark 的特点</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135502739.png" alt="image-20210211135502739"></p><p>• watermark 是一条特殊的数据记录 </p><p>• watermark 必须单调递增，以确保任务的事件时间时钟在向前推进，而 不是在后退</p><p> • watermark 与数据的时间戳相关</p><blockquote><p>watermark 的传递</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135533341.png" alt="image-20210211135533341"></p><h2 id="watermark-的引入"><a href="#watermark-的引入" class="headerlink" title="watermark 的引入"></a>watermark 的引入</h2><p>• Event Time 的使用一定要指定数据源中的时间戳 </p><p>• 调用 assignTimestampAndWatermarks 方法，传入一个 BoundedOutOfOrdernessTimestampExtractor，就可以指定</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135556728.png" alt="image-20210211135556728"></p><p>• 对于排好序的数据，不需要延迟触发，可以只指定时间戳就行了</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135612628.png" alt="image-20210211135612628"></p><p>• Flink 暴露了 TimestampAssigner 接口供我们实现，使我们可以自定义 如何从事件数据中抽取时间戳和生成watermark</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211135628476.png" alt="image-20210211135628476"></p><p>➢ MyAssigner 可以有两种类型，都继承自 TimestampAssigner</p><h2 id="TimestampAssigner"><a href="#TimestampAssigner" class="headerlink" title="TimestampAssigner"></a>TimestampAssigner</h2><p>• 定义了抽取时间戳，以及生成 watermark 的方法，有两种类型</p><p> ➢ AssignerWithPeriodicWatermarks</p><p> • 周期性的生成 watermark：系统会周期性的将 watermark 插入到流中 </p><p>• 默认周期是200毫秒，可以使用 ExecutionConfig.setAutoWatermarkInterval() 方法进行设置</p><p> • 升序和前面乱序的处理 BoundedOutOfOrdernessTimestampExtractor， 都是基于周期性 watermark 的。 </p><p>➢ AssignerWithPunctuatedWatermarks</p><p> • 没有时间周期规律，可打断的生成 watermark</p><h2 id="watermark-的设定"><a href="#watermark-的设定" class="headerlink" title="watermark 的设定"></a>watermark 的设定</h2><p>• 在 Flink 中，watermark 由应用程序开发人员生成，这通常需要对相应 的领域有一定的了解 </p><p>• 如果watermark设置的延迟太久，收到结果的速度可能就会很慢，解决 办法是在水位线到达之前输出一个近似结果</p><p> • 而如果watermark到达得太早，则可能收到错误结果，不过 Flink 处理迟 到数据的机制可以解决这个问题</p><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><h2 id="Flink-中的状态"><a href="#Flink-中的状态" class="headerlink" title="Flink 中的状态"></a>Flink 中的状态</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211160618832.png" alt="image-20210211160618832"></p><p> 由一个任务维护，并且用来计算某个结果的所有数据，都属于这个任务的状 态</p><p> • 可以认为状态就是一个本地变量，可以被任务的业务逻辑访问</p><p> • Flink 会进行状态管理，包括状态一致性、故障处理以及高效存储和访问，以 便开发人员可以专注于应用程序的逻辑</p><p>• 在 Flink 中，状态始终与特定算子相关联 </p><p>• 为了使运行时的 Flink 了解算子的状态，算子需要预先注册其状态 </p><p>➢ 总的说来，有两种类型的状态：</p><p> • 算子状态（Operator State）</p><p> • 算子状态的作用范围限定为算子任务 </p><p>• 键控状态（Keyed State） </p><p>• 根据输入数据流中定义的键（key）来维护和访问</p><h2 id="算子状态（Operator-State）"><a href="#算子状态（Operator-State）" class="headerlink" title="算子状态（Operator State）"></a>算子状态（Operator State）</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211160728464.png"></p><p>• 算子状态的作用范围限定为算子任务，由同一并行任务所处理的所有数据都 可以访问到相同的状态</p><p> • 状态对于同一子任务而言是共享的</p><p> • 算子状态不能由相同或不同算子的另一个子任务访问</p><h3 id="算子状态数据结构"><a href="#算子状态数据结构" class="headerlink" title="算子状态数据结构"></a>算子状态数据结构</h3><p>➢ 列表状态（List state） </p><p>• 将状态表示为一组数据的列表 </p><p>➢ 联合列表状态（Union list state）</p><p> • 也将状态表示为数据的列表。它与常规列表状态的区别在于，在发生故 障时，或者从保存点（savepoint）启动应用程序时如何恢复 </p><p>➢ 广播状态（Broadcast state）</p><p> • 如果一个算子有多项任务，而它的每项任务状态又都相同，那么这种特 殊情况最适合应用广播状态。</p><h2 id="键控状态（Keyed-State）"><a href="#键控状态（Keyed-State）" class="headerlink" title="键控状态（Keyed State）"></a>键控状态（Keyed State）</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161001782.png" alt="image-20210211161001782"></p><p>• 键控状态是根据输入数据流中定义的键（key）来维护和访问的 </p><p>• Flink 为每个 key 维护一个状态实例，并将具有相同键的所有数据，都分区到 同一个算子任务中，这个任务会维护和处理这个 key 对应的状态</p><p> • 当任务处理一条数据时，它会自动将状态的访问范围限定为当前数据的 key</p><h3 id="键控状态数据结构"><a href="#键控状态数据结构" class="headerlink" title="键控状态数据结构"></a>键控状态数据结构</h3><p>➢ 值状态（Value state）</p><p> • 将状态表示为单个的值 </p><p>➢ 列表状态（List state）</p><p> • 将状态表示为一组数据的列表 </p><p>➢ 映射状态（Map state）</p><p> • 将状态表示为一组 Key-Value 对</p><p> ➢ 聚合状态（Reducing state &amp; Aggregating State） </p><p>• 将状态表示为一个用于聚合操作的列表</p><h3 id="键控状态的使用"><a href="#键控状态的使用" class="headerlink" title="键控状态的使用"></a>键控状态的使用</h3><p>• 声明一个键控状态</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161131414.png" alt="image-20210211161131414"></p><p>• 读取状态</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161201944.png" alt="image-20210211161201944"></p><p>• 对状态赋值</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161220697.png" alt="image-20210211161220697"></p><h2 id="状态后端（State-Backends）"><a href="#状态后端（State-Backends）" class="headerlink" title="状态后端（State Backends）"></a>状态后端（State Backends）</h2><p>• 每传入一条数据，有状态的算子任务都会读取和更新状态</p><p> • 由于有效的状态访问对于处理数据的低延迟至关重要，因此每个并行 任务都会在本地维护其状态，以确保快速的状态访问 </p><p>• 状态的存储、访问以及维护，由一个可插入的组件决定，这个组件就 叫做状态后端（state backend） </p><p>• 状态后端主要负责两件事：本地的状态管理，以及将检查点 （checkpoint）状态写入远程存储</p><h3 id="选择一个状态后端"><a href="#选择一个状态后端" class="headerlink" title="选择一个状态后端"></a>选择一个状态后端</h3><p>➢ MemoryStateBackend </p><p>• 内存级的状态后端，会将键控状态作为内存中的对象进行管理，将它们存储在 TaskManager 的 JVM 堆上，而将 checkpoint 存储在 JobManager 的内存 中 </p><p>• 特点：快速、低延迟，但不稳定 </p><p>➢ FsStateBackend </p><p>• 将 checkpoint 存到远程的持久化文件系统（FileSystem）上，而对于本地状 态，跟 MemoryStateBackend 一样，也会存在 TaskManager 的 JVM 堆上 </p><p>• 同时拥有内存级的本地访问速度，和更好的容错保证</p><p> ➢ RocksDBStateBackend</p><p> • 将所有状态序列化后，存入本地的 RocksDB 中存储。</p><h1 id="ProcessFunction-API（底层API）"><a href="#ProcessFunction-API（底层API）" class="headerlink" title="ProcessFunction API（底层API）"></a>ProcessFunction API（底层API）</h1><p>我们之前学习的转换算子是无法访问事件的时间戳信息和水位线信息的。而这在一些应用场景下，极为重要。例如MapFunction这样的map转换算子就无法访问时间戳或者当前事件的事件时间。</p><p>   基于此，DataStream API提供了一系列的Low-Level转换算子。可以访问时间戳、watermark以及注册定时事件。还可以输出特定的一些事件，例如超时事件等。              Process Function用来构建事件驱动的应用以及实现自定义的业务逻辑(使用之前的window函数和转换算子无法实现)。例如，Flink SQL就是使用Process Function实现的。</p><p>Flink提供了8个Process Function：</p><p>   •  ProcessFunction</p><p>   •  KeyedProcessFunction</p><p>   •  CoProcessFunction</p><p>   •  ProcessJoinFunction</p><p>   •  BroadcastProcessFunction</p><p>   •  KeyedBroadcastProcessFunction</p><p>   •  ProcessWindowFunction</p><p>   •  ProcessAllWindowFunction</p><h2 id="KeyedProcessFunction"><a href="#KeyedProcessFunction" class="headerlink" title="KeyedProcessFunction"></a>KeyedProcessFunction</h2><p>   这里我们重点介绍KeyedProcessFunction。</p><p>   KeyedProcessFunction用来操作KeyedStream。KeyedProcessFunction会处理流的每一个元素，输出为0个、1个或者多个元素。所有的Process Function都继承自RichFunction接口，所以都有open()、close()和getRuntimeContext()等方法。而KeyedProcessFunction[KEY, IN, OUT]还额外提供了两个方法:</p><p>   •  processElement(v: IN, ctx: Context, out: Collector[OUT]), 流中的每一个元素都会调用这个方法，调用结果将会放在Collector数据类型中输出。Context可以访问元素的时间戳，元素的key，以及TimerService时间服务。Context还可以将结果输出到别的流(side outputs)。</p><p>   •  onTimer(timestamp: Long, ctx: OnTimerContext, out: Collector[OUT])是一个回调函数。当之前注册的定时器触发时调用。参数timestamp为定时器所设定的触发的时间戳。Collector为输出结果的集合。OnTimerContext和processElement的Context参数一样，提供了上下文的一些信息，例如定时器触发的时间信息(事件时间或者处理时间)。</p><h2 id="TimerService-和-定时器（Timers）"><a href="#TimerService-和-定时器（Timers）" class="headerlink" title="TimerService 和 定时器（Timers）"></a>TimerService 和 定时器（Timers）</h2><p>   Context和OnTimerContext所持有的TimerService对象拥有以下方法:</p><p>   •  currentProcessingTime(): Long 返回当前处理时间</p><p>   •  currentWatermark(): Long 返回当前watermark的时间戳</p><p>   •  registerProcessingTimeTimer(timestamp: Long): Unit 会注册当前key的processing time的定时器。当processing time到达定时时间时，触发timer。</p><p>   •  registerEventTimeTimer(timestamp: Long): Unit 会注册当前key的event time 定时器。当水位线大于等于定时器注册的时间时，触发定时器执行回调函数。</p><p>   •  deleteProcessingTimeTimer(timestamp: Long): Unit 删除之前注册处理时间定时器。如果没有这个时间戳的定时器，则不执行。</p><p>   •  deleteEventTimeTimer(timestamp: Long): Unit 删除之前注册的事件时间定时器，如果没有此时间戳的定时器，则不执行。</p><p>   当定时器timer触发时，会执行回调函数onTimer()。注意定时器timer只能在keyed streams上面使用。</p><p>   下面举个例子说明KeyedProcessFunction如何操作KeyedStream。</p><p>   需求：监控温度传感器的温度值，如果温度值在一秒钟之内(processing time)连续上升，则报警。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val warnings &#x3D; readings</span><br><span class="line">.keyBy(_.id)</span><br><span class="line">.process(new TempIncreaseAlertFunction)</span><br></pre></td></tr></table></figure><p>   看一下TempIncreaseAlertFunction如何实现, 程序中使用了ValueState这样一个状态变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class TempIncreaseAlertFunction extends KeyedProcessFunction[String, SensorReading, String] &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 保存上一个传感器温度值</span><br><span class="line">  lazy val lastTemp: ValueState[Double] &#x3D; getRuntimeContext.getState(</span><br><span class="line">  new ValueStateDescriptor[Double](&quot;lastTemp&quot;, Types.of[Double])</span><br><span class="line">  )</span><br><span class="line">  &#x2F;&#x2F; 保存注册的定时器的时间戳</span><br><span class="line"> lazy val currentTimer: ValueState[Long] &#x3D; getRuntimeContext.getState(</span><br><span class="line">    new ValueStateDescriptor[Long](&quot;timer&quot;, Types.of[Long])</span><br><span class="line">  )</span><br><span class="line">  override def processElement(r: SensorReading, ctx: KeyedProcessFunction[String, SensorReading, String]#Context, out: Collector[String]): Unit &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 取出上一次的温度</span><br><span class="line">    val prevTemp &#x3D; lastTemp.value()</span><br><span class="line">    &#x2F;&#x2F; 将当前温度更新到上一次的温度这个变量中</span><br><span class="line">    lastTemp.update(r.temperature)</span><br><span class="line">    val curTimerTimestamp &#x3D; currentTimer.value()</span><br><span class="line">    if (prevTemp &#x3D;&#x3D; 0.0 || r.temperature &lt; prevTemp) &#123;</span><br><span class="line">      &#x2F;&#x2F; 温度下降或者是第一个温度值，删除定时器</span><br><span class="line">      ctx.timerService().deleteProcessingTimeTimer(curTimerTimestamp)</span><br><span class="line">      &#x2F;&#x2F; 清空状态变量</span><br><span class="line">      currentTimer.clear()</span><br><span class="line">    &#125; else if (r.temperature &gt; prevTemp &amp;&amp; curTimerTimestamp &#x3D;&#x3D; 0) &#123;</span><br><span class="line">      &#x2F;&#x2F; 温度上升且我们并没有设置定时器</span><br><span class="line">      val timerTs &#x3D; ctx.timerService().currentProcessingTime() + 1000</span><br><span class="line">      ctx.timerService().registerProcessingTimeTimer(timerTs)</span><br><span class="line">      currentTimer.update(timerTs)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  override def onTimer(ts: Long,</span><br><span class="line">                    ctx: KeyedProcessFunction[String, SensorReading, String]#OnTimerContext,</span><br><span class="line">             out: Collector[String]): Unit &#x3D; &#123;</span><br><span class="line">    out.collect(&quot;传感器id为: &quot; + ctx.getCurrentKey + &quot;的传感器温度值已经连续1s上升了。&quot;)</span><br><span class="line">    currentTimer.clear()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.侧输出流（SideOutput）</p><p>   大部分的DataStream API的算子的输出是单一输出，也就是某种数据类型的流。除了split算子，可以将一条流分成多条流，这些流的数据类型也都相同。process function的side outputs功能可以产生多条流，并且这些流的数据类型可以不一样。一个side output可以定义为OutputTag[X]对象，X是输出流的数据类型。process function可以通过Context对象发射一个事件到一个或者多个side outputs。   下面是一个示例程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val monitoredReadings: DataStream[SensorReading] &#x3D; readings</span><br><span class="line">  .process(new FreezingMonitor)</span><br><span class="line">monitoredReadings</span><br><span class="line">  .getSideOutput(new OutputTag[String](&quot;freezing-alarms&quot;))</span><br><span class="line">  .print()</span><br><span class="line">readings.print()</span><br></pre></td></tr></table></figure><p>   接下来我们实现FreezingMonitor函数，用来监控传感器温度值，将温度值低于32F的温度输出到side output。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class FreezingMonitor extends ProcessFunction[SensorReading, SensorReading] &#123;</span><br><span class="line">  &#x2F;&#x2F; 定义一个侧输出标签</span><br><span class="line">  lazy val freezingAlarmOutput: OutputTag[String] &#x3D;</span><br><span class="line">    new OutputTag[String](&quot;freezing-alarms&quot;)</span><br><span class="line">  override def processElement(r: SensorReading,</span><br><span class="line">                              ctx: ProcessFunction[SensorReading, SensorReading]#Context,</span><br><span class="line">               out: Collector[SensorReading]): Unit &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 温度在32F以下时，输出警告信息</span><br><span class="line">    if (r.temperature &lt; 32.0) &#123;</span><br><span class="line">      ctx.output(freezingAlarmOutput, s&quot;Freezing Alarm for $&#123;r.id&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 所有数据直接常规输出到主流</span><br><span class="line">    out.collect(r)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.CoProcessFunction</p><p>   对于两条输入流，DataStream API提供了CoProcessFunction这样的low-level操作。CoProcessFunction提供了操作每一个输入流的方法: processElement1()和processElement2()。</p><p>   类似于ProcessFunction，这两种方法都通过Context对象来调用。这个Context对象可以访问事件数据，定时器时间戳，TimerService，以及side outputs。CoProcessFunction也提供了onTimer()回调函数。</p><h1 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h1><h2 id="一致性检查点（checkpoint）"><a href="#一致性检查点（checkpoint）" class="headerlink" title="一致性检查点（checkpoint）"></a>一致性检查点（checkpoint）</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161423451.png" alt="image-20210211161423451"></p><p>• Flink 故障恢复机制的核心，就是应用状态的一致性检查点 </p><p>• 有状态流应用的一致检查点，其实就是所有任务的状态，在某个时间点的一份 拷贝（一份快照）；这个时间点，应该是所有任务都恰好处理完一个相同的输 入数据的时候</p><h2 id="从检查点恢复状态"><a href="#从检查点恢复状态" class="headerlink" title="从检查点恢复状态"></a>从检查点恢复状态</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161459417.png" alt="image-20210211161459417"></p><p>•在执行流应用程序期间，Flink 会定期保存状态的一致检查点</p><p> • 如果发生故障， Flink 将会使用最近的检查点来一致恢复应用程序的状态，并 重新启动处理流程</p><p>• 遇到故障之后，第一步就是重启应用</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161822683.png" alt="image-20210211161822683"></p><p>• 第二步是从 checkpoint 中读取状态，将状态重置 </p><p>• 从检查点重新启动应用程序后，其内部状态与检查点完成时的状态完全相同</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211161853107.png" alt="image-20210211161853107"></p><p>• 第三步：开始消费并处理检查点到发生故障之间的所有数据</p><p> • 这种检查点的保存和恢复机制可以为应用程序状态提供“精确一次” （exactly-once）的一致性，因为所有算子都会保存检查点并恢复其所有状 态，这样一来所有的输入流就都会被重置到检查点完成时的位置</p><h2 id="检查点的实现算法"><a href="#检查点的实现算法" class="headerlink" title="检查点的实现算法"></a>检查点的实现算法</h2><p>• 一种简单的想法 </p><p>—— 暂停应用，保存状态到检查点，再重新恢复应用 </p><p>• Flink 的改进实现 —— 基于 Chandy-Lamport 算法的分布式快照 </p><p>—— 将检查点的保存和数据处理分离开，不暂停整个应用</p><h3 id="Flink-检查点算法"><a href="#Flink-检查点算法" class="headerlink" title="Flink 检查点算法"></a>Flink 检查点算法</h3><p>➢ 检查点分界线（Checkpoint Barrier）</p><p> • Flink 的检查点算法用到了一种称为分界线（barrier）的特殊数据形式， 用来把一条流上数据按照不同的检查点分开 </p><p>• 分界线之前到来的数据导致的状态更改，都会被包含在当前分界线所属 的检查点中；而基于分界线之后的数据导致的所有更改，就会被包含在 之后的检查点中</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211162030966.png" alt="image-20210211162030966"></p><p>• 现在是一个有两个输入流的应用程序，用并行的两个 Source 任务来读取</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211162047245.png" alt="image-20210211162047245"></p><p>• JobManager 会向每个 source 任务发送一条带有新检查点 ID 的消息，通过这 种方式来启动检查点</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211162102508.png" alt="image-20210211162102508"></p><p>• 数据源将它们的状态写入检查点，并发出一个检查点 barrier </p><p>• 状态后端在状态存入检查点之后，会返回通知给 source 任务，source 任务就会 向 JobManager 确认检查点完成</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211162123596.png" alt="image-20210211162123596"></p><p>• 分界线对齐：barrier 向下游传递，sum 任务会等待所有输入分区的 barrier 到 达</p><p> • 对于barrier已经到达的分区，继续到达的数据会被缓存</p><p> • 而barrier尚未到达的分区，数据会被正常处理</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211162153028.png" alt="image-20210211162153028"></p><p>• 当收到所有输入分区的 barrier 时，任务就将其状态保存到状态后端的检查点中， 然后将 barrier 继续向下游转发</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211162218883.png" alt="image-20210211162218883"></p><p>• 向下游转发检查点 barrier 后，任务继续正常的数据处理</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211162233203.png" alt="image-20210211162233203"></p><p>• Sink 任务向 JobManager 确认状态保存到 checkpoint 完毕</p><p> • 当所有任务都确认已成功将状态保存到检查点时，检查点就真正完成了</p><h2 id="保存点（Savepoints）"><a href="#保存点（Savepoints）" class="headerlink" title="保存点（Savepoints）"></a>保存点（Savepoints）</h2><p>• Flink 还提供了可以自定义的镜像保存功能，就是保存点（savepoints）</p><p> • 原则上，创建保存点使用的算法与检查点完全相同，因此保存点可以认 为就是具有一些额外元数据的检查点</p><p> • Flink不会自动创建保存点，因此用户（或者外部调度程序）必须明确地 触发创建操作 </p><p>• 保存点是一个强大的功能。除了故障恢复外，保存点可以用于：有计划 的手动备份，更新应用程序，版本迁移，暂停和重启应用，等等</p><h1 id="状态一致性"><a href="#状态一致性" class="headerlink" title="状态一致性"></a>状态一致性</h1><h2 id="状态一致性-1"><a href="#状态一致性-1" class="headerlink" title="状态一致性"></a>状态一致性</h2><blockquote><p>什么是状态一致性</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211233440607.png" alt="image-20210211233440607"></p><p>• 有状态的流处理，内部每个算子任务都可以有自己的状态</p><p> • 对于流处理器内部来说，所谓的状态一致性，其实就是我们所说的计 算结果要保证准确。</p><p> • 一条数据不应该丢失，也不应该重复计算</p><p> • 在遇到故障时可以恢复状态，恢复以后的重新计算，结果应该也是完 全正确的。</p><blockquote><p>状态一致性分类</p></blockquote><p>• AT-MOST-ONCE（最多一次）</p><p>➢ 当任务故障时，最简单的做法是什么都不干，既不恢复丢失的状态，也不重 播丢失的数据。At-most-once 语义的含义是最多处理一次事件。</p><p> • AT-LEAST-ONCE（至少一次） </p><p>➢ 在大多数的真实应用场景，我们希望不丢失事件。这种类型的保障称为 atleast-once，意思是所有的事件都得到了处理，而一些事件还可能被处理多 次。 </p><p>• EXACTLY-ONCE（精确一次）</p><p> ➢ 恰好处理一次是最严格的保证，也是最难实现的。恰好处理一次语义不仅仅 意味着没有事件丢失，还意味着针对每一个数据，内部状态仅仅更新一次。</p><h2 id="一致性检查点（checkpoint）-1"><a href="#一致性检查点（checkpoint）-1" class="headerlink" title="一致性检查点（checkpoint）"></a>一致性检查点（checkpoint）</h2><p>• Flink 使用了一种轻量级快照机制 —— 检查点（checkpoint）来保 证 exactly-once 语义 </p><p>• 有状态流应用的一致检查点，其实就是：所有任务的状态，在某个时 间点的一份拷贝（一份快照）。而这个时间点，应该是所有任务都恰 好处理完一个相同的输入数据的时候。 </p><p>• 应用状态的一致检查点，是 Flink 故障恢复机制的核心</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211233618880.png" alt="image-20210211233618880"></p><h2 id="端到端（end-to-end）状态一致性"><a href="#端到端（end-to-end）状态一致性" class="headerlink" title="端到端（end-to-end）状态一致性"></a>端到端（end-to-end）状态一致性</h2><p>• 目前我们看到的一致性保证都是由流处理器实现的，也就是说都是在 Flink 流处理器内部保证的；而在真实应用中，流处理应用除了流处 理器以外还包含了数据源（例如 Kafka）和输出到持久化系统</p><p> • 端到端的一致性保证，意味着结果的正确性贯穿了整个流处理应用的 始终；每一个组件都保证了它自己的一致性 </p><p>• 整个端到端的一致性级别取决于所有组件中一致性最弱的组件</p><h2 id="端到端的精确一次（exactly-once）保证"><a href="#端到端的精确一次（exactly-once）保证" class="headerlink" title="端到端的精确一次（exactly-once）保证"></a>端到端的精确一次（exactly-once）保证</h2><p>内部保证 —— checkpoint</p><p> • source 端 —— 可重设数据的读取位置 </p><p>• sink 端 —— 从故障恢复时，数据不会重复写入外部系统 </p><p>➢ 幂等写入</p><p> ➢ 事务写入</p><h3 id="幂等写入（Idempotent-Writes）"><a href="#幂等写入（Idempotent-Writes）" class="headerlink" title="幂等写入（Idempotent Writes）"></a>幂等写入（Idempotent Writes）</h3><p>所谓幂等操作，是说一个操作，可以重复执行很多次，但只导致一次 结果更改，也就是说，后面再重复执行就不起作用了</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210211233753354.png" alt="image-20210211233753354"></p><h3 id="事务写入（Transactional-Writes）"><a href="#事务写入（Transactional-Writes）" class="headerlink" title="事务写入（Transactional Writes）"></a>事务写入（Transactional Writes）</h3><p>• 事务（Transaction） </p><p>➢ 应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所 作的所有更改都会被撤消</p><p> ➢ 具有原子性：一个事务中的一系列的操作要么全部成功，要么一个都不做 </p><p>• 实现思想：构建的事务对应着 checkpoint，等到 checkpoint 真正完成 的时候，才把所有对应的结果写入 sink 系统中 </p><p>• 实现方式 </p><blockquote><p>预写日志</p></blockquote><p>把结果数据先当成状态保存，然后在收到 checkpoint 完成的通知时， 一次性写入 sink 系统</p><p> • 简单易于实现，由于数据提前在状态后端中做了缓存，所以无论什么 sink 系统，都能用这种方式一批搞定</p><p> • DataStream API 提供了一个模板类：GenericWriteAheadSink，来 实现这种事务性 sink </p><blockquote><p>两阶段提交</p></blockquote><p>• 对于每个 checkpoint，sink 任务会启动一个事务，并将接下来所有 接收的数据添加到事务里</p><p> • 然后将这些数据写入外部 sink 系统，但不提交它们 —— 这时只是 “预提交” </p><p>• 当它收到 checkpoint 完成的通知时，它才正式提交事务，实现结果 的真正写入 </p><p>➢ 这种方式真正实现了 exactly-once，它需要一个提供事务支持的外部 sink 系统。Flink 提供了 TwoPhaseCommitSinkFunction 接口。</p><blockquote><p>2PC 对外部 sink 系统的要求</p></blockquote><p>• 外部 sink 系统必须提供事务支持，或者 sink 任务必须能够模拟外部系 统上的事务</p><p> • 在 checkpoint 的间隔期间里，必须能够开启一个事务并接受数据写入 </p><p>• 在收到 checkpoint 完成的通知之前，事务必须是“等待提交”的状态。 在故障恢复的情况下，这可能需要一些时间。如果这个时候sink系统关 闭事务（例如超时了），那么未提交的数据就会丢失 </p><p>• sink 任务必须能够在进程失败后恢复事务 </p><p>• 提交事务必须是幂等操作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212113831513.png" alt="image-20210212113831513"></p><h2 id="Flink-Kafka-端到端状态一致性的保证"><a href="#Flink-Kafka-端到端状态一致性的保证" class="headerlink" title="Flink+Kafka 端到端状态一致性的保证"></a>Flink+Kafka 端到端状态一致性的保证</h2><p>• 内部 —— 利用 checkpoint 机制，把状态存盘，发生故障的时候可以恢 复，保证内部的状态一致性</p><p> • source —— kafka consumer 作为 source，可以将偏移量保存下来， 如果后续任务出现了故障，恢复的时候可以由连接器重置偏移量，重新 消费数据，保证一致性</p><p> • sink —— kafka producer 作为sink，采用两阶段提交 sink，需要实现 一个 TwoPhaseCommitSinkFunction</p><h1 id="Table-API-和-Flink-SQL"><a href="#Table-API-和-Flink-SQL" class="headerlink" title="Table API 和 Flink SQL"></a>Table API 和 Flink SQL</h1><blockquote><p>Table API 和 Flink SQL 是什么</p></blockquote><p>• Flink 对批处理和流处理，提供了统一的上层 API </p><p>• Table API 是一套内嵌在 Java 和 Scala 语言中的查询API，它允许以非常直 观的方式组合来自一些关系运算符的查询</p><p> • Flink 的 SQL 支持基于实现了 SQL 标准的 Apache Calcite</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212123243519.png" alt="image-20210212123243519"></p><h2 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h2><p>Table API 和 SQL 的程序结构，与流式处理的程序结构十分类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">StreamTableEnvironment tableEnv &#x3D; ... &#x2F;&#x2F; 创建表的执行环境</span><br><span class="line">&#x2F;&#x2F; 创建一张表，用于读取数据</span><br><span class="line">tableEnv.connect(...).createTemporaryTable(&quot;inputTable&quot;);</span><br><span class="line">&#x2F;&#x2F; 注册一张表，用于把计算结果输出</span><br><span class="line">tableEnv.connect(...).createTemporaryTable(&quot;outputTable&quot;);</span><br><span class="line">&#x2F;&#x2F; 通过 Table API 查询算子，得到一张结果表</span><br><span class="line">Table result &#x3D; tableEnv.from(&quot;inputTable&quot;).select(...);</span><br><span class="line">&#x2F;&#x2F; 通过 SQL查询语句，得到一张结果表</span><br><span class="line">Table sqlResult &#x3D; tableEnv.sqlQuery(&quot;SELECT ... FROM inputTable ...&quot;);</span><br><span class="line">&#x2F;&#x2F; 将结果表写入输出表中</span><br><span class="line">result.insertInto(&quot;outputTable&quot;);</span><br></pre></td></tr></table></figure><h3 id="创建-TableEnvironment"><a href="#创建-TableEnvironment" class="headerlink" title="创建 TableEnvironment"></a>创建 TableEnvironment</h3><p>创建表的执行环境，需要将 flink 流处理的执行环境传入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamTableEnvironment tableEnv &#x3D; StreamTableEnvironment.create(env); </span><br></pre></td></tr></table></figure><p>• TableEnvironment 是 flink 中集成 Table API 和 SQL 的核心概念，所有对 表的操作都基于 TableEnvironment</p><p> – 注册 Catalog</p><p> – 在 Catalog 中注册表 </p><p>– 执行 SQL 查询</p><p> – 注册用户自定义函数（UDF）</p><h3 id="配置-TableEnvironment"><a href="#配置-TableEnvironment" class="headerlink" title="配置 TableEnvironment"></a>配置 TableEnvironment</h3><h4 id="配置老版本-planner-的流式查询"><a href="#配置老版本-planner-的流式查询" class="headerlink" title="配置老版本 planner 的流式查询"></a>配置老版本 planner 的流式查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentSettings settings &#x3D; EnvironmentSettings.newInstance()</span><br><span class="line">.useOldPlanner()</span><br><span class="line">.inStreamingMode()</span><br><span class="line">.build();</span><br><span class="line">StreamTableEnvironment tableEnv &#x3D; StreamTableEnvironment</span><br><span class="line">.create(env, settings);</span><br></pre></td></tr></table></figure><h4 id="配置老版本-planner-的批式查询"><a href="#配置老版本-planner-的批式查询" class="headerlink" title="配置老版本 planner 的批式查询"></a>配置老版本 planner 的批式查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecutionEnvironment batchEnv &#x3D; ExecutionEnvironment.getExecutionEnvironment;</span><br><span class="line">BatchTableEnvironment batchTableEnv &#x3D; BatchTableEnvironment.create(batchEnv);</span><br></pre></td></tr></table></figure><h4 id="配置-blink-planner-的流式查询"><a href="#配置-blink-planner-的流式查询" class="headerlink" title="配置 blink planner 的流式查询"></a>配置 blink planner 的流式查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentSettings bsSettings &#x3D; EnvironmentSettings.newInstance()</span><br><span class="line">.useBlinkPlanner()</span><br><span class="line">.inStreamingMode()</span><br><span class="line">.build();</span><br><span class="line">StreamTableEnvironment bsTableEnv &#x3D; StreamTableEnvironment</span><br><span class="line">.create(env, bsSettings);</span><br></pre></td></tr></table></figure><h4 id="配置-blink-planner-的批式查询"><a href="#配置-blink-planner-的批式查询" class="headerlink" title="配置 blink planner 的批式查询"></a>配置 blink planner 的批式查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentSettings bbSettings &#x3D; EnvironmentSettings.newInstance()</span><br><span class="line">.useBlinkPlanner()</span><br><span class="line">.inBatchMode()</span><br><span class="line">.build();</span><br><span class="line">TableEnvironment bbTableEnv &#x3D; TableEnvironment.create(bbSettings);</span><br></pre></td></tr></table></figure><h3 id="表（Table）"><a href="#表（Table）" class="headerlink" title="表（Table）"></a>表（Table）</h3><p>• TableEnvironment 可以注册目录 Catalog，并可以基于 Catalog 注册表 </p><p>• 表（Table）是由一个“标识符”（identifier）来指定的，由3部分组成： Catalog名、数据库（database）名和对象名 </p><p>• 表可以是常规的，也可以是虚拟的（视图，View）</p><p> • 常规表（Table）一般可以用来描述外部数据，比如文件、数据库表或消息队 列的数据，也可以直接从 DataStream转换而来</p><p> • 视图（View）可以从现有的表中创建，通常是 table API 或者 SQL 查询的 一个结果集</p><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>TableEnvironment 可以调用 .connect() 方法，连接外部系统，并调 用 .createTemporaryTable() 方法，在 Catalog 中注册表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tableEnv</span><br><span class="line">.connect(...) &#x2F;&#x2F; 定义表的数据来源，和外部系统建立连接</span><br><span class="line">.withFormat(...) &#x2F;&#x2F; 定义数据格式化方法</span><br><span class="line">.withSchema(...) &#x2F;&#x2F; 定义表结构</span><br><span class="line">.createTemporaryTable(&quot;MyTable&quot;); &#x2F;&#x2F; 创建临时表</span><br></pre></td></tr></table></figure><p>可以创建 Table 来描述文件数据，它可以从文件中读取，或者将数据写入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tableEnv</span><br><span class="line">.connect(</span><br><span class="line">new FileSystem().path(“YOUR_Path&#x2F;sensor.txt”)</span><br><span class="line">) &#x2F;&#x2F; 定义到文件系统的连接</span><br><span class="line">.withFormat(new Csv()) &#x2F;&#x2F; 定义以csv格式进行数据格式化</span><br><span class="line">.withSchema( new Schema()</span><br><span class="line">.field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">.field(&quot;timestamp&quot;, DataTypes.BIGINT())</span><br><span class="line">.field(&quot;temperature&quot;, DataTypes.DOUBLE())</span><br><span class="line">) &#x2F;&#x2F; 定义表结构</span><br><span class="line">.createTemporaryTable(&quot;sensorTable&quot;); &#x2F;&#x2F; 创建临时表</span><br></pre></td></tr></table></figure><h2 id="表的查询-–-Table-API"><a href="#表的查询-–-Table-API" class="headerlink" title="表的查询 – Table API"></a>表的查询 – Table API</h2><p>• Table API 是集成在 Scala 和 Java 语言内的查询 API </p><p>• Table API 基于代表“表”的 Table 类，并提供一整套操作处理的方法 API； 这些方法会返回一个新的 Table 对象，表示对输入表应用转换操作的结果 </p><p>• 有些关系型转换操作，可以由多个方法调用组成，构成链式调用结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Table sensorTable &#x3D; tableEnv.from(&quot;inputTable&quot;);</span><br><span class="line">Table resultTable &#x3D; sensorTable</span><br><span class="line">.select(&quot;id, temperature&quot;)</span><br><span class="line">.filter(&quot;id &#x3D; &#39;sensor_1&#39;&quot;);</span><br></pre></td></tr></table></figure><p>• Flink 的 SQL 集成，基于实现 了SQL 标准的 Apache Calcite </p><p>• 在 Flink 中，用常规字符串来定义 SQL 查询语句</p><p> • SQL 查询的结果，也是一个新的 Table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Table resultSqlTable &#x3D; tableEnv</span><br><span class="line">.sqlQuery(&quot;select id, temperature from sensorTable where id &#x3D;&#39;sensor_1&#39;&quot;);</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="输出表"><a href="#输出表" class="headerlink" title="输出表"></a>输出表</h3><p>• 表的输出，是通过将数据写入 TableSink 来实现的</p><p> • TableSink 是一个通用接口，可以支持不同的文件格式、存储数据库和消息队 列 </p><p>• 输出表最直接的方法，就是通过 Table.insertInto() 方法将一个 Table 写入注 册过的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(...)</span><br><span class="line">.createTemporaryTable(&quot;outputTable&quot;);</span><br><span class="line">Table resultSqlTable &#x3D; ...</span><br><span class="line">resultTable.insertInto(&quot;outputTable&quot;);</span><br></pre></td></tr></table></figure><h3 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(</span><br><span class="line">new FileSystem().path(&quot;output.txt&quot;)</span><br><span class="line">) &#x2F;&#x2F; 定义到文件系统的连接</span><br><span class="line">.withFormat(new Csv())</span><br><span class="line">.withSchema(new Schema()</span><br><span class="line">.field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">.field(&quot;temp&quot;, DataTypes.Double())</span><br><span class="line">)</span><br><span class="line">.createTemporaryTable(&quot;outputTable&quot;) ; &#x2F;&#x2F; 创建临时表</span><br><span class="line">resultTable.insertInto(&quot;outputTable&quot;); &#x2F;&#x2F; 输出表</span><br></pre></td></tr></table></figure><h4 id="更新模式"><a href="#更新模式" class="headerlink" title="更新模式"></a>更新模式</h4><p>• 对于流式查询，需要声明如何在表和外部连接器之间执行转换</p><p> • 与外部系统交换的消息类型，由更新模式（Update Mode）指定</p><p> ➢ 追加（Append）模式 – 表只做插入操作，和外部连接器只交换插入（Insert）消息 </p><p>➢ 撤回（Retract）模式 – 表和外部连接器交换添加（Add）和撤回（Retract）消息 – 插入操作（Insert）编码为 Add 消息；删除（Delete）编码为 Retract 消息；更新（Update） 编码为上一条的 Retract 和下一条的 Add 消息</p><p> ➢ 更新插入（Upsert）模式 – 更新和插入都被编码为 Upsert 消息；删除编码为 Delete 消息</p><h3 id="输出到-Kafka"><a href="#输出到-Kafka" class="headerlink" title="输出到 Kafka"></a>输出到 Kafka</h3><p>• 可以创建 Table 来描述 kafka 中的数据，作为输入或输出的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(</span><br><span class="line">new Kafka()</span><br><span class="line">.version(&quot;0.11&quot;)</span><br><span class="line">.topic(&quot;sinkTest&quot;)</span><br><span class="line">.property(&quot;zookeeper.connect&quot;, &quot;localhost:2181&quot;)</span><br><span class="line">.property(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;)</span><br><span class="line">)</span><br><span class="line">.withFormat( new Csv() )</span><br><span class="line">.withSchema( new Schema()</span><br><span class="line">.field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">.field(&quot;temp&quot;, DataTypes.DOUBLE())</span><br><span class="line">)</span><br><span class="line">.createTemporaryTable(&quot;kafkaOutputTable&quot;);</span><br><span class="line">resultTable.insertInto(&quot;kafkaOutputTable&quot;);</span><br></pre></td></tr></table></figure><h3 id="输出到-ES"><a href="#输出到-ES" class="headerlink" title="输出到 ES"></a>输出到 ES</h3><p>可以创建 Table 来描述 ES 中的数据，作为输出的 TableSink</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.connect(</span><br><span class="line">new Elasticsearch()</span><br><span class="line">.version(&quot;6&quot;)</span><br><span class="line">.host(&quot;localhost&quot;, 9200, &quot;http&quot;)</span><br><span class="line">.index(&quot;sensor&quot;)</span><br><span class="line">.documentType(&quot;temp&quot;)</span><br><span class="line">)</span><br><span class="line">.inUpsertMode()</span><br><span class="line">.withFormat(new Json())</span><br><span class="line">.withSchema( new Schema()</span><br><span class="line">.field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">.field(&quot;count&quot;, DataTypes.BIGINT())</span><br><span class="line">)</span><br><span class="line">.createTemporaryTable(&quot;esOutputTable&quot;);</span><br><span class="line">aggResultTable.insertInto(&quot;esOutputTable&quot;);</span><br></pre></td></tr></table></figure><h3 id="输出到-MySql"><a href="#输出到-MySql" class="headerlink" title="输出到 MySql"></a>输出到 MySql</h3><p>可以创建 Table 来描述 MySql 中的数据，作为输入和输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL&#x3D;</span><br><span class="line">&quot;create table jdbcOutputTable (&quot; +</span><br><span class="line">&quot; id varchar(20) not null, &quot; +</span><br><span class="line">&quot; cnt bigint not null &quot; +</span><br><span class="line">&quot;) with (&quot; +</span><br><span class="line">&quot; &#39;connector.type&#39; &#x3D; &#39;jdbc&#39;, &quot; +</span><br><span class="line">&quot; &#39;connector.url&#39; &#x3D; &#39;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&#39;, &quot; +</span><br><span class="line">&quot; &#39;connector.table&#39; &#x3D; &#39;sensor_count&#39;, &quot; +</span><br><span class="line">&quot; &#39;connector.driver&#39; &#x3D; &#39;com.mysql.jdbc.Driver&#39;, &quot; +</span><br><span class="line">&quot; &#39;connector.username&#39; &#x3D; &#39;root&#39;, &quot; +</span><br><span class="line">&quot; &#39;connector.password&#39; &#x3D; &#39;123456&#39; )&quot;;</span><br><span class="line">tableEnv.sqlUpdate(sinkDDL) &#x2F;&#x2F; 执行 DDL创建表</span><br><span class="line">aggResultSqlTable.insertInto(&quot;jdbcOutputTable&quot;);</span><br></pre></td></tr></table></figure><h2 id="将-Table-转换成-DataStream"><a href="#将-Table-转换成-DataStream" class="headerlink" title="将 Table 转换成 DataStream"></a>将 Table 转换成 DataStream</h2><p>• 表可以转换为 DataStream 或 DataSet ，这样自定义流处理或批处理程序就 可以继续在 Table API 或 SQL 查询的结果上运行了 </p><p>• 将表转换为 DataStream 或 DataSet 时，需要指定生成的数据类型，即要将 表的每一行转换成的数据类型 </p><p>• 表作为流式查询的结果，是动态更新的 </p><p>• 转换有两种转换模式：追加（Append）模式和撤回（Retract）模式</p><p>➢ 追加模式（Append Mode） </p><p>– 用于表只会被插入（Insert）操作更改的场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Row&gt; resultStream &#x3D; tableEnv.toAppendStream(resultTable, Row.class);</span><br></pre></td></tr></table></figure><p> ➢ 撤回模式（Retract Mode） </p><p>– 用于任何场景。</p><p>有些类似于更新模式中 Retract 模式，它只有 Insert 和 Delete 两类操作。 </p><p>– 得到的数据会增加一个 Boolean 类型的标识位（返回的第一个字段），用它来表示到底是 新增的数据（Insert），还是被删除的数据（Delete） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;Boolean, Row&gt;&gt; aggResultStream &#x3D; tableEnv</span><br><span class="line">.toRetractStream(aggResultTable , Row.class);</span><br></pre></td></tr></table></figure><p>• 对于一个 DataStream，可以直接转换成 Table，进而方便地调用 Table API 做转换操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; dataStream &#x3D; ...</span><br><span class="line">Table sensorTable &#x3D; tableEnv.fromDataStream(dataStream);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>• 默认转换后的 Table schema 和 DataStream 中的字段定义一一对应，也可 以单独指定出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; dataStream &#x3D; ...</span><br><span class="line">Table sensorTable &#x3D; tableEnv.fromDataStream(dataStream,</span><br><span class="line">&quot;id, timestamp as ts, temperature&quot;);</span><br></pre></td></tr></table></figure><h2 id="创建临时视图（Temporary-View）"><a href="#创建临时视图（Temporary-View）" class="headerlink" title="创建临时视图（Temporary View）"></a>创建临时视图（Temporary View）</h2><p>• 基于 DataStream 创建临时视图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.createTemporaryView(&quot;sensorView&quot;, dataStream);</span><br><span class="line">tableEnv.createTemporaryView(&quot;sensorView&quot;,</span><br><span class="line">dataStream, &quot;id, temperature, timestamp as ts&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>• 基于 Table 创建临时视图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableEnv.createTemporaryView(&quot;sensorView&quot;, sensorTable);</span><br></pre></td></tr></table></figure><h2 id="查看执行计划"><a href="#查看执行计划" class="headerlink" title="查看执行计划"></a>查看执行计划</h2><p>• Table API 提供了一种机制来解释计算表的逻辑和优化查询计划 </p><p>• 查看执行计划，可以通过 TableEnvironment.explain(table) 方法或 TableEnvironment.explain() 方法完成，返回一个字符串，描述三个计划</p><p> ➢ 优化的逻辑查询计划</p><p> ➢ 优化后的逻辑查询计划 </p><p>➢ 实际执行计划。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String explaination &#x3D; tableEnv.explain(resultTable);</span><br><span class="line">System.out.println(explaination);</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212132853845.png" alt="image-20210212132853845"></p><h2 id="动态表（Dynamic-Tables）"><a href="#动态表（Dynamic-Tables）" class="headerlink" title="动态表（Dynamic Tables）"></a>动态表（Dynamic Tables）</h2><p>• 动态表是 Flink 对流数据的 Table API 和 SQL 支持的核心概念 </p><p>• 与表示批处理数据的静态表不同，动态表是随时间变化的</p><p> ➢ 持续查询（Continuous Query）</p><p> • 动态表可以像静态的批处理表一样进行查询，查询一个动态表会产生持续查 询（Continuous Query）</p><p> • 连续查询永远不会终止，并会生成另一个动态表</p><p> • 查询会不断更新其动态结果表，以反映其动态输入表上的更改</p><blockquote><p>动态表和持续查询</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212132938792.png" alt="image-20210212132938792"></p><p>➢ 流式表查询的处理过程：</p><ol><li>流被转换为动态表</li><li>对动态表计算连续查询，生成新的动态表</li><li> 生成的动态表被转换回流</li></ol><h3 id="将流转换成动态表"><a href="#将流转换成动态表" class="headerlink" title="将流转换成动态表"></a>将流转换成动态表</h3><p>• 为了处理带有关系查询的流，必须先将其转换为表 </p><p>• 从概念上讲，流的每个数据记录，都被解释为对结果表的插入 （Insert）修改操作</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212133107947.png" alt="image-20210212133107947"></p><h3 id="持续查询"><a href="#持续查询" class="headerlink" title="持续查询"></a>持续查询</h3><p>• 持续查询会在动态表上做计算处理，并作为结果生成新的动态表</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212133131655.png" alt="image-20210212133131655"></p><h3 id="将动态表转换成-DataStream"><a href="#将动态表转换成-DataStream" class="headerlink" title="将动态表转换成 DataStream"></a>将动态表转换成 DataStream</h3><p>• 与常规的数据库表一样，动态表可以通过插入（Insert）、更新（Update）和删 除（Delete）更改，进行持续的修改</p><p> • 将动态表转换为流或将其写入外部系统时，需要对这些更改进行编码</p><p> ➢ 仅追加（Append-only）流 </p><p>– 仅通过插入（Insert）更改来修改的动态表，可以直接转换为仅追加流 </p><p>➢ 撤回（Retract）流 </p><p>– 撤回流是包含两类消息的流：添加（Add）消息和撤回（Retract）消息 </p><p>➢ Upsert（更新插入）流 </p><p>– Upsert 流也包含两种类型的消息：Upsert 消息和删除（Delete）消息。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212133230483.png" alt="image-20210212133230483"></p><h2 id="时间特性"><a href="#时间特性" class="headerlink" title="时间特性"></a>时间特性</h2><p>• 基于时间的操作（比如 Table API 和 SQL 中窗口操作），需要定义相关的时 间语义和时间数据来源的信息 </p><p>• Table 可以提供一个逻辑上的时间字段，用于在表处理程序中，指示时间和 访问相应的时间戳 </p><p>• 时间属性，可以是每个表schema的一部分。一旦定义了时间属性，它就可以 作为一个字段引用，并且可以在基于时间的操作中使用 </p><p>• 时间属性的行为类似于常规时间戳，可以访问，并且进行计算</p><h3 id="定义处理时间（Processing-Time）"><a href="#定义处理时间（Processing-Time）" class="headerlink" title="定义处理时间（Processing Time）"></a>定义处理时间（Processing Time）</h3><p>• 处理时间语义下，允许表处理程序根据机器的本地时间生成结果。它是时间 的最简单概念。它既不需要提取时间戳，也不需要生成 watermark </p><p>➢ 由 DataStream 转换成表时指定 </p><p>• 在定义Schema期间，可以使用.proctime，指定字段名定义处理时间字段 </p><p>• 这个proctime属性只能通过附加逻辑字段，来扩展物理schema。因此，只 能在schema定义的末尾定义它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Table sensorTable &#x3D; tableEnv.fromDataStream(dataStream,</span><br><span class="line">&quot;id, temperature, timestamp, pt.proctime&quot;);</span><br></pre></td></tr></table></figure><p>➢ 定义 Table Schema 时指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.withSchema(new Schema()</span><br><span class="line">.field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">.field(&quot;timestamp&quot;, DataTypes.BIGINT())</span><br><span class="line">.field(&quot;temperature&quot;, DataTypes.DOUBLE())</span><br><span class="line">.field(&quot;pt&quot;, DataTypes.TIMESTAMP(3))</span><br><span class="line">.proctime()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>➢ 在创建表的 DDL 中定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL &#x3D;</span><br><span class="line">&quot;create table dataTable (&quot; +</span><br><span class="line">&quot; id varchar(20) not null, &quot; +</span><br><span class="line">&quot; ts bigint, &quot; +</span><br><span class="line">&quot; temperature double, &quot; +</span><br><span class="line">&quot; pt AS PROCTIME() &quot; +</span><br><span class="line">&quot;) with (&quot; +</span><br><span class="line">&quot; &#39;connector.type&#39; &#x3D; &#39;filesystem&#39;, &quot; +</span><br><span class="line">&quot; &#39;connector.path&#39; &#x3D; &#39;&#x2F;sensor.txt&#39;, &quot; +</span><br><span class="line">&quot; &#39;format.type&#39; &#x3D; &#39;csv&#39;)&quot;;</span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);</span><br></pre></td></tr></table></figure><h3 id="定义事件时间（Event-Time）"><a href="#定义事件时间（Event-Time）" class="headerlink" title="定义事件时间（Event Time）"></a>定义事件时间（Event Time）</h3><p>• 事件时间语义，允许表处理程序根据每个记录中包含的时间生成结果。这样 即使在有乱序事件或者延迟事件时，也可以获得正确的结果。</p><p> • 为了处理无序事件，并区分流中的准时和迟到事件；Flink 需要从事件数据中， 提取时间戳，并用来推进事件时间的进展</p><p> • 定义事件时间，同样有三种方法： </p><p>➢ 由 DataStream 转换成表时指定 </p><p>➢ 定义 Table Schema 时指定 </p><p>➢ 在创建表的 DDL 中定义</p><p>➢ 由 DataStream 转换成表时指定 </p><p>• 在 DataStream 转换成 Table，使用 .rowtime 可以定义事件时间属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将 DataStream转换为 Table，并指定时间字段</span><br><span class="line">Table sensorTable &#x3D; tableEnv.fromDataStream(dataStream,</span><br><span class="line">&quot;id, timestamp.rowtime, temperature&quot;);</span><br><span class="line">&#x2F;&#x2F; 或者，直接追加时间字段</span><br><span class="line">Table sensorTable &#x3D; tableEnv.fromDataStream(dataStream,</span><br><span class="line">&quot; id, temperature, timestamp, rt.rowtime&quot;);</span><br></pre></td></tr></table></figure><p>• 定义 Table Schema 时指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.withSchema(new Schema()</span><br><span class="line">.field(&quot;id&quot;, DataTypes.STRING())</span><br><span class="line">.field(&quot;timestamp&quot;, DataTypes.BIGINT())</span><br><span class="line">.rowtime(</span><br><span class="line">new Rowtime()</span><br><span class="line">.timestampsFromField(&quot;timestamp&quot;) &#x2F;&#x2F; 从字段中提取时间戳</span><br><span class="line">.watermarksPeriodicBounded(1000) &#x2F;&#x2F; watermark延迟1秒</span><br><span class="line">)</span><br><span class="line">.field(&quot;temperature&quot;, DataTypes.DOUBLE())</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>• 在创建表的 DDL 中定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String sinkDDL&#x3D;</span><br><span class="line">&quot;create table dataTable (&quot; +</span><br><span class="line">&quot; id varchar(20) not null, &quot; +</span><br><span class="line">&quot; ts bigint, &quot; +</span><br><span class="line">&quot; temperature double, &quot; +</span><br><span class="line">&quot; rt AS TO_TIMESTAMP( FROM_UNIXTIME(ts) ), &quot; +</span><br><span class="line">&quot; watermark for rt as rt - interval &#39;1&#39; second&quot; +</span><br><span class="line">&quot;) with (&quot; +</span><br><span class="line">&quot; &#39;connector.type&#39; &#x3D; &#39;filesystem&#39;, &quot; +</span><br><span class="line">&quot; &#39;connector.path&#39; &#x3D; &#39;&#x2F;sensor.txt&#39;, &quot; +</span><br><span class="line">&quot; &#39;format.type&#39; &#x3D; &#39;csv&#39;)&quot;;</span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);</span><br></pre></td></tr></table></figure><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p>• 时间语义，要配合窗口操作才能发挥作用 </p><p>• 在 Table API 和 SQL 中，主要有两种窗口</p><p> ➢ Group Windows（分组窗口）</p><p> – 根据时间或行计数间隔，将行聚合到有限的组（Group）中，并对每个组的数据 执行一次聚合函数</p><p> ➢ Over Windows </p><p>– 针对每个输入行，计算相邻行范围内的聚合</p><h3 id="Group-Windows"><a href="#Group-Windows" class="headerlink" title="Group Windows"></a>Group Windows</h3><p>• Group Windows 是使用 window（w:GroupWindow）子句定义的，并且 必须由as子句指定一个别名。</p><p> • 为了按窗口对表进行分组，窗口的别名必须在 group by 子句中，像常规的 分组字段一样引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Table table &#x3D; input</span><br><span class="line">.window([w: GroupWindow] as &quot;w&quot;) &#x2F;&#x2F; 定义窗口，别名为 w</span><br><span class="line">.groupBy(&quot;w, a&quot;) &#x2F;&#x2F; 按照字段 a和窗口 w分组</span><br><span class="line">.select(&quot;a, b.sum&quot;); &#x2F;&#x2F; 聚合</span><br></pre></td></tr></table></figure><p>• Table API 提供了一组具有特定语义的预定义 Window 类，这些类会被转换 为底层 DataStream 或 DataSet 的窗口操作</p><h3 id="滚动窗口（Tumbling-windows）"><a href="#滚动窗口（Tumbling-windows）" class="headerlink" title="滚动窗口（Tumbling windows）"></a>滚动窗口（Tumbling windows）</h3><p>• 滚动窗口要用 Tumble 类来定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Tumbling Event-time Window</span><br><span class="line">.window(Tumble.over(&quot;10.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; Tumbling Processing-time Window</span><br><span class="line">.window(Tumble.over(&quot;10.minutes&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; Tumbling Row-count Window</span><br><span class="line">.window(Tumble.over(&quot;10.rows&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h3 id="滑动窗口（Sliding-windows）"><a href="#滑动窗口（Sliding-windows）" class="headerlink" title="滑动窗口（Sliding windows）"></a>滑动窗口（Sliding windows）</h3><p>• 滑动窗口要用 Slide 类来定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Sliding Event-time Window</span><br><span class="line">.window(Slide.over(&quot;10.minutes&quot;).every(&quot;5.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; Sliding Processing-time window</span><br><span class="line">.window(Slide.over(&quot;10.minutes&quot;).every(&quot;5.minutes&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; Sliding Row-count window</span><br><span class="line">.window(Slide.over(&quot;10.rows&quot;).every(&quot;5.rows&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h3 id="会话窗口（Session-windows）"><a href="#会话窗口（Session-windows）" class="headerlink" title="会话窗口（Session windows）"></a>会话窗口（Session windows）</h3><p>• 会话窗口要用 Session 类来定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Session Event-time Window</span><br><span class="line">.window(Session.withGap(&quot;10.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; Session Processing-time Window</span><br><span class="line">.window(Session.withGap(&quot;10.minutes&quot;).on(“proctime&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h3 id="SQL-中的-Group-Windows"><a href="#SQL-中的-Group-Windows" class="headerlink" title="SQL 中的 Group Windows"></a>SQL 中的 Group Windows</h3><p>• Group Windows 定义在 SQL 查询的 Group By 子句中 </p><p>➢ TUMBLE(time_attr, interval) </p><p>• 定义一个滚动窗口，第一个参数是时间字段，第二个参数是窗口长度 ➢ HOP(time_attr, interval, interval)</p><p> • 定义一个滑动窗口，第一个参数是时间字段，第二个参数是窗口滑动步长，第三个是 窗口长度 </p><p>➢ SESSION(time_attr, interval)</p><p> • 定义一个会话窗口，第一个参数是时间字段，第二个参数是窗口间隔</p><h3 id="Over-Windows"><a href="#Over-Windows" class="headerlink" title="Over Windows"></a>Over Windows</h3><p>• Over window 聚合是标准 SQL 中已有的（over 子句），可以在查询的 SELECT 子句中定义</p><p> • Over window 聚合，会针对每个输入行，计算相邻行范围内的聚合 </p><p>• Over windows 使用 window（w:overwindows*）子句定义，并在 select （）方法中通过别名来引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Table table &#x3D; input</span><br><span class="line">.window([w: OverWindow] as &quot;w&quot;)</span><br><span class="line">.select(&quot;a, b.sum over w, c.min over w&quot;);</span><br></pre></td></tr></table></figure><p>• Table API 提供了 Over 类，来配置 Over 窗口的属性</p><h3 id="无界-Over-Windows"><a href="#无界-Over-Windows" class="headerlink" title="无界 Over Windows"></a>无界 Over Windows</h3><p>• 可以在事件时间或处理时间，以及指定为时间间隔、或行计数的范围内，定 义 Over windows </p><p>• 无界的 over window 是使用常量指定的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 无界的事件时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding(UNBOUNDED_RANGE).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F;无界的处理时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;proctime&quot;).preceding(UNBOUNDED_RANGE).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; 无界的事件时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding(UNBOUNDED_ROW).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F;无界的处理时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;proctime&quot;).preceding(UNBOUNDED_ROW).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h3 id="有界-Over-Windows"><a href="#有界-Over-Windows" class="headerlink" title="有界 Over Windows"></a>有界 Over Windows</h3><p>• 有界的 over window 是用间隔的大小指定的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 有界的事件时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding(&quot;1.minutes&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; 有界的处理时间 over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;proctime&quot;).preceding(&quot;1.minutes&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; 有界的事件时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;rowtime&quot;).preceding(&quot;10.rows&quot;).as(&quot;w&quot;))</span><br><span class="line">&#x2F;&#x2F; 有界的处理时间 Row-count over window</span><br><span class="line">.window(Over.partitionBy(&quot;a&quot;).orderBy(&quot;procime&quot;).preceding(&quot;10.rows&quot;).as(&quot;w&quot;))</span><br></pre></td></tr></table></figure><h3 id="SQL-中的-Over-Windows"><a href="#SQL-中的-Over-Windows" class="headerlink" title="SQL 中的 Over Windows"></a>SQL 中的 Over Windows</h3><p>• 用 Over 做窗口聚合时，所有聚合必须在同一窗口上定义，也就是说必须是 相同的分区、排序和范围</p><p> • 目前仅支持在当前行范围之前的窗口 </p><p>• ORDER BY 必须在单一的时间属性上指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(amount) OVER (</span><br><span class="line">PARTITION BY user</span><br><span class="line">ORDER BY proctime</span><br><span class="line">ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)</span><br><span class="line">FROM Orders</span><br></pre></td></tr></table></figure><h2 id="函数（Functions）"><a href="#函数（Functions）" class="headerlink" title="函数（Functions）"></a>函数（Functions）</h2><p>• Flink Table API 和 SQL 为用户提供了一组用于数据转换的内置函数</p><p> • SQL 中支持的很多函数，Table API 和 SQL 都已经做了实现</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212160732332.png" alt="image-20210212160732332"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212160743984.png" alt="image-20210212160743984"></p><h3 id="用户自定义函数（UDF）"><a href="#用户自定义函数（UDF）" class="headerlink" title="用户自定义函数（UDF）"></a>用户自定义函数（UDF）</h3><p>• 用户定义函数（User-defined Functions，UDF）是一个重要的特性，它们 显著地扩展了查询的表达能力 </p><p>• 在大多数情况下，用户定义的函数必须先注册，然后才能在查询中使用</p><p> • 函数通过调用 registerFunction（）方法在 TableEnvironment 中注册。当 用户定义的函数被注册时，它被插入到 TableEnvironment 的函数目录中， 这样Table API 或 SQL 解析器就可以识别并正确地解释它</p><h3 id="标量函数（Scalar-Functions）"><a href="#标量函数（Scalar-Functions）" class="headerlink" title="标量函数（Scalar Functions）"></a>标量函数（Scalar Functions）</h3><p>• 用户定义的标量函数，可以将0、1或多个标量值，映射到新的标量值</p><p> • 为了定义标量函数，必须在 org.apache.flink.table.functions 中扩展基类 Scalar Function，并实现（一个或多个）求值（eval）方法</p><p> • 标量函数的行为由求值方法决定，求值方法必须公开声明并命名为 eval</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static class HashCode extends ScalarFunction &#123;</span><br><span class="line">private int factor &#x3D; 13;</span><br><span class="line">public HashCode(int factor) &#123;</span><br><span class="line">this.factor &#x3D; factor;</span><br><span class="line">&#125;</span><br><span class="line">public int eval(String s) &#123;</span><br><span class="line">return s.hashCode() * factor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表函数（Table-Functions）"><a href="#表函数（Table-Functions）" class="headerlink" title="表函数（Table Functions）"></a>表函数（Table Functions）</h3><p>• 用户定义的表函数，也可以将0、1或多个标量值作为输入参数；与标量函数不同 的是，它可以返回任意数量的行作为输出，而不是单个值 </p><p>• 为了定义一个表函数，必须扩展 org.apache.flink.table.functions 中的基类 TableFunction 并实现（一个或多个）求值方法</p><p> • 表函数的行为由其求值方法决定，求值方法必须是 public 的，并命名为 eval</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static class Split extends TableFunction&lt;Tuple2&lt;String, Integer&gt;&gt; &#123;</span><br><span class="line">private String separator &#x3D; &quot;,&quot;;</span><br><span class="line">public Split(String separator) &#123;</span><br><span class="line">this.separator &#x3D; separator;</span><br><span class="line">&#125;</span><br><span class="line">public void eval(String str) &#123;</span><br><span class="line">for (String s : str.split(separator)) &#123;</span><br><span class="line">collect(new Tuple2&lt;String, Integer&gt;(s, s.length()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合函数（Aggregate-Functions）"><a href="#聚合函数（Aggregate-Functions）" class="headerlink" title="聚合函数（Aggregate Functions）"></a>聚合函数（Aggregate Functions）</h3><p>• 用户自定义聚合函数（User-Defined Aggregate Functions，UDAGGs） 可以把一个表中的数据，聚合成一个标量值</p><p> • 用户定义的聚合函数，是通过继承 AggregateFunction 抽象类实现的</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210212160941324.png" alt="image-20210212160941324"></p><p>• AggregationFunction要求必须实现的方法：</p><p> – createAccumulator() </p><p>– accumulate() </p><p>– getValue() </p><p>• AggregateFunction 的工作原理如下： </p><p>– 首先，它需要一个累加器（Accumulator），用来保存聚合中间结果的数据结构； 可以通过调用 createAccumulator() 方法创建空累加器</p><p> – 随后，对每个输入行调用函数的 accumulate() 方法来更新累加器</p><p> – 处理完所有行后，将调用函数的 getValue() 方法来计算并返回最终结果</p><h3 id="表聚合函数（Table-Aggregate-Functions）"><a href="#表聚合函数（Table-Aggregate-Functions）" class="headerlink" title="表聚合函数（Table Aggregate Functions）"></a>表聚合函数（Table Aggregate Functions）</h3><p>• AggregationFunction 要求必须实现的方法：</p><p> – createAccumulator() – accumulate() </p><p>– emitValue() </p><p>• TableAggregateFunction 的工作原理如下: </p><p>– 首先，它同样需要一个累加器（Accumulator），它是保存聚合中间结果的数据 结构。通过调用 createAccumulator() 方法可以创建空累加器。 </p><p>– 随后，对每个输入行调用函数的 accumulate() 方法来更新累加器。 </p><p>– 处理完所有行后，将调用函数的 emitValue() 方法来计算并返回最终结果。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 流式数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewUI的表单验证规则</title>
      <link href="2021/02/05/ViewUI%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99/"/>
      <url>2021/02/05/ViewUI%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考文章：<a href="https://blog.csdn.net/ztx114/article/details/92806695">https://blog.csdn.net/ztx114/article/details/92806695</a></p><p>表单是我们最常使用的组件，尤其是前后端进行数据交互的时候。一般我们在提交数据的时候都需要对数据进行校验，ViewUI是vue的组件库，它里面的表单组件自带数据校验。</p><h1 id="组件自带的验证规则"><a href="#组件自带的验证规则" class="headerlink" title="组件自带的验证规则"></a>组件自带的验证规则</h1><h2 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h2><h3 id="行内"><a href="#行内" class="headerlink" title="行内"></a>行内</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">prop</span>=<span class="string">&quot;UserId&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot; [&#123; required: true, message: &#x27;请选择一项&#x27;, trigger: &#x27;change&#x27;,type:&#x27;number&#x27;,min:1&#125;]&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Select</span> <span class="attr">v-model</span>=<span class="string">&quot;formAddOrder.UserId&quot;</span> <span class="attr">filterable</span> @<span class="attr">on-change</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Option</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in userList&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.UserId&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> &gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>             </span><br><span class="line">                  <span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Form ref&#x3D;&quot;formValidate&quot; :model&#x3D;&quot;formValidate&quot; :rules&#x3D;&quot;ruleValidate&quot; :label-width&#x3D;&quot;80&quot;&gt;</span><br><span class="line">      &lt;Row&gt;</span><br><span class="line">        &lt;Col span&#x3D;&quot;24&quot;&gt;</span><br><span class="line">          &lt;span&gt;注册信息&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;Col&gt;</span><br><span class="line">      &lt;&#x2F;Row&gt;</span><br><span class="line">       &lt;FormItem label&#x3D;&quot;账户&quot; prop&#x3D;&quot;sysUserAccount&quot;&gt;</span><br><span class="line">            &lt;Input v-model&#x3D;&quot;formValidate.sysUserAccount&quot; placeholder&#x3D;&quot;输入你的账号&quot;&gt;&lt;&#x2F;Input&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">        &lt;FormItem label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">            &lt;Input v-model&#x3D;&quot;formValidate.password&quot; placeholder&#x3D;&quot;输入你的密码&quot;&gt;&lt;&#x2F;Input&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">        &lt;FormItem label&#x3D;&quot;确认密码&quot; prop&#x3D;&quot;confirmPassword&quot;&gt;</span><br><span class="line">            &lt;Input v-model&#x3D;&quot;formValidate.confirmPassword&quot; placeholder&#x3D;&quot;请确认密码&quot;&gt;&lt;&#x2F;Input&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">        &lt;FormItem label&#x3D;&quot;姓名&quot; prop&#x3D;&quot;sysUsername&quot;&gt;</span><br><span class="line">            &lt;Input v-model&#x3D;&quot;formValidate.sysUsername&quot; placeholder&#x3D;&quot;请输入你的姓名&quot;&gt;&lt;&#x2F;Input&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">        &lt;FormItem label&#x3D;&quot;电话号码&quot; prop&#x3D;&quot;phone&quot;&gt;</span><br><span class="line">            &lt;Input v-model&#x3D;&quot;formValidate.phone&quot; placeholder&#x3D;&quot;请输入你的电话号码&quot;&gt;&lt;&#x2F;Input&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">        &lt;FormItem label&#x3D;&quot;E-mail&quot; prop&#x3D;&quot;email&quot;&gt;</span><br><span class="line">            &lt;Input v-model&#x3D;&quot;formValidate.email&quot; placeholder&#x3D;&quot;请输入你的邮箱&quot;&gt;&lt;&#x2F;Input&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">        &lt;FormItem label&#x3D;&quot;性别&quot; prop&#x3D;&quot;sex&quot;&gt;</span><br><span class="line">            &lt;RadioGroup v-model&#x3D;&quot;formValidate.sex&quot;&gt;</span><br><span class="line">                &lt;Radio label&#x3D;&quot;男&quot;&gt;男&lt;&#x2F;Radio&gt;</span><br><span class="line">                &lt;Radio label&#x3D;&quot;女&quot;&gt;女&lt;&#x2F;Radio&gt;</span><br><span class="line">            &lt;&#x2F;RadioGroup&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">        &lt;FormItem&gt;</span><br><span class="line">            &lt;Button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;handleSubmit(&#39;formValidate&#39;)&quot;&gt;Submit&lt;&#x2F;Button&gt;</span><br><span class="line">            &lt;Button @click&#x3D;&quot;handleReset(&#39;formValidate&#39;)&quot; style&#x3D;&quot;margin-left: 8px&quot;&gt;Reset&lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;&#x2F;FormItem&gt;</span><br><span class="line">    &lt;&#x2F;Form&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                formValidate: &#123;</span><br><span class="line">                  sysUserAccount:&quot;&quot;,</span><br><span class="line">                  password:&quot;&quot;,</span><br><span class="line">                  confirmPassword:&quot;&quot;,</span><br><span class="line">                  sysUsername: &#39;&#39;,</span><br><span class="line">                  phone:&quot;&quot;,</span><br><span class="line">                  email: &#39;&#39;,</span><br><span class="line">                  sex: &#39;&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line">                ruleValidate: &#123;</span><br><span class="line">                    sysUserAccount: [</span><br><span class="line">                        &#123; required: true, message: &#39;账号不能为空&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    password: [</span><br><span class="line">                        &#123; required: true, message: &#39;密码不能为空&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    confirmPassword: [</span><br><span class="line">                        &#123; required: true, message: &#39;确认密码不能为空&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    phone: [</span><br><span class="line">                        &#123; required: false, message: &#39;&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class="line">                        &#123; type: &quot;phone&quot;, message: &#39;请输入正确的电话号码&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    email: [</span><br><span class="line">                        &#123; required: false, message: &#39;&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class="line">                        &#123; type: &quot;email&quot;, message: &#39;请输入正确的邮箱&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    sex: [</span><br><span class="line">                        &#123; required: true, message: &#39;性别不能为空&#39;, trigger: &#39;change&#39; &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleSubmit (name) &#123;</span><br><span class="line">                this.$refs[name].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">                    if (valid) &#123;</span><br><span class="line">                        this.$Message.success(&#39;Success!&#39;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        this.$Message.error(&#39;Fail!&#39;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleReset (name) &#123;</span><br><span class="line">                this.$refs[name].resetFields();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li><p>required:true | false </p></li><li><p>pattern :正则表达式</p></li><li><p>min: 最小值</p></li><li><p>max: 最大值</p></li><li><p>Length : 长度</p></li><li><p>enum: 验证字段是否存在其中</p><blockquote><p>{ message:’不包含a , u, g’,trigger: ‘change’,type: ‘enum’,enum: [‘a’, ‘u’, ‘g’]}</p></blockquote></li><li><p>messages: 错误信息</p></li><li><p>trigger : ‘change’ | ‘blur’</p></li><li><p>whitespace : true | false</p><p>true:空白字符 -&gt;错误提醒<br>false: 空白字符-&gt;不报错</p></li></ul><blockquote><p>{ type: ‘string’, whitespace:true,message:’包含空白字符’,trigger: ‘change’}</p></blockquote><blockquote><p>type属性的值</p></blockquote><ul><li>string: 必须是字符串类型。这是默认类型</li><li>number: 必须是数字</li><li>boolean: 必须是布尔型的</li><li>method:必须是类型函数</li><li>regexp: 必须是ReGEXP的实例，或者是在创建新的ReGEXP时不会生成异常的字符串</li><li>integer:必须是整数.</li><li>float:必须是浮点数.</li><li>array: 必须是由Array.isArray确定的数组</li><li>object: 必须是类型对象而不是Array.isArray</li><li>enum: 枚举中必须存在值。</li><li>date: 按日期确定的值必须有效</li><li>url: 必须是URL类型。</li><li>hex: 必须是十六进制。</li><li>email:必须是电子邮件类型。</li></ul><h1 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h1><p>参考文章;<a href="https://blog.csdn.net/solocao/article/details/84429443">https://blog.csdn.net/solocao/article/details/84429443</a></p><p>需求，使用的是<code>iview</code>框架的<code>Form</code>组件，一般简单input类型数据，使用简单的验证配置就可以达到效果。如官方的写法。</p><p><code>iview</code> 表单验证 地址 <a href="https://www.iviewui.com/components/form">https://www.iviewui.com/components/form</a><br><code>iview</code> 默认验证库 <code>async-validator</code> 地址 <a href="https://github.com/yiminghe/async-validator">https://github.com/yiminghe/async-validator</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ruleValidate: &#123;</span><br><span class="line">  name: [</span><br><span class="line">   &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;The name cannot be empty&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果要验证数组、或者其他复杂类型的表单数据，就需要自定义验证方法。下面以验证<code>DatePicker</code>组件为例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;ruleValidate&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">&quot;活动标题&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.title&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入活动标题&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">&quot;活动时间&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;date_range&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">DatePicker</span> <span class="attr">v-model</span>=<span class="string">&quot;form.date_range&quot;</span> <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;dateOptions&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;bottom-end&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择活动时间&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 526px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">   form: &#123;</span><br><span class="line">     <span class="comment">// 活动标题</span></span><br><span class="line">     title: <span class="literal">null</span>,</span><br><span class="line">     <span class="comment">// 活动时间</span></span><br><span class="line">     date_range: <span class="literal">null</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 验证条件</span></span><br><span class="line">   ruleValidate: &#123;</span><br><span class="line">     title: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;活动标题不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;],</span><br><span class="line">     date_range: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;活动时间不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;,</span><br><span class="line">       &#123; validator (rule, value, callback, source, options) &#123;</span><br><span class="line">         <span class="keyword">const</span> errors = []</span><br><span class="line">         <span class="keyword">if</span> (value[<span class="number">0</span>] === <span class="string">&#x27;&#x27;</span>) &#123; errors.push(<span class="string">&#x27;活动时间不能为空&#x27;</span>) &#125;</span><br><span class="line">         callback(errors)</span><br><span class="line">       &#125; &#125;]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>验证失败<br><img src="https://img-blog.csdnimg.cn/20181124105801153.png" alt="img"></li><li>验证成<br><img src="https://img-blog.csdnimg.cn/20181124105812816.png" alt="img"><br>其实很简单，最主要的代码就是自己写<code>validator (rule, value, callback, source, options)</code>的代码。</li></ul><p>附加：用于单纯的时间验证，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pay_at: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">type</span>: <span class="string">&#x27;date&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择支付时间&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;],</span><br></pre></td></tr></table></figure><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><h2 id="1-验证数字踩坑"><a href="#1-验证数字踩坑" class="headerlink" title="1. 验证数字踩坑"></a>1. 验证数字踩坑</h2><p>表单校验，单独进行数字校验，使用下面的代码是可以的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; type: &#x27;number&#x27;, message: &#x27;请输入排序&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br></pre></td></tr></table></figure><p>但同时进行数字和为空校验，使用下面的代码是不行的，输入数字的时候一直提示不能为空</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; required: true, message: &#x27;排序不能为空&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line"> &#123; type: &#x27;number&#x27;, message: &#x27;请输入排序&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br></pre></td></tr></table></figure><p>能够成功验证的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateSequence = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> regNum = <span class="regexp">/^.&#123;1,5&#125;$/</span>;</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;输入排序(升序)&#x27;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(+value)) &#123;</span><br><span class="line">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;输入数字&#x27;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!regNum.test(value)) &#123;</span><br><span class="line">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;长度过长&#x27;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callback();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ruleData: &#123;</span><br><span class="line">      sequence: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: validateSequence, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-view进行表单验证select时候验证失败的问题："><a href="#2-view进行表单验证select时候验证失败的问题：" class="headerlink" title="2.view进行表单验证select时候验证失败的问题："></a>2.view进行表单验证select时候验证失败的问题：</h2><p>用iview自带的表单验证select标签的时候，一直验证不通过，因为iview默认校验数据类型为String，而我的select用的value是number类型的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ruleValidate: &#123;</span><br><span class="line">   customer:[</span><br><span class="line">           &#123; required: true, message: &#x27;客户名称不能为空&#x27;, trigger: &#x27;blur&#x27;,type:&#x27;number&#x27;&#125;,</span><br><span class="line">        ], </span><br><span class="line">      &#125;  </span><br></pre></td></tr></table></figure><h2 id="3-iview进行表单验证时间日期验证失败的问题："><a href="#3-iview进行表单验证时间日期验证失败的问题：" class="headerlink" title="3.iview进行表单验证时间日期验证失败的问题："></a>3.iview进行表单验证时间日期验证失败的问题：</h2><p>和下拉框一样，日期的类型是data</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ruleValidate: &#123;</span><br><span class="line">  advance:[</span><br><span class="line">          &#123; required: true, message: &#x27;预送达时间不能为空&#x27;, trigger: &#x27;change&#x27; ,type: &#x27;date&#x27;&#125;,</span><br><span class="line">       ],</span><br><span class="line">     &#125;   </span><br></pre></td></tr></table></figure><h2 id="4-iview进行多重验证的写法："><a href="#4-iview进行多重验证的写法：" class="headerlink" title="4.iview进行多重验证的写法："></a>4.iview进行多重验证的写法：</h2><p>多重验证包括第一要验不能为空，第二要验证限制的一些长度，写正则表达式等</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ruleValidate: &#123;</span><br><span class="line">   goodsNum: [</span><br><span class="line">     &#123; required: true, message: &#x27;数量不能为空&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">     &#123; type: &#x27;string&#x27;,pattern:/^(([1-9]\d&#123;0,3&#125;)|0)(\.\d&#123;0,2&#125;)?$/, message:&#x27;数量应为正浮点数且不超过9999.99&#x27;, trigger:&#x27;blur&#x27;&#125;,</span><br><span class="line">   ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-有时在Select选项需要给个默认选项时，必须在data中传入string类型，如果是number则无法默认选中。"><a href="#5-有时在Select选项需要给个默认选项时，必须在data中传入string类型，如果是number则无法默认选中。" class="headerlink" title="5. 有时在Select选项需要给个默认选项时，必须在data中传入string类型，如果是number则无法默认选中。"></a>5. 有时在Select选项需要给个默认选项时，必须在data中传入string类型，如果是number则无法默认选中。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Form-item</span> <span class="attr">label</span>=<span class="string">&quot;个人/企业标识&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;personalOrEnterprise&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">Select</span> <span class="attr">v-model</span>=<span class="string">&quot;personalOrEnterprise&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;checkEnterprise&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>个人<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>企业<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form-item</span>&gt;</span></span><br><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">     personalOrEnterprise: &#x27;1&#x27;  //默认为个人</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-记录踩过的坑"><a href="#6-记录踩过的坑" class="headerlink" title="6.记录踩过的坑"></a>6.记录踩过的坑</h2><p>input 默认输入为String类型<br>如果在表单验证中声明 type：number，建议input中加上number属性，将用户的输入自动转换为 Number 类型。</p><p>select 单选多选<br>提示： 单选返回的是一个项，而多选返回的是数组。</p><p>dataPicker v-model失效<br>必须on-change返回并赋值才能实现数据绑定，否则:value无法捕捉日期的而选择变动。</p><h2 id="7-iview表单必填的标志显示"><a href="#7-iview表单必填的标志显示" class="headerlink" title="7.iview表单必填的标志显示"></a>7.iview表单必填的标志显示</h2><p>使用iview自定义表单校验时，对于v-if显示状态的修改会影响的显示</p><p>使用v-if设置在新增是密码字段显示，编辑时不显示<br>这时校验规则已完成，设置只有办公电话不是必填项<br>切换到编辑时，密码字段消失，但是办公电话前会出现*</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">v-if</span>=<span class="string">&quot;modalType===0&quot;</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userForm.password&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将v-if修改为v-show，可以解决这个问题</p><p>v-if只有在条件成立时才会生成dom<br>v-show是先生成dom，再通过css控制显示隐藏</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ViewUI </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue集成jQuery</title>
      <link href="2021/02/05/Vue%E9%9B%86%E6%88%90jQuery/"/>
      <url>2021/02/05/Vue%E9%9B%86%E6%88%90jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考文章：<a href="https://www.jianshu.com/p/8118f7f5298e">https://www.jianshu.com/p/8118f7f5298e</a></p><p>如果想在普通的HTML页面引入jQuer库的话，直接使用<code>&lt;script src=&quot;jQuery.js&quot;&gt;&lt;/script&gt;</code>即可。但是如果要在Vue组件中使用jQuery库的话，使用这样的方式就不行了，需要使用以下方法</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h5 id="安装jQuery依赖"><a href="#安装jQuery依赖" class="headerlink" title="安装jQuery依赖"></a>安装jQuery依赖</h5><p>在使用jQuery之前，我们首先要通过以下命令来安装jQuery依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果你更换了淘宝镜像，可以使用cnpm来安装，速度更快</span></span><br><span class="line">cnpm install jquery --save</span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>打开.eslintrc.js 文件，找到env ，在里面 添加 jquery:true，默认应该是只有node:true，如果都没有，那就加上env呗</p><p><img src="https://img-blog.csdnimg.cn/20181115093359133.png" alt="img"></p><p>四、打开<strong>vue.config.js</strong> 文件，在文件的头部位置加上const webpack = require(‘webpack’)，然后在module.exports中，添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack: &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">   <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">$:<span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">jQuery:<span class="string">&quot;jquery&quot;</span>,</span><br><span class="line"><span class="string">&quot;windows.jQuery&quot;</span>:<span class="string">&quot;jquery&quot;</span></span><br><span class="line">   &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181115093642141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FpNTIwNTg3,size_16,color_FFFFFF,t_70" alt="img"></p><p>这一步骤类似vue-cli2.0的配置方法</p><p>五、在main.js中添加“import $ from ‘jquery”，到此步，jquery的配置就完成了，至于怎么使用那就是你的事了</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解&#39;@CrossOrigin&#39;跨域</title>
      <link href="2021/02/04/%E6%B3%A8%E8%A7%A3@CrossOrigin/"/>
      <url>2021/02/04/%E6%B3%A8%E8%A7%A3@CrossOrigin/</url>
      
        <content type="html"><![CDATA[<h1 id="注解-CrossOrigin"><a href="#注解-CrossOrigin" class="headerlink" title="注解@CrossOrigin"></a>注解@CrossOrigin</h1><p>参考文章：<a href="https://www.cnblogs.com/mmzs/p/9167743.html">https://www.cnblogs.com/mmzs/p/9167743.html</a></p><p>　　出于安全原因，浏览器禁止Ajax调用驻留在当前原点之外的资源。例如，当你在一个标签中检查你的银行账户时，你可以在另一个选项卡上拥有EVILL网站。来自EVILL的脚本不能够对你的银行API做出Ajax请求（从你的帐户中取出钱！）使用您的凭据。</p><p>　　跨源资源共享（CORS）是由大多数浏览器实现的W3C规范，允许您灵活地指定什么样的跨域请求被授权，而不是使用一些不太安全和不太强大的策略，如IFRAME或JSONP。</p><h2 id="一、跨域-CORS-支持："><a href="#一、跨域-CORS-支持：" class="headerlink" title="一、跨域(CORS)支持："></a>一、跨域(CORS)支持：</h2><p>　　Spring Framework 4.2 GA为CORS提供了第一类支持，使您比通常的基于过滤器的解决方案更容易和更强大地配置它。所以springMVC的版本要在4.2或以上版本才支持@CrossOrigin</p><h2 id="二、使用方法："><a href="#二、使用方法：" class="headerlink" title="二、使用方法："></a>二、使用方法：</h2><h3 id="1、controller配置CORS"><a href="#1、controller配置CORS" class="headerlink" title="1、controller配置CORS"></a>1、controller配置CORS</h3><p>1.1、controller方法的CORS配置，您可以向@RequestMapping注解处理程序方法添加一个@CrossOrigin注解，以便启用CORS（默认情况下，@CrossOrigin允许在@RequestMapping注解中指定的所有源和HTTP方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中@CrossOrigin中的2个参数：</p><p><strong>origins</strong> ： 允许可访问的域列表</p><p><strong>maxAge</strong>：准备响应前的缓存持续的最大时间（以秒为单位）。</p><p>1.2、为整个controller启用@CrossOrigin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://domain2.com&quot;, maxAge = 3600)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，对于retrieve()和remove()处理方法都启用了跨域支持，还可以看到如何使用@CrossOrigin属性定制CORS配置。</p><p>1.3、同时使用controller和方法级别的CORS配置，Spring将合并两个注释属性以创建合并的CORS配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@CrossOrigin(maxAge &#x3D; 3600)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;account&quot;)</span><br><span class="line">public class AccountController &#123;</span><br><span class="line">    @CrossOrigin(origins &#x3D; &quot;http:&#x2F;&#x2F;domain2.com&quot;)</span><br><span class="line">    @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public Account retrieve(@PathVariable Long id) &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">    &#125;</span><br><span class="line">    @DeleteMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public void remove(@PathVariable Long id) &#123;</span><br><span class="line">       &#x2F;&#x2F; ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.4、如果您正在使用Spring Security，请确保在Spring安全级别启用CORS，并允许它利用Spring MVC级别定义的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.cors().and()...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、全局CORS配置"><a href="#2、全局CORS配置" class="headerlink" title="2、全局CORS配置"></a>2、全局CORS配置</h3><p>　　除了细粒度、基于注释的配置之外，您还可能需要定义一些全局CORS配置。这类似于使用筛选器，但可以声明为Spring MVC并结合细粒度@CrossOrigin配置。默认情况下，所有origins and GET, HEAD and POST methods是允许的。</p><p>JavaConfig</p><p>使整个应用程序的CORS简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您正在使用Spring Boot，建议将WebMvcConfigurer bean声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以轻松地更改任何属性，以及仅将此CORS配置应用到特定的路径模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/api/**&quot;</span>)</span><br><span class="line">        .allowedOrigins(<span class="string">&quot;http://domain2.com&quot;</span>)</span><br><span class="line">        .allowedMethods(<span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>, <span class="string">&quot;header3&quot;</span>)</span><br><span class="line">        .exposedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>)</span><br><span class="line">        .allowCredentials(<span class="keyword">false</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您正在使用Spring Security，请确保在Spring安全级别启用CORS，并允许它利用Spring MVC级别定义的配置。</p><h3 id="3、XML命名空间"><a href="#3、XML命名空间" class="headerlink" title="3、XML命名空间"></a>3、XML命名空间</h3><p>还可以将CORS与MVC XML命名空间配置。</p><p>a、如果整个项目所有方法都可以访问，则可以这样配置；此最小XML配置使CORS在/**路径模式具有与JavaConfig相同的缺省属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其中* 表示匹配到下一层；***</strong>* 表示后面不管有多少层，都能匹配。**</p><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/api/*&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>这个可以匹配到的路径有：</p><p>/api/aaa</p><p>/api/bbbb</p><p>不能匹配的：</p><p>/api/aaa/bbb</p><p>因为* 只能匹配到下一层路径，如果想后面不管多少层都可以匹配，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/api/**&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>注：其实就是一个(*)变成两个(**)</p><p>b、也可以用定制属性声明几个CORS映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/api/**&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-origins</span>=<span class="string">&quot;http://domain1.com, http://domain2.com&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-methods</span>=<span class="string">&quot;GET, PUT&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-headers</span>=<span class="string">&quot;header1, header2, header3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">exposed-headers</span>=<span class="string">&quot;header1, header2&quot;</span> <span class="attr">allow-credentials</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">max-age</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/resources/**&quot;</span> <span class="attr">allowed-origins</span>=<span class="string">&quot;http://domain1.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请求路径有/api/，方法示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/api/crossDomain&quot;)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">crossDomain</span><span class="params">(HttpServletRequest req, HttpServletResponse res, String name)</span></span>&#123;  </span><br><span class="line">    ……  </span><br><span class="line">    ……  </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>c、如果使用Spring Security，不要忘记<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/cors.html">在Spring安全级别启用CORS</a>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">http</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Default to Spring MVC&#x27;s CORS configuration --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cors</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、How-does-it-work"><a href="#4、How-does-it-work" class="headerlink" title="4、How does it work?"></a>4、How does it work?</h3><p>　　CORS请求（包括预选的带有选项方法）被自动发送到注册的各种HandlerMapping 。它们处理CORS准备请求并拦截CORS简单和实际请求，这得益于CorsProcessor实现（默认情况下默认<a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java">DefaultCorsProcessor</a>处理器），以便添加相关的CORS响应头（如Access-Control-Allow-Origin）。 <a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">CorsConfiguration</a> 允许您指定CORS请求应该如何处理：允许origins, headers, methods等。</p><p><code>a、AbstractHandlerMapping#setCorsConfiguration()</code> 允许指定一个映射，其中有几个<a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">CorsConfiguration</a> 映射在路径模式上，比如/api/**。</p><p>b、子类可以通过重写AbstractHandlerMapping类的getCorsConfiguration(Object, HttpServletRequest)方法来提供自己的CorsConfiguration。</p><p>c、处理程序可以实现 <a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfigurationSource.html"><code>CorsConfigurationSource</code></a>接口（如<a href="https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java"><code>ResourceHttpRequestHandler</code></a>），以便为每个请求提供一个<a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">CorsConfiguration</a>。</p><h3 id="5、基于过滤器的CORS支持"><a href="#5、基于过滤器的CORS支持" class="headerlink" title="5、基于过滤器的CORS支持"></a>5、基于过滤器的CORS支持</h3><p>　　作为上述其他方法的替代，Spring框架还提供了<a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/CorsFilter.html">CorsFilter</a>。在这种情况下，不用使用<code>@CrossOrigin或``WebMvcConfigurer#addCorsMappings(CorsRegistry)</code>,，例如，可以在Spring Boot应用程序中声明如下的过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;http://domain1.com&quot;</span>);</span><br><span class="line">    config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> CorsFilter(source));</span><br><span class="line">        bean.setOrder(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、spring注解-CrossOrigin不起作用的原因"><a href="#三、spring注解-CrossOrigin不起作用的原因" class="headerlink" title="三、spring注解@CrossOrigin不起作用的原因"></a>三、spring注解@CrossOrigin不起作用的原因</h2><p>1、是springMVC的版本要在4.2或以上版本才支持@CrossOrigin</p><p>2、非@CrossOrigin没有解决跨域请求问题，而是不正确的请求导致无法得到预期的响应，导致浏览器端提示跨域问题。</p><p>3、在Controller注解上方添加@CrossOrigin注解后，仍然出现跨域问题，解决方案之一就是：</p><p>在@RequestMapping注解中没有指定Get、Post方式，具体指定后，问题解决。</p><p>类似代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若干代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageHelper</title>
      <link href="2021/02/04/pagehelper/"/>
      <url>2021/02/04/pagehelper/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实际的项目开发中，常常需要使用到分页，分页方式分为两种：前端分页和后端分页。</p><blockquote><p>前端分页</p></blockquote><p>一次<code>ajax</code>请求数据的所有记录，然后在前端缓存并且计算<code>count</code>和分页逻辑，一般前端组件(例如dataTable)会提供分页动作。<br> 特点是：简单，很适合小规模的web平台；当数据量大的时候会产生性能问题，在查询和网络传输的时间会很长。</p><blockquote><p>后端分页</p></blockquote><p> 在ajax请求中指定页码<code>pageNum</code>和每页的大小<code>pageSize</code>，后端查询出当页的数据返回，前端只负责渲染。<br> 特点是：复杂一些；性能瓶颈在MySQL的查询性能，这个当然可以调优解决。一般来说，开发使用的是这种方式。</p><h2 id="不使用分页插件的分页操作"><a href="#不使用分页插件的分页操作" class="headerlink" title="不使用分页插件的分页操作"></a>不使用分页插件的分页操作</h2><p>在没有使用分页插件的时候需要先写一个查询<code>count</code>的<code>select</code>语句，然后再写一个真正分页查询的语句，MySQL中有对分页的支持，是通过<code>limit</code>子句<br> <strong><code>limit</code>关键字的用法是:<code>LIMIT [offset,] rows</code><br> <code>offset</code>是相对于首行的偏移量(首行是0)，<code>rows</code>是返回条数。</strong><br> 例如：<br> <strong>每页5条记录，取第一页，返回的是前5条记录</strong><br> <code>select * from tableA limit 0,5;</code><br> <strong>每页5条记录，取第二页，返回的是第6条记录，到第10条记录，</strong><br> <code>select * from tableA limit 5,5;</code><br> 不过当偏移量逐渐增大的时候，查询速度可能就会变慢，性能会有所下降</p><h1 id="使用Mybatis分页插件PageHelper"><a href="#使用Mybatis分页插件PageHelper" class="headerlink" title="使用Mybatis分页插件PageHelper"></a>使用Mybatis分页插件PageHelper</h1><p>PageHelper是一款好用的开源免费的Mybatis第三方物理分页插件<br> Github地址:<a href="https://github.com/pagehelper/Mybatis-PageHelper">https://github.com/pagehelper/Mybatis-PageHelper</a><br> 官方地址：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="1-首先要在pom-xml中配置PageHelper的依赖"><a href="#1-首先要在pom-xml中配置PageHelper的依赖" class="headerlink" title="1.首先要在pom.xml中配置PageHelper的依赖"></a>1.首先要在<code>pom.xml</code>中配置<code>PageHelper</code>的依赖</h3><p>在<a href="http://www.mvnrepository.com/%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%60pagehelper%60%E6%9C%89%604.x%60%E5%92%8C%605.x%60%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%EF%BC%8C%E7%94%A8%E6%B3%95%E6%9C%89%E6%89%80%E4%B8%8D%E5%90%8C%EF%BC%8C%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8%605.x%60%E7%89%88%E6%9C%AC%E7%9A%84%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%8A%A5%E9%94%99">http://www.mvnrepository.com/中可以发现`pagehelper`有`4.x`和`5.x`两个版本，用法有所不同，并不是向下兼容，在使用`5.x`版本的时候可能会报错</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 该参数默认为false --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 和startPage中的pageNum效果一样--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;offsetAsPageNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 该参数默认为false --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置为true时，使用RowBounds分页会进行count查询 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rowBoundsWithCount&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pageSizeZero&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,不配置映射的用默认值 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;params&quot; value=&quot;pageNum=start;pageSize=limit;pageSizeZero=zero;reasonable=heli;count=contsql&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面是<code>PageHelper</code>官方给的配置和注释，虽然写的很多，不过确实描述的很明白。</p><p><code>dialect</code>：标识是哪一种数据库，设计上必须。<br> <code>offsetAsPageNum</code>：将<code>RowBounds</code>第一个参数<code>offset</code>当成<code>pageNum</code>页码使用<br> <code>rowBoundsWithCount</code>：设置为<code>true</code>时，使用<code>RowBounds</code>分页会进行<code>count</code>查询<br> <code>reasonable</code>：<code>value=true</code>时，<code>pageNum</code>小于1会查询第一页，如果<code>pageNum</code>大于<code>pageSize</code>会查询最后一页</p><p><strong>注：上面的配置只针对于pagehelper4.x版本的</strong></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在serviceImpl中，先开启分页，然后把查询结果集放在pageInfo中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">listUserByPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;UserVo&gt; userVoList=userMapper.listUser();</span><br><span class="line">        PageInfo pageInfo=<span class="keyword">new</span> PageInfo(userVoList);</span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取第1页用户信息成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;pageNum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;orderBy&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;startRow&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;endRow&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">&quot;pages&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;userId&quot;</span>: <span class="string">&quot;a24d0c3b-2786-11e8-9835-e4f89cdc0d1f&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;2015081040&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;userId&quot;</span>: <span class="string">&quot;b0bc9e45-2786-11e8-9835-e4f89cdc0d1f&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;2015081041&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;userId&quot;</span>: <span class="string">&quot;b44fd6ac-2786-11e8-9835-e4f89cdc0d1f&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;2015081042&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;userId&quot;</span>: <span class="string">&quot;b7ac58f7-2786-11e8-9835-e4f89cdc0d1f&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;2015081043&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;userId&quot;</span>: <span class="string">&quot;bbdeb5d8-2786-11e8-9835-e4f89cdc0d1f&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;2015081044&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;prePage&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;nextPage&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;isFirstPage&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;isLastPage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;hasPreviousPage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;hasNextPage&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;navigatePages&quot;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">&quot;navigatepageNums&quot;</span>: [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;navigateFirstPage&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;navigateLastPage&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;firstPage&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;lastPage&quot;</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>属性</p></blockquote><p>PageInfo这个类里面的属性:<br> <code>pageNum</code>当前页<br> <code>pageSize</code>每页的数量<br> <code>size</code>当前页的数量<br> <code>orderBy</code>排序<br> <code>startRow</code>当前页面第一个元素在数据库中的行号<br> <code>endRow</code>当前页面最后一个元素在数据库中的行号<br> <code>total</code>总记录数(在这里也就是查询到的用户总数)<br> <code>pages</code>总页数 (这个页数也很好算，每页5条，总共有11条，需要3页才可以显示完)<br> <code>list</code>结果集<br> <code>prePage</code>前一页<br> <code>nextPage</code>下一页<br> <code>isFirstPage</code>是否为第一页<br> <code>isLastPage</code>是否为最后一页<br> <code>hasPreviousPage</code>是否有前一页<br> <code>hasNextPage</code>是否有下一页<br> <code>navigatePages</code>导航页码数<br> <code>navigatepageNums</code>所有导航页号<br> <code>navigateFirstPage</code>导航第一页<br> <code>navigateLastPage</code>导航最后一页<br> <code>firstPage</code>第一页<br> <code>lastPage</code>最后一页</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h5 id="PageHelper-安全调用"><a href="#PageHelper-安全调用" class="headerlink" title="PageHelper 安全调用"></a>PageHelper 安全调用</h5><p><strong>1. 使用 <code>RowBounds</code> 和 <code>PageRowBounds</code>参数方式是极其安全的</strong><br> <strong>2. 使用参数方式是极其安全的</strong><br> <strong>3. 使用 ISelect 接口调用是极其安全的</strong><br> <code>ISelect</code>接口方式除了可以保证安全外，还特别实现了将查询转换为单纯的 count 查询方式，这个方法可以将任意的查询方法，变成一个 <code>select count(*)</code> 的查询方法。<br> <strong>4. 什么时候会导致不安全的分页？</strong><br> <strong>PageHelper</strong> 方法使用了静态的 <code>ThreadLocal</code> 参数，分页参数和线程是绑定的。<br> <strong>只要你可以保证在 PageHelper 方法调用后紧跟 MyBatis 查询方法，这就是安全的。</strong>因为 PageHelper 在 <code>finally</code> 代码段中自动清除了 <code>ThreadLocal</code>存储的对象。</p><p><strong><em>如果代码在进入 <code>Executor</code> 前发生异常，就会导致线程不可用，这属于人为的 Bug（例如接口方法和 XML 中的不匹配，导致找不到 <code>MappedStatement</code> 时）， 这种情况由于线程不可用，也不会导致 ThreadLocal 参数被错误的使用。\</em></strong></p><p><strong>但是如果你写出下面这样的代码，就是不安全的用法：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">List</span>&lt;Country&gt; <span class="keyword">list</span>;</span><br><span class="line"><span class="keyword">if</span>(param1 != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">list</span> = countryMapper.selectIf(param1);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;Country&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下由于 <code>param1</code> 存在<code>null</code>的情况，就会导致 PageHelper 生产了一个分页参数，但是没有被消费，这个参数就会一直保留在这个线程上。当这个线程再次被使用时，就可能导致不该分页的方法去消费这个分页参数，这就产生了莫名其妙的分页。<br> <strong>上面这个代码，应该写成下面这个样子：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">List</span>&lt;Country&gt; <span class="keyword">list</span>;</span><br><span class="line"><span class="keyword">if</span>(param1 != <span class="literal">null</span>)&#123;</span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">list</span> = countryMapper.selectIf(param1);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;Country&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这种写法就能保证安全。</strong></p><h2 id="springboot-pagehelper"><a href="#springboot-pagehelper" class="headerlink" title="springboot+pagehelper"></a>springboot+pagehelper</h2><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果整合mybatis plus 需要把内置的mybatis去除，不然会发生版本冲突--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在application里配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分页配置</span></span><br><span class="line"><span class="attr">pagehelper</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">helper-dialect</span>: <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable</span>: <span class="string">true</span></span><br><span class="line">  <span class="meta">support-methods-arguments</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">params</span>: <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><p>3.使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(pageNum,pageSize);<span class="comment">//这行是重点，表示从pageNum页开始，每页pageSize条数据</span></span><br><span class="line">      List&lt;Tools&gt; list = toolsMapper.findAll();</span><br><span class="line">      PageInfo&lt;Tools&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;Tools&gt;(list);</span><br><span class="line">      <span class="keyword">return</span> ServerResponse.createBySuccess(<span class="string">&quot;查询成功&quot;</span>,pageInfo);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pageHelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口文档Swagger</title>
      <link href="2021/02/04/swagger/"/>
      <url>2021/02/04/swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。</p><blockquote><p>作用</p></blockquote><ol><li><p>接口的文档在线自动生成。</p></li><li><p>功能测试。</p></li></ol><blockquote><p>主要项目</p></blockquote><p><strong>Swagger是一组开源项目，其中主要要项目如下：</strong></p><ol><li><p> <strong>Swagger-tools</strong>:提供各种与Swagger进行集成和交互的工具。例如模式检验、Swagger 1.2文档转换成Swagger 2.0文档等功能。</p></li><li><p><strong>Swagger-core</strong>: 用于Java/Scala的的Swagger实现。与JAX-RS(Jersey、Resteasy、CXF…)、Servlets和Play框架进行集成。</p></li><li><p><strong>Swagger-js</strong>: 用于JavaScript的Swagger实现。</p></li><li><p><strong>Swagger-node-express</strong>: Swagger模块，用于node.js的Express web应用框架。</p></li><li><p><strong>Swagger-ui</strong>：一个无依赖的HTML、JS和CSS集合，可以为Swagger兼容API动态生成优雅文档。</p></li><li><p><strong>Swagger-codegen</strong>：一个模板驱动引擎，通过分析用户Swagger资源声明以各种语言生成客户端代码。</p></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><p>版本号请根据实际情况自行更改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h2><p>在Application.java同级创建Swagger2的配置类Swagger2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hl.schoolbar.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: huangLong</span></span><br><span class="line"><span class="comment"> * date:2021/2/4 9:34</span></span><br><span class="line"><span class="comment"> * describe: swagger2的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建API应用</span></span><br><span class="line"><span class="comment">     * apiInfo() 增加API相关信息</span></span><br><span class="line"><span class="comment">     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span></span><br><span class="line"><span class="comment">     * 本例采用指定扫描的包路径来定义指定要建立API的目录。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.hl.schoolbar.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建该API的基本信息（这些基本信息会展现在文档页面中）</span></span><br><span class="line"><span class="comment">     * 访问地址：http://项目实际地址/swagger-ui.html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    private ApiInfo apiInfo() &#123;</span></span><br><span class="line"><span class="comment">//        return new ApiInfoBuilder()</span></span><br><span class="line"><span class="comment">//                .title(&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;)</span></span><br><span class="line"><span class="comment">//                .description(&quot;更多请关注http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="comment">//                .termsOfServiceUrl(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="comment">//                .contact(&quot;sunf&quot;)</span></span><br><span class="line"><span class="comment">//                .version(&quot;1.0&quot;)</span></span><br><span class="line"><span class="comment">//                .build();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;校园论坛API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;使用RestFul风格,API说明&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;no terms service&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;version 1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a>添加文档内容</h2><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，描述的主要来源是函数的命名，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。</p><h2 id="Swagger使用的注解及其说明"><a href="#Swagger使用的注解及其说明" class="headerlink" title="Swagger使用的注解及其说明"></a>Swagger使用的注解及其说明</h2><p><a href="https://my.oschina.net/u/2396174">@Api</a>：用在类上，说明该类的作用。</p><p>@ApiOperation：注解来给API增加方法说明。</p><p>@ApiImplicitParams : 用在方法上包含一组参数说明。</p><p>@ApiImplicitParam：用来注解来给方法入参增加说明。</p><p>@ApiResponses：用于表示一组响应</p><p>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息</p><p>  l  <strong>code</strong>：数字，例如400</p><p>  l  <strong>message</strong>：信息，例如”请求参数没填好”</p><p>  l  <strong>response</strong>：抛出异常的类  </p><p>@ApiModel：描述一个Model的信息（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）</p><p>  l  <strong>@ApiModelProperty</strong>：描述一个model的属性</p><p>注意：@ApiImplicitParam的参数说明：</p><table><thead><tr><th><strong>paramType</strong>：指定参数放在哪个地方</th><th>header：请求参数放置于Request Header，使用@RequestHeader获取query：请求参数放置于请求地址，使用@RequestParam获取path：（用于restful接口）–&gt;请求参数的获取：@PathVariablebody：（不常用）form（不常用）</th></tr></thead><tbody><tr><td>name：参数名</td><td></td></tr><tr><td>dataType：参数类型</td><td></td></tr><tr><td>required：参数是否必须传</td><td>true | false</td></tr><tr><td>value：说明参数的意思</td><td></td></tr><tr><td>defaultValue：参数的默认值</td><td></td></tr></tbody></table><blockquote><p>例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hl.schoolbar.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hl.schoolbar.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.hl.schoolbar.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> com.hl.schoolbar.utils.Result;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-02-04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;类别管理&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value=&quot;添加类别&quot;, notes=&quot;以json格式传递数据&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(paramType=&quot;query&quot;, name = &quot;categoryId&quot;, value = &quot;类别id&quot;, required = false, dataType = &quot;Integer&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(paramType=&quot;query&quot;, name = &quot;categoryName&quot;, value = &quot;类别名称&quot;, required = true, dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(paramType=&quot;query&quot;, name = &quot;categoryPid&quot;, value = &quot;父类别id&quot;, required = true, dataType = &quot;Integer&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/insCategory&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">insCategory</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryServiceImpl.insCategory(category);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210204095202982.png" alt="image-20210204095202982"></p><blockquote><p>注意</p></blockquote><p>1.paramType会直接影响程序的运行期，如果paramType与方法参数获取使用的注解不一致，会直接影响到参数的接收。</p><p>2.Conntroller中定义的方法必须在@RequestMapper中显示的指定RequestMethod类型，否则SawggerUi会默认为全类型皆可访问， API列表中会生成多条项目</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js</title>
      <link href="2021/01/15/Vue.js/"/>
      <url>2021/01/15/Vue.js/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.bilibili.com/video/BV15741177Eh">2019年最全最新Vue、Vuejs教程，从入门到精通</a></p><p><a href="https://cn.vuejs.org/">vue官网</a></p><blockquote><p>学习路线</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114163708758.png" alt="image-20210114163708758"></p><h1 id="Es6语法"><a href="#Es6语法" class="headerlink" title="Es6语法"></a>Es6语法</h1><h2 id="let-var"><a href="#let-var" class="headerlink" title="let/var"></a>let/var</h2><p>let：当变量需要改变的时候</p><p>const：当变量不需要改变时</p><p>事实上var的设计可以看出JavaScript语言设计上的错误，var没有块级作用域,只有函数具有作用域</p><blockquote><p>例子</p></blockquote><p>1.if</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> name = <span class="string">&quot;why&quot;</span>;</span><br><span class="line">      func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    name = <span class="string">&quot;kobe&quot;</span></span><br><span class="line">    func();</span><br></pre></td></tr></table></figure><p>正常情况下，我们想要打印出来的是why，但是由于var没有块作用域，导致在{}外可以对name进行修改。导致打印出来的是</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210115164402759.png" alt="image-20210115164402759"></p><p>2.for</p><p>先创建3个button标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="line">    btns[i].addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>正常情况下，我们想要点击第几个按钮，打印第几个按钮，但是由于var没有块作用域，导致在点击时i已经被最后一次循环修改了，所以打印最后一个</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210115164722061.png" alt="image-20210115164722061"></p><p>以前为了解决这种问题，采用了闭包，因为函数具有自己的作用域，优先使用自己的作用域的属性</p><blockquote><p>块级作用域</p></blockquote><p>js中使用var来声明一个变量时，变量的作用域主要是和函数定义有关。</p><p>针对其他块定义来说是没有作用域的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.变量作用域：变量在什么范围内是可用的</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//var没有作用域</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//比如在&#123;&#125;内定义一个属性，在&#123;&#125;外也是可以被访问到的</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   var name = &quot;why&quot;;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(name);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(name);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//2.没有块级作用域 会引起的问题</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//在以下的代码中，本来打印出来的是why，但是在&#123;&#125;外，</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//name可以被访问到，导致在&#123;&#125;外可以对name进行修改，从而导致func()打印出的数据不对</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// var func;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// if(true)&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   var name = &quot;why&quot;;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   func = function()&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(name);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// name = &quot;kobe&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// func();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(name);</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;btns.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">      btns[i].addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个&quot;</span>);</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="const的使用"><a href="#const的使用" class="headerlink" title="const的使用"></a>const的使用</h2><p>将某个变量修饰为常量，不可以再次赋值</p><p>在使用cosnt定义标识符时必须赋值</p><p>常量的含义时指向的对象不能修改，但是对象内部的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">   <span class="comment">//常量 不可以被修改</span></span><br><span class="line">   <span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span>;</span><br><span class="line">   name = <span class="string">&quot;111&quot;</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="comment">//在使用cosnt定义标识符时必须赋值</span></span><br><span class="line"> <span class="comment">//常量的含义时指向的对象不能修改，但是对象内部的属性</span></span><br><span class="line">   <span class="keyword">const</span> obj = &#123;</span><br><span class="line">     name: <span class="string">&quot;why&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   obj.name = <span class="string">&quot;111&quot;</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(obj.name);</span><br><span class="line"></span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210119163133240.png" alt="image-20210119163133240"></p><h2 id="对象增强写法"><a href="#对象增强写法" class="headerlink" title="对象增强写法"></a>对象增强写法</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210119164003553.png" alt="image-20210119164003553"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210119164013794.png" alt="image-20210119164013794"></p><h2 id="箭头函数的使用和this的指向"><a href="#箭头函数的使用和this的指向" class="headerlink" title="箭头函数的使用和this的指向"></a>箭头函数的使用和this的指向</h2><p>=&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">//箭头函数也是一种定义函数的方式  </span></span><br><span class="line">   <span class="keyword">const</span> ccc = <span class="function">(<span class="params">num1,num2</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  num1 +num2;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> ccc = <span class="function"><span class="params">num</span> =&gt;</span>&#123;</span><br><span class="line">   </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">const</span> ccc = <span class="function">(<span class="params">num1,num2</span>) =&gt;</span> num1 +num2;</span><br><span class="line">   <span class="comment">//一般定义函数</span></span><br><span class="line">   <span class="keyword">const</span> aaa = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//对象字面量的中定义函数</span></span><br><span class="line">   <span class="keyword">const</span> obj =&#123;</span><br><span class="line">     <span class="function"><span class="title">bbb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>箭头函数的中的this指向最近作用域里的this</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>ES6中一个非常重要和好用的特性就是Promise<br>但是初次接触Promise会一脸懵逼，这TM是什么东西？<br>看看官方或者一些文章对它的介绍和用法，也是一头雾水。</p><blockquote><p>Promise到底是做什么的呢？</p></blockquote><p>Promise是异步编程的一种解决方案。</p><blockquote><p>那什么时候我们会来处理异步事件呢？</p></blockquote><p>一种很常见的场景应该就是网络请求了。<br>我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。但是，当网络请求非常复杂时，就会出现回调地狱。</p><blockquote><p>使用</p></blockquote><p>new Promise很明显是创建一个Promise对象<br>小括号中((resolve, reject) =&gt; {})也很明显就是一个函数，而且我们这里用的是之前刚刚学习过的箭头函数。<br>但是resolve, reject它们是什么呢？<br>我们先知道一个事实：在创建Promise时，传入的这个箭头函数是固定的（一般我们都会这样写）<br>resolve和reject它们两个也是函数，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。<br>成功还是失败？<br>如果是成功的，那么通常我们会调用resolve(messsage)，这个时候，我们后续的then会被回调。<br>如果是失败的，那么通常我们会调用reject(error)，这个时候，我们后续的catch会被回调。<br>OK，这就是Promise最基本的使用了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.使用setTimeout</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// setTimeout(()=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(&quot;hello&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//使用promise resolve 成功后调用的函数,reject 失败后调用的函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//resolve会调用then</span></span></span><br><span class="line"><span class="javascript">        resolve(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line">      &#125;,1000)</span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> data+<span class="string">&quot;1111&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">      data+<span class="string">&quot;2222&quot;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//表示报错</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(data+<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//这部分代码不执行</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;============&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;).catch(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//当返回reject()时，即报错 才会调用该部分代码</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> data+<span class="string">&quot;3333333333&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//由于reject已经被catch处理了，所以可以继续链式调用下去</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data);</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>promise的三种状态</p></blockquote><p>首先, 当我们开发中有异步操作时, 就可以给异步操作包装一个Promise<br>异步操作之后会有三种状态<br>我们一起来看一下这三种状态:<br>pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。<br>fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()<br>reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201101339306.png" alt="image-20210201101339306"></p><blockquote><p>链式调用简写</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201100222826.png" alt="image-20210201100222826"></p><blockquote><p>all</p></blockquote><p>当完成一个业务时，需要多个请求同时完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//请求1</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//请求2</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]).then(<span class="function"><span class="params">results</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//只有所有请求都完成后才会执行，该then方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//第一个请求</span></span><br><span class="line">      results[<span class="number">0</span>];</span><br><span class="line">      <span class="comment">//第二个请求</span></span><br><span class="line">      results[<span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">      age:18,</span><br><span class="line"><span class="javascript">      sex:<span class="string">&quot;男&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//对象的结构</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123;name,age,sex&#125; = obj;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(name);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(age);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sex);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201162310557.png"></p><h1 id="邂逅Vue-js"><a href="#邂逅Vue-js" class="headerlink" title="邂逅Vue.js"></a>邂逅Vue.js</h1><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114163913670.png" alt="image-20210114163913670"></p><h2 id="遇见Vue-js"><a href="#遇见Vue-js" class="headerlink" title="遇见Vue.js"></a>遇见Vue.js</h2><h3 id="为什么学习Vue-js"><a href="#为什么学习Vue-js" class="headerlink" title="为什么学习Vue.js"></a>为什么学习Vue.js</h3><p>1.可能你的公司正要将原有的项目使用Vue进行重构。<br>2.也可能是你的公司新项目决定使用Vue的技术栈。<br>3.当然，如果你现在正在换工作，你会发现招聘前端的需求中，10个有8个都对Vue有或多或少的要求。<br>4.当然，作为学习者我们知道Vuejs目前非常火，可以说是前端必备的一个技能。</p><h3 id="简单认识vue-js"><a href="#简单认识vue-js" class="headerlink" title="简单认识vue.js"></a>简单认识vue.js</h3><blockquote><p>渐进式框架</p></blockquote><p>1.渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。<br>2.或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。<br>3.比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。</p><blockquote><p>特点</p></blockquote><p>1.解耦视图和数据<br>2.可复用的组件<br>3.前端路由技术<br>4.状态管理<br>5.虚拟DOM</p><blockquote><p>学习前提</p></blockquote><p>1.从零学习Vue开发，并不需要你具备其他类似于Angular、React，甚至是jQuery的经验。<br>2.但是你需要具备一定的HTML、CSS、JavaScript基础。</p><h2 id="安装vue-js"><a href="#安装vue-js" class="headerlink" title="安装vue.js"></a>安装vue.js</h2><p>1.直接CDN引入<br>你可以选择引入开发环境版本还是生产环境版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.下载和引入<br><a href="https://vuejs.org/js/vue.js">开发环境</a><br><a href="https://vuejs.org/js/vue.js">生产环境</a><br>3.NPM安装,后续通过webpack和CLI的使用，我们使用该方式。</p><h2 id="体验Vue"><a href="#体验Vue" class="headerlink" title="体验Vue"></a>体验Vue</h2><h3 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h3><blockquote><p>hello</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Es6 定义let（变量）/const（常量）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//声明式编程</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> name = <span class="string">&quot;name&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//新建一个vue实例，并让vue实例管理id为app的文档节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//绑定对象</span></span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,  </span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义数据</span></span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                message :<span class="string">&quot;hello Vue&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 原始js的做法(编程范式: 命令式编程)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.创建div元素,设置id属性</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.定义一个变量叫message</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.将message变量放在前面的div元素中显示</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4.修改message的数据: 今天天气不错!</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 5.将修改后的数据再次替换到div元素</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>声明式编程：可以让数据与界面分离，以后只用在界面里嵌套一些东西。</p><p>响应式：当数据改变后，界面自动更改。</p><blockquote><p>代码做了什么</p></blockquote><p>创建Vue对象的时候，传入了一些options：{}<br>{}中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了id为app的元素上。<br>{}中包含了data属性：该属性中通常会存储一些数据，这些数据可以是我们直接定义出来的，比如像上面这样。也可能是来自网络，从服务器加载的。</p><h3 id="vue列表"><a href="#vue列表" class="headerlink" title="vue列表"></a>vue列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--v-for=&quot;item in 属性名&quot; 循环--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in movies&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                message: <span class="string">&quot;你好啊&quot;</span>,</span></span><br><span class="line"><span class="javascript">                movies: [<span class="string">&#x27;星际穿越&#x27;</span>,<span class="string">&#x27;星球大战&#x27;</span>,<span class="string">&#x27;星际陆战队&#x27;</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 计数器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--v-on 事件绑定 简写 @--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//绑定</span></span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//数据</span></span></span><br><span class="line">            data: &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//方法</span></span></span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">              add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//此时this等于app</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;add被执行&quot;</span>);</span></span><br><span class="line">              &#125;,</span><br><span class="line"><span class="javascript">              sub: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;sub被执行&quot;</span>);</span></span><br><span class="line">              &#125;  </span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>methods:<br>类型：{ [key: string]: Function }<br>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</p><h2 id="Vue的MVVM"><a href="#Vue的MVVM" class="headerlink" title="Vue的MVVM"></a>Vue的MVVM</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210115100321427.png" alt="image-20210115100321427"></p><p>1.View层：<br>视图层，在我们前端开发中，通常就是DOM层。主要的作用是给用户展示各种信息。<br>2.Model层：<br>数据层<br>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。<br>3.VueModel层：<br>视图模型层，视图模型层是View和Model沟通的桥梁。一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中。另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</p><blockquote><p>计数器中的MVVM</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/01-%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84MVVM.png" alt="01-计数器的MVVM"></p><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p>生命周期：从诞生到消亡</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210115101331181.png" alt="image-20210115101331181"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210115101344470.png" alt="image-20210115101344470"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210115101352661.png" alt="image-20210115101352661"></p><blockquote><p>生命周期函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message : <span class="string">&quot;Welcome Vue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.message = <span class="string">&#x27;Datura is me&#x27;</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                vm.$destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeCreate 创建前状态===============》&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el); <span class="comment">//undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data); <span class="comment">//undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message);<span class="comment">//undefined</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;created 创建完毕状态===============》&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el); <span class="comment">//undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data); <span class="comment">//[object Object]  =&gt;  已被初始化</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message); <span class="comment">//Welcome Vue  =&gt;  已被初始化</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeMount 挂载前状态===============》&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;el     : &quot;</span> + (<span class="built_in">this</span>.$el)); <span class="comment">//已被初始化</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el); <span class="comment">// 当前挂在的元素</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data); <span class="comment">//已被初始化</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message); <span class="comment">//已被初始化</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;mounted 挂载结束状态===============》&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el); <span class="comment">//已被初始化</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data); <span class="comment">//已被初始化</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message); <span class="comment">//已被初始化</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;更新前状态&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeUpdate 更新前状态===============》&#x27;</span>); <span class="comment">//这里指的是页面渲染新数据之前</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message);</span><br><span class="line">            alert(<span class="string">&quot;更新前状态2&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;updated 更新完成状态===============》&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:green&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;beforeDestroy 销毁前状态===============》&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">&#x27;destroyed 销毁完成状态===============》&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;el     : &quot;</span> + <span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;data   : &quot;</span> + <span class="built_in">this</span>.$data);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%c%s&quot;</span>, <span class="string">&quot;color:red&quot;</span>,<span class="string">&quot;message: &quot;</span> + <span class="built_in">this</span>.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210115103855733.png" alt="image-20210115103855733"></p><h2 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h2><blockquote><p>vscode设置模板</p></blockquote><p>由于在后面的代码中存在大量重复代码，所以就将这个些代码抽取出来，生成一个模板。</p><p>具体方法参考这篇博客<a href="https://blog.csdn.net/s_y_w123/article/details/86481509">Vscode中快速创建自定义代码模板</a></p><h3 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法"></a>Mustache语法</h3><p>也就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>01-Mustache语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    //Mustache语法 &#123;&#123;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简单表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+&quot; &quot;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125;  &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter*2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        firstName: <span class="string">&quot;h&quot;</span>,</span></span><br><span class="line"><span class="javascript">        lastName: <span class="string">&quot;l&quot;</span>,</span></span><br><span class="line">        counter: 100</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>只在第一次展示数据，阻止响应式</p><p>该指令后面不需要跟任何表达式(比如之前的v-for后面是由跟表达式的)<br>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-once<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只在第一次展示数据，阻止响应式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>可以解析标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>03-v-html指令的使用.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以解析标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span> = <span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//数据是html格式带有标签</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        url: &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-test"><a href="#v-test" class="headerlink" title="v-test"></a>v-test</h3><p>不够灵活，会覆盖内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>04-v-text指令的使用.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span> = <span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//数据是html格式带有标签</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        url: &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p>原封不动的展示内容，不作解析</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>解决插值闪烁问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>06-v-cloak指令的使用.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在vue展示之前有v-cloak</span></span><br><span class="line"><span class="comment">  vue解析之后没有v-cloak --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h2><p>前面我们学习的指令主要作用是将值插入到我们模板的内容当中。但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。比如动态绑定a元素的href属性，比如动态绑定img元素的src属性。</p><h3 id="v-bind基本使用"><a href="#v-bind基本使用" class="headerlink" title="v-bind基本使用"></a>v-bind基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123;&#125;&#125;只能在元素内容使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;img src=&quot;&#123;&#123;&#125;&#125;&quot; alt=&quot;&quot;&gt; 是错误的 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-bind来动态绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-bind语法糖来动态绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        imgUrl: <span class="string">&quot;https://www.runoob.com/wp-content/uploads/2017/01/vue.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">        url: <span class="string">&quot;https://www.runoob.com/vue2/vue-tutorial.html&quot;</span></span></span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind绑定class属性"><a href="#v-bind绑定class属性" class="headerlink" title="v-bind绑定class属性"></a>v-bind绑定class属性</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><p>用法一：直接通过{}绑定一个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: isActive&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用法二：也可以通过判断，传入多个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: isActive, &#x27;line&#x27;: isLine&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用法三：和普通的类同时存在，并不冲突<br>注：如果isActive和isLine都为true，那么会有title/active/line三个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: isActive, &#x27;line&#x27;: isLine&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classes&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>用法一：直接通过{}绑定一个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;]&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用法二：也可以传入多个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> &#x27;<span class="attr">line</span>&#x27;]&quot;&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用法三：和普通的类同时存在，并不冲突<br>注：会有title/active/line三个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> &#x27;<span class="attr">line</span>&#x27;]&quot;&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classes&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h2 class=&quot;active&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">    &lt;h2 :class=&quot;active&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 当对应类名的布尔值为true的时候加载这个类</span></span><br><span class="line"><span class="comment">    &lt;h2 v-bind:class=&quot;&#123;类名1:布尔值,类名2:布尔值&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- isActive，isActive在data里 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h2 class=&quot;h2&quot; v-bind:class=&quot;&#123;active: isActive, line: isActive&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 对象语法绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;getClasses()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组语法  写死的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[active,line]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 修改颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;switchColor&quot;</span>&gt;</span>!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        isLine: <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        switchColor: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.isActive = !<span class="built_in">this</span>.isActive;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        getClasses: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;<span class="attr">active</span>: <span class="built_in">this</span>.isActive, <span class="attr">line</span>: <span class="built_in">this</span>.isLine&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind-v-for结合"><a href="#v-bind-v-for结合" class="headerlink" title="v-bind+v-for结合"></a>v-bind+v-for结合</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in movies&quot;</span>  <span class="attr">:class</span>=<span class="string">&quot;&#123;active:concurrentIndex === index&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getClass(index)&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        movies: [<span class="string">&quot;星界旅行&quot;</span>,<span class="string">&quot;巨人&quot;</span>,<span class="string">&quot;十方&quot;</span>,<span class="string">&quot;咒术&quot;</span>],</span></span><br><span class="line">        concurrentIndex: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        getClass: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.concurrentIndex=index;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind绑定style属性"><a href="#v-bind绑定style属性" class="headerlink" title="v-bind绑定style属性"></a>v-bind绑定style属性</h3><p>对象语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:style=&quot;&#123;color: currentColor, fontSize: fontSize + &#x27;px&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><p>数组语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对象语法</span></span><br><span class="line"><span class="comment">    &#123;key1:value,key2:value&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也可以抽取成一个方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span> =<span class="string">&quot;getStyle()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line">        fontSize: 50,</span><br><span class="line"><span class="javascript">        color: <span class="string">&quot;red&quot;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        getStyle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;<span class="attr">fontSize</span>: <span class="built_in">this</span>.fontSize+<span class="string">&#x27;px&#x27;</span>,<span class="attr">color</span>: <span class="built_in">this</span>.color&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据。但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示。比如我们有firstName和lastName两个变量，我们需要显示完整的名称。但是如果多个地方都需要显示完整的名称，我们就需要写多个 ，我们可以将上面的代码换成计算属性：OK，我们发现计算属性是写在实例的computed选项中的。</p><blockquote><p>computed与methods区别</p></blockquote><p>计算属性存在缓存，不会像方法一样每次重新计算</p><h3 id="计算属性基础使用"><a href="#计算属性基础使用" class="headerlink" title="计算属性基础使用"></a>计算属性基础使用</h3><p>Vue对象的属性computed</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 没用计算属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--计算属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        firstName: <span class="string">&quot;heaven&quot;</span>,</span></span><br><span class="line"><span class="javascript">        lastName: <span class="string">&quot;immortal&quot;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//计算属性</span></span></span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="javascript">        fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="built_in">this</span>.lastName;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性复杂操作"><a href="#计算属性复杂操作" class="headerlink" title="计算属性复杂操作"></a>计算属性复杂操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line">        books: [</span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="number">110</span>,<span class="attr">name</span>:<span class="string">&quot;编程艺术&quot;</span>,<span class="attr">price</span>:<span class="number">11</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="number">111</span>,<span class="attr">name</span>:<span class="string">&quot;代码大全&quot;</span>,<span class="attr">price</span>:<span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="number">112</span>,<span class="attr">name</span>:<span class="string">&quot;计算机原理&quot;</span>,<span class="attr">price</span>:<span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>:<span class="number">113</span>,<span class="attr">name</span>:<span class="string">&quot;操作系统&quot;</span>,<span class="attr">price</span>:<span class="number">14</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="javascript">        totalPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> result = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// for(let i = 0;i&lt;books.length;i++)&#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   result +=books[i].price;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">//es6 for循环</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span>(<span class="keyword">let</span> book <span class="keyword">of</span> <span class="built_in">this</span>.books)&#123;</span></span><br><span class="line">            result +=book.price;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> result;</span></span><br><span class="line">        &#125; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的setter和getter</h3><p>每个计算属性都包含一个getter和一个setter<br>在上面的例子中，我们只是使用getter来读取。<br>在某些情况下，你也可以提供一个setter方法（不常用）。<br>在需要写setter的时候，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;fullName&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        firstName: <span class="string">&quot;heaven&quot;</span>,</span></span><br><span class="line"><span class="javascript">        lastName: <span class="string">&quot;immortal&quot;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// fullName: function()&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   return this.firstName+this.lastName</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line">       </span><br><span class="line">        fullName:&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//一般不需要设置set方法 ,如果需要实现，一般需要传参</span></span></span><br><span class="line"><span class="javascript">          set:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="built_in">this</span>.lastName</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件监听v-on和"><a href="#事件监听v-on和" class="headerlink" title="事件监听v-on和@"></a>事件监听v-on和@</h2><p>在前端开发中，我们需要经常和用于交互。这个时候，我们就必须监听用户发生的时间，比如点击、拖拽、键盘事件等等。在Vue中如何监听事件呢？使用v-on指令</p><h3 id="v-on基本使用"><a href="#v-on基本使用" class="headerlink" title="v-on基本使用"></a>v-on基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;add()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;decrement()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语法糖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        counter:0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter++;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter--;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on参数问题"><a href="#v-on参数问题" class="headerlink" title="v-on参数问题"></a>v-on参数问题</h3><p>1.如果该方法不需要额外参数，那么方法后的()可以不添加。<br>但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去<br>2.如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;add()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;decrement()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语法糖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        counter:0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter++;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter--;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on的修饰符"><a href="#v-on的修饰符" class="headerlink" title="v-on的修饰符"></a>v-on的修饰符</h3><p>在某些情况下，我们拿到event的目的可能是进行一些事件处理。<br>Vue提供了修饰符来帮助我们方便的处理一些事件：<br>.stop - 调用 event.stopPropagation()。<br>.prevent - 调用 event.preventDefault()。<br>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。<br>.native - 监听组件根元素的原生事件。<br>.once - 只触发一次回调。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210120093321381.png" alt="image-20210120093321381"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> @<span class="attr">click</span>= <span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- .stop阻止事件冒泡--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- .prevent阻止默认事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click.prevent.stop</span> = <span class="string">&quot;submitClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 监听键盘事件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; @keyup = &quot;keyup&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span> = <span class="string">&quot;keyup&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- once修饰符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span> = <span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">divClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">submitClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;submitClick&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">keyup</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;keyup&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>v-if、v-else-if、v-else<br>这三个指令与JavaScript的条件语句if、else、else if类似。<br>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h2 v-if=&quot;score&gt;1&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">    &lt;h2 v-else&gt;这时else&lt;/h2&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line">        score:81</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><p>用户登录切换：账号、邮箱</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUser = !isUser&quot;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        isUser:<span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>小问题</p></blockquote><p>如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前的输入的内容。<br>但是按道理讲，我们应该切换到另外一个input元素中了。在另一个input元素中，我们并没有输入内容。为什么会出现这个问题呢？<br>问题解答:这是因为Vue在进行虚拟DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。在上面的案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了。<br>解决方案：如果我们不希望Vue出现类似重复利用的问题，可以给对应的input添加key,并且我们需要保证key的不同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUser = !isUser&quot;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show的用法和v-if非常相似，也用于决定一个元素是否渲染,条件不满足是相当于行内样式 display: none</p><blockquote><p>v-if和v-show对比</p></blockquote><p>v-if和v-show都可以决定一个元素是否渲染，那么开发中我们如何选择呢？<br>v-if当条件为false时，压根不会有对应的元素在DOM中。<br>v-show当条件为false时，仅仅是将元素的display属性设置为none而已。</p><blockquote><p>开发中如何选择呢？</p></blockquote><p>当需要在显示与隐藏之间切片很频繁时，使用v-show<br>当只有一次切换时，通过使用v-if</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span>SHOW<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--display: none;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bbb&quot;</span>&gt;</span>SHOW<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        isShow: <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in array&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        array:[<span class="string">&quot;星球大战&quot;</span>,<span class="string">&quot;星际穿越&quot;</span>,<span class="string">&quot;星际陆战队&quot;</span>]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p>item相当于值，index相当于属性名 (value,key,index)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item相当于值，index相当于属性名 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in obj&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        array:[<span class="string">&quot;星球大战&quot;</span>,<span class="string">&quot;星际穿越&quot;</span>,<span class="string">&quot;星际陆战队&quot;</span>],</span></span><br><span class="line">        obj:&#123;</span><br><span class="line"><span class="javascript">          name:<span class="string">&quot;天行者&quot;</span>,</span></span><br><span class="line"><span class="javascript">          sex:<span class="string">&quot;男&quot;</span>,</span></span><br><span class="line"><span class="javascript">          age:<span class="string">&quot;18&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><p>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item相当于值，index相当于属性名 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in array&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        array:[<span class="string">&quot;星球大战&quot;</span>,<span class="string">&quot;星际穿越&quot;</span>,<span class="string">&quot;星际陆战队&quot;</span>],</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// push()方法</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.push(&quot;aaaa&quot;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// pop() 删除数组中最后一个</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.pop();</span></span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">          <span class="comment">// shift() 删除数组中第一个</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.shift();</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// unshift() 在数组中最前面添加</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.unshift(&quot;aaa&quot;,&quot;bbbb&quot;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// splice() 删除/插入/替换</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//删除 splice(startIndex,num)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.splice(1,1);</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//替换 splice(startIndex,num,...替换后的元素...)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.splice(1,1,&quot;a&quot;);</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//插入  splice(startIndex,0,...插入后的元素...)     </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.splice(1,0,&quot;aaa&quot;)</span></span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">          <span class="comment">// sort()</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.sort();</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// reverse()</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array.reverse();</span></span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">          <span class="comment">// 通过索引设置值 不是响应式</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.array[0]=&quot;aaa&quot;;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图书购物车案例"><a href="#图书购物车案例" class="headerlink" title="图书购物车案例"></a>图书购物车案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../08-书籍管理/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;books.length&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in books&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement(index)&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;item.num &lt;= 1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.num&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove(index)&quot;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      购物车为空</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../08-书籍管理/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message:<span class="string">&#x27;你好啊&#x27;</span>,</span><br><span class="line">    books:[&#123;</span><br><span class="line">      name:<span class="string">&quot;《算法导论1》&quot;</span>,</span><br><span class="line">      date:<span class="string">&#x27;2006-9&#x27;</span>,</span><br><span class="line">      price:<span class="number">85.00</span>,</span><br><span class="line">      num:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">&quot;《算法导论2》&quot;</span>,</span><br><span class="line">      date:<span class="string">&#x27;2006-9&#x27;</span>,</span><br><span class="line">      price:<span class="number">85.00</span>,</span><br><span class="line">      num:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">&quot;《算法导论3》&quot;</span>,</span><br><span class="line">      date:<span class="string">&#x27;2006-9&#x27;</span>,</span><br><span class="line">      price:<span class="number">85.00</span>,</span><br><span class="line">      num:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">&quot;《算法导论4》&quot;</span>,</span><br><span class="line">      date:<span class="string">&#x27;2006-9&#x27;</span>,</span><br><span class="line">      price:<span class="number">85.00</span>,</span><br><span class="line">      num:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.books[index].num++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">decrement</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.books[index].num==<span class="number">0</span>)&#123;</span><br><span class="line">        alert(<span class="string">&quot;数量不能为负数&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.books[index].num--;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.books.splice(index,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//过滤器</span></span><br><span class="line">  filters:&#123;</span><br><span class="line">    <span class="function"><span class="title">showPrice</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;$&quot;</span>+price.toFixed(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">totalPrice</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> totalPrice=<span class="number">0</span>;</span><br><span class="line">      <span class="comment">// for(let i = 0;i&lt;this.books.length;i++)&#123;</span></span><br><span class="line">      <span class="comment">//   totalPrice+=this.books[i].num*this.books[i].price;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.books)&#123;</span><br><span class="line">        totalPrice+=<span class="built_in">this</span>.books[i].num*<span class="built_in">this</span>.books[i].price;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="表单绑定v-model"><a href="#表单绑定v-model" class="headerlink" title="表单绑定v-model"></a>表单绑定v-model</h2><p>表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单。Vue中使用v-model指令来实现表单元素和数据的双向绑定。</p><p>v-model相当于两个指令的集合 v-bind绑定数据+v-on事件处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;message = $event.target.value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model的基本使用"><a href="#v-model的基本使用" class="headerlink" title="v-model的基本使用"></a>v-model的基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 双向绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><blockquote><p>radio</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;femle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;femle&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        sex:<span class="string">&quot;&quot;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>checkbox</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAgree&quot;</span> &gt;</span>同意协议</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>= <span class="string">&quot;btn&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;!isAgree&quot;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> &gt;</span>篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> &gt;</span>足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> &gt;</span>羽毛球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> &gt;</span>乒乓球</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        isAgree:<span class="literal">false</span>,</span></span><br><span class="line">        hobbies:[]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>select</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;adb&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;草莓&quot;</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 多选 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 单选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;adb&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;草莓&quot;</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        fruit:<span class="string">&quot;香蕉&quot;</span>,</span></span><br><span class="line">        fruits:[]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h2><p>1.lazy修饰符：默认情况下，v-model默认是在input事件中同步输入框的数据的。也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变。lazy修饰符可以让数据在失去焦点或者回车时才会更新。<br>2.number修饰符：默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。number修饰符可以让在输入框中输入的内容自动转成数字类型。<br>3.trim修饰符：如果输入的内容首尾有很多空格，通常我们希望将其去除trim修饰符可以过滤内容左右两边的空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lazy --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- number --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123;typeof(age)&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- trim --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>性别是&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        username:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        age:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        sex:<span class="string">&quot;男&quot;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="认识组件化"><a href="#认识组件化" class="headerlink" title="认识组件化"></a>认识组件化</h2><blockquote><p>什么是组件化</p></blockquote><p>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。但如果，我们讲一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</p><blockquote><p>组件化思想</p></blockquote><p>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。任何的应用都会被抽象成一颗组件树。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210120160246583.png" alt="image-20210120160246583"></p><blockquote><p>应用</p></blockquote><p>有了组件化的思想，我们在之后的开发中就要充分的利用它。尽可能的将页面拆分成一个个小的、可复用的组件。这样让我们的代码更加方便组织和管理，并且扩展性也更强</p><h2 id="组件化基础"><a href="#组件化基础" class="headerlink" title="组件化基础"></a>组件化基础</h2><p>组件只能在vue实例里使用</p><h3 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>1.创建组件构造器<br>2.注册组件<br>3.使用组件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210120161307327.png" alt="image-20210120161307327"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件 标签名 组件构造器</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-cpn&quot;</span>, cpnC)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h4><p>全局组件：可以在多个vue实例里使用</p><p>局部组件：在哪个vue实例里注册，就只能在那个vue实例里使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件 全局组件 可以在多个vue实例里使用</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.component(&quot;cpn&quot;, cpnC)</span></span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//主键属性</span></span></span><br><span class="line">      components:&#123;</span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">// 标签名:组件构造器</span></span></span><br><span class="line">        cpn: cpnC</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app1= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app1&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h4><p>子组件只能在父组件使用，如果想要其他地方使用，可以让子组件全局注册或者在要使用的组件那里再次注册。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//第一组件 子组件 子组件只会在父组件中使用</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC1 = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//第二组件 父组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC2 = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn1:cpnC1</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//根组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn2:cpnC2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>错误用法</p></blockquote><p>以子标签的形式在Vue实例中使用<br>因为当子组件注册到父组件的components时，Vue会编译好父组件的模块该模板的内容已经决定了父组件将要渲染的HTML（相当于父组件中已经有了子组件中的内容了）</p><h4 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//全局组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn1&quot;</span>, &#123;  </span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn2:&#123;</span><br><span class="line">          template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件抽离模板写法"><a href="#组件抽离模板写法" class="headerlink" title="组件抽离模板写法"></a>组件抽离模板写法</h4><p>有两种写法</p><p>①通过script标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种模板抽离写法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第一种模板抽离写法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②通过template标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种模板抽离写法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第二种模板抽离写法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&quot;cpn2&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">     template: <span class="string">&quot;#cpn2&quot;</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="javascript">       message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;&#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件中数据存放"><a href="#组件中数据存放" class="headerlink" title="组件中数据存放"></a>组件中数据存放</h4><p>组件是一个单独功能模块的封装：<br>这个模块有属于自己的HTML模板，也应该有属性自己的数据data。</p><blockquote><p>组件中的数据是保存在哪里呢？顶层的Vue实例中吗？</p></blockquote><p>我们先来测试一下，组件中能不能直接访问Vue实例中的data。我们发现不能访问，而且即使可以访问，如果将所有的数据都放在Vue实例中，Vue实例就会变的非常臃肿。<br>结论：Vue组件应该有自己保存数据的地方。</p><blockquote><p>数据存放在哪里</p></blockquote><p>组件对象也有一个data属性(也可以有methods等属性，下面我们有用到)<br>只是这个data属性必须是一个函数<br>而且这个函数返回一个对象，对象内部保存着数据</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210121092216793.png" alt="image-20210121092216793"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn2&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn2&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          title:<span class="string">&quot;1111111&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么组件存放数据必须是一个函数</p></blockquote><p>首先，如果不是一个函数，Vue直接就会报错。<br>其次，原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。</p><p>以下代码创建了一个计算器组件，实例化了3个计算器组件。这三个组件所使用data对象都是不同的对象，避免了多个组件使用同一对象导致数据出现问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件实例化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--v-on 事件绑定--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;der&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//注册计算器组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn2&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn2&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">          counter: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter++;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">der</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter--;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><p>子组件是不能引用父组件或者Vue实例的数据的。但是，在开发中，往往一些数据确实需要从上层传递到下层：比如在一个页面中，我们从服务器请求到了很多的数据。其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)。</p><blockquote><p>如何进行父子组件间的通信呢</p></blockquote><p>Vue官方提到</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210121094523702.png" alt="image-20210121094523702"></p><p>真实的开发中，Vue实例和子组件的通信和父组件和子组件的通信过程是一样的。</p><blockquote><p>父传子</p></blockquote><p>通过子组件的props属性接收数据，在使用子组件时要通过v-bind将要传递的值与props对象中接收数据的变量绑定。props的对象写法可以对数据类型进行验证</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件实例化 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将父组件中的movies数据传递给子组件，用v-bind绑定数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件模板抽离写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in cmovies&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//props 创建变量用于接收父组件传递过来的数据</span></span></span><br><span class="line"><span class="javascript">       <span class="comment">// props:[&quot;cmovies&quot;],</span></span></span><br><span class="line">       props:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//变量名，变量类型</span></span></span><br><span class="line"><span class="javascript">        cmovies:<span class="built_in">Array</span>,</span></span><br><span class="line">        cmessage:&#123;</span><br><span class="line"><span class="javascript">          type:<span class="built_in">String</span>,<span class="comment">//类型</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">default</span>:<span class="string">&quot;aaaaa&quot;</span>,<span class="comment">//默认值</span></span></span><br><span class="line"><span class="javascript">          required:<span class="literal">true</span><span class="comment">//要求必须传值</span></span></span><br><span class="line">        &#125; </span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        movies:[<span class="string">&quot;星球大战&quot;</span>,<span class="string">&quot;绝地武士&quot;</span>,<span class="string">&quot;西斯大帝&quot;</span>]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//注册子组件 </span></span></span><br><span class="line">        cpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>props驼峰标识问题：如果props里的变量名采用驼峰写法，在标签里采用-连接</p><blockquote><p>子传父</p></blockquote><p>通过自定义事件：子组件中触发事件后，在事件的处理函数中发射一个自定义事件，父组件监测到子组件发射出的自定义事件，调用对应的事件处理方法处理。</p><p>关键代码： this.$emit(“itemclick”,item);</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件实例化 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 监听子组件发射的事件，用父组件的方法处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">itemclick</span>=<span class="string">&quot;cpnClick&quot;</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件模板抽离写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in categories&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">      props:&#123;</span><br><span class="line">        cmovies:&#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">Array</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">          categories:[</span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;111&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;aaaa&quot;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;222&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;bbbb&quot;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;333&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;cccc&quot;</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;444&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;dddd&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(item);</span></span><br><span class="line"><span class="javascript">          <span class="comment">//发射一个自定义事件</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&quot;itemclick&quot;</span>,item);   </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125; </span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        movies:[<span class="string">&quot;星球大战&quot;</span>,<span class="string">&quot;绝地武士&quot;</span>,<span class="string">&quot;西斯大帝&quot;</span>]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">cpnClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(item);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.movies.splice(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//注册子组件 </span></span></span><br><span class="line">        cpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父子通信-双向绑定"><a href="#父子通信-双向绑定" class="headerlink" title="父子通信+双向绑定"></a>父子通信+双向绑定</h4><p>实现子组件和父组件通信，并且当子组件数据改变时，改变父组件里数据的值。</p><p>双向绑定，vue推荐绑定data函数里属性。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/01-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%A1%88%E4%BE%8B%E7%9A%84%E7%94%BB%E5%9B%BE%E5%88%86%E6%9E%90.png" alt="01-组件通信案例的画图分析"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件:&#123;&#123;num1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">&quot;num1&quot;</span> <span class="attr">:number2</span>=<span class="string">&quot;num2&quot;</span> @<span class="attr">number1change</span>=<span class="string">&quot;number1change&quot;</span> @<span class="attr">number2change</span>=<span class="string">&quot;number2change&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>d:&#123;&#123;dnum1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; v-model=&quot;dnum1&quot;&gt; v-model实现双向绑定 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;dnum1&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num1Input&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>d:&#123;&#123;dnum2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">:value</span>=<span class="string">&quot;dnum2&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num2Input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line">        num1:1,</span><br><span class="line">        num2:0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">number1change</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num1=<span class="built_in">parseInt</span>(value);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">number2change</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num2=<span class="built_in">parseInt</span>(value);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">          props:&#123;</span><br><span class="line"><span class="javascript">            number1: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">            number2: <span class="built_in">Number</span> </span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">              dnum1:<span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">              dnum2:<span class="built_in">this</span>.number2</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">num1Input</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.dnum1 = event.target.value;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$emit(<span class="string">&quot;number1change&quot;</span>,<span class="built_in">this</span>.dnum1);</span></span><br><span class="line">            &#125;, </span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">num2Input</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.dnum2 = event.target.value;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$emit(<span class="string">&quot;number2change&quot;</span>,<span class="built_in">this</span>.dnum2);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>watch实现</p></blockquote><p>watch：监听属性的改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">&quot;num1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:number2</span>=<span class="string">&quot;num2&quot;</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">num1change</span>=<span class="string">&quot;num1change&quot;</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">num2change</span>=<span class="string">&quot;num2change&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>data:&#123;&#123;dnumber1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>data:&#123;&#123;dnumber2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      num1: 1,</span><br><span class="line">      num2: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">num1change</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.num1 = <span class="built_in">parseFloat</span>(value)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">num2change</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.num2 = <span class="built_in">parseFloat</span>(value)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line">        props: &#123;</span><br><span class="line"><span class="javascript">          number1: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">          number2: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            dnumber1: <span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">            dnumber2: <span class="built_in">this</span>.number2</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//监听某个属性的改变</span></span></span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//属性名(新值)&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">dnumber1</span>(<span class="params">newValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.dnumber2 = newValue * <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;num1change&#x27;</span>, newValue);</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">dnumber2</span>(<span class="params">newValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.number1 = newValue / <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;num2change&#x27;</span>, newValue);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父子访问"><a href="#父子访问" class="headerlink" title="父子访问"></a>父子访问</h4><blockquote><p>父访问子</p></blockquote><p>使用$children或$refs</p><p>this.$children返回一个组件数组，$refs使用必须要在组件上加上ref属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn1 = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#cpn1&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.message);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn2 = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#cpn2&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//$children</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$children);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$children[<span class="number">0</span>].showMessage();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">//$refs</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.aaa);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$refs.aaa.showMessage();</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn1,</span><br><span class="line">        cpn2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子访问父</p></blockquote><p>this.$parent访问父组件，但是这样操作会导致耦合度过高</p><p>this.$root访问vue实例的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;ccpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ccpn = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#ccpn&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//$parent</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$parent.showMessage();</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn1 = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#cpn1&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.message);</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        ccpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件化高级"><a href="#组件化高级" class="headerlink" title="组件化高级"></a>组件化高级</h2><h3 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h3><blockquote><p>编译作用域</p></blockquote><p>在真正学习插槽之前，我们需要先理解一个概念：编译作用域。<br>官方对于编译的作用域解析比较简单，我们自己来通过一个例子来理解这个概念：<br>我们来考虑下面的代码是否最终是可以渲染出来的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-cpn</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>中，我们使用了isShow属性。isShow属性包含在组件中，也包含在Vue实例中。<br>答案：最终可以渲染出来，也就是使用的是Vue实例的属性。<br>为什么呢？<br>官方给出了一条准则：<strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</strong>。而我们在使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-cpn</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>的时候，整个组件的使用过程是相当于在父组件中出现的。那么他的作用域就是父组件，使用的属性也是属于父组件的属性。因此，isShow使用的是Vue实例中的属性，而不是子组件的属性。</p><blockquote><p>为什么使用slot</p></blockquote><p>组件的插槽也是为了让我们封装的组件更加具有扩展性。</p><p>栗子：移动网站中的导航栏</p><p>移动开发中，几乎每个页面都有导航栏。导航栏我们必然会封装成一个插件，比如nav-bar组件。一旦有了这个组件，我们就可以在多个页面中复用了。但是，每个页面的导航是一样的吗？No</p><p>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。<br>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。<br>是搜索框，还是文字，还是菜单。由调用者自己来决定。</p><h4 id="插槽slot的基本使用o"><a href="#插槽slot的基本使用o" class="headerlink" title="插槽slot的基本使用o"></a>插槽slot的基本使用o</h4><p>在模板<template></template>&gt;里使用<slot></slot></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hhhh<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>hehehe<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- 插槽，如果使用时没有传值，使用默认值 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="具名插槽slot"><a href="#具名插槽slot" class="headerlink" title="具名插槽slot"></a>具名插槽slot</h4><p>具名插槽自由在标签带有对应的slot属性，且值一样才会替换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>←<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>·<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>→<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽slot"><a href="#作用域插槽slot" class="headerlink" title="作用域插槽slot"></a>作用域插槽slot</h4><p>父组件替换插槽的标签，但是内容由子组件来提供。 slot-scope=”slot”</p><p>先提一个需求：<br>子组件中包括一组数据，比如：pLanguages: [‘JavaScript’, ‘Python’, ‘Swift’, ‘Go’, ‘C++’]<br>需要在多个界面进行展示：某些界面是以水平方向一一展示的，某些界面是以列表形式展示的，<br>某些界面直接展示一个数组,内容在子组件，希望父组件告诉我们如何展示，怎么办呢？<br>利用slot作用域插槽就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 目的获取子组件中的属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slot.data.join(&quot;*&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;pLanguages&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in pLanguages&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">              pLanguages: [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件化开发-1"><a href="#组件化开发-1" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="认识组件化-1"><a href="#认识组件化-1" class="headerlink" title="认识组件化"></a>认识组件化</h2><blockquote><p>什么是组件化</p></blockquote><p>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。但如果，我们讲一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</p><blockquote><p>组件化思想</p></blockquote><p>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。任何的应用都会被抽象成一颗组件树。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210120160246583.png" alt="image-20210120160246583"></p><blockquote><p>应用</p></blockquote><p>有了组件化的思想，我们在之后的开发中就要充分的利用它。尽可能的将页面拆分成一个个小的、可复用的组件。这样让我们的代码更加方便组织和管理，并且扩展性也更强</p><h2 id="组件化基础-1"><a href="#组件化基础-1" class="headerlink" title="组件化基础"></a>组件化基础</h2><p>组件只能在vue实例里使用</p><h3 id="注册组件-1"><a href="#注册组件-1" class="headerlink" title="注册组件"></a>注册组件</h3><h4 id="基本步骤-1"><a href="#基本步骤-1" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>1.创建组件构造器<br>2.注册组件<br>3.使用组件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210120161307327.png" alt="image-20210120161307327"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件 标签名 组件构造器</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-cpn&quot;</span>, cpnC)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="全局组件和局部组件-1"><a href="#全局组件和局部组件-1" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h4><p>全局组件：可以在多个vue实例里使用</p><p>局部组件：在哪个vue实例里注册，就只能在那个vue实例里使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件 全局组件 可以在多个vue实例里使用</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.component(&quot;cpn&quot;, cpnC)</span></span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//主键属性</span></span></span><br><span class="line">      components:&#123;</span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">// 标签名:组件构造器</span></span></span><br><span class="line">        cpn: cpnC</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app1= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app1&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父组件和子组件-1"><a href="#父组件和子组件-1" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h4><p>子组件只能在父组件使用，如果想要其他地方使用，可以让子组件全局注册或者在要使用的组件那里再次注册。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//第一组件 子组件 子组件只会在父组件中使用</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC1 = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//第二组件 父组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC2 = Vue.extend(&#123;</span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn1:cpnC1</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//根组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn2:cpnC2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>错误用法</p></blockquote><p>以子标签的形式在Vue实例中使用<br>因为当子组件注册到父组件的components时，Vue会编译好父组件的模块该模板的内容已经决定了父组件将要渲染的HTML（相当于父组件中已经有了子组件中的内容了）</p><h4 id="注册组件语法糖-1"><a href="#注册组件语法糖-1" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//全局组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn1&quot;</span>, &#123;  </span></span><br><span class="line">      template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn2:&#123;</span><br><span class="line">          template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件抽离模板写法-1"><a href="#组件抽离模板写法-1" class="headerlink" title="组件抽离模板写法"></a>组件抽离模板写法</h4><p>有两种写法</p><p>①通过script标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种模板抽离写法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第一种模板抽离写法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②通过template标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种模板抽离写法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第二种模板抽离写法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&quot;cpn2&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">     template: <span class="string">&quot;#cpn2&quot;</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="javascript">       message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;&#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件中数据存放-1"><a href="#组件中数据存放-1" class="headerlink" title="组件中数据存放"></a>组件中数据存放</h4><p>组件是一个单独功能模块的封装：<br>这个模块有属于自己的HTML模板，也应该有属性自己的数据data。</p><blockquote><p>组件中的数据是保存在哪里呢？顶层的Vue实例中吗？</p></blockquote><p>我们先来测试一下，组件中能不能直接访问Vue实例中的data。我们发现不能访问，而且即使可以访问，如果将所有的数据都放在Vue实例中，Vue实例就会变的非常臃肿。<br>结论：Vue组件应该有自己保存数据的地方。</p><blockquote><p>数据存放在哪里</p></blockquote><p>组件对象也有一个data属性(也可以有methods等属性，下面我们有用到)<br>只是这个data属性必须是一个函数<br>而且这个函数返回一个对象，对象内部保存着数据</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210121092216793.png" alt="image-20210121092216793"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn2&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn2&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          title:<span class="string">&quot;1111111&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么组件存放数据必须是一个函数</p></blockquote><p>首先，如果不是一个函数，Vue直接就会报错。<br>其次，原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。</p><p>以下代码创建了一个计算器组件，实例化了3个计算器组件。这三个组件所使用data对象都是不同的对象，避免了多个组件使用同一对象导致数据出现问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件实例化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--v-on 事件绑定--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;der&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//注册计算器组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;cpn2&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn2&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">          counter: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter++;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">der</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.counter--;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件通信-1"><a href="#组件通信-1" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="父子组件通信-1"><a href="#父子组件通信-1" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><p>子组件是不能引用父组件或者Vue实例的数据的。但是，在开发中，往往一些数据确实需要从上层传递到下层：比如在一个页面中，我们从服务器请求到了很多的数据。其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)。</p><blockquote><p>如何进行父子组件间的通信呢</p></blockquote><p>Vue官方提到</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210121094523702.png" alt="image-20210121094523702"></p><p>真实的开发中，Vue实例和子组件的通信和父组件和子组件的通信过程是一样的。</p><blockquote><p>父传子</p></blockquote><p>通过子组件的props属性接收数据，在使用子组件时要通过v-bind将要传递的值与props对象中接收数据的变量绑定。props的对象写法可以对数据类型进行验证</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件实例化 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将父组件中的movies数据传递给子组件，用v-bind绑定数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件模板抽离写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in cmovies&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">//props 创建变量用于接收父组件传递过来的数据</span></span></span><br><span class="line"><span class="javascript">       <span class="comment">// props:[&quot;cmovies&quot;],</span></span></span><br><span class="line">       props:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//变量名，变量类型</span></span></span><br><span class="line"><span class="javascript">        cmovies:<span class="built_in">Array</span>,</span></span><br><span class="line">        cmessage:&#123;</span><br><span class="line"><span class="javascript">          type:<span class="built_in">String</span>,<span class="comment">//类型</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">default</span>:<span class="string">&quot;aaaaa&quot;</span>,<span class="comment">//默认值</span></span></span><br><span class="line"><span class="javascript">          required:<span class="literal">true</span><span class="comment">//要求必须传值</span></span></span><br><span class="line">        &#125; </span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        movies:[<span class="string">&quot;星球大战&quot;</span>,<span class="string">&quot;绝地武士&quot;</span>,<span class="string">&quot;西斯大帝&quot;</span>]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//注册子组件 </span></span></span><br><span class="line">        cpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>props驼峰标识问题：如果props里的变量名采用驼峰写法，在标签里采用-连接</p><blockquote><p>子传父</p></blockquote><p>通过自定义事件：子组件中触发事件后，在事件的处理函数中发射一个自定义事件，父组件监测到子组件发射出的自定义事件，调用对应的事件处理方法处理。</p><p>关键代码： this.$emit(“itemclick”,item);</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件实例化 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 监听子组件发射的事件，用父组件的方法处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">itemclick</span>=<span class="string">&quot;cpnClick&quot;</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件模板抽离写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in categories&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">      props:&#123;</span><br><span class="line">        cmovies:&#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">Array</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">          categories:[</span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;111&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;aaaa&quot;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;222&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;bbbb&quot;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;333&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;cccc&quot;</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="javascript">              id:<span class="string">&quot;444&quot;</span>,</span></span><br><span class="line"><span class="javascript">              name:<span class="string">&quot;dddd&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(item);</span></span><br><span class="line"><span class="javascript">          <span class="comment">//发射一个自定义事件</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&quot;itemclick&quot;</span>,item);   </span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125; </span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        movies:[<span class="string">&quot;星球大战&quot;</span>,<span class="string">&quot;绝地武士&quot;</span>,<span class="string">&quot;西斯大帝&quot;</span>]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">cpnClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(item);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.movies.splice(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//注册子组件 </span></span></span><br><span class="line">        cpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父子通信-双向绑定-1"><a href="#父子通信-双向绑定-1" class="headerlink" title="父子通信+双向绑定"></a>父子通信+双向绑定</h4><p>实现子组件和父组件通信，并且当子组件数据改变时，改变父组件里数据的值。</p><p>双向绑定，vue推荐绑定data函数里属性。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/01-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%A1%88%E4%BE%8B%E7%9A%84%E7%94%BB%E5%9B%BE%E5%88%86%E6%9E%90.png" alt="01-组件通信案例的画图分析"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件:&#123;&#123;num1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">&quot;num1&quot;</span> <span class="attr">:number2</span>=<span class="string">&quot;num2&quot;</span> @<span class="attr">number1change</span>=<span class="string">&quot;number1change&quot;</span> @<span class="attr">number2change</span>=<span class="string">&quot;number2change&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>d:&#123;&#123;dnum1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; v-model=&quot;dnum1&quot;&gt; v-model实现双向绑定 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;dnum1&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num1Input&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>d:&#123;&#123;dnum2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">:value</span>=<span class="string">&quot;dnum2&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num2Input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line">        num1:1,</span><br><span class="line">        num2:0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">number1change</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num1=<span class="built_in">parseInt</span>(value);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">number2change</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num2=<span class="built_in">parseInt</span>(value);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">          props:&#123;</span><br><span class="line"><span class="javascript">            number1: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">            number2: <span class="built_in">Number</span> </span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">              dnum1:<span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">              dnum2:<span class="built_in">this</span>.number2</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">num1Input</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.dnum1 = event.target.value;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$emit(<span class="string">&quot;number1change&quot;</span>,<span class="built_in">this</span>.dnum1);</span></span><br><span class="line">            &#125;, </span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">num2Input</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.dnum2 = event.target.value;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$emit(<span class="string">&quot;number2change&quot;</span>,<span class="built_in">this</span>.dnum2);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>watch实现</p></blockquote><p>watch：监听属性的改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">&quot;num1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:number2</span>=<span class="string">&quot;num2&quot;</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">num1change</span>=<span class="string">&quot;num1change&quot;</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">num2change</span>=<span class="string">&quot;num2change&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>data:&#123;&#123;dnumber1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>props:&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>data:&#123;&#123;dnumber2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      num1: 1,</span><br><span class="line">      num2: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">num1change</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.num1 = <span class="built_in">parseFloat</span>(value)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">num2change</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.num2 = <span class="built_in">parseFloat</span>(value)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line">        props: &#123;</span><br><span class="line"><span class="javascript">          number1: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">          number2: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            dnumber1: <span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">            dnumber2: <span class="built_in">this</span>.number2</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//监听某个属性的改变</span></span></span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//属性名(新值)&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">dnumber1</span>(<span class="params">newValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.dnumber2 = newValue * <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;num1change&#x27;</span>, newValue);</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">dnumber2</span>(<span class="params">newValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.number1 = newValue / <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;num2change&#x27;</span>, newValue);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父子访问-1"><a href="#父子访问-1" class="headerlink" title="父子访问"></a>父子访问</h4><blockquote><p>父访问子</p></blockquote><p>使用$children或$refs</p><p>this.$children返回一个组件数组，$refs使用必须要在组件上加上ref属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn1 = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#cpn1&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.message);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn2 = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#cpn2&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//$children</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$children);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$children[<span class="number">0</span>].showMessage();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">//$refs</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.aaa);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$refs.aaa.showMessage();</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn1,</span><br><span class="line">        cpn2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子访问父</p></blockquote><p>this.$parent访问父组件，但是这样操作会导致耦合度过高</p><p>this.$root访问vue实例的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;ccpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ccpn = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#ccpn&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//$parent</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$parent.showMessage();</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn1 = &#123;</span></span><br><span class="line"><span class="javascript">      template:<span class="string">&quot;#cpn1&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.message);</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        ccpn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件化高级-1"><a href="#组件化高级-1" class="headerlink" title="组件化高级"></a>组件化高级</h2><h3 id="插槽slot-1"><a href="#插槽slot-1" class="headerlink" title="插槽slot"></a>插槽slot</h3><blockquote><p>编译作用域</p></blockquote><p>在真正学习插槽之前，我们需要先理解一个概念：编译作用域。<br>官方对于编译的作用域解析比较简单，我们自己来通过一个例子来理解这个概念：<br>我们来考虑下面的代码是否最终是可以渲染出来的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-cpn</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>中，我们使用了isShow属性。isShow属性包含在组件中，也包含在Vue实例中。<br>答案：最终可以渲染出来，也就是使用的是Vue实例的属性。<br>为什么呢？<br>官方给出了一条准则：<strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</strong>。而我们在使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-cpn</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>的时候，整个组件的使用过程是相当于在父组件中出现的。那么他的作用域就是父组件，使用的属性也是属于父组件的属性。因此，isShow使用的是Vue实例中的属性，而不是子组件的属性。</p><blockquote><p>为什么使用slot</p></blockquote><p>组件的插槽也是为了让我们封装的组件更加具有扩展性。</p><p>栗子：移动网站中的导航栏</p><p>移动开发中，几乎每个页面都有导航栏。导航栏我们必然会封装成一个插件，比如nav-bar组件。一旦有了这个组件，我们就可以在多个页面中复用了。但是，每个页面的导航是一样的吗？No</p><p>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。<br>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。<br>是搜索框，还是文字，还是菜单。由调用者自己来决定。</p><h4 id="插槽slot的基本使用"><a href="#插槽slot的基本使用" class="headerlink" title="插槽slot的基本使用"></a>插槽slot的基本使用</h4><p>在模板template里使用slot</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hhhh<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>hehehe<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- 插槽，如果使用时没有传值，使用默认值 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="具名插槽slot-1"><a href="#具名插槽slot-1" class="headerlink" title="具名插槽slot"></a>具名插槽slot</h4><p>具名插槽自由在标签带有对应的slot属性，且值一样才会替换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>←<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>·<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>→<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽slot-1"><a href="#作用域插槽slot-1" class="headerlink" title="作用域插槽slot"></a>作用域插槽slot</h4><p>父组件替换插槽的标签，但是内容由子组件来提供。 slot-scope=”slot”</p><p>先提一个需求：<br>子组件中包括一组数据，比如：pLanguages: [‘JavaScript’, ‘Python’, ‘Swift’, ‘Go’, ‘C++’]<br>需要在多个界面进行展示：某些界面是以水平方向一一展示的，某些界面是以列表形式展示的，<br>某些界面直接展示一个数组,内容在子组件，希望父组件告诉我们如何展示，怎么办呢？<br>利用slot作用域插槽就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 目的获取子组件中的属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slot.data.join(&quot;*&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;pLanguages&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in pLanguages&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        cpn:&#123;</span><br><span class="line"><span class="javascript">          template:<span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">              pLanguages: [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h1><blockquote><p>JavaScript原始功能</p></blockquote><p>在网页开发的早期，js制作作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的。那个时候的代码是怎么写的呢？直接将代码写在script标签中即可，随着ajax异步请求的出现，慢慢形成了前后端的分离。客户端需要完成的事情越来越多，代码量也是与日俱增。为了应对代码量的剧增，我们通常会将代码组织在多个js文件中，进行维护。但是这种维护方式，依然不能避免一些灾难性的问题。比如<strong>全局变量同名问题</strong>。另外，这种代码的编写方式对js文件的依赖顺序几乎是强制性的。但是当js文件过多，比如有几十个的时候，弄清楚它们的顺序是一件比较同时的事情。而且即使你弄清楚顺序了，也不能避免上面出现的这种尴尬问题的发生。</p><blockquote><p>常见模块化规范</p></blockquote><p>CommonsJs、AMD、CMD、Es6的modules</p><blockquote><p>CommonsJs</p></blockquote><p>导出：<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210121162500160.png" alt="image-20210121162445344"></p><p>导入：<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210121162500160.png" alt="image-20210121162500160"></p><blockquote><p>Es6的导入导出</p></blockquote><p>export/import</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"><span class="comment">//导出方式1</span></span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">  flag,sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出方式2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> num1 = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> height = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//3.导出函数/类</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Person is run&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;flag,sum,num1,height,add,Person&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"><span class="comment">//导入所有 并且使用别名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aaa <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================================================</span></span><br><span class="line"><span class="comment">// 导出 让别人自己命名</span></span><br><span class="line"><span class="keyword">const</span> address = <span class="string">&quot;北京&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> address;</span><br><span class="line"><span class="comment">//导入 自己命名</span></span><br><span class="line"><span class="keyword">import</span> addr <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p><a href="https://webpack.docschina.org/">webpack官方文档</a></p><blockquote><p>什么是webpack</p></blockquote><p>webpack是一个现代的JavaScript应用的静态模块打包工具。</p><p>重点是<strong>模块</strong>和<strong>打包</strong></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210122163358034.png" alt="image-20210121170406986"></p><blockquote><p>使用前提</p></blockquote><p>node环境</p><blockquote><p>安装</p></blockquote><p>先指定安装3.6.0版本，与vue-cle2.0相对应</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210122163358034.png" alt="image-20210122091938860"></p><p>本地安装：cnpm install <a href="mailto:&#x77;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#64;&#x33;&#x2e;&#54;&#x2e;&#x30;">&#x77;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#64;&#x33;&#x2e;&#54;&#x2e;&#x30;</a> –save-dev</p><h3 id="webpack基本使用"><a href="#webpack基本使用" class="headerlink" title="webpack基本使用"></a>webpack基本使用</h3><p>打包命令 webpack ./src/main.js ./dist/bundle.js 将main.js打包成bundle.js，再在使用的时候引用bundle.js</p><blockquote><p>如何直接使用webpack打包</p></blockquote><p>1.新建webpack.config.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口js</span></span><br><span class="line">  entry:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打包</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">//动态获取绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    filename:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>2.通过npm init命令新建package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;meetwebpack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以直接使用webpack打包</p><p>3.进一步优化</p><p>在package.json的scripts下添加 “build”: “webpack”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;meetwebpack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以直接使用 npm run build 打包。</p><p>通过这种方法，优先寻找本地的</p><h3 id="打包css"><a href="#打包css" class="headerlink" title="打包css"></a>打包css</h3><p>1.在入口函数导入css文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./css/normal.css&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.安装css的loader和style的loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev css-loader</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev style-loader</span><br></pre></td></tr></table></figure><p>3.修改webpack.congfig.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口js</span></span><br><span class="line">  entry:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打包</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">//动态获取绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    filename:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//匹配所有css文件</span></span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">//css-loader 只负责加载css文件 style-loader将样式添加到dom中</span></span><br><span class="line">        use:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>注意<strong>版本对应</strong></p><h3 id="打包less（scss、stylus）"><a href="#打包less（scss、stylus）" class="headerlink" title="打包less（scss、stylus）"></a>打包less（scss、stylus）</h3><p>1.在入口js依赖less文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖less文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./css/special.less&quot;</span>)</span><br></pre></td></tr></table></figure><p>2.安装less的loader和less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev less-loader less</span><br></pre></td></tr></table></figure><p>3.修改配置webpack.congfig.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口js</span></span><br><span class="line">  entry:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打包</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">//动态获取绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    filename:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//匹配所有css文件</span></span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">//css-loader 只负责加载css文件 style-loader将样式添加到dom中</span></span><br><span class="line">        use:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h3><p>1.css中依赖图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(&quot;../<span class="selector-tag">img</span>/<span class="selector-tag">test</span><span class="selector-class">.jpg</span>&quot;);</span><br></pre></td></tr></table></figure><p>2.安装url-loader和file-loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install url-loader --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install file-loader --save-dev</span><br></pre></td></tr></table></figure><p>3.修改webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口js</span></span><br><span class="line">  entry:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="comment">//打包</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">//动态获取绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    filename:<span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    publicPath:<span class="string">&quot;dist/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//匹配所有css文件</span></span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">//css-loader 只负责加载css文件 style-loader将样式添加到dom中</span></span><br><span class="line">        use:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">//当加载的图片，小于limit时，会将图片转成base64，</span></span><br><span class="line">               <span class="comment">//大于limit 需要file-loader，但是会重新生成一个图片</span></span><br><span class="line">              limit: <span class="number">13000</span>,</span><br><span class="line">              <span class="comment">//用于对图片命名</span></span><br><span class="line">              name:<span class="string">&quot;img/[name].[hash:8].[ext]&quot;</span></span><br><span class="line">            &#125;,        </span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>将图片转成base64图片</p><h3 id="Es6语法处理"><a href="#Es6语法处理" class="headerlink" title="Es6语法处理"></a>Es6语法处理</h3><p>如果你仔细阅读webpack打包的js文件，发现写的ES6语法并没有转成ES5，那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码。在前面我们说过，如果希望将ES6的语法转成ES5，那么就需要使用babel。</p><p>1.安装babel-loader、babel-core、babel-preset-es2015 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev babel-loader@7 babel-core babel-preset-es2015 </span><br></pre></td></tr></table></figure><p>2..修改webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口js</span></span><br><span class="line">  entry:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打包</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">//动态获取绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    filename:<span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    publicPath:<span class="string">&quot;dist/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//匹配所有css文件</span></span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">//css-loader 只负责加载css文件 style-loader将样式添加到dom中</span></span><br><span class="line">        use:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">//当加载的图片，小于limit时，会将图片转成base64，</span></span><br><span class="line">               <span class="comment">//大于limit 需要file-loader，但是会重新生成一个图片</span></span><br><span class="line">              limit: <span class="number">13000</span>,</span><br><span class="line">              <span class="comment">//用于对图片命名</span></span><br><span class="line">              name:<span class="string">&quot;img/[name].[hash:8].[ext]&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="vue配置"><a href="#vue配置" class="headerlink" title="vue配置"></a>vue配置</h3><p>1.安装vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue --save</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>vue分两种 </p><p>runtime-only：代码中不能又template</p><p>runtime-compiler：代码中可以有template</p><p>2.设置vue构建版本 修改webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口js</span></span><br><span class="line">  entry:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打包</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">//动态获取绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    filename:<span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    publicPath:<span class="string">&quot;dist/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//匹配所有css文件</span></span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">//css-loader 只负责加载css文件 style-loader将样式添加到dom中</span></span><br><span class="line">        use:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">//当加载的图片，小于limit时，会将图片转成base64，</span></span><br><span class="line">               <span class="comment">//大于limit 需要file-loader，但是会重新生成一个图片</span></span><br><span class="line">              limit: <span class="number">13000</span>,</span><br><span class="line">              <span class="comment">//用于对图片命名</span></span><br><span class="line">              name:<span class="string">&quot;img/[name].[hash:8].[ext]&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span> <span class="comment">// 用 webpack 1 时需用 &#x27;vue/dist/vue.common.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>3.编写vue代码</p><p>导入vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br></pre></td></tr></table></figure><h3 id="el和template区别"><a href="#el和template区别" class="headerlink" title="el和template区别"></a>el和template区别</h3><p>如果我们希望将data中的数据显示在界面中，就必须是修改index.html<br>如果我们后面自定义了组件，也必须修改index.html来使用组件<br>但是html模板在之后的开发中，我并不希望手动的来频繁修改，是否可以做到呢？<br>定义template属性：<br>在前面的Vue实例中，我们定义了el属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容<br>这里，我们可以将div元素中的内容删掉，只保留一个基本的id为div的元素<br>但是如果我依然希望在其中显示的内容，应该怎么处理呢？<br>我们可以再定义一个template属性，代码如下：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128141925946.png" alt="image-20210128141925946"></p><p>重新打包，运行程序，显示一样的结果和HTML代码结构</p><blockquote><p>el和template模板的关系是什么呢？</p></blockquote><p>在我们之前的学习中，我们知道el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等。而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板。</p><blockquote><p>这样做有什么好处呢</p></blockquote><p>这样做之后我们就不需要在以后的开发中再次操作index.html，只需要在template中写入对应的标签即可<br>但是，书写template模块非常麻烦怎么办呢？没有关系，稍后我们会将template模板中的内容进行抽离。会分成三部分书写：template、script、style，结构变得非常清晰。</p><h3 id="vue文件"><a href="#vue文件" class="headerlink" title="vue文件"></a>vue文件</h3><p>为了能够使用vue文件</p><p>1.安装vue-loader和vue-template-compiler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure><p>2.修改webpack.config.js</p><p>在module的rules下添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;vue-loader&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以后的开发中，基本上使用vue文件，一个vue文件相当于一个组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  --&gt;</span><br><span class="line">&lt;template id&#x3D;&#39;App&#39;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  template:&#39;#App&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message:&quot;11111111&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&#39;scss&#39; scoped&gt;</span><br><span class="line">  .h2&#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>在vue-loader 14.0版本后，还需要一个插件</p><h3 id="webpack的Plugin"><a href="#webpack的Plugin" class="headerlink" title="webpack的Plugin"></a>webpack的Plugin</h3><blockquote><p>plugin是什么</p></blockquote><p>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。<br>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</p><blockquote><p>loader和plugin区别</p></blockquote><p>loader主要用于转换某些类型的模块，它是一个转换器。<br>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</p><blockquote><p>plugin的使用过程</p></blockquote><p>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)<br>步骤二：在webpack.config.js中的plugins中配置插件。</p><blockquote><p>常用插件</p></blockquote><h4 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h4><p>添加版权</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210122163358034.png" alt="image-20210122163328727"></p><h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><p>①自动生成一个index.html文件(可以指定模板来生成)②将打包的js文件，自动通过script标签插入到body中</p><p>目前，我们的index.html文件是存放在项目的根目录下的。我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件。</p><p>1.安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>2.修改webpack.config.js</p><p>使用插件，修改webpack.config.js文件中plugins部分的内容如下：<br>这里的template表示根据什么模板来生成index.html</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210122163358034.png" alt="image-20210122163358034"></p><blockquote><p>注意</p></blockquote><p>我们需要删除之前在output中添加的publicPath属性，否则插入的script标签中的src可能会有问题</p><h4 id="uglifyjs-webpack-plugin"><a href="#uglifyjs-webpack-plugin" class="headerlink" title="uglifyjs-webpack-plugin"></a>uglifyjs-webpack-plugin</h4><p>对js等文件进行压缩处理</p><p>1.安装</p><p>我们使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></table></figure><p>2.修改webpack.config.js文件，使用插件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210122163358034.png" alt="image-20210122164016959"></p><h3 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h3><p>1.安装webpack-dev-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev webpack-dev-server@2.9.3</span><br></pre></td></tr></table></figure><p>2.修改webpack.config.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> uglifyjs = <span class="built_in">require</span>(<span class="string">&quot;uglifyjs-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口js</span></span><br><span class="line">  entry:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打包</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">//动态获取绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    filename:<span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="comment">// publicPath:&quot;dist/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//匹配所有css文件</span></span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">//css-loader 只负责加载css文件 style-loader将样式添加到dom中</span></span><br><span class="line">        use:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">//当加载的图片，小于limit时，会将图片转成base64，</span></span><br><span class="line">               <span class="comment">//大于limit 需要file-loader，但是会重新生成一个图片</span></span><br><span class="line">              limit: <span class="number">13000</span>,</span><br><span class="line">              <span class="comment">//用于对图片命名</span></span><br><span class="line">              name:<span class="string">&quot;img/[name].[hash:8].[ext]&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [<span class="string">&quot;vue-loader&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span> <span class="comment">// 用 webpack 1 时需用 &#x27;vue/dist/vue.common.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      template:<span class="string">&quot;index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> uglifyjs()</span><br><span class="line">  ],</span><br><span class="line">  devServer:&#123;</span><br><span class="line">    contentBase:<span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    inline:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：<br>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写./dist<br>port：端口号 （默认8080）<br>inline：页面实时刷新<br>historyApiFallback：在SPA页面中，依赖HTML5的history模式</p><p>3.在package.json中添加上”dev”: “ webpack-dev-server –open”</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot; webpack-dev-server --open&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>npm run dev 就可以运行了</p><h2 id="vue-cli2使用"><a href="#vue-cli2使用" class="headerlink" title="vue-cli2使用"></a>vue-cli2使用</h2><p>使用Vue.js开发大型应用时，我们需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情。<br>如果每个项目都要手动完成这些工作，那无疑效率比较低效，所以通常我们会使用一些脚手架工具来帮助完成这些事情。</p><blockquote><p>cli是什么意思</p></blockquote><p>CLI是Command-Line Interface, 翻译为命令行界面, 但是俗称脚手架.Vue CLI是一个官方发布 vue.js 项目脚手架。使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置.</p><blockquote><p>前提环境</p></blockquote><p>npm、node</p><blockquote><p>安装</p></blockquote><p>npm install -g @vue/cli</p><blockquote><p>由于使用的是vue-cli 2所以需要拉取2的模板</p></blockquote><p>cnpm install -g @vue/cli-init</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><h4 id="vue-cli-2"><a href="#vue-cli-2" class="headerlink" title="vue-cli 2"></a>vue-cli 2</h4><blockquote><p>初始化项目</p></blockquote><p>vue init webpack my-project</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210125095557722.png" alt="image-20210125095557722"></p><blockquote><p>目录结构</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128150317482.png" alt="image-20210128150317482"></p><blockquote><p>Runtime-Compiler和Runtime-only的区别</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128150522077.png" alt="image-20210128150522077"></p><p>如果在之后的开发中，你依然使用template，就需要选择Runtime-Compiler<br>如果你之后的开发中，使用的是.vue文件夹开发，那么可以选择Runtime-only</p><blockquote><p>关闭eslint</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128153212506.png" alt="image-20210128153212506"></p><blockquote><p>render(渲染)和template</p></blockquote><p>Runtime-Compiler </p><p>运行过程：template–&gt;ast–&gt;render–&gt;virtual dom(虚拟dom)–&gt;真实dom–&gt;ui</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128152331917.png" alt="image-20210128152331917"></p><p>Runtime-only</p><p>运行过程：render–&gt;virtual dom(虚拟dom)–&gt;真实dom–&gt;ui</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128152345776.png" alt="image-20210128152345776"></p><p>vue运行过程</p><p>template–&gt;ast–&gt;render–&gt;virtual dom(虚拟dom)–&gt;真实dom–&gt;ui</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128153629388.png" alt="image-20210128153629388"></p><p>由此可知Runtime-only性能更高</p><blockquote><p>render函数的使用</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128154325356.png" alt="image-20210128154325356"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128154334988.png" alt="image-20210128154334988"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128154343891.png" alt="image-20210128154343891"></p><blockquote><p>npm run build</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128163349780.png" alt="image-20210128163349780"></p><blockquote><p>npm run dev</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128163451982.png" alt="image-20210128163451982"></p><h4 id="vue-cli-3"><a href="#vue-cli-3" class="headerlink" title="vue-cli 3"></a>vue-cli 3</h4><p>vue-cli 3 与 2 版本有很大区别<br>vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webapck 3<br>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录<br>vue-cli 3 提供了 vue ui 命令，提供了可视化配置，更加人性化<br>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</p><blockquote><p>初始化项目</p></blockquote><p>vue create myproject</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128160902762.png" alt="image-20210128160902762"></p><blockquote><p>目录结构</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128160932367.png" alt="image-20210128160932367"></p><blockquote><p>配置</p></blockquote><ol><li>在终端执行vue ui </li></ol><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210128170851950.png" alt="image-20210128170851950"></p><p>2.隐藏文件里</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210129100050446.png" alt="image-20210129100050446"></p><p>3.自定义配置</p><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><blockquote><p>安装</p></blockquote><p>1.步骤一: 安装vue-router<br>npm install vue-router –save<br>2.步骤二: 在模块化工程中使用它(因为是一个插件, 所以可以通过Vue.use()来安装路由功能)<br>第一步：导入路由对象，并且调用 Vue.use(VueRouter)<br>第二步：创建路由实例，并且传入路由映射配置<br>第三步：在Vue实例中挂载创建的路由实例</p><p>router/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> </span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><p>第一步: 创建路由组件<br>第二步: 配置路由映射: 组件和路径映射关系<br>第三步: 使用路由: 通过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>路由（routing)</p></blockquote><p>就是通过互联的网络把信息从源地址传输到目的地址的活动</p><blockquote><p>路由器两种机制: <strong>路由</strong>和<strong>转送</strong></p></blockquote><p><strong>路由</strong>是决定数据包从<strong>来源</strong>到目的地的<strong>路径</strong>.<br><strong>转送</strong>将<strong>输入端</strong>的数据转移到合适的<strong>输出端</strong>.</p><blockquote><p>路由表</p></blockquote><p>本质上就是一个映射表, 决定了数据包的指向</p><h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><h3 id="后端路由阶段"><a href="#后端路由阶段" class="headerlink" title="后端路由阶段"></a>后端路由阶段</h3><p>早期的网站开发整个HTML页面是由服务器来渲染的.服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示.<br>但是, 一个网站, 这么多页面服务器如何处理呢?一个页面有自己对应的网址, 也就是URL.URL会发送到服务器, 服务器会通过正则对该URL进行匹配, 并且最后交给一个Controller进行处理.Controller进行各种处理, 最终生成HTML或者数据, 返回给前端.这就完成了一个IO操作.<br>上面的这种操作, 就是后端路由.<br>当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户顿.这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化.</p><blockquote><p>缺点:</p></blockquote><p>一种情况是整个页面的模块由后端人员来编写和维护的.<br>另一种情况是前端开发人员如果要开发页面, 需要通过PHP和Java等语言来编写页面代码.<br>而且通常情况下HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情.</p><h3 id="前后端分离阶段"><a href="#前后端分离阶段" class="headerlink" title="前后端分离阶段"></a>前后端分离阶段</h3><p>前后端分离阶段：<br>随着Ajax的出现, 有了前后端分离的开发模式.<br>后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中.<br>这样做最大的优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上.<br>并且当移动端(iOS/Android)出现后, 后端不需要进行任何处理, 依然使用之前的一套API即可.<br>目前很多的网站依然采用这种模式开发.</p><h3 id="单页面富应用阶段"><a href="#单页面富应用阶段" class="headerlink" title="单页面富应用阶段"></a>单页面富应用阶段</h3><p>其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由.<br>也就是前端来维护一套路由规则.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>在router安装正常的情况下</p><p>1.在router/index.js里进行配置路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&quot;/home&quot;</span><span class="comment">//重定向</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span>,<span class="comment">//将模式切换成history</span></span><br><span class="line">  linkActiveClass: <span class="string">&quot;active&quot;</span><span class="comment">//使处于活跃的router-link 的 class属性上添加上 active</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>2.使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>router-link的属性</p></blockquote><p>1.tag:可以将原本的a标签，变成其他类型，比如button</p><p>2.replace：直接加上replace，使浏览器自带的返回前进按钮无效</p><p>3.active-class：值为class名，在被使用时，添加对应的class，方便区分，等同配置中的linkActiveClass</p><h3 id="通过代码实现路由跳转"><a href="#通过代码实现路由跳转" class="headerlink" title="通过代码实现路由跳转"></a>通过代码实现路由跳转</h3><p>vue-router在所有的组件里都加上了$router属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot; tag&#x3D;&quot;button&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot; active-class&#x3D;&quot;&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt; --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;homeClick&quot;&gt;首页&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;aboutClick&quot;&gt;关于&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name :&quot;App&quot;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    homeClick()&#123;</span><br><span class="line">      &#x2F;&#x2F;通过代码的方式修改路径</span><br><span class="line">      &#x2F;&#x2F;push replace</span><br><span class="line">      this.$router.push(&quot;&#x2F;home&quot;)</span><br><span class="line">     </span><br><span class="line">    &#125;,</span><br><span class="line">    aboutClick()&#123;</span><br><span class="line">      &#x2F;&#x2F;push replace</span><br><span class="line">      this.$router.push(&quot;&#x2F;about&quot;)</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav &#123;</span><br><span class="line">  padding: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav a &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav a.router-link-exact-active &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>实现一个路由请求 /user/username,username是可变的，</p><p>1.新建user组件</p><p>当前哪个路由处于活跃状态 ，route就是哪个路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;username&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&quot;user&quot;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username:this.$route.params.username</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在router/index.js下配置对应路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/User.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用user路由</p><p>username为data中的属性，方便输入修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#x2F;user&#x2F;+username&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;router-view&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>4.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210129152510800.png" alt="image-20210129152510800"></p><h3 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h3><blockquote><p>懒加载</p></blockquote><p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p><blockquote><p>为什么</p></blockquote><p>首先, 我们知道路由中通常会定义很多不同的页面.这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大.如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.</p><blockquote><p>懒加载做了什么</p></blockquote><p>1.路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块.<br>2.只有在这个路由被访问到的时候, 才加载对应的组件.</p><blockquote><p>使用</p></blockquote><p>在router/index.js下配置路由时使用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">   name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">   component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/User.vue&#x27;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>打包后会生成对应的js文件</p><h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><p>children属性</p><blockquote><p>步骤</p></blockquote><p>1.创建对应的子组件, 并且在路由映射中配置对应的子路由.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">   name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">   component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/Home.vue&quot;</span>),</span><br><span class="line">   children:[</span><br><span class="line">     &#123;</span><br><span class="line">       path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">       name: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">       component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/News.vue&quot;</span>),</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">       name: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">       component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/message.vue&quot;</span>),</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>2.在组件内部使用router-view标签.</p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>1.params的类型:<br>配置路由格式: /router/:id<br>传递的方式: 在path后面跟上对应的值<br>传递后形成的路径: /router/123, /router/abc</p><p>前文已经说过</p><p>2.query的类型:<br>配置路由格式: /router, 也就是普通配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">   name: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">   component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/profile.vue&#x27;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>传递的方式: 对象中使用query的key作为传递方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/profile&#x27;,query:&#123;name:&#x27;why&#x27;&#125;&#125;&quot;</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>传递后形成的路径: /router?id=123, /router?id=abc.</p><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>我们来考虑一个需求: 在一个SPA应用中, 如何改变网页的标题呢?<br>网页标题是通过title来显示的, 但是SPA只有一个固定的HTML, 切换不同的页面时, 标题并不会改变.<br>但是我们可以通过JavaScript来修改title的内容.window.document.title = ‘新的标题’.<br>那么在Vue项目中, 在哪里修改? 什么时候修改比较合适呢?<br>普通的修改方式:<br>我们比较容易想到的修改标题的位置是每一个路由对应的组件.vue文件中.<br>通过mounted声明周期函数, 执行对应的代码进行修改即可.<br>但是当页面比较多时, 这种方式不容易维护(因为需要在多个页面执行类似的代码).<br>有没有更好的办法呢? 使用导航守卫即可.</p><blockquote><p>什么是导航守卫?</p></blockquote><p>vue-router提供的导航守卫主要用来监听监听路由的进入和离开的.<br>vue-router提供了beforeEach和afterEach的钩子函数, 它们会在路由即将改变前和改变后触发.</p><blockquote><p>使用</p></blockquote><p>先使用meta属性来定义各个路由的name，在使用router.beforeEach在每个路由加载前修改title</p><p>导航钩子的三个参数解析:<br>to: 即将要进入的目标的路由对象.<br>from: 当前导航即将要离开的路由对象.<br>next: 调用该方法后, 才能进入下一个钩子.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&quot;/home&quot;</span><span class="comment">//重定向</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;首页&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/Home.vue&quot;</span>),</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        meta:&#123;</span><br><span class="line">          name:<span class="string">&quot;新闻&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/News.vue&quot;</span>),</span><br><span class="line">      </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        meta:&#123;</span><br><span class="line">          name:<span class="string">&quot;消息&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/message.vue&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;关于&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;用户&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/User.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;档案&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/profile.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span><span class="comment">//将模式切换成history</span></span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//从from跳转到to</span></span><br><span class="line">  <span class="built_in">document</span>.title=to.meta.name;</span><br><span class="line">  <span class="comment">//执行下一步</span></span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>beforeEach：前置钩子，必须要使用next()，参数为to,from,next</p><p>afterEach：后置钩子， 不需要主动调用next()函数，参数为to,from</p><p>以上都是全局守卫</p><blockquote><p>路由独享守卫</p></blockquote><p>写在route里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&quot;/home&quot;</span><span class="comment">//重定向</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;首页&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/Home.vue&quot;</span>),</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        meta:&#123;</span><br><span class="line">          name:<span class="string">&quot;新闻&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/News.vue&quot;</span>),</span><br><span class="line">      </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        meta:&#123;</span><br><span class="line">          name:<span class="string">&quot;消息&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/message.vue&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;关于&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;用户&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/User.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">    meta:&#123;</span><br><span class="line">      name:<span class="string">&quot;档案&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/profile.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span><span class="comment">//将模式切换成history</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//从from跳转到to</span></span><br><span class="line">  <span class="built_in">document</span>.title=to.meta.name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//执行下一步</span></span><br><span class="line">  next();</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>组件守卫</p></blockquote><p>写法与全局守卫相同，只是写在组件里面</p><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。<br>它们有两个非常重要的属性:<br>include - 字符串或正则表达，只有匹配的组件会被缓存<br>exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存<br>router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201094328675.png" alt="image-20210201094328675"></p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p><p>它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><blockquote><p>管理</p></blockquote><p>状态管理模式、集中式存储管理这些名词听起来就非常高大上，让人捉摸不透。<br>其实，你可以简单的将其看成<strong>把需要多个组件共享的变量全部存储在一个对象里面</strong>。<br>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。<br>那么，多个组件是不是就可以共享这个对象中的所有变量属性了呢？<br>等等，如果是这样的话，为什么官方还要专门出一个插件Vuex呢？难道我们不能自己封装一个对象来管理吗？<br>当然可以，只是我们要先想想VueJS带给我们最大的便利是什么呢？没错，就是响应式。<br>如果你自己封装实现一个对象能不能保证它里面所有的属性做到响应式呢？当然也可以，只是自己封装可能稍微麻烦一些。<br>不用怀疑，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它就可以了。</p><blockquote><p>例子</p></blockquote><p>如果你做过大型开放，你一定遇到过多个状态，在多个界面间的共享问题。<br>比如用户的登录状态、用户名称、头像、地理位置信息等等。<br>比如商品的收藏、购物车中的物品等等。<br>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的</p><h2 id="单页面状态管理"><a href="#单页面状态管理" class="headerlink" title="单页面状态管理"></a>单页面状态管理</h2><p>未使用vuex</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201104535151.png" alt="image-20210201104535151"></p><p>State：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）<br>View：视图层，可以针对State的变化，显示不同的信息。（这个好理解吧？）<br>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;counter++&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;counter++&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message:&quot;message&quot;,</span><br><span class="line">      counter:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="多界面状态管理"><a href="#多界面状态管理" class="headerlink" title="多界面状态管理"></a>多界面状态管理</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201135814990.png" alt="image-20210201135814990"></p><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？<br>多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）<br>不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）<br>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的<br>状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。<br>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！<br>没错，Vuex就是为我们提供这个大管家的工具。<br>全局单例模式（大管家）<br>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。<br>之后，你们每个试图，按照我规定好的规定，进行访问和修改等操作。<br>这就是Vuex背后的基本思想。</p><blockquote><p>安装</p></blockquote><p>cnpm install vuex –save </p><blockquote><p>使用前提</p></blockquote><p>为了避免使main.js文件臃肿，所以在src下新建一个store文件夹来存放与vuex有关的代码</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>1.在store文件夹下新建index.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;Vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  actions:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  modules:&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>2.在main.js上将store挂载到vue上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  store,</span><br><span class="line">  render:<span class="function"><span class="params">h</span>=&gt;</span>h(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.使用$store.state.属性名读取定义在state里的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>1.修改store里的值时，是通过muitations来进行值的修改，因为官方提供了的一个devtools的浏览器插件，可以方便的记录store的值修改情况，方便我们进行debug。而直接修改srore的值，该插件无法追踪。</p><p>2.muitations里面只用来做store的修改，异步操作、网络请求必须在前面完成。</p><h2 id="devtools和muitations"><a href="#devtools和muitations" class="headerlink" title="devtools和muitations"></a>devtools和muitations</h2><h3 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h3><blockquote><p>安装</p></blockquote><p>在谷歌浏览器的插件商店搜索devtools，提供商为vuejs.org</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201142330457.png" alt="image-20210201142330457"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201142421872.png" alt="image-20210201142421872"></p><h3 id="muitations"><a href="#muitations" class="headerlink" title="muitations"></a>muitations</h3><p>1.muitations代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">//方法 默认参数为state</span></span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.counter++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">decrement</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.counter--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.使用 this.$store.commit(“方法名”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;add()&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;der()&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;HelloWorld&gt;&lt;&#x2F;HelloWorld&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message:&quot;这是message&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">      &#x2F;&#x2F;方法名</span><br><span class="line">      this.$store.commit(&quot;add&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    der()&#123;</span><br><span class="line">       &#x2F;&#x2F;方法名</span><br><span class="line">      this.$store.commit(&quot;decrement&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>携带参数</p></blockquote><p>组件中的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addCount(count)&#123;</span><br><span class="line">      console.log(count);</span><br><span class="line">       &#x2F;&#x2F;方法名</span><br><span class="line">      this.$store.commit(&quot;addCount&quot;,count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>store/index.js中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addCount</span>(<span class="params">state,count</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;========&quot;</span>+count);</span><br><span class="line">      state.counter=state.counter+count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两种提交风格</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addCount</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(count);</span><br><span class="line">      <span class="comment">//  //方法名</span></span><br><span class="line">      <span class="comment">// this.$store.commit(&quot;addCount&quot;,count)</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.$store.commit(&#123;</span><br><span class="line">        type:<span class="string">&quot;addCount&quot;</span>,</span><br><span class="line">        count</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>响应规则</p></blockquote><p>1.提前在store中初始化好所需的属性.<br>2.当给state中的对象添加新属性时, 使用下面的方式:<br>方式一: 使用Vue.set(obj, ‘newProp’, 123)<br>方式二: 用新对象给旧对象重新赋值</p><blockquote><p>类型常量</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201153108338.png" alt="image-20210201153108338"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201153130397.png" alt="image-20210201153130397"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201153142098.png" alt="image-20210201153142098"></p><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>getters默认是不能传递参数的, 如果希望传递参数, 那么只能让getters本身返回另一个函数.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">//保存状态</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    counter:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//数据操作</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">//方法 默认参数为state</span></span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.counter++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">decrement</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.counter--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//做异步操作</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//针对不同模块</span></span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//类似组件中计算属性</span></span><br><span class="line">  getters:&#123;</span><br><span class="line">    <span class="function"><span class="title">powerCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.counter * state.counter</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">more20stu</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.students.filter(<span class="function"><span class="params">s</span> =&gt;</span> s.age &gt; <span class="number">20</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="function"><span class="title">more20stuLength</span>(<span class="params">state, getters</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.more20stu.length</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="function"><span class="title">moreAgeStu</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// return function (age) &#123;</span></span><br><span class="line">    <span class="comment">//   return state.students.filter(s =&gt; s.age &gt; age)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">age</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.students.filter(<span class="function"><span class="params">s</span> =&gt;</span> s.age &gt; age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><p>我们强调, 不要再Mutation中进行异步操作.<br>但是某些情况, 我们确实希望在Vuex中进行一些异步操作, 比如网络请求, 必然是异步的. 这个时候怎么处理呢?<br>Action类似于Mutation, 但是是用来代替Mutation进行异步操作的.<br>Action的基本使用代码如下:</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201153953263.png" alt="image-20210201153953263"></p><p>context是什么?<br>context是和store对象具有相同方法和属性的对象.<br>也就是说, 我们可以通过context去进行commit相关的操作, 也可以获取context.state等.<br>但是注意, 这里它们并不是同一个对象, 为什么呢? 我们后面学习Modules的时候, 再具体说.</p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>1.store/index.js的actions里编写代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">updInfo</span>(<span class="params">context,payload</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//模拟异步操作</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(payload);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">//数据的修改只能在mutations里</span></span><br><span class="line">          context.commit(<span class="string">&quot;updInfo&quot;</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">        resolve(<span class="string">&quot;11111111&quot;</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>2.组件中调用方法 ，通过dispatch访问actions里的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">updInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">//访问store里的actions的方法</span></span><br><span class="line">      <span class="built_in">this</span>.$store</span><br><span class="line">      .dispatch(<span class="string">&quot;updInfo&quot;</span>,<span class="string">&quot;携带的信息&quot;</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h2><p>Module是模块的意思, 为什么在Vuex中我们要使用模块呢?<br>Vue使用单一状态树,那么也意味着很多状态都会交给Vuex来管理.当应用变得非常复杂时,store对象就有可能变得相当臃肿.为了解决这个问题, Vuex允许我们将store分割成模块(Module), 而每个模块拥有自己的state、mutations、actions、getters等</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201160234246.png" alt="image-20210201160234246"></p><blockquote><p>states</p></blockquote><p>states属性：modules里的a最后被放在store.state，store.state.a.属性名</p><blockquote><p>muitations</p></blockquote><p>muitations提交方式：this.$store.commit(“decrement”)</p><blockquote><p>getters</p></blockquote><p>getters使用方法:$store.getters.属性名</p><p>getters的第三个参数为rootState,可以访问根节点的state</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201161537257.png" alt="image-20210201161537257"></p><blockquote><p>actions</p></blockquote><p>actions：context.commit()只会调用自己某块的muitations方法</p><p>context中rootState，rootGetters可以获取根节点的state和getters属性</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201161657242.png" alt="image-20210201161657242"></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>将actions、mutations、modules抽离出去，方便管理</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210201162414353.png" alt="image-20210201162414353"></p><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><blockquote><p>选择什么网络模块</p></blockquote><p>1.选择一: 传统的Ajax是基于XMLHttpRequest(XHR)<br>为什么不用它呢?<br>非常好解释, 配置和调用方式等非常混乱。编码起来看起来就非常蛋疼。所以真实开发中很少直接使用, 而是使用jQuery-Ajax</p><p>2.选择二: 在前面的学习中, 我们经常会使用jQuery-Ajax<br>相对于传统的Ajax非常好用.<br>为什么不选择它呢?<br>首先, 我们先明确一点: 在Vue的整个开发中都是不需要使用jQuery了。那么, 就意味着为了方便我们进行一个网络请求, 特意引用一个jQuery, 你觉得合理吗?jQuery的代码1w+行。Vue的代码1w+行。完全没有必要为了用网络请求就引用这个重量级的框架。</p><p>3.选择三: 官方在Vue1.x的时候, 推出了Vue-resource.<br>Vue-resource的体积相对于jQuery小很多。另外Vue-resource是官方推出的.<br>为什么不选择它呢?<br>在Vue2.0退出后, Vue作者就在GitHub的Issues中说明了去掉vue-resource, 并且以后也不会再更新。那么意味着以后vue-reource不再支持新的版本时, 也不会再继续更新和维护。对以后的项目开发和维护都存在很大的隐患.</p><p>4.选择四: 在说明不再继续更新和维护vue-resource的同时, 作者还推荐了一个框架: axios<br>axios有非常多的优点, 并且用起来也非常方便。</p><blockquote><p>功能特点</p></blockquote><p>1.在浏览器中发送 XMLHttpRequests 请求<br>2.在 node.js 中发送 http请求<br>3.支持 Promise API<br>4.拦截请求和响应<br>5.转换请求和响应数据</p><blockquote><p>支持多种请求</p></blockquote><p>1.axios(config)<br>2.axios.request(config)<br>3.axios.get(url[, config])<br>4.axios.delete(url[, config])<br>5.axios.head(url[, config])<br>6.axios.post(url[, data[, config]])<br>7.axios.put(url[, data[, config]])<br>8.axios.patch(url[, data[, config]])</p><blockquote><p>安装</p></blockquote><p>cnpm install axios –save </p><h2 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h2><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  <span class="comment">//访问地址</span></span><br><span class="line">  url:<span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>,</span><br><span class="line">  <span class="comment">//请求方式</span></span><br><span class="line">  method:<span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//get带参数</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  <span class="comment">//访问地址</span></span><br><span class="line">  url:<span class="string">&quot;http://123.207.32.32:8000/home/data&quot;</span>,</span><br><span class="line">  <span class="comment">//针对get请求参数的拼接</span></span><br><span class="line">  params:&#123;</span><br><span class="line">    type:<span class="string">&quot;sell&quot;</span>,</span><br><span class="line">    page: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//请求方式</span></span><br><span class="line">  method:<span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多个请求</span></span><br><span class="line">axios.all(</span><br><span class="line">  [axios(),axios()]</span><br><span class="line">).then(axios.spread(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//将请求结果分开</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基础url</span></span><br><span class="line">axios.defaults.baseURL=<span class="string">&quot;http://123.207.32.32:8000&quot;</span>;</span><br><span class="line"><span class="comment">//超时</span></span><br><span class="line">axios.defaults.timeout=<span class="number">5000</span></span><br></pre></td></tr></table></figure><blockquote><p>常见配置选项</p></blockquote><p>1.请求地址<br>url: ‘/user’,<br>2.请求类型<br>method: ‘get’,<br>3.请根路径<br>baseURL: ‘<a href="http://www.mt.com/api&#39;">http://www.mt.com/api&#39;</a>,<br>4.请求前的数据处理<br>transformRequest:[function(data){}],<br>5.请求后的数据处理<br>transformResponse: [function(data){}],<br>6.自定义的请求头<br>headers:{‘x-Requested-With’:’XMLHttpRequest’},<br>7.URL查询对象<br>params:{ id: 12 },</p><p>8.查询对象序列化函数<br>paramsSerializer: function(params){ }<br>request body<br>data: { key: ‘aa’},<br>9.超时设置s<br>timeout: 1000,<br>10.跨域是否带Token<br>withCredentials: false,<br>11.自定义请求处理<br>adapter: function(resolve, reject, config){},<br>12.身份验证信息<br>auth: { uname: ‘’, pwd: ‘12’},<br>13.响应的数据格式 json / blob /document /arraybuffer / text / stream<br>responseType: ‘json’,</p><h3 id="axios实例"><a href="#axios实例" class="headerlink" title="axios实例"></a>axios实例</h3><p>前面的方法使用的是全局的axios和配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">const</span> instancel = axios.create(&#123;</span><br><span class="line">  baseURL:<span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">  timeout:<span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instancel(&#123;</span><br><span class="line">  url:<span class="string">&quot;/home/multidata&quot;</span>,</span><br><span class="line">  method:<span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>为了减少组件对第三方框架依赖性，所以需要对axios进行一层封装。</p><p>如果对第三方框架依赖性过强，当该框架不再维护或出现重大bug时，对该模块进行修改时，将会边的十分困难。</p><p>1.为手写回调函数方式。2.为使用promise方式，并做了进一步的优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*****************************手写回调函数方式***********************************/</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//创建axios实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">      baseURL:<span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">      timeout:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    instance(config.baseConfig)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">      config.success(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">      config.failure(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./axios/axios.js&#x27;</span></span><br><span class="line">request(</span><br><span class="line">  &#123;</span><br><span class="line">    baseConfig:&#123;</span><br><span class="line">      url:<span class="string">&quot;/home/multidata&quot;</span>,</span><br><span class="line">      method:<span class="string">&quot;get&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//成功方法</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">failure</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//失败方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//config对象封装了baseConfig为请求信息，success为成功回调函数，failure为失败回调函数</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//创建axios实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">      baseURL:<span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">      timeout:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    instance(config.baseConfig)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">      config.success(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">      config.failure(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************使用Promise进行回调*********************************/</span></span><br><span class="line"><span class="comment">// 使用promise来进行回调</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//创建axios实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">      baseURL:<span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">      timeout:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    instance(config)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">      resolve(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">      reject(res);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为axios.create创建的实例就是一个Promise，所以可以直接返回</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//创建axios实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL:<span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">    timeout:<span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用promise进行回调时的请求</span></span><br><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./axios/axios.js&#x27;</span></span><br><span class="line">request(&#123;</span><br><span class="line">  url:<span class="string">&quot;/home/multidata&quot;</span>,</span><br><span class="line">  method:<span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为axios.create创建的实例就是一个Promise，所以可以直接返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1.创建axios实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL:<span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">    timeout:<span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.拦截器</span></span><br><span class="line">  <span class="comment">//请求拦截器,第一个参数为成功，第二个为失败</span></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求拦截的作用</span></span><br><span class="line">    <span class="comment">//1.对数据进行拦截，校验</span></span><br><span class="line">    <span class="comment">//2.比如每次请求时，显示请求图标</span></span><br><span class="line">    <span class="comment">//3.某些网络请求，必须携带某些信息（比如token）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将config返回，才能正常请求</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//响应拦截器,第一个参数为结果，第二个为失败</span></span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对返回的数据进行处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将处理完的结果返回</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回promise</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud alibab版</title>
      <link href="2021/01/12/SpringCloud-alibab%E7%89%88/"/>
      <url>2021/01/12/SpringCloud-alibab%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://spring.io/projects/spring-cloud-alibaba">官方文档</a></p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">中文文档</a></p><p>Spring Cloud Alibaba 也是一套微服务解决方案，包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><p>作为 Spring Cloud 体系下的新实现，Spring Cloud Alibaba 跟官方的组件或其它的第三方实现如 Netflix, Consul，Zookeeper 等对比，具备了更多的功能:</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/v2-3a132c503bb7cde19314acc8a4866c4b_r.jpg" alt="preview"></p><h2 id="Spring-Cloud-Alibaba-包含组件"><a href="#Spring-Cloud-Alibaba-包含组件" class="headerlink" title="Spring Cloud Alibaba 包含组件"></a>Spring Cloud Alibaba 包含组件</h2><p>这幅图是 Spring Cloud Alibaba 系列组件，其中包含了阿里开源组件，阿里云商业化组件，以及集成Spring Cloud 组件。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/v2-46c0b9e0d41c441d222390c79a4cd53b_r.jpg" alt="preview"></p><blockquote><p>阿里开源组件</p></blockquote><p>Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>RocketMQ：开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p>Dubbo：这个就不用多说了，在国内应用非常广泛的一款高性能 Java RPC 框架。</p><p>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><p>Arthas：开源的Java动态追踪工具，基于字节码增强技术，功能非常强大。</p><blockquote><p>能干什么</p></blockquote><p>那么作为微服务解决方案， Spring Cloud Alibaba是如何支持微服务治理的各个功能。</p><p>①服务注册与发现：Spring Cloud Alibaba 基于 Nacos 提供 spring-cloud-alibaba-starter-nacos-discovery &amp; spring-cloud-alibaba-starter-nacos-config 实现了服务注册 &amp; 配置管理功能。依靠 @EnableDiscoveryClient 进行服务的注册，兼容 RestTemplate &amp; OpenFeign 的客户端进行服务调用。</p><p>适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</p><p>②支持多协议的服务调用：Spring Cloud 默认的服务调用依赖 OpenFeign 或 RestTemplate 使用 REST 进行调用。</p><p>使用 @DubboTransported 注解可将底层的 Rest 协议无缝切换成 Dubbo RPC 协议，进行 RPC 调用。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(&quot;dubbo-provider&quot;)</span><br><span class="line">@DubboTransported(protocol = &quot;dubbo&quot;)</span><br><span class="line">public interface DubboFeignRestService &#123;</span><br><span class="line">  @GetMapping(value = &quot;/param&quot;)</span><br><span class="line">  String param(@RequestParam(&quot;param&quot;) String param);</span><br><span class="line"></span><br><span class="line">  @PostMapping(&quot;/saveB&quot;)</span><br><span class="line">  String saveB(@RequestParam(&quot;a&quot;) int a, @RequestParam(&quot;b&quot;) String b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③服务限流降级：作为稳定性的核心要素之一，服务限流和降级是微服务领域特别重要的一环，Spring Cloud Alibaba 基于 Sentinel，对 Spring 体系内基本所有的客户端，网关进行了适配，</p><p>默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入。</p><p>Sentinel应用比较简单，只需引入 starter，即可生效，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</p><p>④微服务消息驱动：支持为微服务应用构建消息驱动能力，基于 Spring Cloud Stream 提供 Binder 的新实现: Spring Cloud Stream RocketMQ Binder，也新增了 Spring Cloud Bus 消息总线的新实现 Spring Cloud Bus RocketMQ。</p><p>⑤分布式事务：使用 Seata 解决微服务场景下面临的分布式事务问题。</p><p>使用 @GlobalTransactional 注解，在微服务中传递事务上下文，可以对业务零侵入地解决分布式事务问题。</p><p>⑥阿里云提供的商业能力：通过上面提到的OSS，schedulerx等组件，开发者可以在阿里云上实现对象存储，分布式任务调度等功能。</p><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Nacos服务注册和配置中心"><a href="#Nacos服务注册和配置中心" class="headerlink" title="Nacos服务注册和配置中心"></a>Nacos服务注册和配置中心</h1><h2 id="简介安装"><a href="#简介安装" class="headerlink" title="简介安装"></a>简介安装</h2><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">Nacos手册</a></p><p>Nameing+Configuration+Service =  Nacos</p><blockquote><p>是什么</p></blockquote><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。（注册中心+配置中心）</p><p>Nacos = Eureka + Config + Bus</p><blockquote><p>能干什么</p></blockquote><p>服务注册中心、服务配置中心</p><blockquote><p>下载</p></blockquote><p><a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">Nacos下载地址</a></p><p>1.下载后解压</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112163840193.png" alt="image-20210112163840193"></p><p>2.运行bin目录下的startup.cmd</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112163943759.png" alt="image-20210112163943759"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112164044747.png" alt="image-20210112164044747"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112164120898.png" alt="image-20210112164120898"></p><p>3.访问<a href="http://localhost:8848/nacos/#/login">http://localhost:8848/nacos/#/login</a></p><p>默认账号密码都是nacos</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112164249123.png" alt="image-20210112164249123"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112164319925.png" alt="image-20210112164319925"></p><h2 id="Nacos作为注册中心"><a href="#Nacos作为注册中心" class="headerlink" title="Nacos作为注册中心"></a>Nacos作为注册中心</h2><h3 id="基于Nacos的服务提供者"><a href="#基于Nacos的服务提供者" class="headerlink" title="基于Nacos的服务提供者"></a>基于Nacos的服务提供者</h3><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112164930011.png" alt="image-20210112164930011"></p><p>2.修改pom</p><p>我已经在父工程中引入了spring cloud Alibaba的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子工程中依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.业务代码</p><blockquote><p>结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112170236256.png" alt="image-20210112170236256"></p><p>为了演示nacos的负载均衡，参照9001新建9002</p><h3 id="基于Nacos的服务消费者"><a href="#基于Nacos的服务消费者" class="headerlink" title="基于Nacos的服务消费者"></a>基于Nacos的服务消费者</h3><p>1.新建mould</p><p>2.修改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-csutomer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http:/nacos-payment-providera</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain83</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain83.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.业务代码</p><p>由于采用RestTemplate进行服务调用，所以需要写它的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他代码同以前</p><h3 id="服务中心的对比"><a href="#服务中心的对比" class="headerlink" title="服务中心的对比"></a>服务中心的对比</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113095157839.png" alt="image-20210113095157839"></p><blockquote><p>注意</p></blockquote><p>Nacos可以在CP和AP之间切换</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113095610068.png" alt="image-20210113095610068"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113095118771.png" alt="image-20210113095118771"></p><blockquote><p>切换命令</p></blockquote><p>curl -X PUT ‘localhost:8848/nacos/v1/ns/operator/switches？entry=serverMode&amp;value=CP’</p><h2 id="Nacos服务配置中心"><a href="#Nacos服务配置中心" class="headerlink" title="Nacos服务配置中心"></a>Nacos服务配置中心</h2><h3 id="Nacos作为配置中心-基础配置"><a href="#Nacos作为配置中心-基础配置" class="headerlink" title="Nacos作为配置中心-基础配置"></a>Nacos作为配置中心-基础配置</h3><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113100430465.png" alt="image-20210113100430465"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--一般基础配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml文件</p><p>①bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line"><span class="comment">#        group: DEV_GROUP</span></span><br><span class="line"><span class="comment">#        namespace: 310b9fcc-1cec-43f5-817a-d4ecbd5f16c0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment"># nacos-config-client-dev.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos-config-client-test.yaml   ----&gt; config.info</span></span><br></pre></td></tr></table></figure><p>②application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="comment">#active: test # 表示测试环境</span></span><br><span class="line">    <span class="comment">#active: info</span></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/config&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span><span class="comment">//实现nacos配置自动刷新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">configInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>dataId的完整格式</p></blockquote><p>${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</p><p>以该项目为列：nacos-config-client-dev.yaml</p><blockquote><p>添加配置文件</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113102336496.png" alt="image-20210113102336496"></p><p>dataId命名严格按照上面的格式</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113102430403.png" alt="image-20210113102430403"></p><h3 id="Nacos作为配置中心-分类配置"><a href="#Nacos作为配置中心-分类配置" class="headerlink" title="Nacos作为配置中心-分类配置"></a>Nacos作为配置中心-分类配置</h3><blockquote><p>多环境多项目问题</p></blockquote><p>实际开发中，通常一个系统会准备：①dev开发环境②test测试环境③prod生产环境</p><p>一个大型分布式微服务系统会有很多微服务子项目，每个微服务又都会有相应的不同环境</p><blockquote><p>namespace+group+data Id</p></blockquote><p>类似Java里面的package名和类名</p><p>最外层的namespace是可以区分部署环境的，group和data id 逻辑上区分两个目标对象</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113104035040.png" alt="image-20210113104035040"></p><p>默认情况：namespace=public，group=default_group,cluster=default</p><p>namespace主要用来实现隔离。比如三个环境，就可以创建三个namespace，不同的namespace是隔离的。</p><p>group可以把不同的微服务划分到同一个组里</p><h4 id="dataId方案"><a href="#dataId方案" class="headerlink" title="dataId方案"></a>dataId方案</h4><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment">#active: dev # 表示开发环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span> <span class="comment"># 表示测试环境</span></span><br><span class="line">    <span class="comment">#active: info</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113105222137.png" alt="image-20210113105222137"></p><h4 id="group方案"><a href="#group方案" class="headerlink" title="group方案"></a>group方案</h4><p>新建两个配置文件，同名但是在不同的组</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113105642664.png" alt="image-20210113105642664"></p><p>修改配置文件</p><p>bootstrap下新增group属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line"><span class="comment">#        namespace: 310b9fcc-1cec-43f5-817a-d4ecbd5f16c0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application下修改 active</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment">#active: dev # 表示开发环境</span></span><br><span class="line">    <span class="comment">#active: test # 表示测试环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><h3 id="namespace方案"><a href="#namespace方案" class="headerlink" title="namespace方案"></a>namespace方案</h3><p>1.新建命名空间</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113110229151.png" alt="image-20210113110229151"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113110301443.png" alt="image-20210113110301443"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113110317999.png" alt="image-20210113110317999"></p><p>再新建一个test的命名空间</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113110542458.png" alt="image-20210113110542458"></p><p>2.修改bootstrap.yml,添加namespace属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">310b9fcc-1cec-43f5-817a-d4ecbd5f16c0</span> <span class="comment">#dev命名空间对应的流水号</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="comment">#active: test # 表示测试环境</span></span><br><span class="line">    <span class="comment">#active: info</span></span><br></pre></td></tr></table></figure><p>3.在dev的命名空间下新建配置文件</p><p>同名文件，但是在不同分组</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113111006938.png" alt="image-20210113111006938"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113111338228.png" alt="image-20210113111338228"></p><h2 id="Nacos集群和持久化配置"><a href="#Nacos集群和持久化配置" class="headerlink" title="Nacos集群和持久化配置"></a>Nacos集群和持久化配置</h2><h3 id="Nacos持久化配置"><a href="#Nacos持久化配置" class="headerlink" title="Nacos持久化配置"></a>Nacos持久化配置</h3><p>Nacos本身自带了一个derBy数据库用于存储一些数据，但是会存在一致性的问题。</p><p>参考这篇文章<a href="https://www.cnblogs.com/larscheng/p/11422909.html">Nacos持久化</a></p><p>Nacos1.1.4版本默认支持mysql5.x ，想要支持8.0以上参考<a href="https://blog.csdn.net/u012480990/article/details/102780908?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control">Nacos1.1.4支持Mysql8.0</a></p><p>由于能力有限，我就选择了支持mysql8.0的nacos1.4版本，1.4版本参考第一个链接，注意1.4启动默认是集群启动，所以修改启动方式参考这篇<a href="https://blog.csdn.net/weixin_48040732/article/details/109492067">博客</a>。</p><p>新建一个配置文件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113145749532.png" alt="image-20210113145749532"></p><p>mysql里</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113145729839.png" alt="image-20210113145729839"></p><h1 id="Sentinel熔断与限流"><a href="#Sentinel熔断与限流" class="headerlink" title="Sentinel熔断与限流"></a>Sentinel熔断与限流</h1><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">中文文档</a></p><p><a href="https://sentinelguard.io/zh-cn/docs/quick-start.html">官方文档</a></p><h2 id="简介安装-1"><a href="#简介安装-1" class="headerlink" title="简介安装"></a>简介安装</h2><blockquote><p>Hystrix与Sentinel的对比</p></blockquote><p>Hystrix:①需要程序员手动搭建监控平台②没有一套web界面可以给我们进行更加细粒度化的配置，流量控制、速率控制、服务熔断、服务降级</p><p>Sentinel:①单独一个组件，可以独立出来。②直接界面化的细粒度统一配置。</p><blockquote><p>是什么</p></blockquote><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><blockquote><p>下载安装</p></blockquote><p><a href="https://github.com/alibaba/Sentinel/releases/tag/1.7.1">下载地址</a></p><p>1.下载后</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113152823950.png" alt="image-20210113152823950"></p><p>2.执行命令 java -jar sentinel-dashboard-1.8.0.jar</p><p>注意：java8环境ok，8080端口不能被占用</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113153006228.png" alt="image-20210113153006228"></p><p>3.登录 账号密码都是sentinel<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113153147327.png" alt="image-20210113153147327"></p><h2 id="初始化演示工程"><a href="#初始化演示工程" class="headerlink" title="初始化演示工程"></a>初始化演示工程</h2><p>前提：nacos和sentinel正常启动</p><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113153612182.png" alt="image-20210113153612182"></p><p>2.修改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.修改yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#配置sentinel的dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="comment">#默认8719端口，加入被占用了会自动从8719开始依次扫描，直到找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"><span class="comment">#      datasource:</span></span><br><span class="line"><span class="comment">#        ds1:</span></span><br><span class="line"><span class="comment">#          nacos:</span></span><br><span class="line"><span class="comment">#            server-addr: localhost:8848</span></span><br><span class="line"><span class="comment">#            dataId: cloudalibaba-sentinel-service</span></span><br><span class="line"><span class="comment">#            groupId: DEFAULT_GROUP</span></span><br><span class="line"><span class="comment">#            data-type: json</span></span><br><span class="line"><span class="comment">#            rule-type: flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br></pre></td></tr></table></figure><p>4.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.业务代码</p><blockquote><p>结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113155120605.png" alt="image-20210113155120605"></p><h2 id="Sentinel流量控制"><a href="#Sentinel流量控制" class="headerlink" title="Sentinel流量控制"></a>Sentinel流量控制</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113155755921.png" alt="image-20210113155755921">资源名：唯一名称，默认请求路径</p><p>针对来源：Sentinel可以针对调用者进行限流，填写微服务，默认default（不区分来源）</p><p>阈值类型/单机阈值：①QPS:每秒请求数量：当调用该api的QPS达到阈值的时候，进行限流。②线程数：当调用该api的线程数达到阈值的时候，进行限流。</p><p>是否集群：不需要集群</p><p>流控模式：①直接：当api达到限流的条件，直接限流。②关联：当关联的资源达到阈值时，限流自己。③链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【ap级别的针对来源】</p><p>流控效果：①快速失败：直接失败，抛出异常。②Warm Up:根据codeFactor（冷加载因子 默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值。③排队等待：匀速排队，让请求以匀速的熟读通过，阈值类型必须设置为QPS，否则无效</p><h3 id="QPS-直接失败"><a href="#QPS-直接失败" class="headerlink" title="QPS-直接失败"></a>QPS-直接失败</h3><blockquote><p>设置接口的流控</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113160734254.png" alt="image-20210113160734254"></p><p>此时只允许一秒钟通过一个请求</p><p>在一秒以内多次点击后，默认报错信息</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113161000403.png" alt="image-20210113161000403"></p><h3 id="线程数失败"><a href="#线程数失败" class="headerlink" title="线程数失败"></a>线程数失败</h3><p>多个请求可以进来，但是只能处理一个请求</p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>例子：支付接口关联订单接口，当支付接口超过阈值的时候，就限制订单接口。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113162229016.png" alt="image-20210113162229016"></p><p>testA只要请求数每秒超过1，testB就挂了</p><h3 id="warm-up（预热）"><a href="#warm-up（预热）" class="headerlink" title="warm up（预热）"></a>warm up（预热）</h3><p>当系统长期处于低水位（低流量访问）的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间就把系统压垮。通过“冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</p><p>阈值/codeFactor（冷加载因子 默认为3）</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113165649266.png" alt="image-20210113165649266"></p><p>阈值/codeFactor（冷加载因子 默认为3）=3 ，意思初始阈值为3，经过10秒后升到10。</p><h3 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113165956476.png" alt="image-20210113165956476"></p><p>10次请求匀速通过</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210113170601748.png" alt="image-20210113170601748"></p><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><blockquote><p>熔断策略</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114090039695.png"></p><p>慢调用比例：请求数大于最小请求数并且慢调用的比率大于比例阈值则发生熔断，熔断时长为用户自定义设置。</p><p>异常比例（秒级）：QPS&gt;=5且异常比例（秒级统计）超过阈值，触发降级，时间窗口结束后，关闭降级。</p><p>异常数（分钟级）：超过阈值时，触发降级；时间窗口结束后，关闭降级。</p><p>sentinel熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其他的资源而导致级联错误。</p><p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出DegradeException）</p><h3 id="慢调用比例"><a href="#慢调用比例" class="headerlink" title="慢调用比例"></a>慢调用比例</h3><p><strong>慢调用</strong>：指耗时大于阈值RT的请求称为慢调用，阈值RT由用户设置</p><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">最大RT</td><td align="left">需要设置的阈值，超过该值则为慢应用</td></tr><tr><td align="left">比例阈值</td><td align="left">慢调用占所有的调用的比率，范围：[0~1]</td></tr><tr><td align="left">熔断时长</td><td align="left">在这段时间内发生熔断、拒绝所有请求</td></tr><tr><td align="left">最小请求数</td><td align="left">即允许通过的最小请求数，在该数量内不发生熔断</td></tr></tbody></table><p>熔断（OPEN）：请求数大于最小请求数并且慢调用的比率大于比例阈值则发生熔断，熔断时长为用户自定义设置。</p><p>探测（HALFOPEN）：当熔断过了定义的熔断时长，状态由熔断（OPEN）变为探测（HALFOPEN）。</p><ul><li>如果接下来的一个请求小于最大RT，说明慢调用已经恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）</li><li>如果接下来的一个请求大于最大RT，说明慢调用未恢复，继续熔断，熔断时长保持一致</li></ul><h3 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h3><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">异常比例阈值</td><td align="left">异常比例=发生异常的请求数÷请求总数取值范围：[0~1]</td></tr><tr><td align="left">熔断时长</td><td align="left">在这段时间内发生熔断、拒绝所有请求</td></tr><tr><td align="left">最小请求数</td><td align="left">即允许通过的最小请求数，在该数量内不发生熔断</td></tr></tbody></table><p>熔断（OPEN）：当请求数大于最小请求并且异常比例大于设置的阈值时触发熔断，熔断时长由用户设置。</p><p>探测（HALFOPEN）：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）</p><ul><li>如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）</li><li>如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致</li></ul><h3 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h3><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">异常数</td><td align="left">请求发生异常的数量</td></tr><tr><td align="left">熔断时长</td><td align="left">在这段时间内发生熔断、拒绝所有请求</td></tr><tr><td align="left">最小请求数</td><td align="left">即允许通过的最小请求数，在该数量内不发生熔断</td></tr></tbody></table><p>熔断（OPEN）：当请求数大于最小请求并且异常数量大于设置的阈值时触发熔断，熔断时长由用户设置。探测（HALFOPEN）：当超过熔断时长时，由熔断（OPEN）转为探测（HALFOPEN）</p><ul><li>如果接下来的一个请求未发生错误，说明应用恢复，结束熔断，状态由探测（HALF_OPEN）变更为关闭（CLOSED）</li><li>如果接下来的一个请求继续发生错误，说明应用未恢复，继续熔断，熔断时长保持一致</li></ul><h2 id="热点key限流"><a href="#热点key限流" class="headerlink" title="热点key限流"></a>热点key限流</h2><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114094148198.png" alt="image-20210114094148198"></p><p>热点：经常访问的数据</p><p>热点参数限流，会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看作是一种特殊的流量控制，仅对包含热点参数的资源调用有效</p><p>参数例外项</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114101256769.png" alt="image-20210114101256769"></p><p>当热点参数的值为特定值的时候，限流阈值可以再从新定义</p><h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p>sentinel系统自适应限流从整体维度对应用入口流量进行控制，结合应用的Load，CPU使用率，总体平均RT，入口QPS和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能的跑在最大吞吐量的同时保证系统整体的稳定性。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114102403169.png" alt="image-20210114102403169"></p><h2 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="SentinelResource"></a>SentinelResource</h2><p>@SentinelResource类似以前的@HystrixCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;byResource&quot;,blockHandler = &quot;deal_byResource&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;限流ok&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2021L</span>,<span class="string">&quot;001&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">deal_byResource</span><span class="params">(BlockException blockException)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,blockException.getClass().getCanonicalName()+<span class="string">&quot;\t 服务不可用&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义限流处理类"><a href="#自定义限流处理类" class="headerlink" title="自定义限流处理类"></a>自定义限流处理类</h3><p>1.新建限流处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException blockException)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;自定义1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span><span class="params">(BlockException blockException)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;自定义2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.controller  blockHandlerClass=自定义限流处理类.class，blockHandler=”具体方法名”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/myBlockHandler&quot;)</span></span><br><span class="line">   <span class="meta">@SentinelResource(value = &quot;myBlockHandler&quot;,blockHandlerClass = MyBlockHandler.class,blockHandler = &quot;handlerException2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CommonResult <span class="title">myBlockHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;限流ok&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2021L</span>,<span class="string">&quot;001&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>sentinel整合ribbon+openFeign+fallback</p><p>新建一个消费者84，两个提供者9003/9004，84要被sentinel监控</p><p>84的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sentinel/circleBreaker&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;) //没有配置</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;) //fallback只负责业务异常</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;) //blockHandler只负责sentinel控制台配置违规</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;,blockHandler = &quot;blockHandler&quot;,</span></span><br><span class="line"><span class="meta">            exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">&quot;/sentinel/payment/paymentSQL/&quot;</span>+id,CommonResult.class,id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//本例是fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span>  Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;兜底异常handlerFallback,exception内容  &quot;</span>+e.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//本例是blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span> Long id, BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">445</span>,<span class="string">&quot;blockHandler-sentinel限流,无此流水: blockException  &quot;</span>+blockException.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==================OpenFeign</span></span><br><span class="line"><span class="comment">//    @Resource</span></span><br><span class="line"><span class="comment">//    private PaymentService paymentService;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @GetMapping(value = &quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    public CommonResult&lt;Payment&gt; paymentSQL(@PathVariable(&quot;id&quot;) Long id)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        return paymentService.paymentSQL(id);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>由此可知</p></blockquote><p>1.fallback只负责业务异常</p><p>2.blockHandler只负责sentinel控制台配置违规</p><p>3.exceptionsToIgnore 忽略这个异常</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>将限流配置规则持久化进nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则就能看到，只要nacos里的配置不删除，针对8401上的sentinel上的流控规则持续有效</p><blockquote><p>步骤</p></blockquote><p>1.添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.修改yml文件 添加datasource属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#配置sentinel的dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="comment">#默认8719端口，加入被占用了会自动从8719开始依次扫描，直到找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure><p>3.在nacos下新建配置</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114144348480.png" alt="image-20210114144348480"></p><p>resource：资源名称</p><p>limitApp：来源应用</p><p>grade：阈值类型，0表示线程数，1表示QPS</p><p>count：单机阈值</p><p>strategy：流控模式，0表示直接，1表示关联，2表示链路</p><p>controlbehavior：流控效果，0表示快速失败，1表示warm up，2表示排队等待</p><p>clusterMode：是否集群</p><p>4.重启8401，执行一次8401下的请求，流控规则被加载进去</p><h1 id="Seata处理分布式事务"><a href="#Seata处理分布式事务" class="headerlink" title="Seata处理分布式事务"></a>Seata处理分布式事务</h1><p><a href="http://seata.io/zh-cn/">官网</a></p><blockquote><p>是什么</p></blockquote><p>seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><blockquote><p>术语</p></blockquote><p>Transaction ID XID 全局唯一的事务ID</p><p>TC (Transaction Coordinator) - 事务协调者</p><p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><p>TM (Transaction Manager) - 事务管理器</p><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><p>RM (Resource Manager) - 资源管理器</p><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><blockquote><p>处理过程</p></blockquote><p>1.TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局的唯一XID；</p><p>2.XID在微服务调用链路的上下文中传播</p><p>3.RM向TC注册分支事务，将其纳入XID对应全局事务的管理</p><p>4.TM向TC发起对XID的全局提交或回滚决议</p><p>5.TC调度XID下管辖的全部分支事务完成提交或回滚请求</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114150906222.png" alt="image-20210114150906222"></p><blockquote><p>下载安装</p></blockquote><p><a href="http://seata.io/zh-cn/blog/download.html">下载地址</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210114154515970.png" alt="image-20210114154515970"></p><blockquote><p>使用</p></blockquote><p>@Transaction本地</p><p>@GlobalTransaction全局</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springCloud </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Param注解与mybatis&lt;insert&gt;标签里的属性keyProperty冲突</title>
      <link href="2021/01/06/@Param-%E4%B8%8E-mybatis-insert%E6%A0%87%E7%AD%BE%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7keyProperty%E5%86%B2%E7%AA%81/"/>
      <url>2021/01/06/@Param-%E4%B8%8E-mybatis-insert%E6%A0%87%E7%AD%BE%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7keyProperty%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>@Param与mybatis<insert>标签里的属性keyProperty会产生冲突</p><blockquote><p>错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">2021-01-06 09:47:02.555 ERROR 13204 --- [nio-8001-exec-2] o.a.c.c.C.[.[.[&#x2F;].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: Error getting generated key or setting result to parameter object. Cause: org.apache.ibatis.binding.BindingException: Parameter &#39;id&#39; not found. Available parameters are [payment, param1]] with root cause</span><br><span class="line"></span><br><span class="line">org.apache.ibatis.binding.BindingException: Parameter &#39;id&#39; not found. Available parameters are [payment, param1]</span><br><span class="line">at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:202) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.reflection.wrapper.MapWrapper.getSetterType(MapWrapper.java:85) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.reflection.MetaObject.getSetterType(MetaObject.java:97) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator.getTypeHandlers(Jdbc3KeyGenerator.java:119) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator.processBatch(Jdbc3KeyGenerator.java:76) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator.processAfter(Jdbc3KeyGenerator.java:56) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:50) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]</span><br><span class="line">at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433) ~[mybatis-spring-1.3.1.jar:1.3.1]</span><br><span class="line">at com.sun.proxy.$Proxy88.insert(Unknown Source) ~[na:na]</span><br><span class="line">at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278) ~[mybatis-spring-1.3.1.jar:1.3.1]</span><br><span class="line">at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59) ~[mybatis-3.4.4.jar:3.4.4]</span><br><span class="line">at com.sun.proxy.$Proxy89.insPayment(Unknown Source) ~[na:na]</span><br><span class="line">at com.hl.springcloud.service.impl.PaymentServiceImpl.insPayment(PaymentServiceImpl.java:22) ~[classes&#x2F;:na]</span><br><span class="line">at com.hl.springcloud.controller.PaymentController.insPayment(PaymentController.java:31) ~[classes&#x2F;:na]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124) ~[druid-1.1.16.jar:1.1.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108) ~[spring-boot-actuator-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_172]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_172]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) [na:1.8.0_172]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>代码</p></blockquote><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insPayment</span><span class="params">(<span class="meta">@Param(&quot;payment&quot;)</span> Payment payment)</span></span>;</span><br></pre></td></tr></table></figure><p>mybatis代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insPayment&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hl.springcloud.entities.Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into payment values (default ,#&#123;payment.serial&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Parameter &#39;id&#39; not found. Available parameters are [payment, param1]</span><br></pre></td></tr></table></figure><p>修改办法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insPayment&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hl.springcloud.entities.Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;payment.id&quot;</span>&gt;</span></span><br><span class="line">        insert into payment values (default ,#&#123;payment.serial&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea2020.1与非自带Maven配置冲突导致的包不存在错误</title>
      <link href="2020/12/31/idea2020.1%E4%B8%8E%E9%9D%9E%E8%87%AA%E5%B8%A6Maven%E9%85%8D%E7%BD%AE%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E7%9A%84%E5%8C%85%E4%B8%8D%E5%AD%98%E5%9C%A8%E9%94%99%E8%AF%AF/"/>
      <url>2020/12/31/idea2020.1%E4%B8%8E%E9%9D%9E%E8%87%AA%E5%B8%A6Maven%E9%85%8D%E7%BD%AE%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E7%9A%84%E5%8C%85%E4%B8%8D%E5%AD%98%E5%9C%A8%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>在最近的编写代码中，我遇见了一个问题，在运行maven项目时，发现疯狂的报包不存在这个错误</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/idea%E4%B8%8EMaven%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF.png"></p><p>但是在依赖里，这些包都是正常存在的<img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20201231165042590.png" alt="image-20201231165042590"></p><p>于是我就搜索</p><p><a href="https://blog.csdn.net/buduoduoorg/article/details/106997331">IDEA2020 1.1中Plugins加载不出来的问题及解决方法</a></p><p><a href="https://blog.csdn.net/qq_37546096/article/details/106612499?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-2.control">Error：java: 程序包lombok不存在- IDEA+maven+lombok</a></p><p>发现时因为项目使用了本地自行安装配置的maven3.6.3，非IDEA自带的版本，并在setting.xml中配置了localRepository(指向LocalWarehouse)和mirrors(指向阿里云)。而IDEA-2020.1版本却无法识别自行设置的localRepository，导致安装在maven本地仓库的jar依赖项在编译时无法被扫描到，出现包不存在的错误。</p><p>所以我决定采用上面博客中的方法，去掉localRepository，通过idea的设置来配置maven本地仓库。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20201231165822106.png" alt="image-20201231165822106"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20201231165933878.png" alt="image-20201231165933878"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud H版</title>
      <link href="2020/12/25/springCloud%20H%E7%89%88/"/>
      <url>2020/12/25/springCloud%20H%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>什么是微服务？</p></blockquote><p>一种软件开发技术- 面向服务的体系结构（SOA）架构样式的一种变体，将应用程序构造为一组松散耦合的服务。在微服务体系结构中，服务是细粒度的，协议是轻量级的。</p><p>微服务（或微服务架构）是一种云原生架构方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成。这些服务通常</p><p>● 有自己的堆栈，包括数据库和数据模型；</p><p>● 通过REST API，事件流和消息代理的组合相互通信；</p><p>● 和它们是按业务能力组织的，分隔服务的线通常称为有界上下文。尽管有关微服务的许多讨论都围绕体系结构定义和特征展开，但它们的价值可以通过相当简单的业务和组织收益更普遍地理解：</p><p>● 可以更轻松地更新代码。</p><p>● 团队可以为不同的组件使用不同的堆栈。</p><p>● 组件可以彼此独立地进行缩放，从而减少了因必须缩放整个应用程序而产生的浪费和成本，因为单个功能可能面临过多的负载。</p><blockquote><p>什么是SpringCloud</p></blockquote><p>分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/springcloud.png" alt="springcloud"></p><p>相关技术</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/springCloud%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF.png"></p><blockquote><p>SpringCloud技术栈</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/springCloud%E6%8A%80%E6%9C%AF%E6%A0%88.png"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107170937194.png" alt="image-20210107170937194"></p><p>服务注册与发现：Eureka(停更)、Zookeeper、Consul、Nacos（推荐）</p><p>服务负载与调用：Netelix Oss Ribbon、LoadBalance</p><p>服务负载与调用：Netelix Feign、OpenFeign（推荐）</p><p>服务熔断降级：Hystrix、resilience4j、Sentinel(阿里巴巴的、推荐)</p><p>服务网关：NeteFix Oss Zuul、gateway(推荐)</p><p>服务分布式配置：Spring Cloud Config、apolo（携程）、Nacos(阿里巴巴 推荐)</p><p>服务总线：Bus、Nacos(阿里巴巴 推荐)</p><p>服务开发：Sping boot</p><p>由此可见阿里巴巴的Nacos是重点。</p><blockquote><p>构建微服务步骤</p></blockquote><p>1.构建父工程，编写pom文件</p><p>2.新建Module,一个module相当于一个微服务，它是第一步中创建的父工程的子项目</p><p>3.改子项目的pom</p><p>4.写子项目配置文件</p><h1 id="使用RestTemplate进行服务调用"><a href="#使用RestTemplate进行服务调用" class="headerlink" title="使用RestTemplate进行服务调用"></a>使用RestTemplate进行服务调用</h1><h2 id="未提取通用服务"><a href="#未提取通用服务" class="headerlink" title="未提取通用服务"></a>未提取通用服务</h2><p>服务提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/insPayment&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">insPayment</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentServiceImpl.insPayment(payment);</span><br><span class="line">        log.info(<span class="string">&quot;===================&quot;</span>+result);</span><br><span class="line">        <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;插入数据成功&quot;</span>,result);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;插入数据库失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/selPaymentById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">selPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        Payment payment = paymentServiceImpl.selPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;===================&quot;</span>+payment);</span><br><span class="line">        <span class="keyword">if</span>(payment!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;查询数据成功&quot;</span>,payment);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;没有该记录&quot;</span>,id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>服务消费者</p><blockquote><p>RestTemplate配置代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>controller代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/customer/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Payment_Url = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/insPayment&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">insPayment</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(Payment_Url+<span class="string">&quot;/payment/insPayment&quot;</span>,payment,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/selPayment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">selPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(Payment_Url+<span class="string">&quot;/payment/selPaymentById/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p></blockquote><p>1.服务提供者和服务消费者都是在同一个父工程下的不同mould</p><p>2.由于没有把公共类提取成新的mould，所以服务提供者和服务消费者都需要在各自的mould里添加公共类，比如Payment这个实体类。</p><h2 id="提取通用服务"><a href="#提取通用服务" class="headerlink" title="提取通用服务"></a>提取通用服务</h2><p>在实际项目中，我们会有些基础模块会被频繁使用，比如登录模块、实体类这些。我们可以把这些基础</p><p>模块提取出来形成通用服务。再在其他服务中导入依赖，来使用这些模块。</p><blockquote><p>项目结构</p></blockquote><p>cloud-api-commons为通用服务，cloud-provider-payment8001为服务提供者，cloud-customer-order80为服务消费者</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106123541837.png" alt="image-20210106123541837"></p><blockquote><p>服务提供者的pom文件加上以下依赖，导入通用服务依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入通用服务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>服务消费者pom文件加上以下依赖，导入通用服务</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入通用服务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h1><blockquote><p>什么是服务注册与发现</p></blockquote><p>eureka采用了cs的设计架构，eureka server作为服务注册功能的服务器，它是服务注册中心。而系统的其他微服务，使用eureka的客户端连接到eureka server并维持心跳连接。这样系统的维护人员就可以通过eureka server来监控系统中的各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务启动的时候，会把当前自己服务器的信息 比如服务地址、通讯地址等以别名方式注册到注册中心上，另一方面（消费者|服务提供者），以该别名的方式去注册中心获取到实际的服务通讯地址，然后实现本地rpc调用。rpc远程调用框架设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的依赖关系（服务治理概念）。在任何rpc远程调用框架中，都会有一个注册中心（存放服务地址相关信息（接口地址））。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106134346350.png" alt="image-20210106134346350"></p><blockquote><p>eureka组件</p></blockquote><p>eureka server：提供服务注册服务</p><p>各个微服务节点通过配置启动后，会在eureka server中进行注册。这样eureka server的服务注册表中将会储存所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p><p>eureka client：通过注册中心进行访问</p><p>是一个Java客户端，用于简化eureka server的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。在应用启动后，将会向eureka server 发生心跳（默认30秒）。如果eureka server在多个心跳周期内没有接收到某个节点的心跳，eureka server将会从服务注册表把这个服务节点移除（默认90秒）。</p><h2 id="单机eureka搭建"><a href="#单机eureka搭建" class="headerlink" title="单机eureka搭建"></a>单机eureka搭建</h2><h3 id="eureka单机搭建"><a href="#eureka单机搭建" class="headerlink" title="eureka单机搭建"></a>eureka单机搭建</h3><p>1.idea生成eureka server端服务注册中心</p><p>1）建mould</p><p>2）改pom</p><p>pom文件里的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）写yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己就是注册中心，职责就是维护服务实例，并不需要检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>4）主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//因为eureka有两个组件 需要标清使用的哪个组件 现在使用的是eureka server</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）测试</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106141338511.png" alt="image-20210106141338511"></p><blockquote><p>监控服务</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106141607664.png" alt="image-20210106141607664"></p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>1.修改服务提供者的pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.修改配置文件里的eureka配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从eureka server抓取已有的注册信息，默认为true。但节点无所谓，但是集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.修改服务提供者的启动类，在启动类上添加@EnableEurekaClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试</p><p>运行后，可以在eureka网页中看见这个服务，</p><p>spring.application.name的值就是在注册时的服务名</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106142631042.png" alt="image-20210106142631042"></p><h2 id="eureka集群搭建"><a href="#eureka集群搭建" class="headerlink" title="eureka集群搭建"></a>eureka集群搭建</h2><h3 id="eureka集群搭建-1"><a href="#eureka集群搭建-1" class="headerlink" title="eureka集群搭建"></a>eureka集群搭建</h3><p>互相注册、相互守望、对外暴露出一个整体</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106144000696.png" alt="image-20210106144000696"></p><blockquote><p>步骤</p></blockquote><p>1.新建多个注册服务</p><p>2.修改映射配置</p><p>win10系统下C:\Windows\System32\drivers\etc\hosts文件</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106145005650.png" alt="image-20210106145005650"></p><p>2.修改yml文件</p><blockquote><p>cloud-eureka-server7001配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己就是注册中心，职责就是维护服务实例，并不需要检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>cloud-eureka-server7002配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己就是注册中心，职责就是维护服务实例，并不需要检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>3.结果</p><p>eureka7001里有7002</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106150828167.png" alt="image-20210106150828167"></p><p>eureka7002里有7001</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106150859572.png" alt="image-20210106150859572"></p><h3 id="微服务进注册Eureka集群"><a href="#微服务进注册Eureka集群" class="headerlink" title="微服务进注册Eureka集群"></a>微服务进注册Eureka集群</h3><blockquote><p>修改配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从eureka server抓取已有的注册信息，默认为true。但节点无所谓，但是集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p>eureka7001.com</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106151500077.png" alt="image-20210106151500077"></p><p>eureka7002.com</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106151535601.png" alt="image-20210106151535601"></p><h3 id="将服务提供者变成集群"><a href="#将服务提供者变成集群" class="headerlink" title="将服务提供者变成集群"></a>将服务提供者变成集群</h3><blockquote><p>项目结构</p></blockquote><p>8001和8002都是服务提供者，80是服务消费者，7001和7002都是注册中心。这些数字都是表示端口号</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106153803819.png" alt="image-20210106153803819"></p><p>1.新建多个服务提供者mould，这些mould启动类、配置文件端口号不同，业务处理相同、注意服务名必须相同</p><blockquote><p>启动类</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106154047235.png" alt="image-20210106154047235"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106154013848.png" alt="image-20210106154013848"></p><blockquote><p>端口号</p></blockquote><p>8001</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>           <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从eureka server抓取已有的注册信息，默认为true。但节点无所谓，但是集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.hl.springcloud.entities</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8002</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>           <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从eureka server抓取已有的注册信息，默认为true。但节点无所谓，但是集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.hl.springcloud.entities</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.结果</p><p>7001注册中心</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106154428626.png" alt="image-20210106154428626"></p><p>7002注册中心</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106154451082.png" alt="image-20210106154451082"></p><p>3.因为现在服务调用采用的是RestTemplate，所以要修改服务地址，通过服务名称来访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务地址</span></span><br><span class="line">    <span class="comment">//public static final String Payment_Url = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Payment_Url = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><p>4.由于同一个服务名称下如果有多个微服务，当访问进来的时候就不知道寻找哪个端口的服务，这个时候就必须修改RestTemplate的配置，加上@LoadBalanced，开启负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.访问结果</p><p>第一次访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106154539048.png" alt="image-20210106154539048"></p><p>第二次访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106155646643.png" alt="image-20210106155646643"></p><p>@LoadBalanced注解开启的负载均衡模式是轮询模式。</p><h3 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h3><p>ip地址+端口号，直接快速定位服务</p><blockquote><p>修改配置文件</p></blockquote><p>8001</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从eureka server抓取已有的注册信息，默认为true。但节点无所谓，但是集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#显示修改主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#显示ip地址</span></span><br></pre></td></tr></table></figure><p>8002</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从eureka server抓取已有的注册信息，默认为true。但节点无所谓，但是集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#显示修改主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#显示ip地址</span></span><br></pre></td></tr></table></figure><p>2.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106161459172.png" alt="image-20210106161459172"></p><h2 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h2><p>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息</p><p>1.修改8001的controller，将以下代码添加进controller类里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务发现</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String &gt; services =  discoveryClient.getServices();</span><br><span class="line">        services.forEach(item-&gt;&#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;ServiceInstance&gt; instance = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        instance.forEach(item-&gt;&#123;</span><br><span class="line">            log.info(item.getInstanceId()+<span class="string">&quot;\t&quot;</span>+item.getHost()+<span class="string">&quot;\t&quot;</span>+item.getPort()+<span class="string">&quot;\t&quot;</span>+item.getUri());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.修改启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//服务发现</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106163433108.png" alt="image-20210106163433108"></p><h2 id="Eureka自我保护"><a href="#Eureka自我保护" class="headerlink" title="Eureka自我保护"></a>Eureka自我保护</h2><p>保护模式主要用于一组客户端和eureka server之间存在网络分区场景下的保护。一旦静茹保护模式，eureka server 将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是是不会注销任何微服务。某时刻如果某个微服务不可用了，eureka server不会立刻清理，依旧会对微服务的信息保存。</p><p>如果在eureka server首页看见这样一段话，则说明eureka进入了保护模式。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106163900199.png" alt="image-20210106163900199"></p><blockquote><p>什么是自我保护模式</p></blockquote><p>默认情况下，如果eureka server在一定时间内没有接收到某个微服务实例的心跳，eureka server将会立刻注销该实例（默认90s）。但是当网络分区故障发生时（延时、卡顿、拥挤），微服务与eureka server不能正常通信，以上行为就会变得危险，应为微服务本身是健康的，此时不应该注销这个微服务。eureka通过“自我保护模式”来解决这个问题——当eureka server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</p><blockquote><p>如何关闭自动保护</p></blockquote><p>1.修改配置文件</p><p>7001配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭自我保护模式</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span> <span class="comment">#超过两秒剔除服务</span></span><br></pre></td></tr></table></figure><p>8001配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#eureka客户端向服务端发生心跳的时间间隔（默认30秒）</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#eureka服务端在收到最后一次心跳后等待时间上限，单位为秒（默认90s）超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>2.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106170507941.png" alt="image-20210106170507941"></p><h1 id="Zookeeper服务注册与发现"><a href="#Zookeeper服务注册与发现" class="headerlink" title="Zookeeper服务注册与发现"></a>Zookeeper服务注册与发现</h1><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210106170757555.png" alt="image-20210106170757555"></p><p>zookeeper的环境搭建请看我的博客<a href="https://heavenimtoral.gitee.io/2020/12/10/Dubbo/">dubbo学习</a></p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107102433738.png" alt="image-20210107102433738"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.4.13版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> <span class="comment">#zookeeper服务地址</span></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.业务代码</p><blockquote><p>zookeeper节点</p></blockquote><p>节点分为两种：临时、持久</p><p>服务节点使用的时临时节点，一定时间内，如果没有该服务，直接清除该节点。</p><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107105149029.png" alt="image-20210107105149029"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--先排除自带的zookeeper--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--添加zookeeper3.4.13版本--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-customer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> <span class="comment">#zookeeper服务地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMainZk80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMainZk80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.业务代码，目前采用的时RestTemplate进行服务通信，需要配置RestTemplate的配置类，前面已经配置了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/zookeeper/order&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/paymentInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">paymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL+<span class="string">&quot;/zookeeper/payment/paymentzk&quot;</span>,String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Consul服务注册与发现"><a href="#Consul服务注册与发现" class="headerlink" title="Consul服务注册与发现"></a>Consul服务注册与发现</h1><p><a href="https://www.consul.io/docs/intro">consul官网</a></p><blockquote><p>什么是consul</p></blockquote><p>Consul是一种服务网格解决方案，提供具有服务发现，配置和分段功能的全功能控制平面。这些功能可以根据需要单独使用，也可以一起使用以构建完整的服务网格。Consul需要一个数据平面，并支持代理和本机集成模型。Consul附带了一个简单的内置代理，因此一切都可以直接使用，还支持Envoy等第三方代理集成。</p><p>Consul是一套开源的分布式服务发现和配置管理系统，有HashiCorp公司用Go语言开发。</p><p>它具有很多优点。包括：基于raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议；支持跨数据中心的WAN集群；提供图形界面；跨平台，支持linux，mac，windows</p><blockquote><p>consul下载安装</p></blockquote><p><a href="https://www.consul.io/downloads.html">下载地址</a></p><p>下载解压后，只有一个consul.exe,可以直接点击运行</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107135736438.png" alt="image-20210107135736438"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107135818938.png" alt="image-20210107135818938"></p><p>执行consul agent -dev</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107135857572.png" alt="image-20210107135857572"></p><p>通过localhost:8500网页访问</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107135945734.png" alt="image-20210107135945734"></p><h2 id="服务提供者-1"><a href="#服务提供者-1" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107140935537.png" alt="image-20210107140935537"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line"><span class="comment">#consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.业务代码</p><p>6.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107141500435.png" alt="image-20210107141500435"></p><h2 id="服务消费者-1"><a href="#服务消费者-1" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107141957874.png" alt="image-20210107141957874"></p><p>2.修改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-customer-order</span></span><br><span class="line">  <span class="comment">#consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderconMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderconMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.业务代码</p><p>6.结果</p><h1 id="三个注册中心异同点"><a href="#三个注册中心异同点" class="headerlink" title="三个注册中心异同点"></a>三个注册中心异同点</h1><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107144105696.png" alt="image-20210107144105696"></p><blockquote><p>CAP</p></blockquote><p>C:强一致性</p><p>A:高可用</p><p>P:分区容错性</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107144258924.png" alt="image-20210107144258924"></p><p>CAP理论关注粒度是数据，而是不整体的架构</p><p>CAP只能满足两个，不能同时满足3个。</p><h1 id="Ribbon服务调用与负载均衡"><a href="#Ribbon服务调用与负载均衡" class="headerlink" title="Ribbon服务调用与负载均衡"></a>Ribbon服务调用与负载均衡</h1><blockquote><p>什么是ribbon</p></blockquote><p>spring cloud ribbon是基于Netflix ribbon实现的一套客户端 负载均衡的工具</p><p>简单的说，ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载算法和服务调用。ribbon客户端组件提供了一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer(简称LB)后面所有的机器，ribbon会自动的帮你基于某种规则（如简单轮询、随机连接等）去连接这些机器。我们很容易使用ribbon实现自定义的负载均衡算法。</p><p>不幸的是，ribbon也进入维护模式。</p><blockquote><p>ribbon能干什么</p></blockquote><p>负载均衡(Load Balance)：将用户的请求平摊分配到多个服务器上，从而达到系统的HA(高可用)</p><p>常见的负载均衡软件有Nginx,LV5等。</p><blockquote><p>ribbon本地负载均衡客户端与Nginx服务端负载均衡区别</p></blockquote><p>Nginx是服务器负载均衡(集中式LB)，客户端所有请求都会交给Nginx，然后由Nginx实现转发请求。即负载均衡是由服务端实现的。</p><p>Ribbon本地负载均衡(进程内LB)，在调用微服务端接口时，会在注册中心上获取注册信息服务列表之后缓存到jvm本地，从而在本地实现RPC远程服务调用技术</p><blockquote><p>架构</p></blockquote><p>ribbon是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，如eureka。</p><p>工作时分两步：</p><p>1.先选择eureka server，它优先选择在同一个区域内负载较少的server</p><p>2.再根据用户指定的策略，再从server取到的服务注册列表中选择一个地址</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107153120039.png" alt="image-20210107153120039"></p><h2 id="ribbon负载均衡"><a href="#ribbon负载均衡" class="headerlink" title="ribbon负载均衡"></a>ribbon负载均衡</h2><p>该项目基于eureka集群配置时所采用的项目</p><p>1.导入依赖</p><p>再引入eureke客户端的时候，eureka已经把ribbon引入进来了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心组件IRule"><a href="#核心组件IRule" class="headerlink" title="核心组件IRule"></a>核心组件IRule</h3><p>根据特定的算法从服务列表中选取一个要访问的服务</p><blockquote><p>七种算法</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107155247913.png" alt="image-20210107155247913"></p><blockquote><p>如何替换</p></blockquote><p>如果要进行特殊定制化，ribbon配置不能放在@ComponentScan所能扫描的包下，否则就会变成全局配置</p><p>1.新建包</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107160457498.png" alt="image-20210107160457498"></p><p>2.IRule配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.启动类</p><p>@RibbonClient(name=”服务名称”,configuration=配置类类名.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>轮询</p></blockquote><p>负载均衡算法：rest接口第几次请求数%服务器集群总数量=实际调用服务器位置下标，每次服务重启后rest接口计数从1开始</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210107161718039.png" alt="image-20210107161718039"></p><h3 id="手写轮询"><a href="#手写轮询" class="headerlink" title="手写轮询"></a>手写轮询</h3><p>1.关闭自带的负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//    @LoadBalanced 为了验证手写的负载均衡算法 取消自带的负载均衡算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.新建LoadBalancer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalancer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="function">ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.实现LoadBalancer接口 MyLB类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLB</span> <span class="keyword">implements</span> <span class="title">LoadBalancer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Juc包下的原子类</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第几次访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            current = <span class="keyword">this</span>.atomicInteger.get();</span><br><span class="line">            <span class="comment">//2147483647是int最大值</span></span><br><span class="line">            next = current &gt;= <span class="number">2147483647</span> ? <span class="number">0</span> : current+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">while</span>(!<span class="keyword">this</span>.atomicInteger.compareAndSet(current,next));</span><br><span class="line">        System.out.println(<span class="string">&quot;***********第几次访问 = &quot;</span>+next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 轮询算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceInstances</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实际调用服务器位置下标 = rest接口第几次请求数%服务器集群总数量</span></span><br><span class="line">        <span class="keyword">int</span> index = getAndIncrement()%serviceInstances.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.controller方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手写轮询算法</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/selPaymentLB&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String  <span class="title">selPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;ServiceInstance&gt; instance = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span>(instance == <span class="keyword">null</span> || instance.size()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ServiceInstance serviceInstance = loadBalancer.instances(instance);</span><br><span class="line"></span><br><span class="line">       URI uri =  serviceInstance.getUri();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> restTemplate.getForObject(uri+<span class="string">&quot;/payment/paymentLB&quot;</span>,String.class);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="OpenFeign服务调用"><a href="#OpenFeign服务调用" class="headerlink" title="OpenFeign服务调用"></a>OpenFeign服务调用</h1><blockquote><p>OpenFeign是什么</p></blockquote><p>Feign是一个声明式Web Service客户端。使用Feign能让编写Web Service客户端更加简单。</p><p>它的使用方法是顶一个服务接口然后在上面添加注解。Feign也支持可插拔式的编码器和解码器。</p><p>spring cloud对Feign进行了封装，使其支持了spring MVC标准注解和HttpMessageConverters。Feign也可以与eureka和ribbon组合使用以支持负载均衡。</p><blockquote><p>能干嘛</p></blockquote><p>Feign旨在使编写Java Http客户端更加容易。</p><p>前面在使用的Ribbon+RestTemplate时，利用RestTemplate对HTTP请求的封装处理，形成了一套模板化的调用方法。但是在实际的开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步的封装，由它来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它（以前是Dao接口上标注Mapper注解，现在是一个微服务接口上标注Feign注解即可），即可完成对服务提供方的接口绑定，简化了使用spring cloud ribbon时，自动封装服务调用客户端的开发量。</p><blockquote><p>Feign集成了Ribbon</p></blockquote><p>利用ribbon维护Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与ribbon不同的是，通过Feigin只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了调用。</p><blockquote><p>Feign和OpenFeign区别</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210108091030105.png" alt="image-20210108091030105"></p><h2 id="OpenFeign使用步骤"><a href="#OpenFeign使用步骤" class="headerlink" title="OpenFeign使用步骤"></a>OpenFeign使用步骤</h2><p>OpenFeign的注解使用在消费端，本次项目注册中心采用eureka，服务提供者为8001</p><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210108091617904.png" alt="image-20210108091617904"></p><p>2.pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br></pre></td></tr></table></figure><p>4.启动类   @EnableFeignClients</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.新建服务端接口</p><p>由于使用OpenFeign的注解是在消费端，所以必须告诉消费者它所需的服务的接口信息，而且注解@FeignClient(value = “CLOUD-PAYMENT-SERVICE”)加在该接口上。</p><p>消费者中服务提供者的接口信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//服务名称</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//路径必须是全路径</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/selPaymentById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">selPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>由于我在8001端的controller的接口使用了@RequestMapping注解，所以，在接口的路径上多了一层路径，所以在消费端80写服务端8001controller的接口信息时，路径必须是全路径。</p><p>6.controller层</p><p>将服务PaymentFeignService当成以前的service使用即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/feign/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引入服务</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/customer/selPayment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">selPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.selPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Feign超时控制"><a href="#Feign超时控制" class="headerlink" title="Feign超时控制"></a>Feign超时控制</h2><p>1.在8001服务端的controller层，写一个故意超时的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//超时接口</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/paymentFeignTimeout&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> serverPort;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.在80消费端的服务调用接口添加超时接口信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/selPaymentById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">selPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/paymentFeignTimeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.在80消费端的controller类里编写接口访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超时接口</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/customer/paymentFeignTimeout&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//openfeign-ribbon:客户端默认等待1秒</span></span><br><span class="line">      <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>bugs</p></blockquote><p>1.找不到服务404</p><p>1）注册中心，有同样的工程，不同的端口号，启用了两次服务，导致出现了暴露的接口，出现了同名的情况，并且controller接口不一致， 导致访问的时候出现一次生效，一次失效的问题。</p><p>由此可知，在对微服务进行集群配置时，多个同名服务的controller的接口应该保持一致。</p><p>2）路径没有写全</p><p>2.”com.netflix.client.ClientException: Load balancer does not have available server for client: CLOUD-PAYMENT-SERVICE”</p><p>1)服务名不一致，注册中心的服务名与FeignClient里的名称不一致</p><p>4.修改yml文件，实现超时控制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-feign-order</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#建立连接后读取到可用资源的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#建立连接所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h1 id="Hystrix服务降级"><a href="#Hystrix服务降级" class="headerlink" title="Hystrix服务降级"></a>Hystrix服务降级</h1><blockquote><p>分布式面临的问题</p></blockquote><p>复杂分布式体系结构中的应用程序有数十个依赖，每个依赖关系在某个时候将不可避免的失败。</p><p>服务雪崩：多个服务调用的时候，假设A调B和C，微服务B和C又调用其他的微服务，这就是所谓的“扇出”。如果扇出的链路上某个个微服务的调用响应时间过长或不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统的崩溃，所谓的”雪崩效应”。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><p>所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块还会接收流量，然后这个有问题的模块还调用其他模块，这样就会发生级联故障，或者叫雪崩。</p><blockquote><p>Hystrix是什么</p></blockquote><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库。在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能保证在一个依赖出错的情况下，不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>服务熔断：“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方法返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><blockquote><p>能干嘛</p></blockquote><p>服务降级、服务熔断、接近实时的监控</p><h2 id="服务降级、服务熔断、服务限流"><a href="#服务降级、服务熔断、服务限流" class="headerlink" title="服务降级、服务熔断、服务限流"></a>服务降级、服务熔断、服务限流</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><blockquote><p>概念</p></blockquote><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</p><p>举个例子：假如目前有很多人想要给我付钱，但我的服务器除了正在运行支付的服务之外，还有一些其它的服务在运行，比如搜索、定时任务和详情等等。然而这些不重要的服务就占用了JVM的不少内存与CPU资源，为了能把钱都收下来（钱才是目标），我设计了一个动态开关，把这些不重要的服务直接在最外层拒掉，这样处理后的后端处理收钱的服务就有更多的资源来收钱了（收钱速度更快了），这就是一个简单的服务降级的使用场景。</p><blockquote><p>使用场景</p></blockquote><p>当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，我们可以将一些 <strong>不重要</strong> 或 <strong>不紧急</strong> 的服务或任务进行服务的 <strong>延迟使用</strong> 或 <strong>暂停使用</strong>。</p><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><blockquote><p>概念</p></blockquote><p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p><p>举个列子： 当前系统中有A，B，C三个服务，服务A是上游，服务B是中游，服务C是下游。  一旦下游服务C因某些原因变得不可用，积压了大量请求，服务B的请求线程也随之阻塞。线程资源逐渐耗尽，使得服务B也变得不可用。紧接着，服务    A也变为不可用，整个调用链路被拖垮。像这种调用链路的<strong>连锁故障</strong>，叫做<strong>雪崩</strong>。在这种时候，就需要我们的熔断机制来挽救整个系统。<br>熔断机制的大体流程和刚才所讲的考试策略如出一辙：当断则断</p><h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3><blockquote><p>概念</p></blockquote><p>限流即限制并发量，限制某一段时间只有指定数量的请求进入后台服务器，遇到流量高峰期或者流量突增时，把流量速率限制在系统所能接受的合理范围之内，不至于让系统被高流量击垮。限流与缓存、降级统称为分布式系统的三大利器，最终目的都是用来保护系统稳定运行。</p><h2 id="Hystrix案例"><a href="#Hystrix案例" class="headerlink" title="Hystrix案例"></a>Hystrix案例</h2><p>注册中心采用eureka</p><h3 id="服务提供者-2"><a href="#服务提供者-2" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210108112828961.png" alt="image-20210108112828961"></p><p>2.pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.业务代码</p><p>service有两个方法，一个是正常方法，一个是错误方法，会导致超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Ok</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_Ok,id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Error</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_Error,id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="服务提供者-3"><a href="#服务提供者-3" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>服务调用采用OpenFeign</p><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210108135704864.png" alt="image-20210108135704864"></p><p>2.修改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hl.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">dafaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.启动类</p><p>5.业务代码</p><h3 id="Hystrix服务降级-1"><a href="#Hystrix服务降级-1" class="headerlink" title="Hystrix服务降级"></a>Hystrix服务降级</h3><blockquote><p>@HystrixCommand</p></blockquote><h4 id="服务提供端"><a href="#服务提供端" class="headerlink" title="服务提供端"></a>服务提供端</h4><p>1.业务层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Ok</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_Ok,id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误方法</span></span><br><span class="line">    <span class="comment">//设置fallback</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod =&quot;paymentInfo_ErrorHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            //设置自身调用超时时间峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级的fallBack</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Error</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_Error,id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ErrorHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_ErrorHandler,id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">&#x2F;&#x2F;开启服务降级</span><br><span class="line">@EnableCircuitBreaker</span><br><span class="line">public class PaymentHystrixMain8001 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务消费者-2"><a href="#服务消费者-2" class="headerlink" title="服务消费者"></a>服务消费者</h4><p>1.yml配置文件</p><p>feign集成了hystrix，所以可以直接在feign里开启hystrix</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-feign-hystrix-order80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启hystrix</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.业务类</p><p>写在controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hystrix/customer/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/paymentInfo_Ok/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Ok</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentInfo_Ok(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/paymentInfo_Error/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="comment">//设置fallback</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod =&quot;paymentInfo_ErrorHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            //设置自身调用超时时间峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级的fallBack</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Error</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentInfo_Error(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ErrorHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_ErrorHandler,id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局服务降级"><a href="#全局服务降级" class="headerlink" title="全局服务降级"></a>全局服务降级</h4><p>通过配置在类上的@DefaultProperties(defaultFallback = “方法名”)注解，其次方法上加上@HystrixCommand注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hystrix/customer/order&quot;)</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;fallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/paymentInfo_Ok/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Ok</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentInfo_Ok(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/paymentInfo_Error/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="comment">//设置fallback</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod =&quot;paymentInfo_ErrorHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            //设置自身调用超时时间峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级的fallBack</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Error</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentInfo_Error(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特定fallback方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ErrorHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; 80端口 paymentInfo_ErrorHandler,id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//全局fallback方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;全局Fallback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对某个微服务进行通配fallback"><a href="#对某个微服务进行通配fallback" class="headerlink" title="对某个微服务进行通配fallback"></a>对某个微服务进行通配fallback</h4><p>优越fallback方法及其配置写在controller层会导致业务代码混乱，所以由于涉及到服务调用才会采用服务降级，并且服务调用采用OpenFeign的方式，被调用的微服务的所有接口都会放在同一个接口类里，所以可以直接针对这个类进行服务降级fallback的设置。</p><p>1.在被调用服务接口类上@FeignClient注解属性fallback，值是实现了该结构的fallback类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hystrix/payment/paymentInfo_Ok/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Ok</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hystrix/payment/paymentInfo_Error/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Error</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.实现了被调用服务接口的fallback类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Ok</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----------PaymentFallbackService,paymentInfo_Ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Error</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----------PaymentFallbackService,paymentInfo_Error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>通配fallback，只是集中管理fallback方法</p><h3 id="Hystrix服务熔断"><a href="#Hystrix服务熔断" class="headerlink" title="Hystrix服务熔断"></a>Hystrix服务熔断</h3><blockquote><p>熔断机制</p></blockquote><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误响应信息。</p><p>当检测到该节点微服务调用相应正常后，恢复调用链路。</p><p>在spring cloud框架里，熔断是通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定的阈值，默认是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是@HystrixCommand。</p><p>在服务提供端的service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=======服务熔断=====</span></span><br><span class="line">   <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">           @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),// 是否开启断路器</span></span><br><span class="line"><span class="meta">           @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),// 请求次数</span></span><br><span class="line"><span class="meta">           @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), // 时间窗口期</span></span><br><span class="line"><span class="meta">           @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),// 失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">   &#125;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(id &lt; <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;******id 不能负数&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       String serialNumber = IdUtil.simpleUUID();<span class="comment">//等价与UUID.</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功，流水号: &quot;</span> + serialNumber;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: &quot;</span> +id;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在熔断后，即使输入正确的数据，也会失败。随着正确率的提高，熔断状态会由open-&gt;half open -&gt;close，逐渐关闭熔断器。</p><blockquote><p>涉及到断路器的三个重要参数</p></blockquote><p>1.快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计时间的范围就是快照时间窗，默认为最近的10秒。</p><p>2.请求总数阈值：在快照时间窗内，必须满足总数阈值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或因为其他原因失败，断路器都不会打开</p><p>3.错误百分比阈值：当请求总数在快照时间窗内超过了阈值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过了50%的错误百分比，在系统默认设定50%阈值的情况下，这时候就会将断路器打开。</p><h2 id="Hystrix图形化监控"><a href="#Hystrix图形化监控" class="headerlink" title="Hystrix图形化监控"></a>Hystrix图形化监控</h2><p>Hystrix会持续的记录所有通过Hystrix发起的请求的执行信息，并以统计表和函数的形式展示给用户，包括每秒执行多少请求成功，多少失败等。NetFlix通过hystrix-metrics-event-stream项目实现了以对以上指标的监控。spring cloud也提供了hystrix dashboard的整合，对监控内容转化成可视化界面。</p><blockquote><p>步骤</p></blockquote><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111091320359.png" alt="image-20210111091320359"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><p>4.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//启动hystrix可视化图形监控功能</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DashboardMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DashboardMain9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.结果</p><p>访问网址：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111092101892.png" alt="image-20210111092101892"></p><blockquote><p>注意</p></blockquote><p>由于9001监控着8001，8001身为被监控者，必须要有以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于springboot升级，所以要设置servlet，在8001的主启动类里加上以下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是为了服务监控二配置，与服务容错本身无关</span></span><br><span class="line"><span class="comment">     * ServletRegistrationBean以为springboot的默认路径不是 /hystrix.stream</span></span><br><span class="line"><span class="comment">     * 只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Gateway服务网关"><a href="#Gateway服务网关" class="headerlink" title="Gateway服务网关"></a>Gateway服务网关</h1><h2 id="概述简介"><a href="#概述简介" class="headerlink" title="概述简介"></a>概述简介</h2><p>spring cloud gateway是spring cloud的一个全新项目，基于spring 5.0 +spring boot2.0和project reactor等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一API路由管理方式</p><p>spring cloud gateway使用的 webflux的 reactor-netty响应式式编程组件，底层使用了netty通讯框架</p><blockquote><p>能干什么</p></blockquote><p>反向代理，鉴权，流量控制、熔断、日志监控</p><blockquote><p>微服务中网关在哪里</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111095836342.png" alt="image-20210111095836342"></p><blockquote><p>为什么选择geateway</p></blockquote><p>1.Zuul1.0已经进入维护阶段，而且gateway是spring cloud研发的，与spring cloud集成好，功能比zuul丰富，使用起来简单便捷</p><p>2.gateway是基于一部非阻塞模型上进行开发的，性能方面不需要担心</p><blockquote><p>特性</p></blockquote><p>1.基于spring framework 5，project reactor 和 spring boot2.0进行构建</p><p>2.动态路由：能够匹配任何请求属性</p><p>3.可以对路由指定predicate（断言）和filter（过滤器）</p><p>4.集成hystrix的断路器功能</p><p>5.集成spring cloud的服务发现功能</p><p>6.易于编写的predicate（断言）和filter（过滤器）</p><p>7.请求限流功能</p><p>8.支持路径重写</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>路由</p></blockquote><p>路由是构建网关的基本模块，它由ID,目标URI,一系列的断言和过滤器组成，如果断言为true则匹配该路由</p><blockquote><p>断言</p></blockquote><p>开发人员可以匹配http请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</p><blockquote><p>过滤器</p></blockquote><p>spring框架中gateway filter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</p><h2 id="Gateway实例"><a href="#Gateway实例" class="headerlink" title="Gateway实例"></a>Gateway实例</h2><blockquote><p>配置实现</p></blockquote><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111103502439.png" alt="image-20210111103502439"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础配置类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="comment">#uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/selPaymentById/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line"><span class="comment">#          uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/paymentLB/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">            <span class="comment">#- After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]</span></span><br><span class="line">            <span class="comment">#- Cookie=username,zzyy</span></span><br><span class="line">            <span class="comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayMain9527</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayMain9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>代码实现</p></blockquote><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customerRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes =  routeLocatorBuilder.routes();</span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_hl&quot;</span>,</span><br><span class="line">                r-&gt;r.path(<span class="string">&quot;/guonei&quot;</span>).</span><br><span class="line">                        uri(<span class="string">&quot;https://news.baidu.com/guonei&quot;</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>动态路由</p></blockquote><p>修改yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址  lb 负载均衡</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/selPaymentById/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/paymentLB/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">            <span class="comment">#- After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]</span></span><br><span class="line">            <span class="comment">#- Cookie=username,zzyy</span></span><br><span class="line">            <span class="comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span></span><br></pre></td></tr></table></figure><h2 id="Predicate的使用"><a href="#Predicate的使用" class="headerlink" title="Predicate的使用"></a>Predicate的使用</h2><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories">官方文档</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111111352849.png" alt="image-20210111111352849"></p><h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><p>在这个时间之后</p><blockquote><p>如何获取这个格式的时间字符串</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ZonedDateTime zbj = ZonedDateTime.now();<span class="comment">//默认时区</span></span><br><span class="line">        System.out.println(zbj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">before_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><p>在该时间之前</p><h3 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">between_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Between=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017-01-21T17:42:47.789-07:00</span>[<span class="string">America/Denver</span>]</span><br></pre></td></tr></table></figure><p>在这两个事件之内</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></span><br></pre></td></tr></table></figure><p>此路由匹配具有名称为<code>chocolate</code>与<code>ch.p</code>正则表达式匹配的cookie的请求。</p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p>如果请求具有名为<code>X-Request-Id</code>其值与<code>\d+</code>正则表达式匹配的标头（即，其值为一个或多个数字），则此路由匹配。</p><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br></pre></td></tr></table></figure><p>如果请求的<code>Host</code>标头值为<code>www.somehost.org</code>或<code>beta.somehost.org</code>或，则此路由匹配<code>www.anotherhost.org</code>。</p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure><p>请求方法是GET或者POST</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: host_route</span><br><span class="line">        uri: https:&#x2F;&#x2F;example.org</span><br><span class="line">        predicates:</span><br><span class="line">        - Path&#x3D;&#x2F;red&#x2F;&#123;segment&#125;,&#x2F;blue&#x2F;&#123;segment&#125;</span><br></pre></td></tr></table></figure><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=green</span></span><br></pre></td></tr></table></figure><p>参数名green</p><h3 id="RemoteAddr"><a href="#RemoteAddr" class="headerlink" title="RemoteAddr"></a>RemoteAddr</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: remoteaddr_route</span><br><span class="line">        uri: https:&#x2F;&#x2F;example.org</span><br><span class="line">        predicates:</span><br><span class="line">        - RemoteAddr&#x3D;192.168.1.1&#x2F;24</span><br></pre></td></tr></table></figure><h3 id="Weight"><a href="#Weight" class="headerlink" title="Weight"></a>Weight</h3><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://weighthigh.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://weightlow.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h2><h3 id="常用的gateway-filter"><a href="#常用的gateway-filter" class="headerlink" title="常用的gateway filter"></a>常用的gateway filter</h3><p>类别：gateway filter（31种） globalfilter（10种） </p><p>生命周期：请求前，请求后</p><p>使用方法：配置文件</p><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><h3 id="自定义全局过滤器GlobalFilter"><a href="#自定义全局过滤器GlobalFilter" class="headerlink" title="自定义全局过滤器GlobalFilter"></a>自定义全局过滤器GlobalFilter</h3><p>要实现 GlobalFilter,Ordered这两个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;===================come in =============&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求参数中是否又名字为uname的参数</span></span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname==<span class="keyword">null</span>)&#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span>  exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Config配置中心"><a href="#Config配置中心" class="headerlink" title="Config配置中心"></a>Config配置中心</h1><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111141948754.png" alt="image-20210111141948754"></p><blockquote><p>分布式面临的配置问题</p></blockquote><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小 ，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><blockquote><p>是什么</p></blockquote><p>spring cloud config 为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为不同微服务应用的所有环境提供了一个中心化的外部配置。</p><blockquote><p>怎么玩</p></blockquote><p>spring cloud config分为服务端和客户端两部分。</p><p>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p><p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p><blockquote><p>能干什么</p></blockquote><p>1.集中管理配置文件</p><p>2.不同环境不同配置，动态化的配置更新，分环境部署</p><p>3.运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</p><p>4.当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</p><p>5.将配置信息以REST接口的形式暴露</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="config服务端搭建"><a href="#config服务端搭建" class="headerlink" title="config服务端搭建"></a>config服务端搭建</h3><p>以git为配置服务中心</p><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111145201984.png" alt="image-20210111145201984"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">git@github.com:HeavenImmortal/springcloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">          <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111152449862.png" alt="image-20210111152449862"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111152432669.png" alt="image-20210111152432669"></p><blockquote><p>配置文件读取规则</p></blockquote><p>1./{分支名}/{application}-{profile}.yml</p><p>2./{application}-{profile}.yml</p><p>3./{application}/{profile}/{分支}</p><h3 id="config客户端"><a href="#config客户端" class="headerlink" title="config客户端"></a>config客户端</h3><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111153731428.png" alt="image-20210111153731428"></p><p>2.修改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改bootstrap.yml</p><blockquote><p>为什么用bootstrap.yml</p></blockquote><p>application是用户级，bootstrap是系统级，优先级更高。</p><p>spring cloud会创建一个“bootstrap context”，作为spring应用的“Application Context”的父上下文。初始化的时候，“bootstrap context” 负责从外部源加载配置属性并解析配置，这两个上下文共享一个从外部获取的”environment”。</p><p>‘bootstrap’属性具有更高的优先级，默认情况下，它们不会被本地配置覆盖。“Bootstrap Context”和“Application Context”有着不同的约定，所以新增了一个“bootstrap.yml”文件。保证“Bootstrap Context”和“Application Context”配置的分离。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  #rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span></span><br><span class="line"><span class="comment">#  rabbitmq:</span></span><br><span class="line"><span class="comment">#    host: localhost</span></span><br><span class="line"><span class="comment">#    port: 5672</span></span><br><span class="line"><span class="comment">#    username: guest</span></span><br><span class="line"><span class="comment">#    password: guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>4.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.controller</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态刷新"><a href="#动态刷新" class="headerlink" title="动态刷新"></a>动态刷新</h3><p>当修改配置中心上的配置文件后，3344刷新后，配置更新。但是，3355却不会更新，只有重启才能刷新。</p><p>1.修改3355的pom文件 加上actuator的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.修改3355的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/main/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  #rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span></span><br><span class="line"><span class="comment">#  rabbitmq:</span></span><br><span class="line"><span class="comment">#    host: localhost</span></span><br><span class="line"><span class="comment">#    port: 5672</span></span><br><span class="line"><span class="comment">#    username: guest</span></span><br><span class="line"><span class="comment">#    password: guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#b暴露监控端点 方便动态刷新</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.修改3355的controller 加上 @RefreshScope</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ConfigClient&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">configInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.重新启动3355后 发个post请求到3355，通知它刷新。”<a href="http://localhost:3355/actuator/refresh&quot;">http://localhost:3355/actuator/refresh&quot;</a></p><p>这是是为什么加actuator的依赖</p><h1 id="Bus消息总线"><a href="#Bus消息总线" class="headerlink" title="Bus消息总线"></a>Bus消息总线</h1><blockquote><p>是什么</p></blockquote><p>spring cloud bus 配合 spring cloud config 使用可以实现配置的动态刷新</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111164056664.png" alt="image-20210111164056664"></p><blockquote><p>能干什么</p></blockquote><p>sping cloud bus 能管理和传播分布式系统间的消息，像一个分布式执行器，可用于广播状态更改，事件推送等，也可以当作微服务间的通信通道</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210111164443358.png" alt="image-20210111164443358"></p><blockquote><p>什么是总线</p></blockquote><p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中的所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以它被称为消息总线。在总线上的各个实例，都可以方便的广播一些需要让其他连接在该主题上实例都指定的消息。</p><blockquote><p>基本原理</p></blockquote><p>Config Client实例都监听MQ中同一个topic（默认是spring cloud bus）。当一个服务刷新数据的时候，它会把这个信息放入到topic中，这样其它监听同一个topic的服务就都能的到通知，然后再去更新自身的配置。</p><h2 id="RabbitMQ环境配置"><a href="#RabbitMQ环境配置" class="headerlink" title="RabbitMQ环境配置"></a>RabbitMQ环境配置</h2><p><a href="https://heavenimtoral.gitee.io/2020/12/25/RabbitMQ/">RabbitMQ</a></p><h2 id="SpringCloudBus动态刷新全局广播"><a href="#SpringCloudBus动态刷新全局广播" class="headerlink" title="SpringCloudBus动态刷新全局广播"></a>SpringCloudBus动态刷新全局广播</h2><p>以3344为模板创建3366</p><blockquote><p>设计思想</p></blockquote><p>1.利用消息总线触发一个客户端/bus/refresh，而刷新所有客户的配置。</p><p>2.利用消息总线触发一个服务端ConfigServer的/bus/refresh，而刷新所有客户端的配置。</p><p>采用方案2，原因：①方案1打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担刷新的职责。②方案1破化了微服务各节点的对等性。③有一定的局限性，如微服务在迁移的时候，网络地址常常会发生变化，会增加更多的修改。</p><h3 id="服务端3344添加消息总线支持"><a href="#服务端3344添加消息总线支持" class="headerlink" title="服务端3344添加消息总线支持"></a>服务端3344添加消息总线支持</h3><p>1.添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.修改yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">git@github.com:HeavenImmortal/springcloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">           <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line">  <span class="comment">#Rabbit配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.196</span><span class="number">.104</span><span class="number">.114</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Rabbit相关配置 暴露bus刷新配置的端点  </span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;bus-refresh&quot;</span></span><br></pre></td></tr></table></figure><h3 id="客户端3355、3366添加消息总线支持"><a href="#客户端3355、3366添加消息总线支持" class="headerlink" title="客户端3355、3366添加消息总线支持"></a>客户端3355、3366添加消息总线支持</h3><p>1.修改pom，同上，添加依赖</p><p>2.修改yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/main/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.196</span><span class="number">.104</span><span class="number">.114</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#b暴露监控端点 方便动态刷新</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.当配置信息被运维修改 发送 <a href="http://localhost:3344/actuator/bus-refresh">http://localhost:3344/actuator/bus-refresh</a></p><h2 id="SpringCloudBus动态刷新定点通知"><a href="#SpringCloudBus动态刷新定点通知" class="headerlink" title="SpringCloudBus动态刷新定点通知"></a>SpringCloudBus动态刷新定点通知</h2><p>当配置信息被运维修改 发送 <a href="http://localhost:3344/actuator/bus-refresh/config-client:3355">http://localhost:3344/actuator/bus-refresh/config-client:3355</a></p><p> http://配置中心服务IP地址:配置中心端口号/actuator/bus-refresh/服务名:端口号</p><h1 id="Stream消息驱动"><a href="#Stream消息驱动" class="headerlink" title="Stream消息驱动"></a>Stream消息驱动</h1><blockquote><p>为什么引入spring cloud stream</p></blockquote><p>现在的系统庞大，可能在一个系统里使用了多种MQ技术，但是程序员一般不会精通所有的MQ，所以使用Stream，不用关注底层的MQ，用一种适配绑定的方式，自动在各种MQ内切换。</p><blockquote><p>是什么</p></blockquote><p>屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型。</p><p>是一个构建消息驱动微服务的框架</p><p>应用程序通过inputs或者outputs来与 spring cloud stream中binder对象交互。通过我们配置binding（绑定），而spring cloud stream 的binder对象负责与消息中间件交互。所以我们只需要搞清楚如何与spring cloud stream 交互就可以方便使用消息驱动的方式。</p><p>通过使用spring integration来连接消息代理中间件以实现消息事件驱动。</p><p>spring cloud stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅，消费组、分区的三个核心概念。</p><p>目前仅支持RabbitMQ，Kafka</p><blockquote><p>标准流程</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112110329696.png" alt="image-20210112110329696"></p><blockquote><p>编码api和常用注解</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112110545473.png" alt="image-20210112110545473"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="消息驱动之生产者8801"><a href="#消息驱动之生产者8801" class="headerlink" title="消息驱动之生产者8801"></a>消息驱动之生产者8801</h3><p>1.新建mould</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112111353915.png" alt="image-20210112111353915"></p><p>2.修改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">121.196</span><span class="number">.104</span><span class="number">.114</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><p>4.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderMain8801</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderMain8801.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding(Source.class)</span> <span class="comment">//定义消息的推送管道</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息发送管道</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        System.out.println(<span class="string">&quot;===========发生消息==========&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息驱动之消费者8802"><a href="#消息驱动之消费者8802" class="headerlink" title="消息驱动之消费者8802"></a>消息驱动之消费者8802</h3><p>前面步骤同上</p><p>yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-customer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">121.196</span><span class="number">.104</span><span class="number">.114</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">inputs:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8802.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputs</span><span class="params">(Message&lt;String &gt; message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者一号===&quot;</span>+message.getPayload()+<span class="string">&quot;   &quot;</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分组消费和持久化"><a href="#分组消费和持久化" class="headerlink" title="分组消费和持久化"></a>分组消费和持久化</h2><p>以8802为模板，新建8803</p><blockquote><p>重复消费</p></blockquote><p>8801发布一条消息，8802和8803同时消费。</p><p>在stream中 不同组是可以全面消费（重复消费）、同一个组存在竞争关系，只有其中一个可以消费</p><h3 id="分组消费"><a href="#分组消费" class="headerlink" title="分组消费"></a>分组消费</h3><p>在消费者的配置文件中 加上</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112144801531.png" alt="image-20210112144801531"></p><p>结果</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112144946173.png" alt="image-20210112144946173"></p><p>由于现在8802、8803在两个不同的组，同一条消息被重复消费</p><blockquote><p>解决</p></blockquote><p>将8802、8803放在同一个组，默认采用轮询</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>具有group属性可以实现持久化</p><h1 id="Sleuth分布式请求链路持久"><a href="#Sleuth分布式请求链路持久" class="headerlink" title="Sleuth分布式请求链路持久"></a>Sleuth分布式请求链路持久</h1><blockquote><p>问题</p></blockquote><p>在微服务框架中，一个客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，每一个前端请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p><blockquote><p>是什么</p></blockquote><p>spring cloud sleuth 提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并且兼容支持了zipkin。</p><h2 id="zipkin搭建安装"><a href="#zipkin搭建安装" class="headerlink" title="zipkin搭建安装"></a>zipkin搭建安装</h2><p><a href="http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">下载地址</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112151329000.png" alt="image-20210112151329000"></p><p>执行 java -jar zipkin-server-2.12.9-exec.jar</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112151444328.png" alt="image-20210112151444328"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112151453243.png" alt="image-20210112151453243"></p><p>访问网址 <a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112151635393.png" alt="image-20210112151635393"></p><blockquote><p>一条完整的请求链路</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112151739456.png" alt="image-20210112151739456"></p><p>精简后</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112152002148.png" alt="image-20210112152002148"></p><h2 id="Sleuth链路监控展现"><a href="#Sleuth链路监控展现" class="headerlink" title="Sleuth链路监控展现"></a>Sleuth链路监控展现</h2><p>以以前的80和 8001为例</p><blockquote><p>8001</p></blockquote><p>1.加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sleuth+zipkin 监控链路依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.修改yml，加上zipkin和sleuth</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">    <span class="attr">zipkin:</span></span><br><span class="line">      <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">    <span class="attr">sleuth:</span></span><br><span class="line">      <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率值介于 0 到 1 之间，1 则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">datasource:</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>           <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从eureka server抓取已有的注册信息，默认为true。但节点无所谓，但是集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#显示修改主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#显示ip地址</span></span><br><span class="line"><span class="comment">#    #eureka客户端向服务端发生心跳的时间间隔（默认30秒）</span></span><br><span class="line"><span class="comment">#    lease-renewal-interval-in-seconds: 1</span></span><br><span class="line"><span class="comment">#    #eureka服务端在收到最后一次心跳后等待时间上限，单位为秒（默认90s）超时将剔除服务</span></span><br><span class="line"><span class="comment">#    lease-expiration-duration-in-seconds: 2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.hl.springcloud.entities</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>80</p></blockquote><p>1.添加依赖 ，同上</p><p>2.修改yml，同上</p><blockquote><p>结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20210112154056157.png" alt="image-20210112154056157"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springCloud </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="2020/12/25/RabbitMQ/"/>
      <url>2020/12/25/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="MQ引言"><a href="#MQ引言" class="headerlink" title="MQ引言"></a>MQ引言</h2><blockquote><p>说明是MQ</p></blockquote><p><code>MQ</code>(Message Quene) :  翻译为 <code>消息队列</code>,通过典型的 <code>生产者</code>和<code>消费者</code>模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 <code>消息中间件</code>    通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</p><blockquote><p>MQ有哪些</p></blockquote><p>当今市面上有很多主流的消息中间件，如老牌的<code>ActiveMQ</code>、<code>RabbitMQ</code>，炙手可热的<code>Kafka</code>，阿里巴巴自主开发<code>RocketMQ</code>等。</p><blockquote><p>不同MQ特点</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.ActiveMQ</span></span><br><span class="line"><span class="code">ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎!</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.Kafka</span></span><br><span class="line"><span class="code">Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，</span></span><br><span class="line"><span class="code">追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，</span></span><br><span class="line"><span class="code">适合产生大量数据的互联网服务的数据收集业务。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.RocketMQ</span></span><br><span class="line"><span class="code">RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起</span></span><br><span class="line"><span class="code">源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消</span></span><br><span class="line"><span class="code">息推送、日志流式处理、binglog分发等场景。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.RabbitMQ</span></span><br><span class="line"><span class="code">RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和</span></span><br><span class="line"><span class="code">发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在</span></span><br><span class="line"><span class="code">其次。</span></span><br></pre></td></tr></table></figure><blockquote><p>RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。</p></blockquote><h2 id="RabbitMQ-的引言"><a href="#RabbitMQ-的引言" class="headerlink" title="RabbitMQ 的引言"></a>RabbitMQ 的引言</h2><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><blockquote><p>基于<code>AMQP</code>协议，erlang语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190925215603036-9419777.png" alt="image-20190925215603036-9419777"></p><p><code>官网</code>: <a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p><code>官方教程</code>: <a href="https://www.rabbitmq.com/#getstarted">https://www.rabbitmq.com/#getstarted</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># AMQP 协议</span></span><br><span class="line"><span class="code">AMQP（advanced message queuing protocol）`在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200311182438041.png" alt="image-20200311182438041"></p><h1 id="RabbitMQ的安装"><a href="#RabbitMQ的安装" class="headerlink" title="RabbitMQ的安装"></a>RabbitMQ的安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><code>官网下载地址</code>: <a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190925220115235.png" alt="image-20190925220115235"></p><blockquote><p><code>最新版本</code>: 3.7.18</p></blockquote><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190925220343521.png" alt="image-20190925220343521"></p><blockquote><p><code>注意</code>:这里的安装包是centos7安装的包</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.将rabbitmq安装包上传到linux系统中</span></span><br><span class="line"><span class="code">erlang-22.0.7-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="code">rabbitmq-server-3.7.18-1.el7.noarch.rpm</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.安装Erlang依赖包</span></span><br><span class="line"><span class="code">rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.安装RabbitMQ安装包(需要联网)</span></span><br><span class="line"><span class="code">yum install -y rabbitmq-server-3.7.18-1.el7.noarch.rpm</span></span><br><span class="line"><span class="code">注意:默认安装完成后配置文件模板在:/usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example目录中,需要</span></span><br><span class="line"><span class="code">将配置文件复制到/etc/rabbitmq/目录中,并修改名称为rabbitmq.config</span></span><br><span class="line"><span class="code"># 4.复制配置文件</span></span><br><span class="line"><span class="code">cp /usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.查看配置文件位置</span></span><br><span class="line"><span class="code">ls /etc/rabbitmq/rabbitmq.config</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.修改配置文件(参见下图:)</span></span><br><span class="line"><span class="code">vim /etc/rabbitmq/rabbitmq.config </span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190925222230260-3836271.png" alt="image-20190925222230260-3836271"></p><p>将上图中配置文件中红色部分去掉<code>%%</code>,以及最后的<code>,</code>逗号 修改为下图:</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190925222329200-3836312.png" alt="image-20190925222329200-3836312"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 7.执行如下命令,启动rabbitmq中的插件管理</span></span><br><span class="line"><span class="code">rabbitmq-plugins enable rabbitmq_management</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">出现如下说明:</span></span><br><span class="line"><span class="code">Enabling plugins on node rabbit@localhost:</span></span><br><span class="line"><span class="code">    rabbitmq_management</span></span><br><span class="line"><span class="code">    The following plugins have been configured:</span></span><br><span class="line"><span class="code">      rabbitmq_management</span></span><br><span class="line"><span class="code">      rabbitmq_management_agent</span></span><br><span class="line"><span class="code">      rabbitmq_web_dispatch</span></span><br><span class="line"><span class="code">    Applying plugin configuration to rabbit@localhost...</span></span><br><span class="line"><span class="code">    The following plugins have been enabled:</span></span><br><span class="line"><span class="code">      rabbitmq_management</span></span><br><span class="line"><span class="code">      rabbitmq_management_agent</span></span><br><span class="line"><span class="code">      rabbitmq_web_dispatch</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    set 3 plugins.</span></span><br><span class="line"><span class="code">    Offline change; changes will take effect at broker restart.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.启动RabbitMQ的服务</span></span><br><span class="line"><span class="code">systemctl start rabbitmq-server</span></span><br><span class="line"><span class="code">systemctl restart rabbitmq-server</span></span><br><span class="line"><span class="code">systemctl stop rabbitmq-server</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 9.查看服务状态(见下图:)</span></span><br><span class="line"><span class="code">systemctl status rabbitmq-server</span></span><br><span class="line"><span class="code">  ● rabbitmq-server.service - RabbitMQ broker</span></span><br><span class="line"><span class="code">     Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; disabled; vendor preset: disabled)</span></span><br><span class="line"><span class="code">     Active: active (running) since 三 2019-09-25 22:26:35 CST; 7s ago</span></span><br><span class="line"><span class="code">   Main PID: 2904 (beam.smp)</span></span><br><span class="line"><span class="code">     Status: &quot;Initialized&quot;</span></span><br><span class="line"><span class="code">     CGroup: /system.slice/rabbitmq-server.service</span></span><br><span class="line"><span class="code">             ├─2904 /usr/lib64/erlang/erts-10.4.4/bin/beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -</span></span><br><span class="line"><span class="code">             MBlmbcs...</span></span><br><span class="line"><span class="code">             ├─3220 erl_child_setup 32768</span></span><br><span class="line"><span class="code">             ├─3243 inet_gethost 4</span></span><br><span class="line"><span class="code">             └─3244 inet_gethost 4</span></span><br><span class="line"><span class="code">      .........</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190925222743776-3836511.png" alt="image-20190925222743776-3836511"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 10.关闭防火墙服务</span></span><br><span class="line"><span class="code">systemctl disable firewalld</span></span><br><span class="line"><span class="code">    Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span></span><br><span class="line"><span class="code">    Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span></span><br><span class="line"><span class="code">systemctl stop firewalld   </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 11.访问web管理界面</span></span><br><span class="line"><span class="code">http://10.15.0.8:15672/</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190926194738708-3836601.png" alt="image-20190926194738708-3836601"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 12.登录管理界面</span></span><br><span class="line"><span class="code">username:  guest</span></span><br><span class="line"><span class="code">password:  guest</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20190926194954822-3836665.png" alt="image-20190926194954822-3836665"></p><h1 id="RabiitMQ-配置"><a href="#RabiitMQ-配置" class="headerlink" title="RabiitMQ 配置"></a>RabiitMQ 配置</h1><h2 id="RabbitMQ-管理命令行"><a href="#RabbitMQ-管理命令行" class="headerlink" title="RabbitMQ 管理命令行"></a>RabbitMQ 管理命令行</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.服务启动相关</span></span><br><span class="line"><span class="code">systemctl start|restart|stop|status rabbitmq-server</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.管理命令行  用来在不使用web管理界面情况下命令操作RabbitMQ</span></span><br><span class="line"><span class="code">rabbitmqctl  help  可以查看更多命令</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.插件管理命令行</span></span><br><span class="line"><span class="code">rabbitmq-plugins enable|list|disable </span></span><br></pre></td></tr></table></figure><h2 id="web管理界面介绍"><a href="#web管理界面介绍" class="headerlink" title="web管理界面介绍"></a>web管理界面介绍</h2><h3 id="overview概览"><a href="#overview概览" class="headerlink" title="overview概览"></a>overview概览</h3><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20191126163631889.png" alt="image-20191126162026720"></p><ul><li><p><code>connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况</code></p></li><li><p><code>channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。</code></p></li><li><p><code>Exchanges：交换机，用来实现消息的路由</code></p></li><li><p><code>Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。</code></p></li></ul><h3 id="Admin用户和虚拟主机管理"><a href="#Admin用户和虚拟主机管理" class="headerlink" title="Admin用户和虚拟主机管理"></a>Admin用户和虚拟主机管理</h3><h4 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1. 添加用户"></a>1. 添加用户</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20191126163631889.png" alt="image-20191126162617280"></p><p>上面的Tags选项，其实是指定用户的角色，可选的有以下几个：</p><ul><li><p><code>超级管理员(administrator)</code></p><p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p><code>监控者(monitoring)</code></p><p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p><code>策略制定者(policymaker)</code></p><p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p><code>普通管理者(management)</code></p><p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li><li><p><code>其他</code></p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ul><h4 id="2-创建虚拟主机"><a href="#2-创建虚拟主机" class="headerlink" title="2. 创建虚拟主机"></a>2. 创建虚拟主机</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 虚拟主机</span></span><br><span class="line"><span class="code">为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</span></span><br></pre></td></tr></table></figure><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20191126163631889.png" alt="image-20191126163023153"></p><h4 id="3-绑定虚拟主机和用户"><a href="#3-绑定虚拟主机和用户" class="headerlink" title="3. 绑定虚拟主机和用户"></a>3. 绑定虚拟主机和用户</h4><p>创建好虚拟主机，我们还要给用户添加访问权限：</p><p>点击添加好的虚拟主机：</p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20191126163631889.png" alt="image-20191126163506795"></p><p>进入虚拟机设置界面:</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20191126163631889.png" alt="image-20191126163631889"></p><h1 id="RabbitMQ-的第一个程序"><a href="#RabbitMQ-的第一个程序" class="headerlink" title="RabbitMQ 的第一个程序"></a>RabbitMQ 的第一个程序</h1><h2 id="AMQP协议的回顾"><a href="#AMQP协议的回顾" class="headerlink" title="AMQP协议的回顾"></a>AMQP协议的回顾</h2><p><img src="https://i.loli.net/2020/12/25/ZLGnufPVMaTImF7.png" alt="image-20200312140114784"></p><h2 id="RabbitMQ支持的消息模型"><a href="#RabbitMQ支持的消息模型" class="headerlink" title="RabbitMQ支持的消息模型"></a>RabbitMQ支持的消息模型</h2><p><img src="https://i.loli.net/2020/12/25/ymdZMEpov8VJhLF.png" alt="image-20191126165434784"></p><p><img src="https://i.loli.net/2020/12/25/23DAclf1b8RvreT.png" alt="image-20191126165459282"></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第一种模型-直连"><a href="#第一种模型-直连" class="headerlink" title="第一种模型(直连)"></a>第一种模型(直连)</h2><p><img src="https://i.loli.net/2020/12/25/vO7G4YXZ5hDrAgl.png" alt="image-20191126165840602"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h3 id="1-开发生产者"><a href="#1-开发生产者" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">connectionFactory.setHost(<span class="string">&quot;10.15.0.9&quot;</span>);</span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">connectionFactory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">connectionFactory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line"><span class="comment">//创建通道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//参数1: 是否持久化  参数2:是否独占队列 参数3:是否自动删除  参数4:其他属性</span></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>, <span class="keyword">null</span>,<span class="string">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h3 id="2-开发消费者"><a href="#2-开发消费者" class="headerlink" title="2. 开发消费者"></a>2. 开发消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">connectionFactory.setHost(<span class="string">&quot;10.15.0.9&quot;</span>);</span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">connectionFactory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">connectionFactory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-参数的说明"><a href="#3-参数的说明" class="headerlink" title="3. 参数的说明"></a>3. 参数的说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="string">&#x27;参数1&#x27;</span>:用来声明通道对应的队列</span><br><span class="line"> <span class="string">&#x27;参数2&#x27;</span>:用来指定是否持久化队列</span><br><span class="line"> <span class="string">&#x27;参数3&#x27;</span>:用来指定是否独占队列</span><br><span class="line"> <span class="string">&#x27;参数4&#x27;</span>:用来指定是否自动删除队列</span><br><span class="line"> <span class="string">&#x27;参数5&#x27;</span>:对队列的额外配置</span><br></pre></td></tr></table></figure><hr><h2 id="第二种模型-work-quene"><a href="#第二种模型-work-quene" class="headerlink" title="第二种模型(work quene)"></a>第二种模型(work quene)</h2><p><code>Work queues</code>，也被称为（<code>Task queues</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src="https://i.loli.net/2020/12/25/5idWeRDsZAnMX6k.png" alt="image-20200314221002008"></p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者-1，领取任务并且完成任务，假设完成速度较慢</li><li>C2：消费者-2：领取任务并完成任务，假设完成速度快</li></ul><h3 id="1-开发生产者-1"><a href="#1-开发生产者-1" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="keyword">null</span>, (i+<span class="string">&quot;====&gt;:我是消息&quot;</span>).getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-开发消费者-2"><a href="#3-开发消费者-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);   <span class="comment">//处理消息比较慢 一秒处理一个消息</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4.测试结果"></a>4.测试结果</h3><p><img src="https://i.loli.net/2020/12/25/mZNcLdnxDTOatJk.png" alt="image-20200314223242058"></p><p><img src="https://i.loli.net/2020/12/25/VznKi6aFj45oSuY.png" alt="image-20200314223302207"></p><blockquote><p><code>总结:默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</code></p></blockquote><h3 id="5-消息自动确认机制"><a href="#5-消息自动确认机制" class="headerlink" title="5.消息自动确认机制"></a>5.消息自动确认机制</h3><blockquote><p>Doing a task can take a few seconds. You may wonder what happens if one of the consumers starts a long task and dies with it only partly done. With our current code, once RabbitMQ delivers a message to the consumer it immediately marks it for deletion. In this case, if you kill a worker we will lose the message it was just processing. We’ll also lose all the messages that were dispatched to this particular worker but were not yet handled.</p><p>But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">channel.basicQos(<span class="number">1</span>);<span class="comment">//一次只接受一条未确认的消息</span></span><br><span class="line"><span class="comment">//参数2:关闭自动确认消息</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//手动确认消息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>设置通道一次只能消费一个消息</p></li><li><p>关闭消息的自动确认,开启手动确认消息</p><p><img src="https://i.loli.net/2020/12/25/1NknwbdVJs38lEM.png" alt="image-20200314230412178"></p><p><img src="https://i.loli.net/2020/12/25/N8v7cIG5DfmlQEh.png" alt="image-20200314230423280"></p></li></ul><hr><h2 id="第三种模型-fanout"><a href="#第三种模型-fanout" class="headerlink" title="第三种模型(fanout)"></a>第三种模型(fanout)</h2><p><code>fanout 扇出 也称为广播</code></p><p> <img src="https://i.loli.net/2020/12/25/XLFnKbIc2p1zqPr.png" alt="image-20191126213115873"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li> 可以有多个消费者</li><li> 每个<strong>消费者有自己的queue</strong>（队列）</li><li> 每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li> <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li> 交换机把消息发送给绑定过的所有队列</li><li> 队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h3 id="1-开发生产者-2"><a href="#1-开发生产者-2" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);<span class="comment">//广播 一条消息多个消费者同时消费</span></span><br><span class="line"><span class="comment">//发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;hello&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure><h3 id="2-开发消费者-1-1"><a href="#2-开发消费者-1-1" class="headerlink" title="2. 开发消费者-1"></a>2. 开发消费者-1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//将临时队列绑定exchange</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//处理消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-开发消费者-2-1"><a href="#3-开发消费者-2-1" class="headerlink" title="3. 开发消费者-2"></a>3. 开发消费者-2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//将临时队列绑定exchange</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//处理消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-开发消费者-3"><a href="#4-开发消费者-3" class="headerlink" title="4.开发消费者-3"></a>4.开发消费者-3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//将临时队列绑定exchange</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//处理消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者3: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5. 测试结果"></a>5. 测试结果</h3><p><img src="https://i.loli.net/2020/12/25/Sz32hYUZHc5qlKu.png" alt="image-20200315180653207"></p><p><img src="https://i.loli.net/2020/12/25/X9TxdBJyZYWwAEg.png" alt="image-20200315180708489"></p><p><img src="https://i.loli.net/2020/12/25/Dzv13leUhGn4rko.png" alt="image-20200315180728035"></p><hr><h2 id="第四种模型-Routing"><a href="#第四种模型-Routing" class="headerlink" title="第四种模型(Routing)"></a>第四种模型(Routing)</h2><h3 id="Routing-之订阅模型-Direct-直连"><a href="#Routing-之订阅模型-Direct-直连" class="headerlink" title="Routing 之订阅模型-Direct(直连)"></a>Routing 之订阅模型-Direct(直连)</h3><p><code>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</code></p><p> 在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p>流程:</p><p><img src="https://i.loli.net/2020/12/25/PsjMm3O2g4YQTax.png" alt="image-20191126220145375"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h4 id="1-开发生产者-3"><a href="#1-开发生产者-3" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机  参数1:交换机名称 参数2:交换机类型 基于指令的Routing key转发</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;logs_direct&quot;</span>,key,<span class="keyword">null</span>,(<span class="string">&quot;指定的route key&quot;</span>+key+<span class="string">&quot;的消息&quot;</span>).getBytes());</span><br></pre></td></tr></table></figure><h4 id="2-开发消费者-1-2"><a href="#2-开发消费者-1-2" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列和交换机</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;warn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-开发消费者-2-2"><a href="#3-开发消费者-2-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列和交换机</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-测试生产者发送Route-key为error的消息时"><a href="#4-测试生产者发送Route-key为error的消息时" class="headerlink" title="4.测试生产者发送Route key为error的消息时"></a>4.测试生产者发送Route key为error的消息时</h4><p> <img src="https://i.loli.net/2020/12/25/Rh4YaLvnUP658Af.png" alt="image-20200316102613933"></p><p> <img src="https://i.loli.net/2020/12/25/RFM4mG3T8ftpcLr.png" alt="image-20200316102627912"></p><h4 id="5-测试生产者发送Route-key为info的消息时"><a href="#5-测试生产者发送Route-key为info的消息时" class="headerlink" title="5.测试生产者发送Route key为info的消息时"></a>5.测试生产者发送Route key为info的消息时</h4><p> <img src="https://i.loli.net/2020/12/25/2QXUmlHdioOnwVu.png" alt="image-20200316102925740"></p><p> <img src="https://i.loli.net/2020/12/25/nWokE9xtp1BUSeb.png" alt="image-20200316102947326"></p><hr><h3 id="Routing-之订阅模型-Topic"><a href="#Routing-之订阅模型-Topic" class="headerlink" title="Routing 之订阅模型-Topic"></a>Routing 之订阅模型-Topic</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！这种模型<code>Routingkey</code> 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p><img src="https://i.loli.net/2020/12/25/ujIZTclK5ahJ3oB.png" alt="image-20191127121900255"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 统配符</span></span><br><span class="line"><span class="bullet">*</span> (star) can substitute for exactly one word.    匹配不多不少恰好1个词</span><br><span class="line"><span class="code"># (hash) can substitute for zero or more words.  匹配一个或多个词</span></span><br><span class="line"><span class="code"># 如:</span></span><br><span class="line"><span class="code">audit.#    匹配audit.irs.corporate或者 audit.irs 等</span></span><br><span class="line"><span class="code">    audit.*   只能匹配 audit.irs</span></span><br></pre></td></tr></table></figure><h4 id="1-开发生产者-4"><a href="#1-开发生产者-4" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生命交换机和交换机类型 topic 使用动态路由(通配符方式)</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">String routekey = <span class="string">&quot;user.save&quot;</span>;<span class="comment">//动态路由key</span></span><br><span class="line"><span class="comment">//发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;topics&quot;</span>,routekey,<span class="keyword">null</span>,(<span class="string">&quot;这是路由中的动态订阅模型,route key: [&quot;</span>+routekey+<span class="string">&quot;]&quot;</span>).getBytes());</span><br></pre></td></tr></table></figure><h4 id="2-开发消费者-1-3"><a href="#2-开发消费者-1-3" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h4><p><code>Routing Key中使用*通配符方式</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列与交换机并设置获取交换机中动态路由</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;user.*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-开发消费者-2-3"><a href="#3-开发消费者-2-3" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h4><p><code>Routing Key中使用#通配符方式</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列与交换机并设置获取交换机中动态路由</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;user.#&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-测试结果-1"><a href="#4-测试结果-1" class="headerlink" title="4.测试结果"></a>4.测试结果</h4><p> <img src="https://i.loli.net/2020/12/25/UqInl9gYt63EPp2.png" alt="image-20200316113935785"></p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200316114000459.png" alt="image-20200316114000459"></p><h1 id="SpringBoot中使用RabbitMQ"><a href="#SpringBoot中使用RabbitMQ" class="headerlink" title="SpringBoot中使用RabbitMQ"></a>SpringBoot中使用RabbitMQ</h1><h2 id="搭建初始环境"><a href="#搭建初始环境" class="headerlink" title="搭建初始环境"></a>搭建初始环境</h2><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot_rabbitmq</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">10.15</span><span class="number">.0</span><span class="number">.9</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/ems</span></span><br></pre></td></tr></table></figure><p><code>RabbitTemplate</code>  用来简化操作     使用时候直接在项目中注入即可使用</p><h2 id="第一种hello-world模型使用"><a href="#第一种hello-world模型使用" class="headerlink" title="第一种hello world模型使用"></a>第一种hello world模型使用</h2><h3 id="开发生产者"><a href="#开发生产者" class="headerlink" title="开发生产者"></a>开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发消费者"><a href="#开发消费者" class="headerlink" title="开发消费者"></a>开发消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种work模型使用"><a href="#第二种work模型使用" class="headerlink" title="第二种work模型使用"></a>第二种work模型使用</h2><h3 id="开发生产者-1"><a href="#开发生产者-1" class="headerlink" title="开发生产者"></a>开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;work&quot;</span>,<span class="string">&quot;hello work!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发消费者-1"><a href="#开发消费者-1" class="headerlink" title="开发消费者"></a>开发消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkCustomer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;work message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;work message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>说明:默认在Spring AMQP实现中Work这种方式就是公平调度,如果需要实现能者多劳需要额外配置</code></p></blockquote><h2 id="Fanout-广播模型"><a href="#Fanout-广播模型" class="headerlink" title="Fanout 广播模型"></a>Fanout 广播模型</h2><h3 id="开发生产者-2"><a href="#开发生产者-2" class="headerlink" title="开发生产者"></a>开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFanout</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;这是日志广播&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发消费者-2"><a href="#开发消费者-2" class="headerlink" title="开发消费者"></a>开发消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue,</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name=&quot;logs&quot;,type = &quot;fanout&quot;)</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue, //创建临时队列</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name=&quot;logs&quot;,type = &quot;fanout&quot;)  //绑定交换机类型</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Route-路由模型"><a href="#Route-路由模型" class="headerlink" title="Route 路由模型"></a>Route 路由模型</h2><h3 id="开发生产者-3"><a href="#开发生产者-3" class="headerlink" title="开发生产者"></a>开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;directs&quot;</span>,<span class="string">&quot;error&quot;</span>,<span class="string">&quot;error 的日志信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发消费者-3"><a href="#开发消费者-3" class="headerlink" title="开发消费者"></a>开发消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings =&#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue(),</span></span><br><span class="line"><span class="meta">                    key=&#123;&quot;info&quot;,&quot;error&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;direct&quot;,name=&quot;directs&quot;)</span></span><br><span class="line"><span class="meta">            )&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings =&#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue(),</span></span><br><span class="line"><span class="meta">                    key=&#123;&quot;error&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;direct&quot;,name=&quot;directs&quot;)</span></span><br><span class="line"><span class="meta">            )&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Topic-订阅模型-动态路由模型"><a href="#Topic-订阅模型-动态路由模型" class="headerlink" title="Topic 订阅模型(动态路由模型)"></a>Topic 订阅模型(动态路由模型)</h2><h3 id="开发生产者-4"><a href="#开发生产者-4" class="headerlink" title="开发生产者"></a>开发生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//topic</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopic</span><span class="params">()</span></span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;user.save.findAll&quot;</span>,<span class="string">&quot;user.save.findAll 的消息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发消费者-4"><a href="#开发消费者-4" class="headerlink" title="开发消费者"></a>开发消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopCustomer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;user.*&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;user.#&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="MQ的应用场景"><a href="#MQ的应用场景" class="headerlink" title="MQ的应用场景"></a>MQ的应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><code>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种 1.串行的方式 2.并行的方式</code></p><ul><li><p><code>串行方式:</code> 将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西. </p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/SouthEast-4860248.png" alt="这里写图片描述"></p></li><li><p><code>并行方式: </code>将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。 </p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/SouthEast-20191127211112660.png" alt="这里写图片描述"></p></li><li><p><code>消息队列:</code>假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回.  <code>消息队列</code>: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理 </p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/592892-20190520220249900-1679743651.jpg" alt="img"></p></li></ul><p>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的3倍,是并行的2倍。</p><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><code>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口. </code></p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/SouthEast-20191127211247287.png" alt="这里写图片描述"></p><p>这种做法有一个缺点:</p><p>当库存系统出现故障时,订单就会失败。 订单系统和库存系统高耦合.  引入消息队列 </p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/SouthEast-20191127211304085.png" alt="这里写图片描述"></p><ul><li><p><code>订单系统:</code>用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</p></li><li><p><code>库存系统:</code>订阅下单的消息,获取下单消息,进行库操作。  就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失.</p></li></ul><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p> <code>场景:</code> 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。  </p><p>  <code>作用:</code> </p><p>​            1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^) </p><p>​            2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单) </p><p> <img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/SouthEast-20191127211341601.png" alt="这里写图片描述"></p><p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.  </p><p>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p><hr><h2 id="RabbitMQ的集群"><a href="#RabbitMQ的集群" class="headerlink" title="RabbitMQ的集群"></a>RabbitMQ的集群</h2><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><h4 id="普通集群-副本集群"><a href="#普通集群-副本集群" class="headerlink" title="普通集群(副本集群)"></a>普通集群(副本集群)</h4><blockquote><p>All data/state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this are message queues, which by default reside on one node, though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster   –摘自官网</p></blockquote><p><code>默认情况下:RabbitMQ代理操作所需的所有数据/状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</code></p><ol><li><h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5></li></ol><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320094147471.png" alt="image-20200320094147471"></p><p>​    核心解决问题:  <code>当集群中某一时刻master节点宕机,可以对Quene中信息,进行备份</code></p><ol start="2"><li><h5 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 0.集群规划</span></span><br><span class="line"><span class="code">node1: 10.15.0.3  mq1  master 主节点</span></span><br><span class="line"><span class="code">node2: 10.15.0.4  mq2  repl1  副本节点</span></span><br><span class="line"><span class="code">node3: 10.15.0.5  mq3  repl2  副本节点</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 1.克隆三台机器主机名和ip映射</span></span><br><span class="line"><span class="code">vim /etc/hosts加入:</span></span><br><span class="line"><span class="code"> 10.15.0.3 mq1</span></span><br><span class="line"><span class="code">    10.15.0.4 mq2</span></span><br><span class="line"><span class="code">    10.15.0.5 mq3</span></span><br><span class="line"><span class="code">node1: vim /etc/hostname 加入:  mq1</span></span><br><span class="line"><span class="code">node2: vim /etc/hostname 加入:  mq2</span></span><br><span class="line"><span class="code">node3: vim /etc/hostname 加入:  mq3</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.三个机器安装rabbitmq,并同步cookie文件,在node1上执行:</span></span><br><span class="line"><span class="code">scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</span></span><br><span class="line"><span class="code">scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.查看cookie是否一致:</span></span><br><span class="line"><span class="code">node1: cat /var/lib/rabbitmq/.erlang.cookie </span></span><br><span class="line"><span class="code">node2: cat /var/lib/rabbitmq/.erlang.cookie </span></span><br><span class="line"><span class="code">node3: cat /var/lib/rabbitmq/.erlang.cookie </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面:</span></span><br><span class="line"><span class="code">rabbitmq-server -detached </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.在node2和node3执行加入集群命令:</span></span><br><span class="line"><span class="code">1.关闭       rabbitmqctl stop_app</span></span><br><span class="line"><span class="code">2.加入集群    rabbitmqctl join_cluster rabbit@mq1</span></span><br><span class="line"><span class="code">3.启动服务    rabbitmqctl start_app</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.查看集群状态,任意节点执行:</span></span><br><span class="line"><span class="code">rabbitmqctl cluster_status</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.如果出现如下显示,集群搭建成功:</span></span><br><span class="line"><span class="code">Cluster status of node rabbit@mq3 ...</span></span><br><span class="line"><span class="code">[&#123;nodes,[&#123;disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;]&#125;,</span></span><br><span class="line"><span class="code">&#123;running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;,</span></span><br><span class="line"><span class="code">&#123;cluster_name,&lt;&lt;&quot;rabbit@mq1&quot;&gt;&gt;&#125;,</span></span><br><span class="line"><span class="code">&#123;partitions,[]&#125;,</span></span><br><span class="line"><span class="code">&#123;alarms,[&#123;rabbit@mq1,[]&#125;,&#123;rabbit@mq2,[]&#125;,&#123;rabbit@mq3,[]&#125;]&#125;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.登录管理界面,展示如下状态:</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320095613586.png" alt="image-20200320095613586"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 9.测试集群在node1上,创建队列</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320095743935.png" alt="image-20200320095743935"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 10.查看node2和node3节点:</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320095827688.png" alt="image-20200320095827688"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320095843370.png" alt="image-20200320095843370"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 11.关闭node1节点,执行如下命令,查看node2和node3:</span></span><br><span class="line"><span class="code">rabbitmqctl stop_app</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320100000347.png" alt="image-20200320100000347"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320100010968.png" alt="image-20200320100010968"></p><hr></li></ol><h4 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes. –摘自官网</p></blockquote><p><code>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</code></p><ol><li><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/image-20200320113423235.png" alt="image-20200320113423235"></p></li></ol><ol start="2"><li><h5 id="配置集群架构"><a href="#配置集群架构" class="headerlink" title="配置集群架构"></a>配置集群架构</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 0.策略说明</span></span><br><span class="line"><span class="code">rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt;  &lt;definition&gt;</span></span><br><span class="line"><span class="code">-p Vhost： 可选参数，针对指定vhost下的queue进行设置</span></span><br><span class="line"><span class="code">Name:     policy的名称</span></span><br><span class="line"><span class="code">Pattern: queue的匹配模式(正则表达式)</span></span><br><span class="line"><span class="code">Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span></span><br><span class="line"><span class="code">           ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes</span></span><br><span class="line"><span class="code">                        all：表示在集群中所有的节点上进行镜像</span></span><br><span class="line"><span class="code">                        exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span></span><br><span class="line"><span class="code">                        nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定</span></span><br><span class="line"><span class="code">             ha-params：ha-mode模式需要用到的参数</span></span><br><span class="line"><span class="code">                ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual</span></span><br><span class="line"><span class="code">                priority：可选参数，policy的优先级</span></span><br><span class="line"><span class="code">                </span></span><br><span class="line"><span class="code">                 </span></span><br><span class="line"><span class="code"># 1.查看当前策略</span></span><br><span class="line"><span class="code">rabbitmqctl list_policies</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.添加策略</span></span><br><span class="line"><span class="code">rabbitmqctl set_policy ha-all &#x27;^hello&#x27; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27; </span></span><br><span class="line"><span class="code">说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.删除策略</span></span><br><span class="line"><span class="code">rabbitmqctl clear_policy ha-all</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.测试集群</span></span><br></pre></td></tr></table></figure><hr></li></ol>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="2020/12/16/JavaScript/"/>
      <url>2020/12/16/JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.bilibili.com/video/BV1p4411u7TT?p=1">全新_JavaScript_基础+高级_JavaScript教程_javascript视频_js</a></p><p><a href="https://www.w3school.com.cn/js/index.asp">文档</a></p><p>JavaScript 是世界上最流行的脚本语言。 JavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。 JavaScript 被设计为向 HTML 页面增加交互性。 许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。</p><h2 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h2><p>ECMAScript(javascript语法)</p><p>DOM(页面文档对象模型)</p><p>BOM(浏览器对象模型)</p><h2 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h2><h3 id="js书写位置"><a href="#js书写位置" class="headerlink" title="js书写位置"></a>js书写位置</h3><p>外部式、内嵌式、行内式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外部式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;xx/xxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内嵌式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;内嵌式&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行内式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;被点击&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释、多行注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//单行注释 ctrl+/</span></span></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">        多行注释 ctrl+alt+a</span><br><span class="line">    */</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js输入输出语句"><a href="#js输入输出语句" class="headerlink" title="js输入输出语句"></a>js输入输出语句</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 网页弹窗输入</span></span></span><br><span class="line"><span class="javascript">    prompt(<span class="string">&#x27;请输入你的名字：&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 弹出警示框</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;弹窗&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//控制台输出</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;控制台输出&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量</p></blockquote><p>变量是程序在内存中申请存放数据的空间</p><blockquote><p>变量的使用</p></blockquote><p>1、声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量,申请内存空间 var关键字 会所有代码之前执行变量声明</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br></pre></td></tr></table></figure><p>2、变量使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值</span></span><br><span class="line">name = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="comment">//声明的同时也进行初始化</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">1</span>,</span><br><span class="line">    num2=<span class="number">2</span>,</span><br><span class="line">    num3=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>一个变量被重新赋值后，一最后一次为准。</p><p>变量可以不声明直接赋值使用。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>String(字符串)、Number(数字)、Boolean(字符串)、null(空值)、undefined(未定义)、Object(对象，引用类型)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串 使用引号包裹</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;字符串&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//数字 js中Number存在最大值 如果超过范围 会变成infinity表示无穷</span></span><br><span class="line">number = infinity;</span><br><span class="line"><span class="comment">//NaN not a Number</span></span><br><span class="line">number = <span class="literal">NaN</span>;</span><br><span class="line"><span class="comment">//在js中进行浮点数计算，可能得到一个不精确的结果</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.1</span>+<span class="number">0.3</span> </span><br><span class="line"><span class="comment">//typeof 检查变量类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔值 true flase</span></span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//null  专门表示一个为空的对象 typeof 会返回Object</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined 声明变量但未赋值</span></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>强制类型变换</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换成String</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//toString该方法不会影响原变量 但是会返回</span></span><br><span class="line"><span class="comment">//null 和 undefined 没有toString方法</span></span><br><span class="line"><span class="keyword">var</span> b = a.toString();</span><br><span class="line"><span class="comment">//String()函数 null和undefined会转换成字符串</span></span><br><span class="line">a = <span class="built_in">String</span>(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换成Number</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment">//Number()函数 字符串必须是纯数字</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="comment">//String()函数 null和undefined会转换成字符串</span></span><br><span class="line">a = <span class="built_in">String</span>(a);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>类似java。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是一种复合的数据类型，可以保存多个不同类型的数据。</p><blockquote><p>对象分类</p></blockquote><p>1.内建对象</p><p>由ES标准定义的对象。如Math、String</p><p>2.宿主对象</p><p>由浏览器提供如BOM DOM。</p><p>3.自定义对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建对象 Object()应该是构建函数</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">向对象中添加属性</span></span><br><span class="line"><span class="comment">对象.属性名 = 值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">obj.name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">读取数据</span></span><br><span class="line"><span class="comment">对象.属性名</span></span><br><span class="line"><span class="comment">如果读取没有的属性 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>。log(obj.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环对象的属性</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建函数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">参数名....</span>)</span>&#123;</span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建函数 这种方法创建的函数会在所有代码执行之前创建</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">参数名....</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 函数不会检查参数类型，如果实参个数小于形参个数，未传参的形参会变成undefined，多余实参不会传值</span></span><br><span class="line"><span class="comment">//调用函数时会自动传递两个参数this和arguments</span></span><br><span class="line"><span class="comment">//arguments是一个类数组对象，它可以通过索引来操作数据，也可以获取长度</span></span><br><span class="line"><span class="comment">//在调用函数时，我们所传的实参都会在arguments中保存</span></span><br><span class="line"><span class="comment">//   有个属性callee</span></span><br><span class="line">func(参数名....);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过call()和apply()调用函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这两个方法都是函数对象的方法，需要通过对象来使用</span></span><br><span class="line"><span class="comment">在调用call()和apply()可以将一个对象指定为第一个参数</span></span><br><span class="line"><span class="comment">此时这个对象将会成为函数里的this指定的对象</span></span><br><span class="line"><span class="comment">call()可以将实参在对象之后一次执行</span></span><br><span class="line"><span class="comment">apply()需要将实参封装到数组里</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//此时this指向obj</span></span><br><span class="line">func.call(obj,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">func.apply(obj,[<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果一个函数被对象的属性保存 就叫方法只是叫法不同</span></span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 解析器在调用函数每次都会向函数内部传递一个隐含的参数</span></span><br><span class="line"><span class="comment">     * this指向函数执行的上下问对象</span></span><br><span class="line"><span class="comment">     * 根据函数调用方式不同 this指向不同</span></span><br><span class="line"><span class="comment">     * 1.函数调用指向window</span></span><br><span class="line"><span class="comment">     * 2.哪个对象的方法调用，指向对应的对象</span></span><br><span class="line"><span class="comment">     * 3.以构造函数调用时，this是新创建的那个对象</span></span><br><span class="line"><span class="comment">     * 4.使用call()和apply()调用时，this是指定的那个对象</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        sayName:fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fun();</span></span><br><span class="line"></span><br><span class="line">    obj.sayName();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型 prototype"></a>原型 prototype</h3><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象，这个对象就是我们的原型对象。如果作为普通函数调用prototype没有任何作用。当函数以构造函数的方式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，可以通过__proto__来访问</p><p>原型对象相当于一个公共区域，所有的实例都可以访问到某个实例可以向该对象中添加属性，其他的实例可以访问。我们可以将对象中共有的内容，统一设置进原型对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="comment">//访问prototype属性</span></span><br><span class="line">myClass.__proto__</span><br><span class="line"><span class="comment">//向MyClass的原型中添加属性a</span></span><br><span class="line">MyClass.protoype.a=<span class="number">123</span>;</span><br><span class="line"><span class="comment">//向MyClass的原型中添加方法fun</span></span><br><span class="line">MyClass.protoype.fun= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当我们访问一个对象的属性或方法时，会先在对象中寻找，如果有，返回相应的值，如果没有，回去原型中寻找</span></span><br><span class="line">consloe.log(myClass.a);</span><br><span class="line"><span class="comment">//可以使用对象的hasOwnProperty()来检查自身中是否含有该属性</span></span><br><span class="line">mycalss.hasOwnProperty(a);<span class="comment">//flase</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原型对象也有原型对象，直到Object的原型，Object的原型没有原型对象，这是一条原型链。</p><h3 id="垃圾回收GC"><a href="#垃圾回收GC" class="headerlink" title="垃圾回收GC"></a>垃圾回收GC</h3><p>程序运行过程中会产生垃圾，导致程序运行过慢。</p><blockquote><p>垃圾</p></blockquote><p>当一个对象没有任何变量或属性对它进行引用，我们将永远无法对他进行操作。</p><blockquote><p>回收</p></blockquote><p>在JS中拥有自动的垃圾回收机制，自动将这些垃圾对象从内存中销毁。我们可以将对象设置为null来让JS的垃圾回收机制处理。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">    数组也是一个对象</span><br><span class="line">        使用索引</span><br><span class="line">        存储性能比普通对象好</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="comment">//创建数组对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//添加元素 向index=0的位置添加了一个0 在0到11之间为空</span></span></span><br><span class="line">    arr[0]=0;</span><br><span class="line">    arr[11]=0</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//读取数组元素 读取不存在的数组不会报错 会返回undefined</span></span></span><br><span class="line">    alert(arr[0])</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//获取数组的长度 可以修改 若大于原长度会将后面的空出来 若小于原长度，多余的会被删除</span></span></span><br><span class="line">    arr.length;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//向数组后面添加数据 返回新长度</span></span></span><br><span class="line">    arr.push(7,8,9)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//删除数组的最后一个元素</span></span></span><br><span class="line">    arr.pop();</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//向数组开头添加数据  并返回新的数组长度</span></span></span><br><span class="line">    arr.unshift(0,2,2);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//删除数组的第一元素 并返回第一个元素的值</span></span></span><br><span class="line">    arr.shift();</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//数组的遍历</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.for循环</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.forEach 只支持ie8以上的浏览器 </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//这种由我们创建不由我们调用的函数为回调函数 </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//每次执行时浏览器会将遍历到的元素以实参的形式传递进来，函数可以通过形参使用</span></span></span><br><span class="line"><span class="javascript">    arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">a,index,obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//代码块</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他对象"><a href="#其他对象" class="headerlink" title="其他对象"></a>其他对象</h3><p>Date、Math</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Date对象 </span></span><br><span class="line"><span class="comment">     * 在JS中使用Date对象表示时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//构造函数创建的时当前时间</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">   <span class="comment">//表示指定时间 格式：月份/日/年 时:分:秒</span></span><br><span class="line">    <span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;12/03/2016 11:10:30&quot;</span>);</span><br><span class="line">    <span class="comment">//date的日期是几日</span></span><br><span class="line">    <span class="keyword">var</span> date2 = date.getDate();</span><br><span class="line">    <span class="comment">//date的日期是周几 0周日 1周一</span></span><br><span class="line">    <span class="keyword">var</span> date3 = date.getDay();</span><br><span class="line">    <span class="comment">//date的日期是几月 从0开始</span></span><br><span class="line">    <span class="keyword">var</span> date3 = date.getMonth();</span><br><span class="line">    <span class="comment">//date的年份</span></span><br><span class="line">    <span class="keyword">var</span> date3 = date.getFullYear();</span><br><span class="line">    <span class="comment">//date的日期是几点</span></span><br><span class="line">    <span class="keyword">var</span> date3 = date.getHours();</span><br><span class="line">    <span class="comment">//也可以获取分秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取时间戳 毫秒</span></span><br><span class="line">    <span class="keyword">var</span> time = date.getTime</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Math对象 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//绝对值</span></span><br><span class="line">    <span class="built_in">Math</span>.abs(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//向上取整</span></span><br><span class="line">    <span class="built_in">Math</span>.ceil(<span class="number">1.2</span>);</span><br><span class="line">    <span class="comment">//向下取整</span></span><br><span class="line">    <span class="built_in">Math</span>.floor(<span class="number">1.2</span>);</span><br><span class="line">    <span class="comment">//四舍五入</span></span><br><span class="line">    <span class="built_in">Math</span>.round(<span class="number">1.2</span>);</span><br><span class="line">    <span class="comment">//生成随机数 0-10之间的随机数</span></span><br><span class="line">    <span class="built_in">Math</span>.random()*<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//最大值</span></span><br><span class="line">    <span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">     <span class="comment">//最小值</span></span><br><span class="line">     <span class="built_in">Math</span>.min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">     <span class="comment">//平方根</span></span><br><span class="line">     <span class="built_in">Math</span>.sqrt(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>document object model 文档对象模型</p><p>js中通过dom来对html文档进行操作</p><p>文档：整个html网页文档</p><p>对象：网页中的每个部分转换成了一个对象</p><p>模型：使用模型来表示对象之间的关系，这样方便我们获取对象</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/js1.png"></p><blockquote><p>代码示例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//通过id获取button</span></span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//按钮单击事件处理</span></span><br><span class="line">        btn.onclick =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;已点击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(btn);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="文档加载"><a href="#文档加载" class="headerlink" title="文档加载"></a>文档加载</h3><blockquote><p>文档加载</p></blockquote><p>浏览器在加载页面时是自上向下加载。若script代码在<body>标签上面，如果要对页面标签操作，会报错。</p><blockquote><p>解决办法</p></blockquote><p>1.将script代码写在下面</p><p>2使用window.onload，使代码在页面加载完后执行</p><h3 id="获取元素节点"><a href="#获取元素节点" class="headerlink" title="获取元素节点"></a>获取元素节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//通过id获取button</span></span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过标签名获取元素节点 返回类数组对象</span></span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过name属性获取元素节点 返回类数组对象</span></span><br><span class="line">        <span class="built_in">document</span>.getElementsByName();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过class属性获取元素节点 返回类数组对象</span></span><br><span class="line">        <span class="built_in">document</span>.getElementsByClassName();</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagNameNS();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于自结束标签innerHTML没有意义 直接 .属性名 class属性不能采用这种方式 采用className</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>获取子节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获取&lt;li&gt;</span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过标签获取子节点 类数组</span></span><br><span class="line">        li[<span class="number">0</span>].getElementsByTagName(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">        <span class="comment">//子节点数 会获取包括元素节点 文本节点</span></span><br><span class="line">        li[<span class="number">0</span>].childNodes;</span><br><span class="line">        <span class="comment">//获取所有子元素节点</span></span><br><span class="line">        <span class="keyword">var</span> children = li[<span class="number">0</span>].children;</span><br><span class="line">        <span class="comment">//获取第一个子节点 包括空白文本节点</span></span><br><span class="line">        <span class="keyword">var</span> firstChild = li[<span class="number">0</span>].firstChild;</span><br><span class="line">        <span class="comment">//获取最后一个子节点 包括空白文本节点</span></span><br><span class="line">        <span class="keyword">var</span> lastChild = li[<span class="number">0</span>].lastChild;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">1</span>&lt;/ul&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">2</span>&lt;/ul&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">3</span>&lt;/ul&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">4</span>&lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>获取父节点和兄弟节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获取&lt;li&gt;</span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过标签获取子节点 类数组</span></span><br><span class="line">        li[<span class="number">0</span>].GET;</span><br><span class="line">        <span class="comment">//子节点数 会获取包括元素节点 文本节点</span></span><br><span class="line">        li[<span class="number">0</span>].childNodes;</span><br><span class="line">        <span class="comment">//获取所有子元素节点</span></span><br><span class="line">        <span class="keyword">var</span> children = li[<span class="number">0</span>].children;</span><br><span class="line">        <span class="comment">//获取第一个子节点 包括空白文本节点</span></span><br><span class="line">        <span class="keyword">var</span> firstChild = li[<span class="number">0</span>].firstChild;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//父节点</span></span><br><span class="line">        <span class="keyword">var</span> parentNode = firstChild.parentNode;</span><br><span class="line">        <span class="comment">//前兄弟节点 也可能获取空白文本</span></span><br><span class="line">        firstChild.previousSibling;</span><br><span class="line">        <span class="comment">//后一个兄弟节点 也可能获取空白文本</span></span><br><span class="line">        firstChild.nextSibling;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        innerText可以获取元素里的文本内容</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">1</span>&lt;/ul&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">2</span>&lt;/ul&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">3</span>&lt;/ul&gt;</span><br><span class="line">        &lt;ul&gt;<span class="number">4</span>&lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>类选择器获取元素节点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取body对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//保存html根标签</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//所有元素</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一种方法</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> all = <span class="built_in">document</span>.all;</span></span><br><span class="line"><span class="javascript"><span class="comment">//第二种方法</span></span></span><br><span class="line"><span class="javascript">        all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;*&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//需要选择器字符串作为参数  .box class为box的 #box id为box 只会返回第一个</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box&quot;</span>);</span></span><br><span class="line">        alert(box.className);</span><br><span class="line">        </span><br><span class="line"><span class="javascript">         <span class="comment">//和querySelector一样 返回数组 即使只有一个</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.box&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dom增删改"><a href="#dom增删改" class="headerlink" title="dom增删改"></a>dom增删改</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">       </span><br><span class="line"><span class="javascript">        <span class="comment">//创建节点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建一个节点添加到 .box 下 参数为标签名</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建文本节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;DIV&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//将文本节点设置为div的子节点 父节点.appendChild(子节点);</span></span></span><br><span class="line">        div.appendChild(text);</span><br><span class="line"><span class="javascript">        <span class="comment">//添加进box中</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box&quot;</span>);</span></span><br><span class="line">        box.appendChild(div);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//在指定的子节点前插入 参数为要插入的子节点，指定的子节点</span></span></span><br><span class="line">        box.insertBefore(div,box1);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//替换子节点 新节点 旧节点</span></span></span><br><span class="line">        box.replaceChild(div,box1);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//删除子节点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一种</span></span></span><br><span class="line">        box.remove(div);</span><br><span class="line"><span class="javascript">        <span class="comment">//寻找父节点来删除子节点    </span></span></span><br><span class="line">        div.parentNode.removeChild(div);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//return false 取消默认行为</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="操作内联样式"><a href="#操作内联样式" class="headerlink" title="操作内联样式"></a>操作内联样式</h3><p>通过元素节点style属性设置内联样式，内联样式级别较高，但是如果css中加了 !important，那么js不能覆盖该样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取元素节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//修改宽度</span></span></span><br><span class="line"><span class="javascript">        box.style.width = <span class="string">&quot;300px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//修改高度</span></span></span><br><span class="line"><span class="javascript">        box.style.height = <span class="string">&quot;300px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//修改背景颜色  css中通过-连接的属性名 在js中驼峰命名</span></span></span><br><span class="line"><span class="javascript">        box.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//读取样式(内联样式)</span></span></span><br><span class="line">        box.style.width</span><br><span class="line">          </span><br><span class="line"><span class="javascript">        <span class="comment">//读取当前显示样式 返回一个对象，封装了所有样式 不支持ie8及以下浏览器 只读</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(getComputedStyle(box,<span class="literal">null</span>).width);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//只支持ie8</span></span></span><br><span class="line"><span class="javascript">        box.currentStyle[<span class="string">&#x27;width&#x27;</span>];</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>当事件的函数被触发时，浏览器会把事件对象传递给函数</p><blockquote><p>事件冒泡</p></blockquote><p>事件的向上传导，当后代的事件被触发时，其父代的同类型事件也会被出发。</p><p>如果不希望发生事件冒泡，可以把事件对象的cancelBubble设置为true。</p><blockquote><p>事件委派绑定</p></blockquote><p>将事件统一绑定给祖先函数，当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。在祖先元素的响应函数中，可以通过传递的参数event来判断是谁触发的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取元素节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//祖父函数响应函数</span></span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(event.atrget.className==<span class="string">&quot;box1&quot;</span>)&#123;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//添加事件监听器</span></span></span><br><span class="line">        /**</span><br><span class="line">         *参数:事件字符串、回调函数、布尔值 是否在捕获阶段触发事件</span><br><span class="line">         *可以为一个相同事件绑定多个函数 按顺序执行 </span><br><span class="line">         */ </span><br><span class="line"><span class="javascript">        div.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        div.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        div.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125;,<span class="literal">false</span>);</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件传播</p></blockquote><p>微软：事件冒泡：由里向外</p><p>网景：捕获阶段：由外向里（先触发祖先元素事件，在触发子元素的事件）</p><p>w3c：1.捕获阶段：从最外层的祖先元素，向目标元素进行事件的捕获，但是不触发事件。</p><p>​          2.目标阶段：事件捕获到目标事件，捕获结束开始在目标元素上触发事件</p><p>​          3.冒泡阶段：事件从目标元素向祖先元素，依次触发</p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>浏览器对象模型，通过js来操作浏览器。</p><blockquote><p>BOM对象</p></blockquote><p>Window:整个浏览器的矿口，网页中的全局对象</p><p>Navigator:当前浏览器的信息</p><p>Location:当前浏览器的地址信息，可以获取地址栏信息或操作浏览器跳转</p><p>History:代表浏览器的历史记录，可以操作浏览器的历史记录信息，因为隐私的原因只能操作网                页向前向后，而且该操作只在当此访问有效</p><p>Screen:屏幕的信息，获取显示器相关的信息</p><p>以上对象除了Window以外，都是作为Window对象的属性保存的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.navigator);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.history);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.location);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.screen);</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p>当前浏览器的信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//浏览器 由于历史原因navigator的大部分属性都已经没有用</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> nav = <span class="built_in">window</span>.navigator;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//app名</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(nav.appName)</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//一般只会使用userAgent来判断浏览器</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//谷歌 Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//不能判断IE11</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(nav.userAgent);</span></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 如果不能通过userAgent不能判断 可以通过一些特有属性判断 </span><br><span class="line">         */ </span><br><span class="line"></span><br><span class="line"><span class="javascript">         <span class="comment">//如果有这个属性ActiveXObject 则是IE 但是IE11没有</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.ActiveXObject</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//这种方法可以抓住IE11</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>);</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>可以操作浏览器向前向后</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//history</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> his = <span class="built_in">window</span>.history;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//获取当次访问的链接数量</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(his.length);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//回退上个页面</span></span></span><br><span class="line">        his.back();</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//跳转下一个页面</span></span></span><br><span class="line">        his.forward();</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//可以用来跳转指定页面</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//参数是整数</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1 向前1个 2向前2个 -1向后一个 -2向后2个</span></span></span><br><span class="line">        his.go(1);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><p>当前浏览器的地址信息，可以获取地址栏信息或操作浏览器跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//location</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//封装地址栏信息</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> loc = <span class="built_in">window</span>.location;</span></span><br><span class="line">        </span><br><span class="line">            alert(loc);</span><br><span class="line"><span class="javascript">            <span class="comment">//当前网页的url</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(loc);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//如果直接修改location成完整路径或相对路径 可以直接跳转页面 </span></span></span><br><span class="line"><span class="javascript">            loc.assign(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//刷新 重新加载 true 强制清空缓存</span></span></span><br><span class="line"><span class="javascript">            loc.reload(<span class="literal">true</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//可以使用一个新页面 替换 当前页面 无历史记录</span></span></span><br><span class="line"><span class="javascript">            loc.replace(<span class="string">&quot;BOM01.html&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 300px; background-color: black;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h3><p>屏幕的信息，获取显示器相关的信息</p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//定时调用 可以将一个函数每隔一段时间调用一次</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//参数 回调函数，间隔时间</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//返回number数据 作为定时器的唯一标识</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> num=<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> count = <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                count.innerHTML = num++;</span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(num==<span class="number">20</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//清除定时器 传递唯一标识</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;,500);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//延时调用 执行一次</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                count.innerHTML = num++;</span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(num==<span class="number">20</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//清除定时器 传递唯一标识</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line">            &#125;&#125;,1000);</span><br><span class="line"><span class="javascript">            <span class="comment">//清楚延时调用</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">clearTimeout</span>(timer1);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 300px; background-color: black;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//将json字符串转换成对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> o = <span class="built_in">JSON</span>.parse(json)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//将对象转换成字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json1 = <span class="built_in">JSON</span>.stringify(obj)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 300px; background-color: black;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h2><blockquote><p>作用域</p></blockquote><p>分类：全局作用域、函数作用域、块作用域</p><p>作用：隔离变量，不同作用域中函数名可以重复</p><p>作用域是静态的，只要函数定义好了就一直存在，且不会变化。执行上下文是所从属作用域的</p><blockquote><p>作用域链</p></blockquote><p>嵌套作用域，由内向外的查找变量</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>如何产生闭包</p></blockquote><p>当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时，就产生了闭包</p><p>产生条件：1.函数嵌套 2.内部函数引用外部函数的数据</p><blockquote><p>闭包到底是什么</p></blockquote><p>1.闭包是嵌套的内部函数 2.包含被引用变量的对象</p><blockquote><p>作用</p></blockquote><p>1.使函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）</p><p>2.让函数外部可以操作（读写）到函数内部的数据（变量/函数）</p><blockquote><p>生命周期</p></blockquote><p>产生：在嵌套内部函数定义执行时产生</p><p>死亡：在嵌套的内部函数成为垃圾对象时</p><blockquote><p>应用</p></blockquote><p>定义Js模块时，采用闭包将方法暴露出来</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTForWeb学习</title>
      <link href="2020/12/14/HTForWeb%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/12/14/HTForWeb%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ht是基于<a href="https://link.zhihu.com/?target=http://dev.w3.org/html5/spec/">HTML5</a>标准的企业应用图形界面一站式解决方案， 其包含通用组件、拓扑组件和3D渲染引擎等丰富的图形界面开发类库，提供了完全基于<code>HTML5</code>的矢量编辑器、拓扑编辑器及 3D场景编辑器等多套可视化设计工具，和完善的类库开发手册、工具使用手册、及针对<code>HTML5</code>技术如何进行大规模团队开发的客户深度培训手册。</p><p>由于HT是需要进行购买授权的，所以以下所有代码都需要ht.js以及授权文件。有兴趣的可以去官网购买，不过我是公司安排学习的，所以不清楚价格是多少。</p><p>本人在两年前学习过javascript基础，在那以后，就一直是前后端分离开发，已经很久没有接触过前端代码，所以在此次的学习中，感觉什么都不懂，而公司要求在vue项目里写前端代码，感觉有点困难。</p><p>本次学习由于公司要求，本人只学习了官方的入门手册，数据模型手册，shape手册。</p><p>后续如果还要学习其他的手册，后面会继续更新。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p><code>ht.Node</code>类型是<code>GraphView</code>和<code>Graph3dview</code>呈现节点图元的基础类，继承于<code>Data</code>类。 以下为<code>Node</code>的<code>GraphView</code>拓扑图相关函数属性，与<code>Graph3dView</code>相关函数属性详见<a href="../3d/ht-3d-guide.html">3D手册</a>。 <code>Node</code>除了显示图片外，还能显示多种预定义图形，详见<a href="#ref_styleshape">shape章节</a>。</p><ul><li><p><code>getPosition()</code>和<code>setPosition(&#123;x:100, y:200&#125;)</code>获取和设置图元中心点坐标</p></li><li><p><code>getImage()</code>和<code>setImage(image)</code>获取和设置图片信息，在<code>GraphView</code>拓扑图中图片一般以<code>position</code>为中心绘制</p></li><li><p><code>getWidth()</code>和<code>setWidth(width)</code>获取和设置图元宽度，若未设置则为<code>image</code>对应的图片宽度</p></li><li><p><code>getHeight()</code>和<code>setHeight(height)</code>获取和设置图元高度，若未设置则为<code>image</code>对应的图片高度</p></li><li><p><code>getSize()</code>和<code>setSize(10, 20 | &#123;width:10, height:20&#125;)</code>获取和设置图元宽高尺寸信息</p></li><li><p><code>getRect()</code>和<code>setRect(x,y,width,height | &#123;x:10,y:20,width:30,height:40&#125;)</code>获取和设置图元矩形区域</p></li><li><p><code>getRotation()</code>和<code>setRotation(Math.PI/2)</code>获取和设置图元的旋转角度，围绕中心点顺时针旋转</p></li><li><p><code>getAttaches()</code>获取吸附到自身的所有节点的<code>ht.List</code>类型数组</p></li><li><p><code>getEdges()</code>获取所有和节点模型上关联的连线<code>ht.List</code>类型数组</p></li><li><p><code>getSourceEdges()</code>获取所有模型上起始于该节点的连线<code>ht.List</code>类型数组</p></li><li><p><code>getTargetEdges()</code>获取所有模型上结束于该节点的连线<code>ht.List</code>类型数组</p></li><li><p><code>getAgentEdges()</code>获取当前节点图形上代理关联的连线<code>ht.List</code>类型数组</p></li><li><p><code>getSourceAgentEdges()</code>获取所有图形上代理起始于该节点的连线<code>ht.List</code>类型数组</p></li><li><p><code>getTargetAgentEdges()</code>获取所有图形上代理结束于该节点的连线<code>ht.List</code>类型数组</p></li><li><p><code>hasAgentEdges()</code>判断当前节点是否图形上有代理连线，有返回<code>true</code>，无返回<code>false</code></p></li><li><p><code>getHost()</code>和<code>setHost(host)</code>获取和设置吸附宿主对象，当节点吸附上宿主图元时，宿主移动或旋转时会带动所有吸附者</p></li><li><p><code>onHostChanged(oldHost, newHost)</code>当吸附宿主对象发生变化时回调该函数，可重载做后续处理</p></li><li><p><code>handleHostPropertyChange(event)</code>当吸附宿主对象属性发生变化时回调该函数，可重载做后续处理</p></li><li><p><code>isHostOn(node)</code>判断该图元是否吸附到指定图元对象上</p></li><li><p><code>isLoopedHostOn(node)</code>判断是否与指定图元形成环状吸附，如<code>A</code>吸附<code>B</code>，<code>B</code>吸附<code>C</code>，<code>C</code>吸附回<code>A</code>，则<code>A</code>，<code>B</code>和<code>C</code>图元相互环状吸附</p><blockquote><p>代码示例</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;       </span><br><span class="line">            <span class="comment">// 创建数据模型容器                                                         </span></span><br><span class="line">            dataModel = <span class="keyword">new</span> ht.DataModel();</span><br><span class="line">            <span class="comment">// 创建拓扑图组件</span></span><br><span class="line">            graphView = <span class="keyword">new</span> ht.graph.GraphView(dataModel);</span><br><span class="line">            </span><br><span class="line">            view = graphView.getView();            </span><br><span class="line">            view.className = <span class="string">&#x27;main&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//向body标签里添加元素</span></span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(view);    </span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加事件监听</span></span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                graphView.invalidate();</span><br><span class="line">            &#125;, <span class="literal">false</span>);                         </span><br><span class="line">                </span><br><span class="line">            ht.Default.setImage(<span class="string">&#x27;mac&#x27;</span>, <span class="string">&#x27;image/mac-air.png&#x27;</span>);            </span><br><span class="line">                 </span><br><span class="line">            air11 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">            air11.setName(<span class="string">&#x27;11-inch MacBook Air&#x27;</span>);</span><br><span class="line">            air11.setImage(<span class="string">&#x27;mac&#x27;</span>);</span><br><span class="line">            air11.setSize(<span class="number">80</span>, <span class="number">43</span>);</span><br><span class="line">            air11.setPosition(<span class="number">100</span>, <span class="number">70</span>);                </span><br><span class="line">            dataModel.add(air11);</span><br><span class="line">            </span><br><span class="line">            air13 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">            air13.setName(<span class="string">&#x27;13-inch MacBook Air&#x27;</span>);                </span><br><span class="line">            air13.setImage(<span class="string">&#x27;image/mac-air.png&#x27;</span>);</span><br><span class="line">            air13.setPosition(<span class="number">260</span>, <span class="number">70</span>);</span><br><span class="line">            air13.setRotation(<span class="built_in">Math</span>.PI/<span class="number">2</span>);</span><br><span class="line">            dataModel.add(air13);</span><br><span class="line">            </span><br><span class="line">            air11.setHost(air13);   </span><br><span class="line">            </span><br><span class="line">            graphView.setEditable(<span class="literal">true</span>);</span><br><span class="line">            graphView.setRectEditableFunc(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> data === air11;</span><br><span class="line">            &#125;);</span><br><span class="line">            graphView.setRotationEditableFunc(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> data === air13;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> eventType = ht.Default.isTouchable ? <span class="string">&#x27;touchend&#x27;</span> : <span class="string">&#x27;mouseup&#x27;</span>;</span><br><span class="line">            graphView.getView().addEventListener(eventType, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> data = graphView.getDataAt(e);</span><br><span class="line">                <span class="keyword">if</span>(data &amp;&amp; ht.Default.isDoubleClick(e))&#123;</span><br><span class="line">                    alert(data.getName() + <span class="string">&#x27; is double clicked.&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/node.png"></p><h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><p><code>ht.Edge</code>类型用于连接起始和目标两个<code>Node</code>节点，两个节点间可以有多条<code>Edge</code>存在，也允许起始和目标为同一节点。 连线的<code>agent</code>指的是目前图形上真正代理连接该连线的节点，当节点位于关闭的<code>Group</code>之内时，<code>Group</code>将代理内部的节点进行连接。 <code>Edge</code>的更多样式属性参见<a href="#ref_styleedge">连线风格</a>。</p><ul><li><p><code>getSource()</code>和<code>setScource(node)</code>获取和设置起始节点</p></li><li><p><code>getTarget()</code>和<code>setTarget(node)</code>获取和设置目标节点</p></li><li><p><code>isLooped()</code>判断连线的起始和目标是否为同一节点</p></li><li><p><code>getSourceAgent()</code>获取图形上连接的起始节点</p></li><li><p><code>getTargetAgent()</code>获取图形上连接的目标节点</p></li><li><p><code>getEdgeGroup()</code>获取<code>ht.EdgeGroup</code>类型对象，起始和目标节点间有多条连线时才有值</p></li><li><p><code>toggle()</code>实现对当前起始和目标节点之间多条连线的展开合并的切换，影响<code>edge.expanded</code>的<code>style</code>属性</p></li><li><p><code>isEdgeGroupHidden()</code>判断当前连线是否在连线组中被隐藏</p></li><li><p><code>getEdgeGroupSize()</code>返回当前连线所在连线组的连线数</p></li><li><p><code>getEdgeGroupIndex()</code>返回当前连线所在连线组的索引</p></li><li><p><code>isEdgeGroupAgent()</code>判断当前连线是否为所在连线组的代理</p><blockquote><p>代码示例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">           <span class="comment">// 创建数据模型容器                                                         </span></span><br><span class="line">           dataModel = <span class="keyword">new</span> ht.DataModel();</span><br><span class="line">           <span class="comment">// 创建拓扑图组件</span></span><br><span class="line">           graphView = <span class="keyword">new</span> ht.graph.GraphView(dataModel);</span><br><span class="line">           </span><br><span class="line">           view = graphView.getView();            </span><br><span class="line">           view.className = <span class="string">&#x27;main&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">           <span class="comment">//向body标签里添加元素</span></span><br><span class="line">           <span class="built_in">document</span>.body.appendChild(view);    </span><br><span class="line">  </span><br><span class="line">           <span class="comment">//添加事件监听</span></span><br><span class="line">           <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">               graphView.invalidate();</span><br><span class="line">           &#125;, <span class="literal">false</span>);</span><br><span class="line">           </span><br><span class="line">           ht.Default.setImage(<span class="string">&#x27;mac&#x27;</span>, <span class="string">&#x27;image/mac-air.png&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">           <span class="comment">//添加图元</span></span><br><span class="line">           air11 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">           air11.setName(<span class="string">&#x27;11-inch MacBook Air&#x27;</span>);</span><br><span class="line">           air11.setImage(<span class="string">&#x27;mac&#x27;</span>);</span><br><span class="line">           air11.setSize(<span class="number">80</span>, <span class="number">43</span>);</span><br><span class="line">           air11.setPosition(<span class="number">100</span>, <span class="number">70</span>);                </span><br><span class="line">           dataModel.add(air11);</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//添加图元</span></span><br><span class="line">           air13 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">           air13.setName(<span class="string">&#x27;13-inch MacBook Air&#x27;</span>);</span><br><span class="line">           air13.setImage(<span class="string">&#x27;mac&#x27;</span>);</span><br><span class="line">           air13.setSize(<span class="number">80</span>, <span class="number">43</span>);</span><br><span class="line">           air13.setPosition(<span class="number">380</span>, <span class="number">70</span>);                </span><br><span class="line">           dataModel.add(air13);</span><br><span class="line">  </span><br><span class="line">           <span class="comment">//添加第一条边</span></span><br><span class="line">           <span class="keyword">var</span> edge = <span class="keyword">new</span> ht.Edge();</span><br><span class="line">           <span class="comment">//设置起始点</span></span><br><span class="line">           edge.setSource(air11);</span><br><span class="line">           <span class="comment">//设置目标节点</span></span><br><span class="line">           edge.setTarget(air13);</span><br><span class="line">           <span class="comment">//添加进数据模型中</span></span><br><span class="line">           dataModel.add(edge);               </span><br><span class="line">  </span><br><span class="line">           <span class="comment">//新建第二条边</span></span><br><span class="line">           edge = <span class="keyword">new</span> ht.Edge(air11, air13);</span><br><span class="line">           <span class="comment">//设置合并边</span></span><br><span class="line">           edge.toggle();</span><br><span class="line">           <span class="comment">//添加进数据模型</span></span><br><span class="line">           dataModel.add(edge);                               </span><br><span class="line">  </span><br><span class="line">           <span class="comment">//添加第三条边</span></span><br><span class="line">           edge = <span class="keyword">new</span> ht.Edge(air11, air13);</span><br><span class="line">           dataModel.add(edge);                 </span><br><span class="line">  </span><br><span class="line">           <span class="comment">//getLabel会遍历所有data</span></span><br><span class="line">           graphView.getLabel = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">               alert(data)</span><br><span class="line">               <span class="keyword">if</span>(data <span class="keyword">instanceof</span> ht.Edge)&#123;</span><br><span class="line">                   <span class="comment">//判断edge当前是否被隐藏</span></span><br><span class="line">                   <span class="keyword">if</span>(data.isEdgeGroupAgent())&#123;</span><br><span class="line">                       <span class="comment">//返回连线数</span></span><br><span class="line">                       <span class="keyword">return</span> data.getEdgeGroupSize() + <span class="string">&#x27; become 1&#x27;</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> data.getName();</span><br><span class="line">           &#125;;</span><br><span class="line">  </span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>运行结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/edge1.png"></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/edge2.png"></p><h3 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h3><p><code>ht.Group</code>类型用于作为父容器包含孩子图元，在<code>GraphView</code>拓扑图上可通过双击进行展开合并，合并时会自定隐藏子孙图元节点， 如果有子节点有连线连接到外部时，合并的<code>Group</code>将代理进行连接。<code>Group</code>的移动会带动孩子节点跟随， 孩子的位置和大小变化也会影响<code>Group</code>的展开图形和<code>position</code>位置。</p><ul><li><p><code>isExpanded()</code>和<code>setExpanded(true/false)</code>获取和设置<code>Group</code>对象的展开和关闭状态</p></li><li><p><code>toggle()</code>函数可对展开合并状态进行切换</p></li><li><p>孩子图元<code>style</code>的<code>ingroup</code>属性决定是否能被<code>Group</code>包含，默认为<code>true</code></p><blockquote><p>代码示例</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;       </span><br><span class="line">            <span class="comment">//获取数据容器                         </span></span><br><span class="line">            dataModel = <span class="keyword">new</span> ht.DataModel();</span><br><span class="line">            <span class="comment">//获取拓扑主键</span></span><br><span class="line">            graphView = <span class="keyword">new</span> ht.graph.GraphView(dataModel);</span><br><span class="line">            <span class="comment">//设置view</span></span><br><span class="line">            view = graphView.getView();             </span><br><span class="line">            view.className = <span class="string">&#x27;main&#x27;</span>;</span><br><span class="line">            <span class="comment">//将view添加进&lt;body&gt;中</span></span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(view);    </span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                graphView.invalidate();</span><br><span class="line">            &#125;, <span class="literal">false</span>);                         </span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建group对象</span></span><br><span class="line">            <span class="keyword">var</span> group = <span class="keyword">new</span> ht.Group();</span><br><span class="line">            <span class="comment">//设置名称</span></span><br><span class="line">            group.setName(<span class="string">&#x27;Double click on me&#x27;</span>); </span><br><span class="line">            <span class="comment">//设置是否展开</span></span><br><span class="line">            group.setExpanded(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//添加进数据容器</span></span><br><span class="line">            dataModel.add(group);</span><br><span class="line">            <span class="comment">//是否展开</span></span><br><span class="line">            alert(group.isExpanded()) </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//新建图元</span></span><br><span class="line">            <span class="keyword">var</span> node1 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">            node1.setName(<span class="string">&#x27;Node1&#x27;</span>);</span><br><span class="line">            <span class="comment">//设置位置</span></span><br><span class="line">            node1.setPosition(<span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">            <span class="comment">//向group中添加图元</span></span><br><span class="line">            group.addChild(node1);</span><br><span class="line">            <span class="comment">//添加进数据容器中</span></span><br><span class="line">            dataModel.add(node1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//新建图元</span></span><br><span class="line">            <span class="keyword">var</span> node2 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">            node2.setName(<span class="string">&#x27;Node2&#x27;</span>);</span><br><span class="line">            <span class="comment">//设置位置              </span></span><br><span class="line">            node2.setPosition(<span class="number">180</span>, <span class="number">80</span>);</span><br><span class="line">            <span class="comment">//向group中添加图元</span></span><br><span class="line">            node2.setParent(group);</span><br><span class="line">             <span class="comment">//添加进数据容器中</span></span><br><span class="line">            dataModel.add(node2);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">var</span> node3 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">            node3.setPosition(<span class="number">130</span>, <span class="number">140</span>);</span><br><span class="line">            <span class="comment">//设置样式style </span></span><br><span class="line">            <span class="comment">//node继承data data当中有 getStyle(&#x27;name&#x27;)和setStyle(&#x27;name&#x27;, value)获取和设置图元样式，可采用s(name/name,value/json)的简写方式</span></span><br><span class="line">            node3.s(&#123;</span><br><span class="line">                <span class="string">&#x27;label.font&#x27;</span>: <span class="string">&#x27;bold 21px arial&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;label.color&#x27;</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;label.offset.y&#x27;</span>: <span class="number">8</span>,</span><br><span class="line">                <span class="string">&#x27;label.background&#x27;</span>: <span class="string">&#x27;#E74C3C&#x27;</span></span><br><span class="line">            &#125;);                </span><br><span class="line">            node3.setName(<span class="string">&#x27;HT for Web&#x27;</span>);</span><br><span class="line">            <span class="comment">//data当中有 getParent()和setParent(parent)获取和设置父亲节点，作为树层次结构的信息，内部会自动调用addChild或removeChild</span></span><br><span class="line">            node3.setParent(group);</span><br><span class="line">            dataModel.add(node3);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> node4 = <span class="keyword">new</span> ht.Node();</span><br><span class="line">            node4.setName(<span class="string">&#x27;The Special One&#x27;</span>);   </span><br><span class="line">            node4.setStyle(<span class="string">&#x27;ingroup&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">            node4.setPosition(<span class="number">290</span>, <span class="number">100</span>);</span><br><span class="line">            group.addChild(node4);</span><br><span class="line">            dataModel.add(node4);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制边框</span></span><br><span class="line">            <span class="keyword">var</span> oldFunc = graphView.getBoundsForGroup;</span><br><span class="line">            graphView.getBoundsForGroup = <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">               </span><br><span class="line">                <span class="keyword">if</span>(child === node3)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//getRect()和setRect(x,y,width,height | &#123;x:10,y:20,width:30,height:40&#125;)获取和设置图元矩形区域</span></span><br><span class="line">                    <span class="keyword">return</span> node3.getRect();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> oldFunc.call(<span class="built_in">this</span>, child);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/group.png"></p><h2 id="形状手册"><a href="#形状手册" class="headerlink" title="形状手册"></a>形状手册</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>HT</code>提供的<code>ht.Shape</code>是极其强大的图元类型，其在<code>GraphView</code>和<code>Graph3dView</code>组件上都能展示出各种二维和三维的形状效果， 其扩展子类<code>ht.Polyline</code>可实现三维空间管道的功能，扩展子类<code>ht.CSGShape</code>可实现挖空等功能效果，本手册将逐一进行详细介绍。</p><h3 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h3><h4 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h4><p><code>ht.Shape</code>类型在<code>GraphView</code>组件上用于呈现多边形图元，其形状主要由<code>points</code>和<code>segments</code>这两个属性描述： <code>points</code>为<code>ht.List</code>类型数组的顶点信息，顶点为<code>&#123;x:100, y:200&#125;</code>格式的对象；<code>segments</code>为<code>ht.List</code>类型的线段数组信息， 线段为<code>1~5</code>的整数，分别代表不同的顶点连接方式。</p><p>如果<code>segments</code>为空，则代表<code>points</code>数组中的顶点按数组顺序依次直线连接，因此直线段的类型无需设置<code>segments</code>参数。 <code>segments</code>主要用于需要绘制曲线，或者有跳跃断点的情况，其<code>1~5</code>的取值含义说明如下：</p><ul><li><p>1: <code>moveTo</code>，占用<code>1</code>个点信息，代表一个新路径的起点</p></li><li><p>2: <code>lineTo</code>，占用<code>1</code>个点信息，代表从上次最后点连接到该点</p></li><li><p>3: <code>quadraticCurveTo</code>，占用<code>2</code>个点信息，第一个点作为曲线控制点，第二个点作为曲线结束点</p></li><li><p>4: <code>bezierCurveTo</code>，占用<code>3</code>个点信息，第一和第二个点作为曲线控制点，第三个点作为曲线结束点</p></li><li><p>5: <code>closePath</code>，不占用点信息，代表本次路径绘制结束，并闭合到路径的起始点</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/shape1.png"></p><p><code>ht.Shape</code>的主要属性函数：</p><ul><li><p><code>getPoints()</code>和<code>setPoints(points)</code>获取和设置点数组，参数为<code>Array</code>类型则内部转换成<code>ht.List</code>，为空则清除所有点</p></li><li><p><code>addPoint(point, index)</code>在指定的索引位置插入新点，<code>index</code>为空则插入到最后</p></li><li><p><code>setPoints(index, point)</code>在指定的索引位置替换新点</p></li><li><p><code>removePointAt(index)</code>删除指定索引位置的点</p></li><li><p><code>toPoints()</code>拷贝一份新的<code>ht.List</code>类型顶点数组</p></li><li><pre><code>segments<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">属性为</span><br><span class="line"></span><br></pre></td></tr></table></figure>Array<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br></pre></td></tr></table></figure>ht.List<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    类型，用于描述点连接样式，数组元素为整型值:</span><br><span class="line"></span><br><span class="line">    - 1: &#96;moveTo&#96;，占用&#96;1&#96;个点信息，代表一个新路径的起点</span><br><span class="line">    - 2: &#96;lineTo&#96;，占用&#96;1&#96;个点信息，代表从上次最后点连接到该点</span><br><span class="line">    - 3: &#96;quadraticCurveTo&#96;，占用&#96;2&#96;个点信息，第一个点作为曲线控制点，第二个点作为曲线结束点</span><br><span class="line">    - 4: &#96;bezierCurveTo&#96;，占用&#96;3&#96;个点信息，第一和第二个点作为曲线控制点，第三个点作为曲线结束点</span><br><span class="line">    - 5: &#96;closePath&#96;，不占用点信息，代表本次路径绘制结束，并闭合到路径的起始点</span><br><span class="line"></span><br><span class="line">  - &#96;isClosePath()&#96;和&#96;setClosePath(true)&#96;获取和设置多边形是否闭合，默认为&#96;false&#96;，[墙面类型](#ref_wall)通过设置闭合可无缝连接起始点</span><br><span class="line"></span><br><span class="line">  - &#96;getLength(resolution)&#96;获取多边形长度，&#96;resolution&#96;为曲线微分片数，不传入则&#96;HT&#96;会采用系统默认值</span><br><span class="line"></span><br><span class="line">  &gt; &#96;ht.Shape&#96;类型的&#96;points&#96;值与&#96;width&#96;、&#96;height&#96;和&#96;position&#96;这三个大小和位置信息存在联动关系， 即修改&#96;points&#96;会影响&#96;width&#96;、&#96;height&#96;和&#96;position&#96;相应值，同理修改&#96;width&#96;、&#96;height&#96;和&#96;position&#96;值也会影响&#96;points&#96;信息。</span><br><span class="line"></span><br><span class="line">#### 样式属性</span><br><span class="line"></span><br><span class="line">&#96;ht.Shape&#96;相关的&#96;style&#96;属性：</span><br><span class="line"></span><br><span class="line">- &#96;shape.border.width&#96;边框宽度，默认值为&#96;0&#96;表示不绘制边框</span><br><span class="line"></span><br><span class="line">- &#96;shape.border.color&#96;边框颜色</span><br><span class="line"></span><br><span class="line">- &#96;shape.border.cap&#96;边框末端线帽的样式，可选参数为&#96;butt|round|square&#96;</span><br><span class="line"></span><br><span class="line">  ![](https:&#x2F;&#x2F;heavenimmortal.oss-cn-chengdu.aliyuncs.com&#x2F;img&#x2F;shape2.png)</span><br><span class="line"></span><br><span class="line">  shape.border.join&#96;边框当两条线交汇时创建边角的类型，可选参数为&#96;bevel|round|miter</span><br><span class="line"></span><br><span class="line">  ![](https:&#x2F;&#x2F;heavenimmortal.oss-cn-chengdu.aliyuncs.com&#x2F;img&#x2F;shape3.png)</span><br><span class="line"></span><br><span class="line">- &#96;shape.bord![shape3](..&#x2F;..&#x2F;..&#x2F;..&#x2F;typora&#x2F;images&#x2F;shape3.png)er.pattern&#96;显示虚线样式，&#96;Array&#96;类型，例如&#96;[5, 5]&#96;</span><br><span class="line"></span><br><span class="line">- &#96;shape.background&#96;背景填充颜色，为&#96;null&#96;代表不填充背景</span><br><span class="line"></span><br><span class="line">- shape.gradient 渐近色类型：</span><br><span class="line"></span><br><span class="line">  - 为空代表不绘制渐近色效果，只用&#96;shape.background&#96;纯色填充背景。</span><br><span class="line">  - 支持类型：&#96;&#39;linear.southwest&#39;,&#39;linear.southeast&#39;,&#39;linear.northwest&#39;,&#39;linear.northeast&#39;, &#39;linear.north&#39;,&#39;linear.south&#39;,&#39;linear.west&#39;,&#39;linear.east&#39;, &#39;radial.center&#39;,&#39;radial.southwest&#39;,&#39;radial.southeast&#39;,&#39;radial.northwest&#39;,&#39;radial.northeast&#39;, &#39;radial.north&#39;,&#39;radial.south&#39;,&#39;radial.west&#39;,&#39;radial.east&#39;, &#39;spread.horizontal&#39;,&#39;spread.vertical&#39;,&#39;spread.diagonal&#39;,&#39;spread.antidiagonal&#39;, &#39;spread.north&#39;,&#39;spread.south&#39;,&#39;spread.west&#39;,&#39;spread.east&#39;&#96;</span><br><span class="line"></span><br><span class="line">- &#96;shape.gradient.color&#96;背景渐近颜色</span><br><span class="line"></span><br><span class="line">- &#96;shape.repeat.image&#96;填充重复背景的图片，注意这里的图片不支持矢量</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash&#96;是否显示虚线，默认值为&#96;false&#96;</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash.pattern&#96;虚线样式，默认值为&#96;[16, 16]&#96;</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash.offset&#96;虚线偏移，默认值为&#96;0&#96;</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash.color&#96;虚线颜色</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash.width&#96;虚线宽度，默认为空代表采用&#96;shape.border.width&#96;值</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash.3d&#96;虚线是否显示&#96;3d&#96;效果，默认值为&#96;false&#96;</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash.3d.color&#96;虚线&#96;3d&#96;效果颜色，为空采用默认白色，呈现&#96;3d&#96;效果时连线的中间部分为该颜色</span><br><span class="line"></span><br><span class="line">- &#96;shape.dash.3d.accuracy&#96;虚线&#96;3d&#96;效果精确度，该值越小&#96;3d&#96;渐进效果越好但影响性能，一般情况无需修改</span><br><span class="line"></span><br><span class="line">  &gt;</span><br><span class="line">  &gt;</span><br><span class="line">  &gt;代码示例</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">&lt;script&gt;       </span><br><span class="line">            &#x2F;&#x2F;以页面左顶点为远点</span><br><span class="line">            function init()&#123;                                </span><br><span class="line">                dataModel &#x3D; new ht.DataModel();</span><br><span class="line">                graphView &#x3D; new ht.graph.GraphView(dataModel);</span><br><span class="line">                view &#x3D; graphView.getView();            </span><br><span class="line"></span><br><span class="line">                view.className &#x3D; &#39;main&#39;;</span><br><span class="line">                document.body.appendChild(view);    </span><br><span class="line">                window.addEventListener(&#39;resize&#39;, function (e) &#123;</span><br><span class="line">                    graphView.invalidate();</span><br><span class="line">                &#125;, false);  </span><br><span class="line">                </span><br><span class="line">                &#x2F;&#x2F;新建shape对象</span><br><span class="line">                shape1 &#x3D; new ht.Shape();</span><br><span class="line">                dataModel.add(shape1);</span><br><span class="line">                &#x2F;&#x2F;设置style属性</span><br><span class="line">                shape1.setStyle(&#39;shape.background&#39;, &#39;yellow&#39;);    </span><br><span class="line">                shape1.setPoints([</span><br><span class="line">                    &#x2F;&#x2F;该点作起点</span><br><span class="line">                    &#123;x: 0, y: 100&#125;,</span><br><span class="line">                    &#x2F;&#x2F;2，3点作控制点</span><br><span class="line">                    &#123;x: 0, y: 0&#125;,</span><br><span class="line">                    &#123;x: 200, y: 0&#125;,</span><br><span class="line">                    &#x2F;&#x2F;该点作结束点</span><br><span class="line">                    &#123;x: 200, y: 100&#125;</span><br><span class="line">                ]);</span><br><span class="line">                &#x2F;&#x2F;设置线条形状</span><br><span class="line">                shape1.setSegments([</span><br><span class="line">                    1, &#x2F;&#x2F; moveTo</span><br><span class="line">                    4</span><br><span class="line">                ]);</span><br><span class="line">                </span><br><span class="line">                shape2 &#x3D; new ht.Shape();</span><br><span class="line">                dataModel.add(shape2);</span><br><span class="line">                shape2.setStyle(&#39;shape.background&#39;, null);</span><br><span class="line">                &#x2F;&#x2F;设置线条宽度</span><br><span class="line">                shape2.setStyle(&#39;shape.border.width&#39;, 10);</span><br><span class="line">                &#x2F;&#x2F;设置线条颜色</span><br><span class="line">                shape2.setStyle(&#39;shape.border.color&#39;, &#39;#1ABC9C&#39;);</span><br><span class="line">                shape2.setPoints([                    </span><br><span class="line">                    &#x2F;&#x2F; draw H</span><br><span class="line">                    &#123;x: 20, y: 0&#125;,</span><br><span class="line">                    &#123;x: 20, y: 100&#125;,</span><br><span class="line">                    &#123;x: 20, y: 50&#125;,</span><br><span class="line">                    &#123;x: 80, y: 50&#125;,</span><br><span class="line">                    &#123;x: 80, y: 0&#125;,</span><br><span class="line">                    &#123;x: 80, y: 100&#125;,</span><br><span class="line">                    </span><br><span class="line">                    &#x2F;&#x2F; draw T</span><br><span class="line">                    &#123;x: 120, y: 0&#125;,</span><br><span class="line">                    &#123;x: 180, y: 0&#125;,</span><br><span class="line">                    &#123;x: 150, y: 0&#125;,</span><br><span class="line">                    &#123;x: 150, y: 100&#125;                    </span><br><span class="line">                ]);                                </span><br><span class="line">                shape2.setSegments([</span><br><span class="line">                    &#x2F;&#x2F; draw H</span><br><span class="line">                    1, &#x2F;&#x2F; moveTo</span><br><span class="line">                    2, &#x2F;&#x2F; lineTo</span><br><span class="line">                    1, &#x2F;&#x2F; moveTo</span><br><span class="line">                    2, &#x2F;&#x2F; lineTo</span><br><span class="line">                    1, &#x2F;&#x2F; moveTo</span><br><span class="line">                    2, &#x2F;&#x2F; lineTo</span><br><span class="line">                    </span><br><span class="line">                    &#x2F;&#x2F; draw T</span><br><span class="line">                    1, &#x2F;&#x2F; moveTo</span><br><span class="line">                    2, &#x2F;&#x2F; lineTo</span><br><span class="line">                    1, &#x2F;&#x2F; moveTo</span><br><span class="line">                    2 &#x2F;&#x2F; lineTo</span><br><span class="line">                ]);</span><br><span class="line">                </span><br><span class="line">                shape3 &#x3D; new ht.Shape();</span><br><span class="line">                dataModel.add(shape3);</span><br><span class="line">                shape3.setStyle(&#39;shape.background&#39;, null);</span><br><span class="line">                shape3.setStyle(&#39;shape.border.width&#39;, 2);</span><br><span class="line">                &#x2F;&#x2F;设置线条颜色</span><br><span class="line">                shape3.setStyle(&#39;shape.border.color&#39;, &#39;#3498DB&#39;);</span><br><span class="line">                var h &#x3D; 10;</span><br><span class="line">                shape3.setPoints([                                        </span><br><span class="line">                    &#123;x: 0, y: 0&#125;,</span><br><span class="line">                    &#123;x: 25, y: -h&#125;,</span><br><span class="line">                    &#123;x: 50, y: 0&#125;,</span><br><span class="line">                    &#123;x: 75, y: h&#125;,</span><br><span class="line">                    &#123;x: 100, y: 0&#125;,                                     </span><br><span class="line">                    &#123;x: 125, y: -h&#125;,                    </span><br><span class="line">                    &#123;x: 150, y: 0&#125;,                    </span><br><span class="line">                    &#123;x: 175, y: h&#125;,                    </span><br><span class="line">                    &#123;x: 200, y: 0&#125;                 </span><br><span class="line">                ]);                                </span><br><span class="line">                shape3.setSegments([</span><br><span class="line">                    1, &#x2F;&#x2F; moveTo</span><br><span class="line">                    3, &#x2F;&#x2F; quadraticCurveTo</span><br><span class="line">                    3, &#x2F;&#x2F; quadraticCurveTo</span><br><span class="line">                    3, &#x2F;&#x2F; quadraticCurveTo</span><br><span class="line">                    3 &#x2F;&#x2F; quadraticCurveTo</span><br><span class="line">                ]);                </span><br><span class="line">                shape3.translate(0, 120);</span><br><span class="line">                </span><br><span class="line">                shape4 &#x3D; new ht.Shape();                                         </span><br><span class="line">                shape4.s(&#123;                    </span><br><span class="line">                    &#39;shape.repeat.image&#39;: &#39;ie.png&#39;,</span><br><span class="line">                    &#39;shape.border.width&#39;: 20,</span><br><span class="line">                    &#39;shape.border.3d&#39;: true,</span><br><span class="line">                    &#39;shape.border.cap&#39;: &#39;butt&#39;,</span><br><span class="line">                    &#39;shape.border.color&#39;: &#39;red&#39;,</span><br><span class="line">                    &#39;shape.border.pattern&#39;: [16, 8],   </span><br><span class="line">                    &#39;shape.dash&#39;: true,</span><br><span class="line">                    &#39;shape.dash.width&#39;: 10,</span><br><span class="line">                    &#39;shape.dash.color&#39;: &#39;yellow&#39;,</span><br><span class="line">                    &#39;shape.dash.pattern&#39;: [16, 8],</span><br><span class="line">                    &#39;shape.dash.3d&#39;: true,</span><br><span class="line">                    &#39;shape.dash.3d.color&#39;: &#39;black&#39;</span><br><span class="line">                &#125;);                </span><br><span class="line">                </span><br><span class="line">                shape4.setSegments([1, 2, 2, 5, 1, 3, 1, 4]);</span><br><span class="line">                shape4.setPoints([&#123;x: 300, y: 0&#125;, &#123;x: 400, y: 0&#125;, &#123;x: 350, y: 100&#125;,</span><br><span class="line">                    &#123;x: 400, y: 100&#125;, &#123;x: 350, y: 200&#125;, &#123;x: 300, y: 100&#125;,</span><br><span class="line">                    &#123;x: 300, y: 200&#125;, &#123;x: 300, y: 120&#125;, &#123;x: 400, y: 120&#125;, &#123;x: 400, y: 200&#125;]);</span><br><span class="line">                dataModel.add(shape4);                </span><br><span class="line"></span><br><span class="line">                graphView.translate(30, 30);</span><br><span class="line">                graphView.setEditable(true);</span><br><span class="line">            &#125;</span><br><span class="line">                        </span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><blockquote><p>运行结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/shape5.png"></p><h2 id="数据模型手册"><a href="#数据模型手册" class="headerlink" title="数据模型手册"></a>数据模型手册</h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>正确使用合适的设计模式可极大提高框架的可维护性和可扩展性，良好的设计接口可极大减少用户代码量并提高可读性， 有利于大规模项目开发的团队分工，甚至不需要接入后台数据即可完成对前端组件的单元测试， 有助于组件和模型的<a href="http://en.wikipedia.org/wiki/Data_binding">数据绑定</a>和数据同步， 进而有助于开发厂商进一步提供所见即所得的可视化开发工具， 如 <a href="http://www.adobe.com/products/flash-builder.html">Adobe Flash Builder</a> 和 <a href="http://en.wikipedia.org/wiki/VisualStudio">Microsoft Visual Studio</a>。</p><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>在早期的<code>GUI</code>设计领域，<a href="http://en.wikipedia.org/wiki/Swing_(Java)">Java/Swing</a>，<a href="http://en.wikipedia.org/wiki/JFace">SWT/JFace</a>， <a href="http://developer.apple.com/library/ios/#documentation/general/conceptual/devpedia-cocoacore/MVC.html">Cocoa</a> 和 <a href="http://en.wikipedia.org/wiki/Qt_(framework)">Qt</a> 都是基于 <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model View Controller (MVC)</a> 设计模式的典范。</p><h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><p><code>MVC</code>之后慢慢发展衍生的 <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">Model View Presenter (MVP)</a> 设计模式逐渐被新的<code>GUI</code>框架所采用， 如基于<code>Flash</code>的 <a href="http://en.wikipedia.org/wiki/Apache_Flex">Apache/Flex</a> 企业应用组件，以及在<code>Swing</code>基础上封装的 <a href="http://www.jgoodies.com/">JGoodies</a> 框架。 <code>Martin Fowler</code> 的 <a href="http://martinfowler.com/eaaDev/uiArchs.html">GUI Architectures</a> 对这两种设计模式进行了分析比较。</p><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p>近些年在<code>MVP</code>基础上再增加<code>ViewModel</code>层衍生的 <a href="http://en.wikipedia.org/wiki/MVVM">Model View ViewModel (MVVM)</a> 设计模式， 也被微软新一代的<code>GUI</code>开发框架 <a href="http://en.wikipedia.org/wiki/Windows_Presentation_Foundation">Silverlight/WPF</a> 采用， 包括像 <a href="http://knockoutjs.com/">Knockout</a> 这种为简化前端<code>HTML</code>组件和<code>js</code>数据绑定的框架也是基于<code>MVVM</code>设计模式。</p><h4 id="OVM"><a href="#OVM" class="headerlink" title="OVM"></a>OVM</h4><p><code>MVC/MVP/MVVM</code>等设计模式的提出，方便了大家对不同框架的理解和归类，任何<code>GUI</code>框架在具体实现上都会有自己的演变和特性， <code>HT</code>的整体框架更类似<code>MVP</code>和<code>MVVM</code>的设计模式，但我们更倾向于称<code>HT</code>的设计模式为 <code>Object View Mapping (OVM)</code>， 类比于 <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">Object Relational Mapping (ORM)</a>， 通过面对对象方式的封装，屏蔽了各种视图组件的异构性，采用了统一的 <a href="#ref_datamodel">DataModel</a> 数据模型和 <a href="#ref_selectionmodel">SelectionModel</a> 选择模型，可驱动 <code>ListView</code>，<code>TreeView</code>，<code>TableView</code>， <code>TreeTableView</code>、<code>GraphView</code> 和 <code>Graph3dView</code> 等所有<code>HT</code>的视图组件。</p><blockquote><p><code>HT</code>这样的设计架构，用户仅需掌握统一的数据驱动接口，不会因视图组件增多带来额外学习成本，这是<code>HT</code>易上手易精通的根本。</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><code>Data</code>类型贯穿整个<code>HT</code>框架，是最基础数据类型。</p><ul><li><p><code>getId()</code>和<code>setId(id)</code>获取和设置唯一编号，系统会自动分配，设置需注意<a href="#ref_datamodel">DataModel说明</a>，<code>DataModel#getDataById(id)</code>可查找</p></li><li><p><code>getTag()</code>和<code>setTag(tag)</code>获取和设置标识号，通过<code>DataModel#getDataByTag(tag)</code>可查找</p></li><li><p><code>getName()</code>和<code>setName(name)</code>获取和设置名称</p></li><li><p><code>getIcon()</code>和<code>setIcon(icon)</code>获取和设置小图标，常作为<code>TreeView</code>和<code>ListView</code>等组件上的节点小图标</p></li><li><p><code>getDisplayName()</code>和<code>setDisplayName(displayName)</code>获取和设置显示名称，常作为<code>Column</code>和<code>Property</code>的列头和属性名称显示</p></li><li><p><code>getToolTip()</code>和<code>setToolTip(tooltip)</code>获取和设置组件上该节点或图元的文字提示信息</p></li><li><p><code>getParent()</code>和<code>setParent(parent)</code>获取和设置父亲节点，作为树层次结构的信息，内部会自动调用<code>addChild</code>或<code>removeChild</code></p></li><li><p><code>addChild(child, index)</code>添加孩子节点，<code>index</code>为孩子插入索引，为空则插入作为最后的孩子，内部会自动调用<code>setParent</code></p></li><li><p><code>removeChild(child)</code>删除指定孩子节点，内部会自动调用<code>setParent</code></p></li><li><p><code>clearChildren()</code>删除所有孩子节点，内部会自动调用<code>setParent</code></p></li><li><p><code>onChildAdded(child, index)</code>添加孩子时的回调函数，可重载做后续处理</p></li><li><p><code>onChildRemoved(child, index)</code>删除孩子时的回调函数，可重载做后续处理</p></li><li><p><code>onParentChanged(oldParent, parent)</code>改变父亲节点时的回调函数，可重载做后续处理</p></li><li><p><code>size()</code>返回孩子总数</p></li><li><p><code>hasChildren()</code>判断是否有孩子，有则返回<code>true</code>，无则返回<code>false</code></p></li><li><p><code>isEmpty()</code>判断是否有孩子，有则返回<code>false</code>，无则返回<code>true</code></p></li><li><p><code>getChildren()</code>获取所有孩子节点，该函数返回内部<code>ht.List</code>类型数组对象引用</p></li><li><p><code>toChildren(matchFunc, scope)</code>根据<code>matchFunc</code>函数逻辑构建所有匹配图元的新<code>ht.List</code>类型数组对象</p></li><li><p><code>eachChild(func, scope)</code>遍历所有孩子，可指定函数<code>scope</code>域</p></li><li><p><code>getChildAt(index)</code>返回指定索引位置孩子</p></li><li><p><code>isParentOf(data)</code>判断本图元是否为指定<code>data</code>的父亲图元</p></li><li><p><code>isDescendantOf(data)</code>判断本图元是否为指定<code>data</code>图元的子孙</p></li><li><p><code>isRelatedTo(data)</code>判断本图元与指定<code>data</code>图元是否有父子或子孙关系</p></li><li><p><code>layer</code>属性通过<code>getLayer()</code>和<code>setLayer(layer)</code>操作，对应图元在<code>GraphView</code>组件中的图层位置，默认值为空</p></li><li><p><code>isAdjustChildrenToTop()</code>和<code>setAdjustChildrenToTop(true)</code>，默认为<code>false</code>，<code>ht.Node</code>类型默认为<code>true</code>， <code>GraphView</code>默认点击图元会自动<code>sendToTop</code>，该属性决定是否对子图元也进行<code>sendToTop</code>操作</p></li><li><p><code>firePropertyChange(property, oldValue, newValue)</code>派发属性变化事件，可使用<code>fp</code>的简写方式</p></li><li><p><code>onPropertyChanged(event)</code>属性变化回调函数，可重载做后续处理</p></li><li><p><code>invalidate()</code>该函数用户强制触发属性变化事件通知界面更新，内部实现为<code>this.fp(&#39;*&#39;, false, true)</code></p></li><li><p><code>getStyleMap()</code>返回图元内部样式映射信息，<code>getStyle(name)</code>时如果<code>styleMap</code>对应值为空，自动会返回<code>ht.Style</code>定义的信息</p></li><li><p><code>getStyle(&#39;name&#39;)</code>和<code>setStyle(&#39;name&#39;, value)</code>获取和设置图元样式，可采用<code>s(name/name,value/json)</code>的简写方式</p></li><li><p><code>onStyleChanged(name, oldValue, newValue)</code>当<code>style</code>属性变化时会回调该函数，可重载做后续处理</p></li><li><p><code>getAttrObject()</code>和<code>setAttrObject(obj)</code>获取和设置<code>attr</code>属性对象，该属性默认为空，用于存储用户业务信息</p></li><li><p><code>getAttr(name)</code>和<code>setAttr(name, value)</code>获取和设置<code>attr</code>对象的属性，可采用<code>a(name/name,value/json)</code>的简写方式</p></li><li><p><code>onAttrChanged(name, oldValue, newValue)</code>当<code>attr</code>属性变化时会回调该函数，可重载做后续处理</p></li><li><p><code>toLabel()</code>返回值默认作为<code>TreeView</code>和<code>GraphView</code>等组件上的图元文字标签，默认返回<code>displayName||name</code>信息</p></li><li><p><code>addStyleIcon(name, icons)</code>和<code>removeStyleIcon(name)</code>增加和删除<code>style</code>中<code>icons</code>属性，可参考<a href="#ref_styleicon">icon章节</a></p></li><li><p><code>getSerializableProperties()</code>返回需要序列化的属性名称<code>map</code>，参见<a href="../serialization/ht-serialization-guide.html">序列化手册</a></p></li><li><p><code>getSerializableStyles()</code>返回需要序列化的<code>style</code>属性名称<code>map</code>，参见<a href="../serialization/ht-serialization-guide.html">序列化手册</a></p></li><li><p><code>getSerializableAttrs()</code>返回需要序列化的<code>attr</code>属性名称<code>map</code>，参见<a href="../serialization/ht-serialization-guide.html">序列化手册</a></p><blockquote><p>运行结果</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--设置样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html, body &#123;</span><br><span class="line">            padding: 0px;</span><br><span class="line">            margin: 0px;                </span><br><span class="line">        &#125;            </span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">            margin: 0px;</span><br><span class="line">            padding: 0px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0px;</span><br><span class="line">            bottom: 0px;</span><br><span class="line">            left: 0px;</span><br><span class="line">            right: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--导入对应的授权js文件和ht.js文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;nHe5s3wxNTTN.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;ht.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//设置图片</span></span></span><br><span class="line"><span class="javascript">        ht.Default.setImage(<span class="string">&#x27;edit&#x27;</span>, <span class="string">&#x27;image/edit.png&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ht.Default.setImage(<span class="string">&#x27;mail&#x27;</span>, <span class="string">&#x27;image/mail.png&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ht.Default.setImage(<span class="string">&#x27;readmail&#x27;</span>, <span class="string">&#x27;image/readmail.png&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ht.Default.setImage(<span class="string">&#x27;search&#x27;</span>, <span class="string">&#x27;image/search.png&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ht.Default.setImage(<span class="string">&#x27;settings&#x27;</span>, <span class="string">&#x27;image/settings.png&#x27;</span>);            </span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//初始化方法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">            <span class="comment">//id和tag的方式都是针对唯一标示的Data对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取数据容器 ht通过操控dataModel来操控页面                               </span></span></span><br><span class="line"><span class="javascript">            dataModel = <span class="keyword">new</span> ht.DataModel();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//初始化树组件对象 树形结构                    </span></span></span><br><span class="line"><span class="javascript">            treeView = <span class="keyword">new</span> ht.widget.TreeView(dataModel);</span></span><br><span class="line">            view = treeView.getView();            </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//设置页面</span></span></span><br><span class="line"><span class="javascript">            view.className = <span class="string">&#x27;main&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(view);    </span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">                treeView.invalidate();</span><br><span class="line"><span class="javascript">            &#125;, <span class="literal">false</span>);                         </span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//inbox data初始化 只传了名和图标 没有父节点 说明inbox是最顶层的节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> inbox = addData(<span class="string">&#x27;Inbox&#x27;</span>, <span class="string">&#x27;mail&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//新建data节点Read Mail,图标为readmail，父节点为inbox</span></span></span><br><span class="line"><span class="javascript">            addData(<span class="string">&#x27;Read Mail&#x27;</span>, <span class="string">&#x27;readmail&#x27;</span>, inbox);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//新建data节点Drafts,图标为edit，无父节点 说明为最顶层节点                             </span></span></span><br><span class="line"><span class="javascript">            addData(<span class="string">&#x27;Drafts&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//Search Folders data初始化 只传了名和图标 没有父节点 说明inbox是最顶层的节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> search = addData(<span class="string">&#x27;Search Folders&#x27;</span>, <span class="string">&#x27;search&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//新建data节点 Categorized Mail,图标为search，父节点search</span></span></span><br><span class="line"><span class="javascript">            addData(<span class="string">&#x27;Categorized Mail&#x27;</span>, <span class="string">&#x27;search&#x27;</span>, search);                             </span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//新建data节点Large mail,图标为search，父节点search</span></span></span><br><span class="line"><span class="javascript">            addData(<span class="string">&#x27;Large mail&#x27;</span>, <span class="string">&#x27;search&#x27;</span>, search);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//新建data节点UnRead Mail,图标为search，父节点search                         </span></span></span><br><span class="line"><span class="javascript">            addData(<span class="string">&#x27;UnRead Mail&#x27;</span>, <span class="string">&#x27;search&#x27;</span>, search);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//新建data节点Settings,图标为settings，无父节点 说明为最顶层节点                             </span></span></span><br><span class="line"><span class="javascript">            addData(<span class="string">&#x27;Settings&#x27;</span>, <span class="string">&#x27;settings&#x27;</span>);</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//初始化时展开所有对象</span></span></span><br><span class="line">            treeView.expandAll();</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//设置选择模型 选择模型来控制选择数据容器里每个data的选择状态</span></span></span><br><span class="line">            treeView.getSelectionModel().setSelection(search);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//参数为 data的 名称，图标（图片），父节点名称</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params">name, icon, parent</span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//新建数据类型data data是ht中最基本的数据类型</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = <span class="keyword">new</span> ht.Data();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置data的名称</span></span></span><br><span class="line">            data.setName(name);</span><br><span class="line"><span class="javascript">            <span class="comment">//设置小图标</span></span></span><br><span class="line">            data.setIcon(icon);</span><br><span class="line"><span class="javascript">            <span class="comment">//设置父亲节点</span></span></span><br><span class="line"><span class="javascript">            data.setParent(parent); <span class="comment">// or parent.addChild(data);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//向数据容器种添加data</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//一般要求有父子关系的Data都应逐一加入容器</span></span></span><br><span class="line">            dataModel.add(data);</span><br><span class="line"><span class="javascript">            <span class="comment">//返回data</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> data;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在页面加载时调用script里的实例化方法init()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;init()&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/HTForWeb%E7%9A%84Data%E6%BC%94%E7%A4%BA%E5%9B%BE%E7%89%87.png"></p><p>这样通过javaScript代码我们就是先下拉选择框，不在需要去写html代码了。</p><h3 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h3><p>数据容器<code>ht.DataModel</code>(以下简称<code>DataModel</code>)作为承载<code>Data</code>数据的模型，管理着<code>Data</code>数据的增删以及变化事件派发， <code>HT</code>框架所有组件都是通过绑定<code>DataModel</code>，以不同的形式呈现到用户界面；同时组件也会监听<code>DataModel</code>模型的变化事件， 实时同步更新界面数据信息，掌握了<code>DataModel</code>的操作就掌握了所有组件的模型驱动方式。</p><p><code>Data</code>类型对象构造时内部会自动被赋予一个<code>id</code>属性，可通过<code>data.getId()</code>和<code>data.setId(id)</code>获取和设置， <code>Data</code>对象添加到<code>DataModel</code>之后不允许修改<code>id</code>值，可通过<code>dataModel.getDataById(id)</code>快速查找<code>Data</code>对象。</p><p>一般建议<code>id</code>属性由<code>HT</code>自动分配，用户业务意义的唯一标示可存在<code>tag</code>属性上，通过<code>Data#setTag(tag)</code>函数允许任意动态改变<code>tag</code>值， 通过<code>DataModel#getDataByTag(tag)</code>可查找到对应的<code>Data</code>对象，并支持通过<code>DataModel#removeDataByTag(tag)</code>删除<code>Data</code>对象。</p><p><code>id</code>和<code>tag</code>的方式都是针对唯一标示的<code>Data</code>对象，若搜索非唯一属性可采用<a href="../../plugin/quickfinder/ht-quickfinder-guide.html">ht.QuickFinder插件</a>。</p><p>使用<code>DataModel</code>时需要特别注意：一般要求有父子关系的<code>Data</code>都应逐一加入容器。常遇到<code>parent</code>加入容器，但<code>children</code>未加入， 导致组件看不到<code>children</code>的问题，另外添加<code>parent</code>并不会自动加载所有子孙，这点务必注意。</p><p><code>Data</code>类型有<code>getDataModel()</code>函数，当<code>Data</code>加入容器后<code>data.getDataModel()</code>能获得当前所在容器信息， 不允许一个<code>Data</code>对象同时加入多个<code>DataModel</code>容器中。</p><ul><li><p><code>add(data, index)</code>添加<code>Data</code>对象，<code>index</code>一般无需指定，其只在<code>data</code>的<code>parent</code>为空时才起作用，指定插入<code>roots</code>数组的索引位置</p></li><li><pre><code>remove(data)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">删除</span><br><span class="line"></span><br></pre></td></tr></table></figure>Data<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  对象，该操作有以下副作用：</span><br><span class="line"></span><br><span class="line">  - 其子孙被递归从&#96;DataModel&#96;中删除</span><br><span class="line">  - 被断开父子关系&#96;data.setParent(null)&#96;</span><br><span class="line">  - &#96;Edge&#96;类型通过&#96;edge.setSource(null)&#96;和&#96;data.setTarget(null)&#96;断开节点关系</span><br><span class="line">  - &#96;Node&#96;类型会将其关联的连线从&#96;DataModel&#96;中删除</span><br><span class="line">  - &#96;Node&#96;类型通过&#96;data.setHost(null)&#96;断开与宿主吸附节点关系</span><br><span class="line"></span><br><span class="line">- &#96;clear()&#96;删除容器中所有&#96;Data&#96;对象，该操作一次性清空，没有逐个&#96;remove&#96;的过程，不会影响&#96;Data&#96;父子关系</span><br><span class="line"></span><br><span class="line">- &#96;onAdded(data)&#96;图元添加时回调函数，可重载做后续处理</span><br><span class="line"></span><br><span class="line">- &#96;onRemoved(data)&#96;图元删除时回调函数，可重载做后续处理</span><br><span class="line"></span><br><span class="line">- &#96;contains(data)&#96;判断容器是否包含该&#96;data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;size()&#96;返回当前容器中&#96;Data&#96;对象的总数</span><br><span class="line"></span><br><span class="line">- &#96;isEmpty()&#96;判断容器是否为空</span><br><span class="line"></span><br><span class="line">- &#96;getRoots()&#96;返回所有&#96;parent&#96;为空的&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;getDataById(id)&#96;返回指定&#96;id&#96;的&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;removeDataById(id)&#96;删除指定&#96;id&#96;的&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;getDataByTag(tag)&#96;返回指定&#96;tag&#96;标示的&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;removeDataByTag(tag)&#96;删除指定&#96;tag&#96;标示的&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;each(func, scope)&#96;遍历所有&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;eachByDepthFirst(func, data, scope)&#96;以&#96;data&#96;为起始深度优先遍历&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;eachByBreadthFirst(func, data, scope)&#96;以&#96;data&#96;为起始广度优先遍历&#96;Data&#96;对象</span><br><span class="line"></span><br><span class="line">- &#96;getDatas()&#96;返回所有添加到容器的&#96;Data&#96;数据&#96;ht.List&#96;数组</span><br><span class="line"></span><br><span class="line">- &#96;toDatas(matchFunc, scope)&#96;返回筛选后的新&#96;ht.List&#96;对象数组，第一参数为空相当于复制全部对象数组</span><br><span class="line"></span><br><span class="line">- &#96;getSelectionModel()&#96;获取该容器的选择模型，可用简写&#96;sm()&#96;</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  addDataModelChangeListener(function(e)&#123;&#125;, scope)</span><br></pre></td></tr></table></figure>增加数据模型增删变化事件监听器，可用简写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mm(func, scope)</span><br></pre></td></tr></table></figure>- `e.kind === &#39;add&#39;`代表添加`Data`对象，`e.data`为被添加的对象- `e.kind === &#39;remove&#39;`代表删除`Data`对象，`e.data`为被删除的对象- `e.kind === &#39;clear&#39;`代表容器被清除</code></pre></li><li><p><code>removeDataModelChangeListener(func, scope)</code>删除数据模型增删变化事件监听器，可用简写<code>umm(func, scope)</code></p></li><li><pre><code>addDataPropertyChangeListener(function(e)&#123;&#125;, scope)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">增加模型中</span><br><span class="line"></span><br></pre></td></tr></table></figure>Data<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">数据属性变化事件监听器，可用简写</span><br><span class="line"></span><br></pre></td></tr></table></figure>md(func, scope)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;e.data&#96;代表属性变化的对象</span><br><span class="line"></span><br><span class="line">- &#96;e.property&#96;代表变化属性的名字</span><br><span class="line"></span><br><span class="line">- &#96;e.newValue&#96;代表属性的新值</span><br><span class="line"></span><br><span class="line">- &#96;e.oldValue&#96;代表属性的老值</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  Data</span><br></pre></td></tr></table></figure>  对象在设置属性值函数内调用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firePropertyChange(property, oldValue, newValue)</span><br></pre></td></tr></table></figure>  触发属性变化事件：  - `get/set`类型属性，如`setAge(98)`触发事件的`e.property`为`age`  - `style`类型属性名前加`s:`前缀以区分，如`setStyle(&#39;age&#39;, 98)`触发事件的`e.property`为`s:age`  - `attr`类型属性名前加`a:`前缀以区分，如`setAttr(&#39;age&#39;, 98)`触发事件的`e.property`为`a:age`</code></pre></li><li><p><code>removeDataPropertyChangeListener(func, scope)</code>删除模型中<code>Data</code>数据属性变化事件监听器，可用简写<code>umd(func, scope)</code></p></li><li><p><code>onDataPropertyChanged(data, e)</code>图元属性变化回调函数，可重载做后续处理</p></li><li><p><code>getSiblings(data)</code>获取和<code>data</code>同父子层次的兄弟数组，如果data父亲为空，则返回<code>dataModel.getRoots()</code></p></li><li><p><code>moveTo(data, newIndex)</code>移动图元到同层兄弟数组中得指定索引</p></li><li><p><code>moveUp(data)</code>移动图元到同层兄弟数组中的上一个位置</p></li><li><p><code>moveDown(data)</code>移动图元到同层兄弟数组中的下一个位置</p></li><li><p><code>moveToTop(data)</code>移动图元到同层兄弟数组的顶部</p></li><li><p><code>moveToBottom(data)</code>移动图元到同层兄弟数组的底部</p></li><li><p><code>moveSelectionUp(sm)</code>移动当前选中图元到同层兄弟数组中的上一个位置，<code>sm</code>为空则采用<code>DataModel</code>绑定的选中模型</p></li><li><p><code>moveSelectionDown(sm)</code>移动当前选中图元到同层兄弟数组中的下一个位置，<code>sm</code>为空则采用<code>DataModel</code>绑定的选中模型</p></li><li><p><code>moveSelectionToTop(sm)</code>移动当前选中图元到同层兄弟数组的顶部，<code>sm</code>为空则采用<code>DataModel</code>绑定的选中模型</p></li><li><p><code>moveSelectionToBottom(sm)</code>移动当前选中图元到同层兄弟数组的底部，<code>sm</code>为空则采用<code>DataModel</code>绑定的选中模型</p></li><li><p><code>serialize(space)</code>将数据模型序列化成<code>JSON</code>格式字符串，<code>space</code>为缩进空格数</p></li><li><p><code>toJSON</code>将数据模型序列化成<code>JSON</code>格式对象</p></li><li><pre><code>deserialize(json, rootParent, setId)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  反序列化数据到数据模型</span><br><span class="line"></span><br><span class="line">  - &#96;json&#96;数据信息对象，用于解析生成对应的&#96;Data&#96;对象并添加到数据容器</span><br><span class="line">  - &#96;rootParent&#96;父节点对象，如果不为空，则反序列化的对象若无父亲者，设置&#96;rootParent&#96;为其父亲</span><br><span class="line">  - &#96;setId&#96;指定反序列化时，是否设置&#96;json&#96;信息上的&#96;id&#96;值</span><br><span class="line"></span><br><span class="line">&gt; 通过下面&#96;firePropertyChange&#96;的代码片段可以知道，&#96;oldValue&#96;和&#96;newValue&#96;相同时属性变化事件不会派发， 属性变化事件通过&#96;handleDataPropertyChange&#96;传递给&#96;DataModel&#96;继续做处理， 后续处理包括继续派发事件给通过&#96;addDataPropertyChangeListener&#96;添加到&#96;DataModel&#96;的属性变化监听器。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">firePropertyChange: function (property, oldValue, newValue) &#123;</span><br><span class="line">    if (oldValue &#x3D;&#x3D;&#x3D; newValue) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    var e &#x3D; &#123;</span><br><span class="line">        property: property,</span><br><span class="line">        oldValue: oldValue,</span><br><span class="line">        newValue: newValue,</span><br><span class="line">        data: this</span><br><span class="line">    &#125;;</span><br><span class="line">    if (this._dataModel) &#123;</span><br><span class="line">        this._dataModel.handleDataPropertyChange(e);</span><br><span class="line">    &#125;</span><br><span class="line">    this.onPropertyChanged(e);</span><br><span class="line">    return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h3><p><code>ht.SelectionModel</code>管理<code>DataModel</code>模型中<code>Data</code>对象的选择状态， 每个<code>DataModel</code>对象都内置一个<code>SelectionModel</code>选择模型，控制这个<code>SelectionModel</code>即可控制所有绑定该<code>DataModel</code>的组件的对象选择状态， 这意味着共享同一<code>DataModel</code>的组件默认就具有选中联动功能。</p><p>如果希望某些组件不与其他组件选中联动，可通过调用<code>view.setSelectionModelShared(false)</code>， 这样该<code>view</code>将创建一个专属的<code>SelectionModel</code>实例。</p><p>综上所述有两种途径可得到<code>SelectionModel</code>：</p><ul><li><code>dataModel.getSelectionModel()</code>获取数据容器中组件共享的选中模型。</li><li><code>view.getSelectionModel()</code>获取当前组件使用的选中模型，<code>selectionModelShared</code>为<code>false</code>时，返回<code>view</code>专用的选择模型。</li></ul><p><code>SelectionModel</code>常用函数如下：</p><ul><li><pre><code>getSelectionMode()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">和</span><br><span class="line"></span><br></pre></td></tr></table></figure>setSelectionMode(selectionMode)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  获取和设置选中模式</span><br><span class="line"></span><br><span class="line">  - &#96;none&#96;：不可选中。</span><br><span class="line">  - &#96;single&#96;：只可单选。</span><br><span class="line">  - &#96;multiple&#96;：默认值，允许多选。</span><br><span class="line"></span><br><span class="line">- &#96;getFilterFunc()&#96;和&#96;setFilterFunc(func)&#96;设置过滤器自定义可选择对象规则，参见[过滤器章节](..&#x2F;beginners&#x2F;ht-beginners-guide.html#ref_filter)</span><br><span class="line"></span><br><span class="line">- &#96;appendSelection(datas)&#96;追加选中对象，参数可为单个对象，也可为&#96;ht.List&#96;或&#96;Array&#96;数组，简写为&#96;as&#96;</span><br><span class="line"></span><br><span class="line">- &#96;setSelection(datas)&#96;设置选中对象，参数可为单个对象，也可为&#96;ht.List&#96;或&#96;Array&#96;数组，简写为&#96;ss&#96;</span><br><span class="line"></span><br><span class="line">- &#96;removeSelection(datas)&#96;取消选中对象，参数可为单个对象，也可为&#96;ht.List&#96;或&#96;Array&#96;数组，简写为&#96;rs&#96;</span><br><span class="line"></span><br><span class="line">- &#96;clearSelection()&#96;取消所有选中对象，简写为&#96;cs&#96;</span><br><span class="line"></span><br><span class="line">- &#96;selectAll()&#96;选中&#96;DataModel&#96;中所有对象，简写为&#96;sa&#96;</span><br><span class="line"></span><br><span class="line">- &#96;size()&#96;返回当前选中对象个数</span><br><span class="line"></span><br><span class="line">- &#96;isEmpty()&#96;判断当前是否没有选中对象</span><br><span class="line"></span><br><span class="line">- &#96;contains(data)&#96;判断&#96;data&#96;对象是否被选中，简写为&#96;co&#96;</span><br><span class="line"></span><br><span class="line">- &#96;getFirstData()&#96;返回首个被选中的对象，如果没有选中对象则返回空，简写为&#96;fd&#96;</span><br><span class="line"></span><br><span class="line">- &#96;getLastData()&#96;返回最后被选中的对象，如果没有选中对象则返回空，简写为&#96;ld&#96;</span><br><span class="line"></span><br><span class="line">- &#96;each(function(data)&#123;&#125;, scope)&#96;遍历所有被选中对象</span><br><span class="line"></span><br><span class="line">- &#96;getSelection()&#96;获取所有被选中对象数组，注意不可直接对返回数组进行增删操作。</span><br><span class="line"></span><br><span class="line">- &#96;toSelection(matchFunc, scope)&#96;返回过滤后的选中对象，&#96;matchFunc&#96;为空时代表复制全部到新数组</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  addSelectionChangeListener(function(e)&#123;&#125;, scope)</span><br></pre></td></tr></table></figure>增加监听器，监听选中变化事件，简写为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ms</span><br></pre></td></tr></table></figure>：- `e.datas`包含所有选中状态变化的对象，之前选中现在取消选中，或之前没选中现在被选中的对象- `e.kind === &#39;set&#39;`代表此事件由`setSelection(datas)`引发- `e.kind === &#39;remove&#39;`代表此事件由`removeSelection(datas)`引发- `e.kind === &#39;append&#39;`代表此事件由`appendSelection(datas)`引发- `e.kind === &#39;clear&#39;`代表此事件由`clearSelection(datas)`引发</code></pre></li><li><p><code>removeSelectionChangeListener(function(e)&#123;&#125;, scope)</code>删除选中变化事件监听器，简写为<code>ums</code>：</p><blockquote><p>代码示例</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html, body &#123;</span><br><span class="line">            padding: 0px;</span><br><span class="line">            margin: 0px;                </span><br><span class="line">        &#125;            </span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">            margin: 2px;</span><br><span class="line">            padding: 0px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0px;</span><br><span class="line">            bottom: 0px;</span><br><span class="line">            left: 0px;</span><br><span class="line">            right: 0px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.output</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#1ABC9C</span>;</span></span><br><span class="line">                color: white;</span><br><span class="line">                float: right;</span><br><span class="line">                margin-right: 2px;</span><br><span class="line">                padding: 0px 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--导入对应的授权js文件和ht.js文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;nHe5s3wxNTTN.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;ht.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        GraphPane = <span class="function"><span class="keyword">function</span>(<span class="params">dataModel, toolbar, className</span>)</span>&#123;    </span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//获取拓扑图形主键</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> graphView = <span class="built_in">this</span>._graphView = <span class="keyword">new</span> ht.graph.GraphView(dataModel);  </span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//设置工具栏              </span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(toolbar)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>._toolbar = toolbar;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;1&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert(&quot;2&quot;);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// //创建div块                                     </span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this._toolbar = document.createElement(&#x27;div&#x27;)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// var click = &quot;ontouchend&quot; in document ? &#x27;touchup&#x27; : &#x27;click&#x27;;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// //创建按钮 </span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// var button = document.createElement(&#x27;button&#x27;);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// //添加进工具里 放大 缩小</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this._toolbar.appendChild(button); </span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// button.innerHTML = &#x27;Zoom In&#x27;;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// button.addEventListener(click, function()&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     graphView.zoomIn(true);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;, false)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// var button = document.createElement(&#x27;button&#x27;);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this._toolbar.appendChild(button);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// button.innerHTML = &#x27;Zoom Out&#x27;;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// button.addEventListener(click, function()&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     graphView.zoomOut(true);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;, false);</span></span></span><br><span class="line">                </span><br><span class="line"><span class="javascript">                <span class="comment">// //添加重置</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// var button = document.createElement(&#x27;button&#x27;);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this._toolbar.appendChild(button);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// button.innerHTML = &#x27;Zoom Reset&#x27;;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// button.addEventListener(click, function()&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     graphView.zoomReset(true);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;, false); </span></span></span><br><span class="line">            &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>._view = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>._view.appendChild(<span class="built_in">this</span>._toolbar);                </span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>._view.appendChild(<span class="built_in">this</span>._graphView.getView());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>._view.className = className</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//设置拓扑组件的style</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> style = <span class="built_in">this</span>._graphView.getView().style;</span></span><br><span class="line"><span class="javascript">            style.background = <span class="string">&#x27;#1ABC9C&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            style.left = <span class="string">&#x27;0px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            style.right = <span class="string">&#x27;0px&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.invalidate();</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        ht.Default.def(GraphPane, <span class="built_in">Object</span>, &#123;</span></span><br><span class="line"><span class="javascript">            getView: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>._view;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            getGraphView: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>._graphView;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            getToolbar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>._toolbar;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            invalidate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                ht.Default.callLater(<span class="built_in">this</span>.validate, <span class="built_in">this</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            validate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> height = <span class="built_in">this</span>._view.clientHeight - <span class="built_in">this</span>._toolbar.clientHeight;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(height &lt; <span class="number">0</span>) height = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>._graphView.getView().style.height = height + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>._graphView.invalidate();   </span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;);              </span><br><span class="line">    </span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;                                </span></span><br><span class="line">            index = 0;</span><br><span class="line"><span class="javascript">            <span class="comment">//获取数据模型</span></span></span><br><span class="line"><span class="javascript">            dataModel = <span class="keyword">new</span> ht.DataModel();  </span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取选择模型</span></span></span><br><span class="line">            selectionModel = dataModel.getSelectionModel();</span><br><span class="line"></span><br><span class="line"><span class="javascript">            graphPane = <span class="keyword">new</span> GraphPane(dataModel, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;toolbar&#x27;</span>), <span class="string">&#x27;main&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(graphPane.getView());</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">                graphPane.invalidate();</span><br><span class="line"><span class="javascript">            &#125;, <span class="literal">false</span>);                                             </span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// monitor data property change event</span></span></span><br><span class="line"><span class="javascript">            dataModel.addDataPropertyChangeListener(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;                    </span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;property&#x27;</span>).innerHTML = e.data + <span class="string">&#x27;\&#x27;s &#x27;</span> + e.property + <span class="string">&#x27; changed&#x27;</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// monitor data model change event</span></span></span><br><span class="line"><span class="javascript">            dataModel.addDataModelChangeListener(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> output;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(e.kind === <span class="string">&#x27;add&#x27;</span>)&#123;</span></span><br><span class="line">                    alert(e);</span><br><span class="line"><span class="javascript">                    output = e.data + <span class="string">&#x27; added, &#x27;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">else</span> <span class="keyword">if</span>(e.kind === <span class="string">&#x27;remove&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    output = e.data + <span class="string">&#x27; removed, &#x27;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">else</span> <span class="keyword">if</span>(e.kind === <span class="string">&#x27;clear&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    output = <span class="string">&#x27;data model cleared, &#x27;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                output += <span class="string">&#x27;size:&#x27;</span> + dataModel.size();</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;model&#x27;</span>).innerHTML = output;</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// monitor selection model change event</span></span></span><br><span class="line"><span class="javascript">            selectionModel.addSelectionChangeListener(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> output = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line">                    size = selectionModel.size(); </span><br><span class="line">                    alert(size);                   </span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(size === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    output = <span class="string">&#x27;nothing selected&#x27;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">else</span> <span class="keyword">if</span>(size === <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    output = selectionModel.getLastData() + <span class="string">&#x27; selected&#x27;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    output = size + <span class="string">&#x27; datas selected&#x27;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;selection&#x27;</span>).innerHTML = output;</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            graphPane.getGraphView().setEditable(<span class="literal">true</span>);</span></span><br><span class="line"></span><br><span class="line">            addData();</span><br><span class="line">            addData();</span><br><span class="line">            selectionModel.setSelection(addData());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> node = <span class="keyword">new</span> ht.Node();                             </span></span><br><span class="line">            node.setPosition(50 + index % 12 * 50, 50);</span><br><span class="line"><span class="javascript">            node.setName(<span class="string">&#x27;node&#x27;</span> + index++);    </span></span><br><span class="line">            dataModel.add(node);                                               </span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> node;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">removeData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span>(selectionModel.size() &gt; <span class="number">0</span>)&#123;</span></span><br><span class="line">                dataModel.remove(selectionModel.getLastData());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在页面加载时调用script里的实例化方法init()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;init()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;addData();&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;removeData();&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;dataModel.clear();&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;property&quot;</span> <span class="attr">class</span>=<span class="string">&quot;output&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;model&quot;</span> <span class="attr">class</span>=<span class="string">&quot;output&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">class</span>=<span class="string">&quot;output&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/selectModel.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTForWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo学习</title>
      <link href="2020/12/10/Dubbo/"/>
      <url>2020/12/10/Dubbo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://mofan212.gitee.io/posts/The-Basis-Of-Dubbo/">RPC框架Dubbo</a></p><p><a href="https://www.bilibili.com/video/BV1Gb411T7Ha">Dubbo教程_雷丰阳_尚硅谷</a></p><h3 id="架构发展"><a href="#架构发展" class="headerlink" title="架构发展"></a>架构发展</h3><p>单一应用架构ORM(扩展不容易、协同开发不容易、不利于维护、应用规模扩大后服务器压力大)——&gt;垂直应用架构MVC(分工扩展容易、性能扩展容易；无法实现界面业务分开、应用不可能完全独立)——-&gt;分布式架构RPC(远程过程调用;)——-&gt;流动计算架构SOA（调度、治理中心：根据压力来分配资源）</p><h3 id="RPC思想"><a href="#RPC思想" class="headerlink" title="RPC思想"></a>RPC思想</h3><p>远程过程调用：A、B两个服务器架起一个网络连接，进行网络通信。若A想调用B的一个方法，A给B发送请求并给参数（序列化），B接收到请求和参数（反序列化）后，给出回应和返回值（序列化），A收到返回值（反序列化）后进行下一步动作。速度取决与通信效率和序列化反序列化速度。</p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>Apache Dubbo是一个基于java的高性能开源RPC架构。解决了不同服务之间如何通信、如何传递数据、如何调用。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><h5 id="基于透明接口的RPC"><a href="#基于透明接口的RPC" class="headerlink" title="基于透明接口的RPC"></a>基于透明接口的RPC</h5><p>Dubbo提供了基于高性能接口的RPC，对用户是透明的。</p><h5 id="智能负载均衡"><a href="#智能负载均衡" class="headerlink" title="智能负载均衡"></a>智能负载均衡</h5><p>Dubbo开箱即用地支持多种负载平衡策略，该策略可感知下游服务状态以减少总体延迟并提高系统吞吐量。</p><h5 id="自动服务注册和发现"><a href="#自动服务注册和发现" class="headerlink" title="自动服务注册和发现"></a>自动服务注册和发现</h5><p>Dubbo支持多个服务注册中心（所有服务的清单），可以立即检测在线/离线服务。</p><h5 id="高扩展性"><a href="#高扩展性" class="headerlink" title="高扩展性"></a>高扩展性</h5><p>Dubbo的微内核和插件设计确保第三方实现可以轻松地将其扩展为协议，传输和序列化等核心功能。</p><h5 id="运行时流量路由"><a href="#运行时流量路由" class="headerlink" title="运行时流量路由"></a>运行时流量路由</h5><p>可以在运行时配置Dubbo，以便可以根据不同的规则路由流量，这使得支持蓝绿色部署，数据中心感知路由等功能变得容易。</p><h5 id="可视化服务治理"><a href="#可视化服务治理" class="headerlink" title="可视化服务治理"></a>可视化服务治理</h5><p>Dubbo提供了用于服务管理和维护的丰富工具，例如查询服务元数据，运行状况和统计信息。</p><h4 id="Dubbo设计架构"><a href="#Dubbo设计架构" class="headerlink" title="Dubbo设计架构"></a>Dubbo设计架构</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/20210401120401.png" alt="image-20201210100316512"></p><p>服务提供者（Provider） ：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>服务消费者（Consumer） ：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p>监控中心（Monitor） ：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><h2 id="Zookeeper环境搭建"><a href="#Zookeeper环境搭建" class="headerlink" title="Zookeeper环境搭建"></a>Zookeeper环境搭建</h2><blockquote><p>zookeeper搭建</p></blockquote><p><a href="http://archive.apache.org/dist/zookeeper/">Zookeeper下载地址</a></p><p>在zookeeper-3.4.13目录下新建data文件夹，保存数据。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/zookeeper1.png" alt="zookeeper1"></p><p>在conf文件夹下复制zoo_sample.cfg并该名为zoo.cfg。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/zookeeper2.png" alt="zookeeper2"></p><p>修改配置文件将dataDir的值改为新建的data目录的路径</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/zookeeper3.png" alt="zookeeper3"></p><p>在bin目录下运行cmd窗口，再执行zkServer.cmd命令开启zookeeper，再执行zkCli.cmd可查看zookeeper运行情况</p><blockquote><p>可视化界面dubbo_admin</p></blockquote><p><a href="https://github.com/apache/dubbo-admin">dubbo_admin下载地址</a></p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/zookeeper4.png" alt="zookeeper4"></p><p>1）下载dubbo_admin</p><p>2）在dubbo-admin-master\dubbo-admin目录下打开cmd窗口</p><p>3）执行mvn clean package命令，会得到一个jar包，dubbo-admin-0.0.1-SNAPSHOT.jar</p><p>4）执行java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</p><p>5）网页打开localhost:7001</p><blockquote><p>监控中心</p></blockquote><p>在配置可视化界面的时候，我们已经将dubbo-monitor-simple下载下来了</p><p>1.在dubbo-admin-master\dubbo-monitor-simple目录下运行cmd</p><p>2.执行mvn clean package</p><p>3.在dubbo-admin-master\dubbo-monitor-simple\target目录下解压dubbo-monitor-simple-2.0.0-    assembly.tar</p><p>4.在dubbo-admin-master\dubbo-monitor-simple\target\dubbo-monitor-simple-2.0.0\conf目录下</p><p>修改配置文件dubbo.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.container</span>=<span class="string">log4j,spring,registry,jetty-monitor</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">simple-monitor</span></span><br><span class="line"><span class="meta">dubbo.application.owner</span>=<span class="string">dubbo</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=redis://127.0.0.1:6379</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span>=<span class="string">7070</span></span><br><span class="line"><span class="meta">dubbo.jetty.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="meta">dubbo.jetty.directory</span>=<span class="string">$&#123;user.home&#125;/monitor</span></span><br><span class="line"><span class="meta">dubbo.charts.directory</span>=<span class="string">$&#123;user.home&#125;/monitor/charts</span></span><br><span class="line"><span class="meta">dubbo.statistics.directory</span>=<span class="string">$&#123;user.home&#125;/monitor/statistics</span></span><br><span class="line"><span class="meta">dubbo.log4j.file</span>=<span class="string">logs/dubbo-monitor-simple.log</span></span><br><span class="line"><span class="meta">dubbo.log4j.level</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure><h2 id="Dubbo快速开始"><a href="#Dubbo快速开始" class="headerlink" title="Dubbo快速开始"></a>Dubbo快速开始</h2><p><a href="http://dubbo.apache.org/zh/docs/v2.7/user/quick-start/#%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85">官方快速开始文档</a></p><p>服务提供方</p><p>1.引入dubbo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入dubbo依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--引入zookeeper的客户端--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.暴露服务</p><p>在服务提供者下的resources创建配置文件provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;user_service_provider&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口  接口管理项目中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.hl.gmall.service.UserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和本地bean一样实现服务 实际服务提供者--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hl.provider.service.impl.UserServiceImpl&quot;</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--设置dubbo监控中心发现服务的方式 registry 通过注册中心发现服务 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;dubbo:monitor address=&quot;127.0.0.1:7070&quot;&gt;&lt;/dubbo:monitor&gt; 直接连接监控中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">&quot;registry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:monitor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务消费方</p><p>在服务消费方项目下创建consuner.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hl.comsumer.service.impl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;user_service_comsumer&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.hl.gmall.service.UserService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置dubbo监控中心发现服务的方式 registry 通过注册中心发现服务 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;dubbo:monitor address=&quot;127.0.0.1:7070&quot;&gt;&lt;/dubbo:monitor&gt; 直接连接监控中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">&quot;registry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:monitor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="dubbo配置"><a href="#dubbo配置" class="headerlink" title="dubbo配置"></a>dubbo配置</h2><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>以 XML 配置的方式来配置你的 Dubbo 应用</p><p>有关 XML 的详细配置项，请参见：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/references/xml">配置参考手册</a>。如果不想使用 Spring 配置，而希望通过 API 的方式进行调用，请参见：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/configuration/api">API配置</a>。想知道如何使用配置，请参见：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/quick-start">快速启动</a>。</p><p>请在此查看文档描述的<a href="https://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-basic">完整示例</a></p><blockquote><p>provider.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-provider&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20890&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.dubbo.samples.basic.impl.DemoServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;org.apache.dubbo.samples.basic.api.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>consumer.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;demo-consumer&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">group</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;org.apache.dubbo.samples.basic.api.DemoService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有标签都支持自定义参数，用于不同扩展点实现的特殊配置，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;jms&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">&quot;queue&quot;</span> <span class="attr">value</span>=<span class="string">&quot;your_queue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置之间的关系"><a href="#配置之间的关系" class="headerlink" title="配置之间的关系"></a>配置之间的关系</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/dubbo-xml-%E9%85%8D%E7%BD%AE.jpg"></p><table><thead><tr><th>标签</th><th>用途</th><th>解释</th></tr></thead><tbody><tr><td><code>&lt;dubbo:service/&gt;</code></td><td>服务配置</td><td>用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心</td></tr><tr><td><code>&lt;dubbo:reference/&gt;</code> <a href="http://dubbo.apache.org/zh/docs/v2.7/user/configuration/xml/#fn:2">2</a></td><td>引用配置</td><td>用于创建一个远程服务代理，一个引用可以指向多个注册中心</td></tr><tr><td><code>&lt;dubbo:protocol/&gt;</code></td><td>协议配置</td><td>用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受</td></tr><tr><td><code>&lt;dubbo:application/&gt;</code></td><td>应用配置</td><td>用于配置当前应用信息，不管该应用是提供者还是消费者</td></tr><tr><td><code>&lt;dubbo:module/&gt;</code></td><td>模块配置</td><td>用于配置当前模块信息，可选</td></tr><tr><td><code>&lt;dubbo:registry/&gt;</code></td><td>注册中心配置</td><td>用于配置连接注册中心相关信息</td></tr><tr><td><code>&lt;dubbo:monitor/&gt;</code></td><td>监控中心配置</td><td>用于配置连接监控中心相关信息，可选</td></tr><tr><td><code>&lt;dubbo:provider/&gt;</code></td><td>提供方配置</td><td>当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选</td></tr><tr><td><code>&lt;dubbo:consumer/&gt;</code></td><td>消费方配置</td><td>当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选</td></tr><tr><td><code>&lt;dubbo:method/&gt;</code></td><td>方法配置</td><td>用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息</td></tr><tr><td><code>&lt;dubbo:argument/&gt;</code></td><td>参数配置</td><td>用于指定方法参数配置</td></tr></tbody></table><h4 id="不同粒度配置的覆盖关系"><a href="#不同粒度配置的覆盖关系" class="headerlink" title="不同粒度配置的覆盖关系"></a>不同粒度配置的覆盖关系</h4><p>以 timeout 为例，下图显示了配置的查找顺序，其它 retries, loadbalance, actives 等类似：</p><ul><li>方法级优先，接口级次之，全局配置再次之。</li><li>如果级别一样，则消费方优先，提供方次之。</li></ul><p>其中，服务提供方配置，通过 URL 经由注册中心传递给消费方。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/dubbo-config-override.jpg"></p><p>（建议由服务提供方设置超时，因为一个方法需要执行多长时间，服务提供方更清楚，如果一个消费方同时引用多个服务，就不需要关心每个服务的超时设置）。</p><p>理论上 ReferenceConfig 中除了<code>interface</code>这一项，其他所有配置项都可以缺省不配置，框架会自动使用ConsumerConfig，ServiceConfig, ProviderConfig等提供的缺省配置。</p><hr><ol><li><code>2.1.0</code> 开始支持，注意声明：<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code> <a href="http://dubbo.apache.org/zh/docs/v2.7/user/configuration/xml/#fnref:1">↩︎</a></li><li>引用缺省是延迟初始化的，只有引用被注入到其它 Bean，或被 <code>getBean()</code> 获取，才会初始化。如果需要饥饿加载，即没有人引用也立即生成动态代理，可以配置：<code>&lt;dubbo:reference ... init=&quot;true&quot; /&gt;</code> <a href="http://dubbo.apache.org/zh/docs/v2.7/user/configuration/xml/#fnref:2">↩︎</a></li></ol><h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><h4 id="属性配置-1"><a href="#属性配置-1" class="headerlink" title="属性配置"></a>属性配置</h4><p>以属性配置的方式来配置你的 Dubbo 应用</p><p>如果你的应用足够简单，例如，不需要多注册中心或多协议，并且需要在spring容器中共享配置，那么，我们可以直接使用 <code>dubbo.properties</code> 作为默认配置。</p><p>Dubbo 可以自动加载 classpath 根目录下的 dubbo.properties，但是你同样可以使用 JVM 参数来指定路径：<code>-Ddubbo.properties.file=xxx.properties</code>。</p><h4 id="映射规则"><a href="#映射规则" class="headerlink" title="映射规则"></a>映射规则</h4><p>可以将 xml 的 tag 名和属性名组合起来，用 ‘.’ 分隔。每行一个属性。</p><ul><li><code>dubbo.application.name=foo</code> 相当于 <code>&lt;dubbo:application name=&quot;foo&quot; /&gt;</code></li><li><code>dubbo.registry.address=10.20.153.10:9090</code> 相当于 <code>&lt;dubbo:registry address=&quot;10.20.153.10:9090&quot; /&gt;</code></li></ul><p>如果在 xml 配置中有超过一个的 tag，那么你可以使用 ‘id’ 进行区分。如果你不指定 id，它将作用于所有 tag。</p><ul><li><code>dubbo.protocol.rmi.port=1099</code> 相当于 <code>&lt;dubbo:protocol id=&quot;rmi&quot; name=&quot;rmi&quot; port=&quot;1099&quot; /&gt;</code></li><li><code>dubbo.registry.china.address=10.20.153.10:9090</code> 相当于 <code>&lt;dubbo:registry id=&quot;china&quot; address=&quot;10.20.153.10:9090&quot; /&gt;</code></li></ul><p>如下，是一个典型的 dubbo.properties 配置样例。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">foo</span></span><br><span class="line"><span class="meta">dubbo.application.owner</span>=<span class="string">bar</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">10.20.153.10:9090</span></span><br></pre></td></tr></table></figure><h4 id="重写与优先级"><a href="#重写与优先级" class="headerlink" title="重写与优先级"></a>重写与优先级</h4><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/dubbo1.png" alt="dubbo1"></p><p>优先级从高到低：</p><ul><li>JVM -D 参数：当你部署或者启动应用时，它可以轻易地重写配置，比如，改变 dubbo 协议端口；</li><li>XML：XML 中的当前配置会重写 dubbo.properties 中的；</li><li>Properties：默认配置，仅仅作用于以上两者没有配置时。</li></ul><ol><li>如果在 classpath 下有超过一个 dubbo.properties 文件，比如，两个 jar 包都各自包含了 dubbo.properties，dubbo 将随机选择一个加载，并且打印错误日志。</li><li>如果 <code>id</code> 没有在 <code>protocol</code> 中配置，将使用 <code>name</code> 作为默认属性。</li></ol><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><h3 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h3><p>在启动时检查依赖的服务是否可用</p><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p><p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>另外，如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 check，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 <code>check=&quot;false&quot;</code>，总是会返回引用，当服务恢复时，能自动连上。</p><blockquote><p>示例</p></blockquote><h4 id="通过-spring-配置文件"><a href="#通过-spring-配置文件" class="headerlink" title="通过 spring 配置文件"></a>通过 spring 配置文件</h4><p>关闭某个服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.foo.BarService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭所有服务的启动时检查 (没有提供者时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关闭注册中心启动时检查 (注册订阅失败时报错)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过-dubbo-properties"><a href="#通过-dubbo-properties" class="headerlink" title="通过 dubbo.properties"></a>通过 dubbo.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.reference.com.foo.BarService.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.reference.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.consumer.check</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">dubbo.registry.check</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><h4 id="通过-D-参数"><a href="#通过-D-参数" class="headerlink" title="通过 -D 参数"></a>通过 -D 参数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -Ddubbo.reference.com.foo.BarService.check=<span class="literal">false</span></span><br><span class="line">java -Ddubbo.reference.check=<span class="literal">false</span></span><br><span class="line">java -Ddubbo.consumer.check=<span class="literal">false</span> </span><br><span class="line">java -Ddubbo.registry.check=<span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>配置的含义</p></blockquote><p><code>dubbo.reference.check=false</code>，强制改变所有 reference 的 check 值，就算配置中有声明，也会被覆盖。</p><p><code>dubbo.consumer.check=false</code>，是设置 check 的缺省值，如果配置中有显式的声明，如：<code>&lt;dubbo:reference check=&quot;true&quot;/&gt;</code>，不会受影响。</p><p><code>dubbo.registry.check=false</code>，前面两个都是指订阅成功，但提供者列表是否为空是否报错，如果注册订阅失败时，也允许启动，需使用此选项，将在后台定时重试。</p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><h3 id="ZK-宕机与-Dubbo-直连"><a href="#ZK-宕机与-Dubbo-直连" class="headerlink" title="ZK 宕机与 Dubbo 直连"></a>ZK 宕机与 Dubbo 直连</h3><p>现象：ZooKeeper 注册中心宕机，还可以消费 Dubbo 暴露的服务。</p><p>原因：</p><p>1、健壮性：</p><p>监控中心宕掉不影响使用，只是丢失部分采样数据</p><p>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</p><p>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</p><p>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</p><p>服务提供者无状态，任意一台宕掉后， 不影响使用</p><p>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</p><p>2、高可用：通过设计，减少系统不能提供服务的时间</p><p>其实在使用时，可以绕过注册中心，直接使用 Dubbo 直连。也就是说，没有注册中心，Dubbo 调用也是没有问题的。</p><p>直连配置也很简单，在服务消费者调用服务提供者的service上加上@Refernece(127.0.0.1:端口号)</p><h3 id="负载均衡机制"><a href="#负载均衡机制" class="headerlink" title="负载均衡机制"></a>负载均衡机制</h3><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用。</p><blockquote><p>负载均衡策略</p></blockquote><p>Random LoadBalance</p><p>随机，按权重设置随机概率。</p><p>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/Random-LoadBalance.png" alt="Random-LoadBalance"></p><p>RoundRobin LoadBalance</p><p>轮循，按公约后的权重设置轮循比率。</p><p>存在慢的提供者累积请求的问题。比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/RoundRobin-LoadBalance.png" alt="RoundRobin-LoadBalance"></p><p>LeastActive LoadBalance</p><p>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</p><p>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/LeastActive-LoadBalance.png" alt="LeastActive-LoadBalance"></p><p>ConsistentHash LoadBalance</p><p>一致性 Hash，相同参数的请求总是发到同一提供者。<br>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing%E3%80%82">http://en.wikipedia.org/wiki/Consistent_hashing。</a></p><p>缺省只对第一个参数 Hash，如果要修改，请配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">&quot;hash.arguments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0, 1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>缺省用 160 份虚拟节点，如果要修改，请配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">&quot;hash.nodes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;320&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/ConsistentHash-LoadBalance.png" alt="ConsistentHash-LoadBalance"></p><p>Dubbo 默认 采用的是基于权重的 随机 负载均衡机制。</p><p>我们搜索 LoadBalance 接口，可以看到 @SPI 接口，就明白了默认采用的什么策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;random&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Adaptive(&#123;&quot;loadbalance&quot;&#125;)</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">select</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; var1, URL var2, Invocation var3)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索 LoadBalance 接口的实现类，可以看到一个名为 AbstractLoadBalance 的抽象类，再看这个抽象类的子类，就可以看到四种负载均衡机制：</p><p><img src="https://mofan-blog-pics.oss-cn-chengdu.aliyuncs.com/MicroserviceImages/%E5%9B%9B%E7%A7%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.png" alt="四种负载均衡策略"></p><p>如果想要修改 Dubbo 的负载均衡策略，可以参考官方文档【用法示例】的【负载均衡】：</p><p>服务端服务级别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>客户端服务级别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>服务端方法级别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端方法级别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 SpringBoot 中，可以设置 @Reference 或 @Service 注解的 loadbalance 属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference(loadbalance = &quot;roundrobin&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><blockquote><p>什么是服务降级</p></blockquote><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p><p>官方文档有：</p><p>向注册中心写入动态配置覆盖规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RegistryFactory registryFactory &#x3D; ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();</span><br><span class="line">Registry registry &#x3D; registryFactory.getRegistry(URL.valueOf(&quot;zookeeper:&#x2F;&#x2F;10.20.153.10:2181&quot;));</span><br><span class="line">registry.register(URL.valueOf(&quot;override:&#x2F;&#x2F;0.0.0.0&#x2F;com.foo.BarService?category&#x3D;configurators&amp;dynamic&#x3D;false&amp;application&#x3D;foo&amp;mock&#x3D;force:return+null&quot;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><p>1、mock=force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。（屏蔽）</p><p>2、还可以改为 mock=fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。（容错）</p><p>以上两种可以在 dubbo-admin 中服务治理的消费者中对服务进行设置。</p><p>服务降级在 2.2.0 以上版本支持。</p><h3 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h3><p>当集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p><blockquote><p>集群容错模式</p></blockquote><p>Failover Cluster</p><p>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数（不含第一次）。该配置为缺省配置。</p><p>重试次数配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;findFoo&quot;</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Failfast Cluster</p><p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p><p>Failsafe Cluster</p><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><p>Failback Cluster</p><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><p>Forking Cluster</p><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=”2” 来设置最大并行数。</p><p>Broadcast Cluster</p><p>广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><p>服务容错在 2.1.0 开始支持。</p><blockquote><p>集群模式配置</p></blockquote><p>按照以下示例在服务提供方和消费方配置集群模式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>要实现服务容错，我们一般与 Hystrix 进行整合。</p><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix 具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以<br>及监控和配置等功能。</p><p>1、配置 spring-cloud-starter-netflix-hystrix</p><p>SpringBoot 官方提供了对 Hystrix 的集成，直接在 pom.xml 里加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupld</span>&gt;<span class="name">v</span></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactld</span>&gt;<span class="name">v</span></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 Application 类上增加 @EnableHystrix 来启用hystrix starter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>2、配置 Provider 端</p><p>在 Dubbo 的 Provider （服务提供者实现类的方法）上增加 @HystrixCommand 配置，这样子调用就会经过 Hystrix 代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(version = &quot;1.0.0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="meta">     @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">     @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;) &#125;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;async provider received: &quot; + name);</span></span><br><span class="line">        <span class="comment">// return &quot;annotation: hello, &quot; + name;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Exception to show hystrix enabled.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在服务消费者调用服务提供者的方法上添加 @HystrixCommand 注解并指定 fallbackMethod 属性，重写 fallbackMethod 指定的方法。这样当出现服务容错时，就会调用指定的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference(version = &quot;1.0.0&quot;)</span></span><br><span class="line"><span class="keyword">private</span> HelloService demoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;reliable&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doSayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> demoService.sayHello(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reliable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hystrix fallback value&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dubbo原理"><a href="#dubbo原理" class="headerlink" title="dubbo原理"></a>dubbo原理</h2><h3 id="RPC-和-Netty-原理"><a href="#RPC-和-Netty-原理" class="headerlink" title="RPC 和 Netty 原理"></a>RPC 和 Netty 原理</h3><blockquote><p>RPC原理</p></blockquote><p><img src="https://mofan-blog-pics.oss-cn-chengdu.aliyuncs.com/MicroserviceImages/RPC%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.png" alt="RPC基本原理"></p><p>1、客户端（client）以本地调用方式（即以接口的方式）调用服务；</p><p>2、客户端存根（client stub）接收到调用后，负责将方法、参数等组装成能够进行网络传输的消息体（将消息体对象序列化为二进制）；</p><p>3、客户端通过 sockets 将消息发送到服务端；</p><p>4、服务端存根( server stub）收到消息后进行解码（将消息对象反序列化）；</p><p>5、服务端存根( server stub）根据解码结果调用本地的服务；</p><p>6、本地服务执行并将结果返回给服务端存根( server stub）；</p><p>7、服务端存根( server stub）将返回结果打包成消息（将结果消息对象序列化）；</p><p>8、服务端（server）通过 sockets 将消息发送到客户端；</p><p>9、客户端存根（client stub）接收到结果消息，并进行解码（将结果消息发序列化）；</p><p>10、客户端（client）得到最终结果。</p><p>RPC的目标是要把 2、3、4、7、8、9 这些步骤都封装起来，这些细节对用户来说是透明的，不可见的。</p><blockquote><p>netty通信原理</p></blockquote><p>Netty 是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。它极大地简化并简化了 TCP 和 UDP 套接字服务器等网络编程。</p><p>参考链接：Java中BIO和NIO</p><p>BIO（Blocking IO）：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/BIO.png" alt="BIO"></p><p>NIO（Non-Blocking IO）：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/NIO.png" alt="NIO"></p><p>Selector 一般称为选择器，也可以翻译为多路复用器。</p><p>Connect（连接就绪）、Accept（接受就绪）、Read（读就绪）、Write （写就绪）</p><p>Netty 基本原理：</p><p><img src="https://mofan-blog-pics.oss-cn-chengdu.aliyuncs.com/MicroserviceImages/Netty%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.png" alt="Netty基本原理"></p><h3 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h3><p>在官方文档的【开发指南】的【框架设计】一栏中，有这样一幅图：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/dubbo-framework.jpg" alt="dubbo-framework"></p><p>这幅图就很好的解释了 Dubbo 的整体设计。</p><p>官方文档对这幅图也做了很好的解释：</p><p>图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。<br>图中从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表层之间的依赖关系，每一层都可以剥离上层被复用，其中，Service 和 Config 层为 API，其它各层均为 SPI。<br>图中绿色小块的为扩展接口，蓝色小块为实现类，图中只显示用于关联各层的实现类。<br>图中蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行时调时链，紫色三角箭头为继承，可以把子类看作父类的同一个节点，线上的文字为调用的方法。</p><blockquote><p>各层说明</p></blockquote><p>config 配置层：对外配置接口，以 ServiceConfig, ReferenceConfig 为中心，可以直接初始化配置类，也可以通过 spring 解析配置生成配置类<br>proxy 服务代理层：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 ServiceProxy 为中心，扩展接口为 ProxyFactory<br>registry 注册中心层：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory, Registry, RegistryService<br>cluster 路由层：封装多个提供者的路由及负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster, Directory, Router, LoadBalance<br>monitor 监控层：RPC 调用次数和调用时间监控，以 Statistics 为中心，扩展接口为 MonitorFactory, Monitor, MonitorService<br>protocol 远程调用层：封装 RPC 调用，以 Invocation, Result 为中心，扩展接口为 Protocol, Invoker, Exporter<br>exchange 信息交换层：封装请求响应模式，同步转异步，以 Request, Response 为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer<br>transport 网络传输层：抽象 mina 和 netty 为统一接口，以 Message 为中心，扩展接口为 Channel, Transporter, Client, Server, Codec<br>serialize 数据序列化层：可复用的一些工具，扩展接口为 Serialization, ObjectInput, ObjectOutput, ThreadPool<br>以上内容均摘自 Dubbo 官方文档【开发指南】的【框架设计】一栏，其他信息可以参考官方文档。</p><h3 id="标签解析"><a href="#标签解析" class="headerlink" title="标签解析"></a>标签解析</h3><p>标签解析简单来说就是配置文件（XML）的解析。</p><p>这个配置文件也是 Spring 的配置文件，启动的时候也是以 Spring 的方式来加载启动。Spring 在解析配置文件的标签时，都会用到一个主接口 BeanDefinitionParser：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionParser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">BeanDefinition <span class="title">parse</span><span class="params">(Element var1, ParserContext var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下这个接口的继承树，可以看到这样一个实现类 DubboBeanDefinitionParser：</p><p><img src="https://heavenimmortal.oss-cn-chengdu.aliyuncs.com/img/DubboBeanDefinitionParser.png" alt="DubboBeanDefinitionParser"></p><p>这个类就是 Dubbo 的标签解析器，在这个类中，有一个名为 parse() 的方法，这个方法就是用来解析标签的。</p><p>在解析不同的标签时，参数 beanClass 传入的值也不一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    ParserContext parserContext, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Class&lt;?&gt; beanClass, <span class="keyword">boolean</span> required)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那为什么会这样呢？</p><p>DubboBeanDefinitionParser 类有一个构造方法，构造方法有一个参数就是 beanClass：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DubboBeanDefinitionParser</span><span class="params">(Class&lt;?&gt; beanClass, <span class="keyword">boolean</span> required)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.beanClass = beanClass;</span><br><span class="line">    <span class="keyword">this</span>.required = required;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这个构造方法是怎么执行的呢？</p><p>在 DubboNamespaceHandler 类中执行一个初始化 init() 方法，真是因为执行了这个初始化方法，才导致 beanClass 参数的多样性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboNamespaceHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;application&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;module&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;registry&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;config-center&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConfigCenterBean.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;metadata-report&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MetadataReportConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;monitor&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;metrics&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MetricsConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;provider&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;consumer&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;protocol&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;service&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;reference&quot;</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">&quot;annotation&quot;</span>, <span class="keyword">new</span> AnnotationBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单来说</p></blockquote><p>解析配置文件的目的就是让配置文件的每个标签的每个属性值都解析出来，然后保存到标签对应的 xxxConfig 类中。</p><p>只不过需要注意的是，<a href="dubbo:service">dubbo:service</a> 和 <a href="dubbo:reference">dubbo:reference</a> 标签对应的类是 xxxBean。</p><h3 id="服务暴露"><a href="#服务暴露" class="headerlink" title="服务暴露"></a>服务暴露</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ServiceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> </span></span><br><span class="line"><span class="class">    <span class="title">InitializingBean</span>, </span></span><br><span class="line"><span class="class"><span class="title">DisposableBean</span>, </span></span><br><span class="line"><span class="class"><span class="title">ApplicationContextAware</span>, </span></span><br><span class="line"><span class="class"><span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt;, </span></span><br><span class="line"><span class="class"><span class="title">BeanNameAware</span>, </span></span><br><span class="line"><span class="class"><span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类实现了很多接口，这里面有两个接口需要注意。一个名为 InitializingBean，另一个名为 ApplicationListener。</p><p>当组件创建完对象以后，会调用 InitializingBean 中的 afterPropertiesSet() 方法（属性设置完以后回调方法）。</p><p>ApplicationListener 接口的泛型是 ContextRefreshedEvent，就是说当整个 IoC 容器都刷新完成（IoC 容器内所有对象都创建完以后），会回调 ApplicationListener 接口中的 onApplicationEvent() 方法。</p><p>简单来说： ServiceBean 会在容器创建完对象以后调用 afterPropertiesSet() 方法，还会在 IoC 容器启动完以后调用 onApplicationEvent() 方法。</p><p>执行 afterPropertiesSet() 方法相当于将我们配置的 <a href="dubbo:service">dubbo:service</a> 内的信息都保存起来。</p><p>执行 onApplicationEvent() 方法时，如果接口的方法是需要暴露的，但还没暴露，并且不是延迟暴露，就会调用 export() 方法（服务暴露方法）。</p><p>执行 export() 方法时，会检查判断并获取信息，但是最后会执行一个名为 doExport() 方法，这个方法用来执行暴露。</p><p>在 doExport() 方法中，同样会进行检查判断并获取信息，最后会执行一个名为 doExportUrls() 的方法，这个方法会执行暴露 URL 地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExportUrls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加载注册中心信息</span></span><br><span class="line">    List&lt;URL&gt; registryURLs = <span class="keyword">this</span>.loadRegistries(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 获取暴露的协议与端口</span></span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.protocols.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        ProtocolConfig protocolConfig = (ProtocolConfig)var2.next();</span><br><span class="line">        String pathKey = </span><br><span class="line">            URL.buildKey((String)<span class="keyword">this</span></span><br><span class="line">                         .getContextPath(protocolConfig).map((p) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> p + <span class="string">&quot;/&quot;</span> + <span class="keyword">this</span>.path;</span><br><span class="line">        &#125;).orElse(<span class="keyword">this</span>.path), <span class="keyword">this</span>.group, <span class="keyword">this</span>.version);</span><br><span class="line">        ProviderModel providerModel =</span><br><span class="line">            <span class="keyword">new</span> ProviderModel(pathKey, <span class="keyword">this</span>.ref, <span class="keyword">this</span>.interfaceClass);</span><br><span class="line">        ApplicationModel.initProviderModel(pathKey, providerModel);</span><br><span class="line">        <span class="keyword">this</span>.doExportUrlsFor1Protocol(protocolConfig, registryURLs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 doExportUrls() 方法中最后有一个名为 doExportUrlsFor1Protocol() 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExportUrlsFor1Protocol</span><span class="params">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">Invoker&lt;?&gt; invoker = PROXY_FACTORY.getInvoker(<span class="keyword">this</span>.ref, <span class="keyword">this</span>.interfaceClass, registryURL.addParameterAndEncoded(<span class="string">&quot;export&quot;</span>, url.toFullString()));</span><br><span class="line">            DelegateProviderMetaDataInvoker wrapperInvoker = <span class="keyword">new</span> DelegateProviderMetaDataInvoker(invoker, <span class="keyword">this</span>);</span><br><span class="line">            Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class="line">            <span class="keyword">this</span>.exporters.add(exporter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Invoker&lt;?&gt; invoker = PROXY_FACTORY.getInvoker(<span class="keyword">this</span>.ref, <span class="keyword">this</span>.interfaceClass, url);</span><br><span class="line">    DelegateProviderMetaDataInvoker wrapperInvoker = <span class="keyword">new</span> DelegateProviderMetaDataInvoker(invoker, <span class="keyword">this</span>);</span><br><span class="line">    Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class="line">    <span class="keyword">this</span>.exporters.add(exporter);</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，利用 PROXY_FACTORY （代理工厂）获取到包含接口和接口实现类的 Invoker 对象（执行者）。这个执行者其实就是相当于将实现类和 URL 包装了一下。</p><p>然后还会把 Invoker 对象包装成 DelegateProviderMetaDataInvoker 对象。</p><p>再然后会执行 protocol.export(wrapperInvoker) 将我们的执行者进行暴露。</p><p>这个 protocol 是啥？在源代码中有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/ 基于 Java 的 SPI 机制</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Protocol protocol = </span><br><span class="line">    (Protocol)ExtensionLoader</span><br><span class="line">    .getExtensionLoader(Protocol.class)</span><br><span class="line">    .getAdaptiveExtension();</span><br></pre></td></tr></table></figure><p>由于会将信息注册到注册中心，因此来看看 RegistryProtocol 类中的服务暴露方法 export()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; originInvoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    URL registryUrl = <span class="keyword">this</span>.getRegistryUrl(originInvoker);</span><br><span class="line">    URL providerUrl = <span class="keyword">this</span>.getProviderUrl(originInvoker);</span><br><span class="line">    URL overrideSubscribeUrl = <span class="keyword">this</span>.getSubscribedOverrideUrl(providerUrl);</span><br><span class="line">    RegistryProtocol.OverrideListener overrideSubscribeListener = <span class="keyword">new</span> RegistryProtocol.OverrideListener(overrideSubscribeUrl, originInvoker);</span><br><span class="line">    <span class="keyword">this</span>.overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    providerUrl = <span class="keyword">this</span>.overrideUrlWithConfig(providerUrl, overrideSubscribeListener);</span><br><span class="line">    <span class="comment">// 进行本地暴露</span></span><br><span class="line">    RegistryProtocol.ExporterChangeableWrapper&lt;T&gt; exporter = <span class="keyword">this</span>.doLocalExport(originInvoker, providerUrl);</span><br><span class="line">    Registry registry = <span class="keyword">this</span>.getRegistry(originInvoker);</span><br><span class="line">    URL registeredProviderUrl = <span class="keyword">this</span>.getRegisteredProviderUrl(providerUrl, registryUrl);</span><br><span class="line">    <span class="comment">// 在提供者消费者注册表中注册提供者</span></span><br><span class="line">    <span class="comment">// originInvoker: 提供者 registryUrl: 注册中心地址</span></span><br><span class="line">    <span class="comment">// registeredProviderUrl: 提供者 URL 地址</span></span><br><span class="line">    ProviderInvokerWrapper&lt;T&gt; providerInvokerWrapper = ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);</span><br><span class="line">    <span class="keyword">boolean</span> register = registeredProviderUrl.getParameter(<span class="string">&quot;register&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (register) &#123;</span><br><span class="line">        <span class="keyword">this</span>.register(registryUrl, registeredProviderUrl);</span><br><span class="line">        providerInvokerWrapper.setReg(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    exporter.setRegisterUrl(registeredProviderUrl);</span><br><span class="line">    exporter.setSubscribeUrl(overrideSubscribeUrl);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RegistryProtocol.DestroyableExporter(exporter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 doLocalExport() 方法中有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RegistryProtocol.<span class="function">ExporterChangeableWrapper&lt;T&gt; <span class="title">doLocalExport</span><span class="params">(Invoker&lt;T&gt; originInvoker, URL providerUrl)</span> </span>&#123;</span><br><span class="line">    String key = <span class="keyword">this</span>.getCacheKey(originInvoker);</span><br><span class="line">    <span class="keyword">return</span> (RegistryProtocol.ExporterChangeableWrapper)<span class="keyword">this</span>.bounds.computeIfAbsent(key, (s) -&gt; &#123;</span><br><span class="line">        Invoker&lt;?&gt; invokerDelegate = <span class="keyword">new</span> RegistryProtocol.InvokerDelegate(originInvoker, providerUrl);</span><br><span class="line">        <span class="comment">// 再进行服务暴露</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RegistryProtocol.ExporterChangeableWrapper(<span class="keyword">this</span>.protocol.export(invokerDelegate), originInvoker);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们使用了 Dubbo 协议，在上一步执行服务暴露时就会来到 DubboProtocol 类中的服务暴露方法 export()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    URL url = invoker.getUrl();</span><br><span class="line">    String key = serviceKey(url); </span><br><span class="line">    <span class="comment">// 将 url 地址包装成 DubboExporter</span></span><br><span class="line">    DubboExporter&lt;T&gt; exporter = <span class="keyword">new</span> DubboExporter(invoker, key, <span class="keyword">this</span>.exporterMap);</span><br><span class="line">    <span class="keyword">this</span>.exporterMap.put(key, exporter);</span><br><span class="line">    Boolean isStubSupportEvent = url.getParameter(<span class="string">&quot;dubbo.stub.event&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    Boolean isCallbackservice = url.getParameter(<span class="string">&quot;is_callback_service&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice) &#123;</span><br><span class="line">        String stubServiceMethods = url.getParameter(<span class="string">&quot;dubbo.stub.event.methods&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (stubServiceMethods != <span class="keyword">null</span> &amp;&amp; stubServiceMethods.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.warn(<span class="keyword">new</span> IllegalStateException(<span class="string">&quot;consumer [&quot;</span> + url.getParameter(<span class="string">&quot;interface&quot;</span>) + <span class="string">&quot;], has set stubproxy support event ,but no stub methods founded.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.openServer(url); <span class="comment">// 打开服务器</span></span><br><span class="line">    <span class="keyword">this</span>.optimizeSerialization(url);</span><br><span class="line">    <span class="keyword">return</span> exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法最后有一个 openServer() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openServer</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">    String key = url.getAddress(); <span class="comment">// 先获取 URL 地址</span></span><br><span class="line">    <span class="keyword">boolean</span> isServer = url.getParameter(<span class="string">&quot;isserver&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">        ExchangeServer server = (ExchangeServer)<span class="keyword">this</span>.serverMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                server = (ExchangeServer)<span class="keyword">this</span>.serverMap.get(key);</span><br><span class="line">                <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 创建服务器</span></span><br><span class="line">                    <span class="keyword">this</span>.serverMap.put(key, <span class="keyword">this</span>.createServer(url));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            server.reset(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一手 createServer() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ExchangeServer <span class="title">createServer</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">    url = URLBuilder.from(url).addParameterIfAbsent(<span class="string">&quot;channel.readonly.sent&quot;</span>, Boolean.TRUE.toString()).addParameterIfAbsent(<span class="string">&quot;heartbeat&quot;</span>, String.valueOf(<span class="number">60000</span>)).addParameter(<span class="string">&quot;codec&quot;</span>, <span class="string">&quot;dubbo&quot;</span>).build();</span><br><span class="line">    String str = url.getParameter(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;netty&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Unsupported server type: &quot;</span> + str + <span class="string">&quot;, url: &quot;</span> + url);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ExchangeServer server;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 绑定服务器和请求处理器</span></span><br><span class="line">            server = Exchangers.bind(url, <span class="keyword">this</span>.requestHandler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Fail to start server(url: &quot;</span> + url + <span class="string">&quot;) &quot;</span> + var5.getMessage(), var5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str = url.getParameter(<span class="string">&quot;client&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();</span><br><span class="line">            <span class="keyword">if</span> (!supportedTypes.contains(str)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Unsupported client type: &quot;</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法出现了一个名为 bind() 的方法，如果我们一层一层进入这些方法，我们就会看到 Netty 的底层。</p><p>对于 openServer() 方法来说就是创建服务器暴露服务，相当于启动 Netty 服务器，然后监听 20880 端口。</p><p>回到 RegistryProtocol 类中的服务暴露方法 export()，这个方法中还有一个名为 registerProvider() 的方法，进入这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ProviderInvokerWrapper&lt;T&gt; <span class="title">registerProvider</span><span class="params">(Invoker&lt;T&gt; invoker, URL registryUrl, URL providerUrl)</span> </span>&#123;</span><br><span class="line">    ProviderInvokerWrapper&lt;T&gt; wrapperInvoker = <span class="keyword">new</span> ProviderInvokerWrapper(invoker, registryUrl, providerUrl);</span><br><span class="line">    String serviceUniqueName = providerUrl.getServiceKey();</span><br><span class="line">    ConcurrentMap&lt;Invoker, ProviderInvokerWrapper&gt; invokers = (ConcurrentMap)providerInvokers.get(serviceUniqueName);</span><br><span class="line">    <span class="keyword">if</span> (invokers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        providerInvokers.putIfAbsent(serviceUniqueName, <span class="keyword">new</span> ConcurrentHashMap());</span><br><span class="line">        <span class="comment">// 服务提供者执行者</span></span><br><span class="line">        invokers = (ConcurrentMap)providerInvokers.get(serviceUniqueName);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// invokers 添加真正的服务</span></span><br><span class="line">    invokers.put(invoker, wrapperInvoker);</span><br><span class="line">    <span class="keyword">return</span> wrapperInvoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法相当于保存了一些信息，在这个方法所在类中有这样两个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderConsumerRegTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, ConcurrentMap&lt;Invoker, ProviderInvokerWrapper&gt;&gt; providerInvokers = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, Set&lt;ConsumerInvokerWrapper&gt;&gt; consumerInvokers = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个成员变量相当于保存了每个 URL 地址对应的服务提供者执行器 ProviderInvokerWrapper 和服务消费者执行器 ConsumerInvokerWrapper。而在执行器里才有真正的服务对象，即：接口的实现类。</p><p>至此，服务就暴露完成了。</p><blockquote><p>dubbo服务暴露过程</p></blockquote><p><img src="https://mofan-blog-pics.oss-cn-chengdu.aliyuncs.com/MicroserviceImages/Dubbo%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2.jpg" alt="Dubbo服务暴露"></p><p>具体服务暴露过程可以参考这篇文章：Dubbo原理和源码解析之服务暴露</p><h3 id="服务引用"><a href="#服务引用" class="headerlink" title="服务引用"></a>服务引用</h3><p><a href="dubbo:service">dubbo:service</a> 标签是用来做服务暴露的，而 <a href="dubbo:reference">dubbo:reference</a> 标签就是用来做服务引用的（它俩也对应着注解 @Service 和 @Reference）。</p><p>与 <a href="dubbo:service">dubbo:service</a> 标签一样，<a href="dubbo:reference">dubbo:reference</a> 标签也对应着一个解析类，名为 ReferenceBean。</p><p>这个类比较特殊，它实现了 FactoryBean，它是 Spring 的工厂 Bean。当我们需要获取 <a href="dubbo:reference">dubbo:reference</a> 标签中配置的 interface 属性值时，需要通过依赖注入的方式（@Autowried）获取，这个时候会就前往 Spring 的容器中获取相关的 Bean。</p><p>那怎么获取呢？</p><p>由于 ReferenceBean 是一个工厂 Bean，就会调用 getObject() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法返回的对象，就会作为标签配置返回的对象。</p><p>在 get() 方法中有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkAndUpdateSubConfigs();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.destroyed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;The invoker of ReferenceConfig(&quot;</span> + <span class="keyword">this</span>.url + <span class="string">&quot;) has already destroyed!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ref == <span class="keyword">null</span>) &#123; <span class="comment">// 如果引用为 null</span></span><br><span class="line">            <span class="keyword">this</span>.init(); <span class="comment">// 进行初始化</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ref;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下 init() 方法是个怎样的流程。在这个方法中前面大部分都是些信息检查、获取属性等操作，但是这个方法中也有一个很重要的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="keyword">this</span>.ref = <span class="keyword">this</span>.createProxy(map); <span class="comment">// 创建代理对象</span></span><br><span class="line">    String serviceKey </span><br><span class="line">        = URL.buildKey(<span class="keyword">this</span>.interfaceName, <span class="keyword">this</span>.group, <span class="keyword">this</span>.version);</span><br><span class="line">    ApplicationModel.initConsumerModel(serviceKey, </span><br><span class="line">                                       <span class="keyword">this</span>.buildConsumerModel(serviceKey, </span><br><span class="line">                                                               attributes));</span><br><span class="line">    <span class="keyword">this</span>.initialized = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createProxy() 方法就是创建代理对象的方法，源码中传入了 map，这个 map 保存了标签的配置。</p><p>在 createProxy() 方法中，有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.urls.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 引用的协议远程引用 interfaceClass 接口</span></span><br><span class="line">    <span class="keyword">this</span>.invoker = REF_PROTOCOL.refer(<span class="keyword">this</span>.interfaceClass, </span><br><span class="line">                                      (URL)<span class="keyword">this</span>.urls.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interfaceClass 接口也就是我们在标签 <a href="dubbo:reference">dubbo:reference</a> 配置的 interface 属性值。</p><p>urls 中保存了注册中心的地址，相当于会从注册中心中获取远程接口。</p><p>那 refer() 方法是怎么引用的呢？</p><p>调用 REF_PROTOCOL.refer() 方法时，会先前往注册协议类 RegistryProtocol 中执行 refer() 方法。</p><p>进入 RegistryProtocol 类中的 refer() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    url = URLBuilder.from(url).setProtocol(url.getParameter(<span class="string">&quot;registry&quot;</span>, <span class="string">&quot;dubbo&quot;</span>)).removeParameter(<span class="string">&quot;registry&quot;</span>).build();</span><br><span class="line">    <span class="comment">// 根据注册中心地址得到注册中心信息</span></span><br><span class="line">    Registry registry = <span class="keyword">this</span>.registryFactory.getRegistry(url);</span><br><span class="line">    <span class="keyword">if</span> (RegistryService.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.proxyFactory.getInvoker(registry, type, url);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取注册中心服务参数</span></span><br><span class="line">        Map&lt;String, String&gt; qs = StringUtils.parseQueryString(url.getParameterAndDecoded(<span class="string">&quot;refer&quot;</span>));</span><br><span class="line">        String group = (String)qs.get(<span class="string">&quot;group&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> group == <span class="keyword">null</span> || group.length() &lt;= <span class="number">0</span> || CommonConstants.COMMA_SPLIT_PATTERN.split(group).length &lt;= <span class="number">1</span> &amp;&amp; !<span class="string">&quot;*&quot;</span>.equals(group) ? <span class="keyword">this</span>.doRefer(<span class="keyword">this</span>.cluster, registry, type, url) : <span class="keyword">this</span>.doRefer(<span class="keyword">this</span>.getMergeableCluster(), registry, type, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RegistryProtocol 类中的 refer() 方法中还有一个名为 doRefer() 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doRefer</span><span class="params">(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">    RegistryDirectory&lt;T&gt; directory = <span class="keyword">new</span> RegistryDirectory(type, url);</span><br><span class="line">    directory.setRegistry(registry);</span><br><span class="line">    directory.setProtocol(<span class="keyword">this</span>.protocol);</span><br><span class="line">    Map&lt;String, String&gt; parameters = <span class="keyword">new</span> HashMap(directory.getUrl().getParameters());</span><br><span class="line">    URL subscribeUrl = <span class="keyword">new</span> URL(<span class="string">&quot;consumer&quot;</span>, (String)parameters.remove(<span class="string">&quot;register.ip&quot;</span>), <span class="number">0</span>, type.getName(), parameters);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;*&quot;</span>.equals(url.getServiceInterface()) &amp;&amp; url.getParameter(<span class="string">&quot;register&quot;</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        directory.setRegisteredConsumerUrl(<span class="keyword">this</span>.getRegisteredConsumerUrl(subscribeUrl, url));</span><br><span class="line">        registry.register(directory.getRegisteredConsumerUrl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    directory.buildRouterChain(subscribeUrl);</span><br><span class="line">    <span class="comment">// 在注册中心中订阅服务提供者为我们提供的服务</span></span><br><span class="line">    directory.subscribe(subscribeUrl.addParameter(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;providers,configurators,routers&quot;</span>));</span><br><span class="line">    Invoker invoker = cluster.join(directory);</span><br><span class="line">    ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory);</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于我们使用了 dubbo 的协议，订阅服务的同时会来到 DubboProtocol 类中的 refer() 方法。但是 DubboProtocol 中并没有 refer() 方法，去它的父类看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AsyncToSyncInvoker(<span class="keyword">this</span>.protocolBindingRefer(type, url));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">protocolBindingRefer</span><span class="params">(Class&lt;T&gt; var1, URL var2)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> RpcException</span>;</span><br></pre></td></tr></table></figure><p>进入 DubboProtocol 中看下重写的 protocolBindingRefer() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">protocolBindingRefer</span><span class="params">(Class&lt;T&gt; serviceType, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.optimizeSerialization(url);</span><br><span class="line">    <span class="comment">// Dubbo 想要远程引用谁？serviceType</span></span><br><span class="line">    <span class="comment">// serviceType 在哪？url</span></span><br><span class="line">    DubboInvoker&lt;T&gt; invoker = <span class="keyword">new</span> DubboInvoker(serviceType, url, </span><br><span class="line">                                               <span class="keyword">this</span>.getClients(url), </span><br><span class="line">                                               <span class="keyword">this</span>.invokers);</span><br><span class="line">    <span class="keyword">this</span>.invokers.add(invoker);</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里也有一个很重要的方法 —— getClients() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExchangeClient[] getClients(URL url) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> useShareConnect = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> connections = url.getParameter(<span class="string">&quot;connections&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    List&lt;ReferenceCountExchangeClient&gt; shareClients = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (connections == <span class="number">0</span>) &#123;</span><br><span class="line">        useShareConnect = <span class="keyword">true</span>;</span><br><span class="line">        String shareConnectionsStr = url.getParameter(<span class="string">&quot;shareconnections&quot;</span>, (String)<span class="keyword">null</span>);</span><br><span class="line">        connections = Integer.parseInt(StringUtils.isBlank(shareConnectionsStr) ? ConfigUtils.getProperty(<span class="string">&quot;shareconnections&quot;</span>, <span class="string">&quot;1&quot;</span>) : shareConnectionsStr);</span><br><span class="line">        shareClients = <span class="keyword">this</span>.getSharedClient(url, connections);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 根据连接数创建客户端</span></span><br><span class="line">    ExchangeClient[] clients = <span class="keyword">new</span> ExchangeClient[connections];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clients.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useShareConnect) &#123;</span><br><span class="line">            <span class="comment">// 获取共享的客户端</span></span><br><span class="line">            clients[i] = (ExchangeClient)shareClients.get(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clients[i] = <span class="keyword">this</span>.initClient(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clients;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看看如何获取共享客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ReferenceCountExchangeClient&gt; <span class="title">getSharedClient</span><span class="params">(URL url, <span class="keyword">int</span> connectNum)</span> </span>&#123;</span><br><span class="line">    String key = url.getAddress(); <span class="comment">// 获取 URL 地址</span></span><br><span class="line">    List&lt;ReferenceCountExchangeClient&gt; clients = (List)<span class="keyword">this</span>.referenceClientMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.checkClientCanUse(clients)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.batchClientRefIncr(clients);</span><br><span class="line">        <span class="keyword">return</span> clients;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.locks.putIfAbsent(key, <span class="keyword">new</span> Object());</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>.locks.get(key)) &#123;</span><br><span class="line">            clients = (List)<span class="keyword">this</span>.referenceClientMap.get(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.checkClientCanUse(clients)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.batchClientRefIncr(clients);</span><br><span class="line">                <span class="keyword">return</span> clients;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                connectNum = Math.max(connectNum, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isEmpty(clients)) &#123;</span><br><span class="line">                    clients = <span class="keyword">this</span>.buildReferenceCountExchangeClientList(url, connectNum);</span><br><span class="line">                    <span class="keyword">this</span>.referenceClientMap.put(key, clients);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clients.size(); ++i) &#123;</span><br><span class="line">                        ReferenceCountExchangeClient referenceCountExchangeClient = (ReferenceCountExchangeClient)clients.get(i);</span><br><span class="line">                        <span class="keyword">if</span> (referenceCountExchangeClient != <span class="keyword">null</span> &amp;&amp; !referenceCountExchangeClient.isClosed()) &#123;</span><br><span class="line">                            referenceCountExchangeClient.incrementAndGetCount();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 初始化客户端</span></span><br><span class="line">                            clients.set(i, <span class="keyword">this</span>.buildReferenceCountExchangeClient(url));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.locks.remove(key);</span><br><span class="line">                <span class="keyword">return</span> clients;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看 buildReferenceCountExchangeClient() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ReferenceCountExchangeClient <span class="title">buildReferenceCountExchangeClient</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化客户端</span></span><br><span class="line">    ExchangeClient exchangeClient = <span class="keyword">this</span>.initClient(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReferenceCountExchangeClient(exchangeClient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看 initClient() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ExchangeClient <span class="title">initClient</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">    String str = url.getParameter(<span class="string">&quot;client&quot;</span>, url.getParameter(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;netty&quot;</span>));</span><br><span class="line">    url = url.addParameter(<span class="string">&quot;codec&quot;</span>, <span class="string">&quot;dubbo&quot;</span>);</span><br><span class="line">    url = url.addParameterIfAbsent(<span class="string">&quot;heartbeat&quot;</span>, String.valueOf(<span class="number">60000</span>));</span><br><span class="line">    <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Unsupported client type: &quot;</span> + str + <span class="string">&quot;, supported client type is &quot;</span> + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(), <span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object client;</span><br><span class="line">            <span class="keyword">if</span> (url.getParameter(<span class="string">&quot;lazy&quot;</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                client = <span class="keyword">new</span> LazyConnectExchangeClient(url, <span class="keyword">this</span>.requestHandler);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 进行连接</span></span><br><span class="line">                client = Exchangers.connect(url, <span class="keyword">this</span>.requestHandler);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (ExchangeClient)client;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;Fail to create remoting client for service(&quot;</span> + url + <span class="string">&quot;): &quot;</span> + var5.getMessage(), var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行连接的 Exchangers.connect() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExchangeClient <span class="title">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url = url.addParameterIfAbsent(<span class="string">&quot;codec&quot;</span>, <span class="string">&quot;exchange&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getExchanger(url).connect(url, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法最后的 connect() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExchangeClient <span class="title">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">    <span class="comment">// 返回时调用传输器的连接方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeaderExchangeClient(Transporters.connect(url, <span class="keyword">new</span> ChannelHandler[]&#123;<span class="keyword">new</span> DecodeHandler(<span class="keyword">new</span> HeaderExchangeHandler(handler))&#125;), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transporters.connect() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object handler;</span><br><span class="line">        <span class="keyword">if</span> (handlers != <span class="keyword">null</span> &amp;&amp; handlers.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">                handler = handlers[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handler = <span class="keyword">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerAdapter();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 拿到传输器的连接</span></span><br><span class="line">        <span class="keyword">return</span> getTransporter().connect(url, (ChannelHandler)handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击最后的 connect() 方法可以进入一个名为 Transporter 的接口。</p><p>实现 Transporter 接口的类：</p><p><img src="https://mofan-blog-pics.oss-cn-chengdu.aliyuncs.com/MicroserviceImages/Transporter%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="Transporter接口实现类"></p><p>点击 Netty 传输器类，可以查看到 Netty 的底层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler listener)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 Netty 客户端，url 地址监听一个端口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NettyClient(url, listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，就成功包装好了 DubboInvoker 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">protocolBindingRefer</span><span class="params">(Class&lt;T&gt; serviceType, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.optimizeSerialization(url);</span><br><span class="line">    <span class="comment">// Dubbo 想要远程引用谁？serviceType</span></span><br><span class="line">    <span class="comment">// serviceType 在哪？url</span></span><br><span class="line">    DubboInvoker&lt;T&gt; invoker = <span class="keyword">new</span> DubboInvoker(serviceType, url, </span><br><span class="line">                                               <span class="keyword">this</span>.getClients(url), </span><br><span class="line">                                               <span class="keyword">this</span>.invokers);</span><br><span class="line">    <span class="keyword">this</span>.invokers.add(invoker);</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在类中成功获取到 Invoker 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doRefer</span><span class="params">(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    <span class="comment">// 获取 Invoker 对象</span></span><br><span class="line">    Invoker invoker = cluster.join(directory);</span><br><span class="line">    <span class="comment">// 将 invoker 注册到提供者消费者注册表</span></span><br><span class="line">    <span class="comment">// subscribeUrl：消费者消费的服务的地址</span></span><br><span class="line">    ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory);</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供者消费者注册表 ProviderConsumerRegTable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderConsumerRegTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, ConcurrentMap&lt;Invoker, ProviderInvokerWrapper&gt;&gt; providerInvokers = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, Set&lt;ConsumerInvokerWrapper&gt;&gt; consumerInvokers = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就知道了注册表中提供者的 URL 地址对应的是什么，消费者的 URL 地址对应的又是哪个代理（代理对象 invoker）。</p><p>到此，init() 就得到了 invoker 代理对象，成功创建了对象 ref。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="keyword">this</span>.ref = <span class="keyword">this</span>.createProxy(map); <span class="comment">// 创建代理对象</span></span><br><span class="line">    String serviceKey </span><br><span class="line">        = URL.buildKey(<span class="keyword">this</span>.interfaceName, <span class="keyword">this</span>.group, <span class="keyword">this</span>.version);</span><br><span class="line">    ApplicationModel.initConsumerModel(serviceKey, </span><br><span class="line">                                       <span class="keyword">this</span>.buildConsumerModel(serviceKey, </span><br><span class="line">                                                               attributes));</span><br><span class="line">    <span class="keyword">this</span>.initialized = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程总结</p></blockquote><p>纵观整个流程，可以得出以下这张图：</p><p><img src="https://mofan-blog-pics.oss-cn-chengdu.aliyuncs.com/MicroserviceImages/Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%95%E7%94%A8.jpg" alt="Dubbo服务引用"></p><h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>前面分析了如何进行服务引用，最终会创建一个代理对象，那这个代理对象是如何进行方法调用的呢？</p><p>在 Dubbo 官方文档的【调用链】一栏有这样一幅图，这张图就很好地解释了调用过程：</p><p><img src="https://mofan-blog-pics.oss-cn-chengdu.aliyuncs.com/MicroserviceImages/Dubbo%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8.jpg" alt="Dubbo服务调用"></p><blockquote><p>具体分析</p></blockquote><p>得到代理对象后，执行 InvokerInvocationHandler 类中的 invoke() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    String methodName = method.getName(); <span class="comment">// 方法信息</span></span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes(); <span class="comment">// 方法参数信息</span></span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>.invoker, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;toString&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.invoker.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;hashCode&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.invoker.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;equals&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">1</span> ? <span class="keyword">this</span>.invoker.equals(args[<span class="number">0</span>]) : <span class="keyword">this</span>.invoker.invoke(<span class="keyword">new</span> RpcInvocation(method, args)).recreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将方法和参数封装成 RpcInvocation 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RpcInvocation</span><span class="params">(Method method, Object[] arguments)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>((Method)method, (Object[])arguments, (Map)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象封装之后，执行最后的 invoke() 方法，这个方法有很多重写。</p><p>先执行 MockClusterInvoker 类的 invoke() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    Result result = <span class="keyword">null</span>;</span><br><span class="line">    String value = <span class="keyword">this</span>.directory.getUrl().getMethodParameter(invocation.getMethodName(), <span class="string">&quot;mock&quot;</span>, Boolean.FALSE.toString()).trim();</span><br><span class="line">    <span class="keyword">if</span> (value.length() != <span class="number">0</span> &amp;&amp; !value.equalsIgnoreCase(<span class="string">&quot;false&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.startsWith(<span class="string">&quot;force&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;force-mock: &quot;</span> + invocation.getMethodName() + <span class="string">&quot; force-mock enabled , url : &quot;</span> + <span class="keyword">this</span>.directory.getUrl());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = <span class="keyword">this</span>.doMockInvoke(invocation, (RpcException)<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// no mock</span></span><br><span class="line">                result = <span class="keyword">this</span>.invoker.invoke(invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException var5) &#123;</span><br><span class="line">                <span class="keyword">if</span> (var5.isBiz()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> var5;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;fail-mock: &quot;</span> + invocation.getMethodName() + <span class="string">&quot; fail-mock enabled , url : &quot;</span> + <span class="keyword">this</span>.directory.getUrl(), var5);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                result = <span class="keyword">this</span>.doMockInvoke(invocation, var5);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="keyword">this</span>.invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MockClusterInvoker 类的 invoke() 方法又会执行 AbstractClusterInvoker 类的 invoke() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkWhetherDestroyed();</span><br><span class="line">    Map&lt;String, String&gt; contextAttachments = RpcContext.getContext().getAttachments();</span><br><span class="line">    <span class="keyword">if</span> (contextAttachments != <span class="keyword">null</span> &amp;&amp; contextAttachments.size() != <span class="number">0</span>) &#123;</span><br><span class="line">        ((RpcInvocation)invocation).addAttachments(contextAttachments);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// list() 在注册中心中找到我们想要执行的方法到底有几个 Invoker</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = <span class="keyword">this</span>.list(invocation);</span><br><span class="line">    <span class="comment">// 获取到负载均衡机制</span></span><br><span class="line">    LoadBalance loadbalance = <span class="keyword">this</span>.initLoadBalance(invokers, invocation);</span><br><span class="line">    RpcUtils.attachInvocationIdIfAsync(<span class="keyword">this</span>.getUrl(), invocation);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.doInvoke(invocation, invokers, loadbalance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后执行 doInvoker() 方法，这个方法有很多重写。以 FailoverClusterInvoker 类举例，在这个类的 duInvoker() 方法中有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    <span class="comment">// 根据负载均衡策略选择一个 Invoker</span></span><br><span class="line">    Invoker&lt;T&gt; invoker = <span class="keyword">this</span>.select(loadbalance, invocation, copyInvokers, invoked);</span><br><span class="line">    invoked.add(invoker);</span><br><span class="line">    RpcContext.getContext().setInvokers(invoked);</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    Result result = invoker.invoke(invocation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 invoke() 方法会进入到各种 Filter 中，相当于各层的 Filter 进行层层过滤。</p><p>最终执行 AbstractInvoker 类中的 doInvoke() 方法，并来到 DubboInvoker 类中执行 duInvoke() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RpcInvocation inv = (RpcInvocation)invocation;</span><br><span class="line">    String methodName = RpcUtils.getMethodName(invocation);</span><br><span class="line">    inv.setAttachment(<span class="string">&quot;path&quot;</span>, <span class="keyword">this</span>.getUrl().getPath());</span><br><span class="line">    inv.setAttachment(<span class="string">&quot;version&quot;</span>, <span class="keyword">this</span>.version);</span><br><span class="line">    ExchangeClient currentClient;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clients.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取 Netty 客户端</span></span><br><span class="line">        currentClient = <span class="keyword">this</span>.clients[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentClient = <span class="keyword">this</span>.clients[<span class="keyword">this</span>.index.getAndIncrement() % <span class="keyword">this</span>.clients.length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isOneway = RpcUtils.isOneway(<span class="keyword">this</span>.getUrl(), invocation);</span><br><span class="line">        <span class="keyword">int</span> timeout = <span class="keyword">this</span>.getUrl().getMethodPositiveParameter(methodName, <span class="string">&quot;timeout&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (isOneway) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isSent = <span class="keyword">this</span>.getUrl().getMethodParameter(methodName, <span class="string">&quot;sent&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            currentClient.send(inv, isSent);</span><br><span class="line">            <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(invocation);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AsyncRpcResult asyncRpcResult = <span class="keyword">new</span> AsyncRpcResult(inv);</span><br><span class="line">            <span class="comment">// 客户端发起请求，获取请求结果并返回</span></span><br><span class="line">            CompletableFuture&lt;Object&gt; responseFuture = currentClient.request(inv, timeout);</span><br><span class="line">            asyncRpcResult.subscribeTo(responseFuture);</span><br><span class="line">            FutureContext.getContext().setCompatibleFuture(responseFuture);</span><br><span class="line">            <span class="keyword">return</span> asyncRpcResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="number">2</span>, <span class="string">&quot;Invoke remote method timeout. method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, provider: &quot;</span> + <span class="keyword">this</span>.getUrl() + <span class="string">&quot;, cause: &quot;</span> + var9.getMessage(), var9);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemotingException var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="number">1</span>, <span class="string">&quot;Failed to invoke remote method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, provider: &quot;</span> + <span class="keyword">this</span>.getUrl() + <span class="string">&quot;, cause: &quot;</span> + var10.getMessage(), var10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取请求结果时，可能会遇到超时，如果超时会默认重试一次。</p><p>如果最终成功获取到请求结果，执行各种 invoke() 方法。</p><p>DubboInvoker 类的 doInvoke() 方法执行完之后，可以得到想要的结果，还会进行编码或解码，最终返回。</p><p>结果返回之后，我们的调用也就结束了！</p><blockquote><p>结语</p></blockquote><p>到此，Dubbo 就真的入门了。</p><p>还有一点需要注意，Dubbo 只是一个 RPC 框架，它解决了 RPC 相关的问题，但分布式中还有其他的问题，这些其他的问题就需要用其他的框架或技术来解决了。</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java复习</title>
      <link href="2020/12/09/java%E5%A4%8D%E4%B9%A0/"/>
      <url>2020/12/09/java%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>java</p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>判断是否是某个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Boolean result = Obj <span class="keyword">instanceof</span> Class;</span><br></pre></td></tr></table></figure><h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><p>int的包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">Double i1 = <span class="number">100.0</span>; </span><br><span class="line"></span><br><span class="line">Double i2 = <span class="number">100.0</span>; </span><br><span class="line"></span><br><span class="line">Double i3 = <span class="number">200.0</span>; </span><br><span class="line"></span><br><span class="line">Double i4 = <span class="number">200.0</span>; </span><br><span class="line"></span><br><span class="line">System.out.println(i1==i2); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(i3==i4); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>integer是个对象，在进行比较的时候比较的是存放对象的地址。在[-128,127]内，integer不会新建对象，超出此范围，要创建新的integer对象</p><h4 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h4><h5 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h5><p>方法名，参数列表，返回值相同</p><p>访问修饰符不能小于父类（public&gt;protected&gt;default&gt;private)</p><p>重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</p><p>发生在父类与子类之间</p><h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><p>同方法名，参数列表不同</p><h4 id="equals和-的区别"><a href="#equals和-的区别" class="headerlink" title="equals和==的区别"></a>equals和==的区别</h4><h5 id=""><a href="#" class="headerlink" title="=="></a>==</h5><p>== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是</p><p>指相同一个对象。比较的是真正意义上的指针操作。</p><p>1、比较的是操作符两端的操作数是否是同一个对象。</p><p>2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。</p><p>3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为true，如：</p><p>int a=10 与 long b=10L 与 double c=10.0都是相同的（为true），因为他们都指向地址为10的堆。</p><h5 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h5><p>equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以</p><p>适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的</p><p>equals方法返回的却是==的判断。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>所有比较是否相等时，都是用equals 并且在对常量相比较时，把常量写在前面，因为使用object的</p><p>equals object可能为null 则空指针</p><h4 id="String、StringBuffer和StringBuilder"><a href="#String、StringBuffer和StringBuilder" class="headerlink" title="String、StringBuffer和StringBuilder"></a>String、StringBuffer和StringBuilder</h4><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>一个对象，不是基本类型，final字符数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private final char value[];</span><br></pre></td></tr></table></figure><h5 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h5><p>可变字符数组，StringBuffer加了同步锁，线程安全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char[] value;</span><br></pre></td></tr></table></figure><h4 id="HashMap和HashTable"><a href="#HashMap和HashTable" class="headerlink" title="HashMap和HashTable"></a><strong>HashMap和HashTable</strong></h4><h5 id="1、两者父类不同"><a href="#1、两者父类不同" class="headerlink" title="1、两者父类不同"></a>1、两者父类不同</h5><p>HashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。不过它们都实现了同时实现</p><p>了map、Cloneable（可复制）、Serializable（可序列化）这三个接口。</p><h5 id="2、对外提供的接口不同"><a href="#2、对外提供的接口不同" class="headerlink" title="2、对外提供的接口不同"></a>2、对外提供的接口不同</h5><p>Hashtable比HashMap多提供了elments() 和contains() 两个方法。</p><p> elments() 方法继承自Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的</p><p>value的枚举。</p><p>contains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实上，</p><p>contansValue() 就只是调用了一下contains() 方法。</p><h5 id="3、对null的支持不同"><a href="#3、对null的支持不同" class="headerlink" title="3、对null的支持不同"></a>3、对null的支持不同</h5><p>Hashtable：key和value都不能为null。</p><p>HashMap：key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个key</p><p>值对应的value为null。 </p><h5 id="4、安全性不同"><a href="#4、安全性不同" class="headerlink" title="4、安全性不同"></a>4、安全性不同</h5><p>HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己</p><p>处理多线程的安全问题。</p><p>Hashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。</p><p>虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable，这样设计是合理的，因为大部分的</p><p>使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。</p><p>ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为</p><p>ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。</p><h5 id="5、初始容量大小和每次扩充容量大小不同"><a href="#5、初始容量大小和每次扩充容量大小不同" class="headerlink" title="5、初始容量大小和每次扩充容量大小不同"></a>5、初始容量大小和每次扩充容量大小不同</h5><h5 id="6、计算hash值的方法不同"><a href="#6、计算hash值的方法不同" class="headerlink" title="6、计算hash值的方法不同"></a>6、计算hash值的方法不同</h5><h4 id="四种引用"><a href="#四种引用" class="headerlink" title="四种引用"></a>四种引用</h4><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>强引用是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收，使用方</p><p>式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">&quot;str&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>软引用在程序内存不足时，会被回收，使用方式：</p><p>// 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的， </p><p>// 这里的软引用指的是指向new String(“str”)的引用，也就是SoftReference类中T </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SoftReference&lt;String&gt; wrf = <span class="keyword">new</span> SoftReference&lt;String&gt;(<span class="keyword">new</span> String(<span class="string">&quot;str&quot;</span>));</span><br></pre></td></tr></table></figure><p>可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建的</p><p>对象。</p><h6 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h6><p>弱引用就是只要JVM垃圾回收器发现了它，就会将之回收，使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeakReference&lt;String&gt; wrf = <span class="keyword">new</span> WeakReference&lt;String&gt;(str);</span><br></pre></td></tr></table></figure><p><strong>可用场景：</strong> Java源码中的 java.util.WeakHashMap 中的 key 就是使用弱引用，我的理解就是，</p><p>一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。虚引用</p><p>虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入 ReferenceQueue 中。注意</p><p>哦，其它引用是被JVM回收后才被传入 ReferenceQueue 中的。由于这个机制，所以虚引用大多被</p><p>用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有 ReferenceQueue ，使用</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PhantomReference&lt;String&gt; prf = <span class="keyword">new</span> PhantomReference&lt;String&gt;(<span class="keyword">new</span> </span><br><span class="line"></span><br><span class="line">String(<span class="string">&quot;str&quot;</span>), <span class="keyword">new</span> ReferenceQueue&lt;&gt;());</span><br></pre></td></tr></table></figure><p>可用场景： 对象销毁前的一些操作，比如说资源释放等。** Object.finalize() 虽然也可以做</p><p>这类动作，但是这个方式即不安全又低效</p><p><strong>上诉所说的几类引用，都是指对象本身的引用，而不是指</strong> Reference <strong>的四个子类的引用</strong></p><p><strong>(</strong> SoftReference <strong>等**</strong>)<strong>**。</strong></p><h4 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h4><p>浅拷贝:被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向</p><p>原来的对象.换言之,浅拷贝仅仅复制所考虑的对象,而不复制它所引用的对象.</p><p>深拷贝:被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被</p><p>复制过的新对象.而不再是原有的那些被引用的对象.换言之.深拷贝把要复制的对象所引用的对象都</p><p>复制了一遍</p><h4 id="final有哪些用法"><a href="#final有哪些用法" class="headerlink" title="final有哪些用法"></a>final有哪些用法</h4><p>被final修饰的类不可以被继承</p><p>被final修饰的方法不可以被重写</p><p>被final修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变. </p><p>被final修饰的方法,JVM会尝试将其内联,以提高运行效率</p><p>被final修饰的常量,在编译阶段会存入常量池中.</p><h4 id="a-a-b与a-b有什么区别吗"><a href="#a-a-b与a-b有什么区别吗" class="headerlink" title="a=a+b与a+=b有什么区别吗"></a>a=a+b与a+=b有什么区别吗</h4><p>+= 操作符会进行隐式自动类型转换,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型, </p><p>而a=a+b则不会自动进行类型转换.如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">127</span>; </span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">127</span>; </span><br><span class="line">b = a + b; <span class="comment">// 报编译错误:cannot convert from int to byte </span></span><br><span class="line">b += a;</span><br></pre></td></tr></table></figure><p>short类型在进行运算时会自动提升为int类型</p><h4 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h4><p>反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法。在java中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。jdbc、hibernate，struts等框架</p><p>第一步：获取Class对象，有4中方法：</p><p>1）Class.forName(“类的路径”)； </p><p>2）类名.class</p><p>3）对象名.getClass()</p><p>4）基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/09/hello-world/"/>
      <url>2020/12/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
